{"meta":{"version":1,"warehouse":"4.0.0"},"models":{"Asset":[{"_id":"source/CNAME","path":"CNAME","modified":0,"renderable":0},{"_id":"source/LICENSE.txt","path":"LICENSE.txt","modified":0,"renderable":0},{"_id":"themes/yilia-plus/source/main.7ea20a.css","path":"main.7ea20a.css","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/main.7ea20a.js","path":"main.7ea20a.js","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/mobile.467748.js","path":"mobile.467748.js","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/slider.a95b1d.js","path":"slider.a95b1d.js","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/fonts/fonteditor.3da1ef.woff","path":"fonts/fonteditor.3da1ef.woff","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/fonts/default-skin.b257fa.svg","path":"fonts/default-skin.b257fa.svg","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/fonts/fonteditor.3e0d4a.svg","path":"fonts/fonteditor.3e0d4a.svg","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/fonts/fonteditor.86c132.eot","path":"fonts/fonteditor.86c132.eot","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/fonts/fonteditor.bbc4b5.woff2","path":"fonts/fonteditor.bbc4b5.woff2","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/fonts/fonteditor.fe4d8a.ttf","path":"fonts/fonteditor.fe4d8a.ttf","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/fonts/tooltip.4004ff.svg","path":"fonts/tooltip.4004ff.svg","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/fonts/tooltip.d04149.svg","path":"fonts/tooltip.d04149.svg","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/gitment/APlayer.min.js","path":"gitment/APlayer.min.js","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/img/alipay.jpg","path":"img/alipay.jpg","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/img/biubiubiu.gif","path":"img/biubiubiu.gif","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/img/default-skin.png","path":"img/default-skin.png","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/img/forkme.png","path":"img/forkme.png","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/img/gitee.svg","path":"img/gitee.svg","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/img/head.jpg","path":"img/head.jpg","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/img/preloader.gif","path":"img/preloader.gif","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/img/scrollbar_arrow.png","path":"img/scrollbar_arrow.png","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/img/weixin.png","path":"img/weixin.png","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/lib/busuanzi.pure.js","path":"lib/busuanzi.pure.js","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/lib/clickLove.js","path":"lib/clickLove.js","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/lib/default.css","path":"lib/default.css","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/lib/giteement.browser.js","path":"lib/giteement.browser.js","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/lib/gitment.css","path":"lib/gitment.css","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/lib/gitment.js","path":"lib/gitment.js","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/lib/gitment.js.bak","path":"lib/gitment.js.bak","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/lib/gitment.js.bak2","path":"lib/gitment.js.bak2","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/lib/jquery-2.1.4.min.js","path":"lib/jquery-2.1.4.min.js","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/lib/oauthcallback.browser.js","path":"lib/oauthcallback.browser.js","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/lib/pace.min.js","path":"lib/pace.min.js","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/lib/snow.js","path":"lib/snow.js","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/live2d_models/chitose/package.json","path":"live2d_models/chitose/package.json","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/live2d_models/chitose/package-lock.json","path":"live2d_models/chitose/package-lock.json","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/live2d_models/epsilon2_1/package-lock.json","path":"live2d_models/epsilon2_1/package-lock.json","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/live2d_models/epsilon2_1/package.json","path":"live2d_models/epsilon2_1/package.json","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/live2d_models/gf/package-lock.json","path":"live2d_models/gf/package-lock.json","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/live2d_models/gf/package.json","path":"live2d_models/gf/package.json","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/live2d_models/haruto/package.json","path":"live2d_models/haruto/package.json","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/live2d_models/haruto/package-lock.json","path":"live2d_models/haruto/package-lock.json","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/live2d_models/haru/package-lock.json","path":"live2d_models/haru/package-lock.json","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/live2d_models/haru/package.json","path":"live2d_models/haru/package.json","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/live2d_models/hibiki/package-lock.json","path":"live2d_models/hibiki/package-lock.json","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/live2d_models/hibiki/package.json","path":"live2d_models/hibiki/package.json","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/live2d_models/hijiki/package-lock.json","path":"live2d_models/hijiki/package-lock.json","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/live2d_models/hijiki/package.json","path":"live2d_models/hijiki/package.json","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/live2d_models/izumi/package-lock.json","path":"live2d_models/izumi/package-lock.json","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/live2d_models/izumi/package.json","path":"live2d_models/izumi/package.json","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/live2d_models/koharu/package-lock.json","path":"live2d_models/koharu/package-lock.json","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/live2d_models/koharu/package.json","path":"live2d_models/koharu/package.json","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/live2d_models/miku/package.json","path":"live2d_models/miku/package.json","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/live2d_models/miku/package-lock.json","path":"live2d_models/miku/package-lock.json","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/live2d_models/ni-j/package.json","path":"live2d_models/ni-j/package.json","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/live2d_models/ni-j/package-lock.json","path":"live2d_models/ni-j/package-lock.json","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/live2d_models/nico/package-lock.json","path":"live2d_models/nico/package-lock.json","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/live2d_models/nico/package.json","path":"live2d_models/nico/package.json","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/live2d_models/nipsilon/package-lock.json","path":"live2d_models/nipsilon/package-lock.json","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/live2d_models/nipsilon/package.json","path":"live2d_models/nipsilon/package.json","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/live2d_models/nietzsche/package-lock.json","path":"live2d_models/nietzsche/package-lock.json","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/live2d_models/nietzsche/package.json","path":"live2d_models/nietzsche/package.json","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/live2d_models/nito/package-lock.json","path":"live2d_models/nito/package-lock.json","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/live2d_models/nito/package.json","path":"live2d_models/nito/package.json","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/live2d_models/shizuku/package.json","path":"live2d_models/shizuku/package.json","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/live2d_models/shizuku/package-lock.json","path":"live2d_models/shizuku/package-lock.json","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/live2d_models/tororo/package-lock.json","path":"live2d_models/tororo/package-lock.json","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/live2d_models/tororo/package.json","path":"live2d_models/tororo/package.json","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/live2d_models/tsumiki/package-lock.json","path":"live2d_models/tsumiki/package-lock.json","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/live2d_models/tsumiki/package.json","path":"live2d_models/tsumiki/package.json","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/live2d_models/unitychan/package-lock.json","path":"live2d_models/unitychan/package-lock.json","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/live2d_models/unitychan/package.json","path":"live2d_models/unitychan/package.json","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/live2d_models/wanko/package-lock.json","path":"live2d_models/wanko/package-lock.json","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/live2d_models/wanko/package.json","path":"live2d_models/wanko/package.json","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/live2d_models/z16/package-lock.json","path":"live2d_models/z16/package-lock.json","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/live2d_models/z16/package.json","path":"live2d_models/z16/package.json","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/plugins/TweenMax/HoverImg.js","path":"plugins/TweenMax/HoverImg.js","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/plugins/TweenMax/charming.min.js","path":"plugins/TweenMax/charming.min.js","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/plugins/TweenMax/TweenMax.min.js","path":"plugins/TweenMax/TweenMax.min.js","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/plugins/activate-power-mode/activate-power-mode.js","path":"plugins/activate-power-mode/activate-power-mode.js","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/plugins/live2d-widget.js/L2Dwidget.0.min.js","path":"plugins/live2d-widget.js/L2Dwidget.0.min.js","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/plugins/live2d-widget.js/L2Dwidget.0.min.js.map","path":"plugins/live2d-widget.js/L2Dwidget.0.min.js.map","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/plugins/live2d-widget.js/L2Dwidget.common.js","path":"plugins/live2d-widget.js/L2Dwidget.common.js","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/plugins/live2d-widget.js/L2Dwidget.common.js.map","path":"plugins/live2d-widget.js/L2Dwidget.common.js.map","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/plugins/live2d-widget.js/L2Dwidget.min.js","path":"plugins/live2d-widget.js/L2Dwidget.min.js","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/plugins/live2d-widget.js/L2Dwidget.min.js.map","path":"plugins/live2d-widget.js/L2Dwidget.min.js.map","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/plugins/live2d-widget.js/manifest.json","path":"plugins/live2d-widget.js/manifest.json","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/plugins/ribbon.js/ribbon.js","path":"plugins/ribbon.js/ribbon.js","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/plugins/ribbon.js/ribbon.min.js","path":"plugins/ribbon.js/ribbon.min.js","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/live2d_models/chitose/assets/chitose.model.json","path":"live2d_models/chitose/assets/chitose.model.json","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/live2d_models/chitose/assets/chitose.physics.json","path":"live2d_models/chitose/assets/chitose.physics.json","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/live2d_models/chitose/assets/chitose.pose.json","path":"live2d_models/chitose/assets/chitose.pose.json","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/live2d_models/epsilon2_1/assets/Epsilon2.1.model.json","path":"live2d_models/epsilon2_1/assets/Epsilon2.1.model.json","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/live2d_models/epsilon2_1/assets/Epsilon2.1.physics.json","path":"live2d_models/epsilon2_1/assets/Epsilon2.1.physics.json","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/live2d_models/gf/assets/Gantzert_Felixander.model.json","path":"live2d_models/gf/assets/Gantzert_Felixander.model.json","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/live2d_models/haruto/assets/haruto.model.json","path":"live2d_models/haruto/assets/haruto.model.json","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/live2d_models/haruto/assets/haruto.physics.json","path":"live2d_models/haruto/assets/haruto.physics.json","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/live2d_models/hibiki/assets/hibiki.model.json","path":"live2d_models/hibiki/assets/hibiki.model.json","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/live2d_models/hibiki/assets/hibiki.physics.json","path":"live2d_models/hibiki/assets/hibiki.physics.json","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/live2d_models/hijiki/assets/hijiki.model.json","path":"live2d_models/hijiki/assets/hijiki.model.json","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/live2d_models/hijiki/assets/hijiki.pose.json","path":"live2d_models/hijiki/assets/hijiki.pose.json","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/live2d_models/izumi/assets/izumi.model.json","path":"live2d_models/izumi/assets/izumi.model.json","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/live2d_models/izumi/assets/izumi.physics.json","path":"live2d_models/izumi/assets/izumi.physics.json","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/live2d_models/koharu/assets/koharu.model.json","path":"live2d_models/koharu/assets/koharu.model.json","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/live2d_models/koharu/assets/koharu.physics.json","path":"live2d_models/koharu/assets/koharu.physics.json","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/live2d_models/miku/assets/miku.model.json","path":"live2d_models/miku/assets/miku.model.json","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/live2d_models/miku/assets/miku.physics.json","path":"live2d_models/miku/assets/miku.physics.json","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/live2d_models/ni-j/assets/ni-j.model.json","path":"live2d_models/ni-j/assets/ni-j.model.json","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/live2d_models/ni-j/assets/ni-j.pose.json","path":"live2d_models/ni-j/assets/ni-j.pose.json","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/live2d_models/ni-j/assets/ni-j.physics.json","path":"live2d_models/ni-j/assets/ni-j.physics.json","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/live2d_models/nico/assets/nico.model.json","path":"live2d_models/nico/assets/nico.model.json","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/live2d_models/nico/assets/nico.pose.json","path":"live2d_models/nico/assets/nico.pose.json","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/live2d_models/nico/assets/nico.physics.json","path":"live2d_models/nico/assets/nico.physics.json","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/live2d_models/nipsilon/assets/nipsilon.model.json","path":"live2d_models/nipsilon/assets/nipsilon.model.json","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/live2d_models/nipsilon/assets/nipsilon.physics.json","path":"live2d_models/nipsilon/assets/nipsilon.physics.json","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/live2d_models/nipsilon/assets/nipsilon.pose.json","path":"live2d_models/nipsilon/assets/nipsilon.pose.json","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/live2d_models/nietzsche/assets/nietzche.model.json","path":"live2d_models/nietzsche/assets/nietzche.model.json","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/live2d_models/nietzsche/assets/nietzsche.physics.json","path":"live2d_models/nietzsche/assets/nietzsche.physics.json","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/live2d_models/nietzsche/assets/nietzsche.pose.json","path":"live2d_models/nietzsche/assets/nietzsche.pose.json","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/live2d_models/nito/assets/nito.model.json","path":"live2d_models/nito/assets/nito.model.json","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/live2d_models/nito/assets/nito.physics.json","path":"live2d_models/nito/assets/nito.physics.json","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/live2d_models/nito/assets/nito.pose.json","path":"live2d_models/nito/assets/nito.pose.json","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/live2d_models/shizuku/assets/shizuku.model.json","path":"live2d_models/shizuku/assets/shizuku.model.json","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/live2d_models/shizuku/assets/shizuku.physics.json","path":"live2d_models/shizuku/assets/shizuku.physics.json","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/live2d_models/shizuku/assets/shizuku.pose.json","path":"live2d_models/shizuku/assets/shizuku.pose.json","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/live2d_models/tororo/assets/tororo.model.json","path":"live2d_models/tororo/assets/tororo.model.json","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/live2d_models/tororo/assets/tororo.pose.json","path":"live2d_models/tororo/assets/tororo.pose.json","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/live2d_models/tsumiki/assets/tsumiki.physics.json","path":"live2d_models/tsumiki/assets/tsumiki.physics.json","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/live2d_models/tsumiki/assets/tsumiki.model.json","path":"live2d_models/tsumiki/assets/tsumiki.model.json","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/live2d_models/unitychan/assets/unitychan.model.json","path":"live2d_models/unitychan/assets/unitychan.model.json","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/live2d_models/unitychan/assets/unitychan.physics.json","path":"live2d_models/unitychan/assets/unitychan.physics.json","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/live2d_models/wanko/assets/wanko.model.json","path":"live2d_models/wanko/assets/wanko.model.json","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/live2d_models/z16/assets/z16.physics.json","path":"live2d_models/z16/assets/z16.physics.json","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/live2d_models/z16/assets/z16.model.json","path":"live2d_models/z16/assets/z16.model.json","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/plugins/ribbon.js/demo/index.html","path":"plugins/ribbon.js/demo/index.html","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/live2d_models/chitose/assets/exp/f01.exp.json","path":"live2d_models/chitose/assets/exp/f01.exp.json","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/live2d_models/chitose/assets/exp/f02.exp.json","path":"live2d_models/chitose/assets/exp/f02.exp.json","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/live2d_models/chitose/assets/exp/f03.exp.json","path":"live2d_models/chitose/assets/exp/f03.exp.json","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/live2d_models/chitose/assets/exp/f04.exp.json","path":"live2d_models/chitose/assets/exp/f04.exp.json","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/live2d_models/chitose/assets/exp/f05.exp.json","path":"live2d_models/chitose/assets/exp/f05.exp.json","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/live2d_models/chitose/assets/exp/f06.exp.json","path":"live2d_models/chitose/assets/exp/f06.exp.json","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/live2d_models/chitose/assets/exp/f07.exp.json","path":"live2d_models/chitose/assets/exp/f07.exp.json","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/live2d_models/chitose/assets/moc/chitose.moc","path":"live2d_models/chitose/assets/moc/chitose.moc","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/live2d_models/chitose/assets/mtn/chitose_handwave.mtn","path":"live2d_models/chitose/assets/mtn/chitose_handwave.mtn","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/live2d_models/chitose/assets/mtn/chitose_idle.mtn","path":"live2d_models/chitose/assets/mtn/chitose_idle.mtn","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/live2d_models/chitose/assets/mtn/chitose_kime01.mtn","path":"live2d_models/chitose/assets/mtn/chitose_kime01.mtn","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/live2d_models/chitose/assets/mtn/chitose_kime02.mtn","path":"live2d_models/chitose/assets/mtn/chitose_kime02.mtn","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/live2d_models/epsilon2_1/assets/exp/f01.exp.json","path":"live2d_models/epsilon2_1/assets/exp/f01.exp.json","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/live2d_models/epsilon2_1/assets/exp/f02.exp.json","path":"live2d_models/epsilon2_1/assets/exp/f02.exp.json","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/live2d_models/epsilon2_1/assets/exp/f03.exp.json","path":"live2d_models/epsilon2_1/assets/exp/f03.exp.json","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/live2d_models/epsilon2_1/assets/exp/f04.exp.json","path":"live2d_models/epsilon2_1/assets/exp/f04.exp.json","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/live2d_models/epsilon2_1/assets/exp/f05.exp.json","path":"live2d_models/epsilon2_1/assets/exp/f05.exp.json","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/live2d_models/epsilon2_1/assets/exp/f06.exp.json","path":"live2d_models/epsilon2_1/assets/exp/f06.exp.json","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/live2d_models/epsilon2_1/assets/exp/f07.exp.json","path":"live2d_models/epsilon2_1/assets/exp/f07.exp.json","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/live2d_models/epsilon2_1/assets/exp/f08.exp.json","path":"live2d_models/epsilon2_1/assets/exp/f08.exp.json","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/live2d_models/epsilon2_1/assets/moc/Epsilon2.1.moc","path":"live2d_models/epsilon2_1/assets/moc/Epsilon2.1.moc","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/live2d_models/epsilon2_1/assets/mtn/Epsilon2.1_idle_01.mtn","path":"live2d_models/epsilon2_1/assets/mtn/Epsilon2.1_idle_01.mtn","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/live2d_models/epsilon2_1/assets/mtn/Epsilon2.1_m_01.mtn","path":"live2d_models/epsilon2_1/assets/mtn/Epsilon2.1_m_01.mtn","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/live2d_models/epsilon2_1/assets/mtn/Epsilon2.1_m_02.mtn","path":"live2d_models/epsilon2_1/assets/mtn/Epsilon2.1_m_02.mtn","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/live2d_models/epsilon2_1/assets/mtn/Epsilon2.1_m_03.mtn","path":"live2d_models/epsilon2_1/assets/mtn/Epsilon2.1_m_03.mtn","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/live2d_models/epsilon2_1/assets/mtn/Epsilon2.1_m_05.mtn","path":"live2d_models/epsilon2_1/assets/mtn/Epsilon2.1_m_05.mtn","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/live2d_models/epsilon2_1/assets/mtn/Epsilon2.1_m_04.mtn","path":"live2d_models/epsilon2_1/assets/mtn/Epsilon2.1_m_04.mtn","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/live2d_models/epsilon2_1/assets/mtn/Epsilon2.1_m_07.mtn","path":"live2d_models/epsilon2_1/assets/mtn/Epsilon2.1_m_07.mtn","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/live2d_models/epsilon2_1/assets/mtn/Epsilon2.1_m_06.mtn","path":"live2d_models/epsilon2_1/assets/mtn/Epsilon2.1_m_06.mtn","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/live2d_models/epsilon2_1/assets/mtn/Epsilon2.1_m_08.mtn","path":"live2d_models/epsilon2_1/assets/mtn/Epsilon2.1_m_08.mtn","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/live2d_models/epsilon2_1/assets/mtn/Epsilon2.1_m_sp_01.mtn","path":"live2d_models/epsilon2_1/assets/mtn/Epsilon2.1_m_sp_01.mtn","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/live2d_models/epsilon2_1/assets/mtn/Epsilon2.1_m_sp_02.mtn","path":"live2d_models/epsilon2_1/assets/mtn/Epsilon2.1_m_sp_02.mtn","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/live2d_models/epsilon2_1/assets/mtn/Epsilon2.1_m_sp_04.mtn","path":"live2d_models/epsilon2_1/assets/mtn/Epsilon2.1_m_sp_04.mtn","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/live2d_models/epsilon2_1/assets/mtn/Epsilon2.1_m_sp_03.mtn","path":"live2d_models/epsilon2_1/assets/mtn/Epsilon2.1_m_sp_03.mtn","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/live2d_models/epsilon2_1/assets/mtn/Epsilon2.1_m_sp_05.mtn","path":"live2d_models/epsilon2_1/assets/mtn/Epsilon2.1_m_sp_05.mtn","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/live2d_models/epsilon2_1/assets/mtn/Epsilon2.1_shake_01.mtn","path":"live2d_models/epsilon2_1/assets/mtn/Epsilon2.1_shake_01.mtn","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/live2d_models/gf/assets/moc/Gantzert_Felixander.moc","path":"live2d_models/gf/assets/moc/Gantzert_Felixander.moc","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/live2d_models/gf/assets/mtn/A_00_idle.mtn","path":"live2d_models/gf/assets/mtn/A_00_idle.mtn","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/live2d_models/gf/assets/mtn/A_01.mtn","path":"live2d_models/gf/assets/mtn/A_01.mtn","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/live2d_models/gf/assets/mtn/A_02.mtn","path":"live2d_models/gf/assets/mtn/A_02.mtn","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/live2d_models/gf/assets/mtn/A_03.mtn","path":"live2d_models/gf/assets/mtn/A_03.mtn","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/live2d_models/gf/assets/mtn/A_04.mtn","path":"live2d_models/gf/assets/mtn/A_04.mtn","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/live2d_models/gf/assets/mtn/A_05.mtn","path":"live2d_models/gf/assets/mtn/A_05.mtn","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/live2d_models/haruto/assets/moc/haruto.moc","path":"live2d_models/haruto/assets/moc/haruto.moc","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/live2d_models/haruto/assets/mtn/01.mtn","path":"live2d_models/haruto/assets/mtn/01.mtn","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/live2d_models/haruto/assets/mtn/02.mtn","path":"live2d_models/haruto/assets/mtn/02.mtn","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/live2d_models/haruto/assets/mtn/03.mtn","path":"live2d_models/haruto/assets/mtn/03.mtn","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/live2d_models/haruto/assets/mtn/04.mtn","path":"live2d_models/haruto/assets/mtn/04.mtn","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/live2d_models/haruto/assets/mtn/05.mtn","path":"live2d_models/haruto/assets/mtn/05.mtn","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/live2d_models/haruto/assets/mtn/06.mtn","path":"live2d_models/haruto/assets/mtn/06.mtn","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/live2d_models/haruto/assets/mtn/07.mtn","path":"live2d_models/haruto/assets/mtn/07.mtn","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/live2d_models/haruto/assets/mtn/08.mtn","path":"live2d_models/haruto/assets/mtn/08.mtn","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/live2d_models/haruto/assets/mtn/09.mtn","path":"live2d_models/haruto/assets/mtn/09.mtn","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/live2d_models/haruto/assets/mtn/idle_02.mtn","path":"live2d_models/haruto/assets/mtn/idle_02.mtn","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/live2d_models/haru/02/assets/haru02.model.json","path":"live2d_models/haru/02/assets/haru02.model.json","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/live2d_models/haru/02/assets/haru02.physics.json","path":"live2d_models/haru/02/assets/haru02.physics.json","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/live2d_models/haru/02/assets/haru02.pose.json","path":"live2d_models/haru/02/assets/haru02.pose.json","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/live2d_models/haru/01/assets/haru01.model.json","path":"live2d_models/haru/01/assets/haru01.model.json","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/live2d_models/haru/01/assets/haru01.physics.json","path":"live2d_models/haru/01/assets/haru01.physics.json","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/live2d_models/haru/01/assets/haru01.pose.json","path":"live2d_models/haru/01/assets/haru01.pose.json","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/live2d_models/hibiki/assets/exp/f01.exp.json","path":"live2d_models/hibiki/assets/exp/f01.exp.json","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/live2d_models/hibiki/assets/exp/f02.exp.json","path":"live2d_models/hibiki/assets/exp/f02.exp.json","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/live2d_models/hibiki/assets/exp/f03.exp.json","path":"live2d_models/hibiki/assets/exp/f03.exp.json","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/live2d_models/hibiki/assets/exp/f04.exp.json","path":"live2d_models/hibiki/assets/exp/f04.exp.json","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/live2d_models/hibiki/assets/exp/f05.exp.json","path":"live2d_models/hibiki/assets/exp/f05.exp.json","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/live2d_models/hibiki/assets/exp/f06.exp.json","path":"live2d_models/hibiki/assets/exp/f06.exp.json","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/live2d_models/hibiki/assets/moc/hibiki.moc","path":"live2d_models/hibiki/assets/moc/hibiki.moc","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/live2d_models/hibiki/assets/mtn/hibiki_01.mtn","path":"live2d_models/hibiki/assets/mtn/hibiki_01.mtn","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/live2d_models/hibiki/assets/mtn/hibiki_02.mtn","path":"live2d_models/hibiki/assets/mtn/hibiki_02.mtn","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/live2d_models/hibiki/assets/mtn/hibiki_03.mtn","path":"live2d_models/hibiki/assets/mtn/hibiki_03.mtn","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/live2d_models/hibiki/assets/mtn/hibiki_04.mtn","path":"live2d_models/hibiki/assets/mtn/hibiki_04.mtn","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/live2d_models/hibiki/assets/mtn/hibiki_05.mtn","path":"live2d_models/hibiki/assets/mtn/hibiki_05.mtn","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/live2d_models/hibiki/assets/mtn/idle_01.mtn","path":"live2d_models/hibiki/assets/mtn/idle_01.mtn","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/live2d_models/hibiki/assets/mtn/idle_02.mtn","path":"live2d_models/hibiki/assets/mtn/idle_02.mtn","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/live2d_models/hibiki/assets/mtn/idle_03.mtn","path":"live2d_models/hibiki/assets/mtn/idle_03.mtn","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/live2d_models/hibiki/assets/mtn/idle_04.mtn","path":"live2d_models/hibiki/assets/mtn/idle_04.mtn","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/live2d_models/hibiki/assets/snd/hibiki_01.mp3","path":"live2d_models/hibiki/assets/snd/hibiki_01.mp3","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/live2d_models/hibiki/assets/snd/hibiki_02.mp3","path":"live2d_models/hibiki/assets/snd/hibiki_02.mp3","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/live2d_models/hibiki/assets/snd/hibiki_03.mp3","path":"live2d_models/hibiki/assets/snd/hibiki_03.mp3","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/live2d_models/hibiki/assets/snd/hibiki_04.mp3","path":"live2d_models/hibiki/assets/snd/hibiki_04.mp3","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/live2d_models/hibiki/assets/snd/hibiki_05.mp3","path":"live2d_models/hibiki/assets/snd/hibiki_05.mp3","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/live2d_models/hijiki/assets/moc/hijiki.moc","path":"live2d_models/hijiki/assets/moc/hijiki.moc","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/live2d_models/hijiki/assets/mtn/00_idle.mtn","path":"live2d_models/hijiki/assets/mtn/00_idle.mtn","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/live2d_models/hijiki/assets/mtn/01.mtn","path":"live2d_models/hijiki/assets/mtn/01.mtn","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/live2d_models/hijiki/assets/mtn/02.mtn","path":"live2d_models/hijiki/assets/mtn/02.mtn","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/live2d_models/hijiki/assets/mtn/03.mtn","path":"live2d_models/hijiki/assets/mtn/03.mtn","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/live2d_models/hijiki/assets/mtn/04.mtn","path":"live2d_models/hijiki/assets/mtn/04.mtn","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/live2d_models/hijiki/assets/mtn/05.mtn","path":"live2d_models/hijiki/assets/mtn/05.mtn","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/live2d_models/hijiki/assets/mtn/06.mtn","path":"live2d_models/hijiki/assets/mtn/06.mtn","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/live2d_models/hijiki/assets/mtn/07.mtn","path":"live2d_models/hijiki/assets/mtn/07.mtn","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/live2d_models/hijiki/assets/mtn/08.mtn","path":"live2d_models/hijiki/assets/mtn/08.mtn","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/live2d_models/izumi/assets/exp/f01.exp.json","path":"live2d_models/izumi/assets/exp/f01.exp.json","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/live2d_models/izumi/assets/exp/f02.exp.json","path":"live2d_models/izumi/assets/exp/f02.exp.json","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/live2d_models/izumi/assets/exp/f03.exp.json","path":"live2d_models/izumi/assets/exp/f03.exp.json","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/live2d_models/izumi/assets/exp/f04.exp.json","path":"live2d_models/izumi/assets/exp/f04.exp.json","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/live2d_models/izumi/assets/exp/f05.exp.json","path":"live2d_models/izumi/assets/exp/f05.exp.json","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/live2d_models/izumi/assets/exp/f06.exp.json","path":"live2d_models/izumi/assets/exp/f06.exp.json","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/live2d_models/izumi/assets/exp/f07.exp.json","path":"live2d_models/izumi/assets/exp/f07.exp.json","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/live2d_models/izumi/assets/moc/izumi_illust.moc","path":"live2d_models/izumi/assets/moc/izumi_illust.moc","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/live2d_models/izumi/assets/mtn/idle_01.mtn","path":"live2d_models/izumi/assets/mtn/idle_01.mtn","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/live2d_models/izumi/assets/mtn/idle_02.mtn","path":"live2d_models/izumi/assets/mtn/idle_02.mtn","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/live2d_models/izumi/assets/mtn/idle_03.mtn","path":"live2d_models/izumi/assets/mtn/idle_03.mtn","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/live2d_models/izumi/assets/mtn/idle_04.mtn","path":"live2d_models/izumi/assets/mtn/idle_04.mtn","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/live2d_models/izumi/assets/mtn/izumi_01.mtn","path":"live2d_models/izumi/assets/mtn/izumi_01.mtn","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/live2d_models/izumi/assets/mtn/izumi_02.mtn","path":"live2d_models/izumi/assets/mtn/izumi_02.mtn","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/live2d_models/izumi/assets/mtn/izumi_03.mtn","path":"live2d_models/izumi/assets/mtn/izumi_03.mtn","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/live2d_models/izumi/assets/mtn/izumi_04.mtn","path":"live2d_models/izumi/assets/mtn/izumi_04.mtn","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/live2d_models/izumi/assets/mtn/izumi_05.mtn","path":"live2d_models/izumi/assets/mtn/izumi_05.mtn","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/live2d_models/izumi/assets/mtn/izumi_06.mtn","path":"live2d_models/izumi/assets/mtn/izumi_06.mtn","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/live2d_models/izumi/assets/mtn/izumi_07.mtn","path":"live2d_models/izumi/assets/mtn/izumi_07.mtn","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/live2d_models/izumi/assets/mtn/izumi_08.mtn","path":"live2d_models/izumi/assets/mtn/izumi_08.mtn","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/live2d_models/izumi/assets/mtn/izumi_09.mtn","path":"live2d_models/izumi/assets/mtn/izumi_09.mtn","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/live2d_models/izumi/assets/mtn/izumi_10.mtn","path":"live2d_models/izumi/assets/mtn/izumi_10.mtn","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/live2d_models/izumi/assets/snd/izumi_01.mp3","path":"live2d_models/izumi/assets/snd/izumi_01.mp3","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/live2d_models/izumi/assets/snd/izumi_02.mp3","path":"live2d_models/izumi/assets/snd/izumi_02.mp3","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/live2d_models/izumi/assets/snd/izumi_03.mp3","path":"live2d_models/izumi/assets/snd/izumi_03.mp3","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/live2d_models/izumi/assets/snd/izumi_04.mp3","path":"live2d_models/izumi/assets/snd/izumi_04.mp3","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/live2d_models/izumi/assets/snd/izumi_05.mp3","path":"live2d_models/izumi/assets/snd/izumi_05.mp3","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/live2d_models/izumi/assets/snd/izumi_06.mp3","path":"live2d_models/izumi/assets/snd/izumi_06.mp3","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/live2d_models/izumi/assets/snd/izumi_07.mp3","path":"live2d_models/izumi/assets/snd/izumi_07.mp3","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/live2d_models/izumi/assets/snd/izumi_08.mp3","path":"live2d_models/izumi/assets/snd/izumi_08.mp3","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/live2d_models/izumi/assets/snd/izumi_09.mp3","path":"live2d_models/izumi/assets/snd/izumi_09.mp3","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/live2d_models/izumi/assets/snd/izumi_10.mp3","path":"live2d_models/izumi/assets/snd/izumi_10.mp3","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/live2d_models/koharu/assets/moc/koharu.moc","path":"live2d_models/koharu/assets/moc/koharu.moc","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/live2d_models/koharu/assets/mtn/01.mtn","path":"live2d_models/koharu/assets/mtn/01.mtn","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/live2d_models/koharu/assets/mtn/02.mtn","path":"live2d_models/koharu/assets/mtn/02.mtn","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/live2d_models/koharu/assets/mtn/03.mtn","path":"live2d_models/koharu/assets/mtn/03.mtn","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/live2d_models/koharu/assets/mtn/04.mtn","path":"live2d_models/koharu/assets/mtn/04.mtn","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/live2d_models/koharu/assets/mtn/05.mtn","path":"live2d_models/koharu/assets/mtn/05.mtn","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/live2d_models/koharu/assets/mtn/06.mtn","path":"live2d_models/koharu/assets/mtn/06.mtn","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/live2d_models/koharu/assets/mtn/07.mtn","path":"live2d_models/koharu/assets/mtn/07.mtn","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/live2d_models/koharu/assets/mtn/08.mtn","path":"live2d_models/koharu/assets/mtn/08.mtn","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/live2d_models/koharu/assets/mtn/09.mtn","path":"live2d_models/koharu/assets/mtn/09.mtn","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/live2d_models/koharu/assets/mtn/idle.mtn","path":"live2d_models/koharu/assets/mtn/idle.mtn","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/live2d_models/miku/assets/moc/miku.moc","path":"live2d_models/miku/assets/moc/miku.moc","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/live2d_models/miku/assets/mtn/miku_idle_01.mtn","path":"live2d_models/miku/assets/mtn/miku_idle_01.mtn","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/live2d_models/miku/assets/mtn/miku_m_01.mtn","path":"live2d_models/miku/assets/mtn/miku_m_01.mtn","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/live2d_models/miku/assets/mtn/miku_m_02.mtn","path":"live2d_models/miku/assets/mtn/miku_m_02.mtn","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/live2d_models/miku/assets/mtn/miku_m_03.mtn","path":"live2d_models/miku/assets/mtn/miku_m_03.mtn","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/live2d_models/miku/assets/mtn/miku_m_04.mtn","path":"live2d_models/miku/assets/mtn/miku_m_04.mtn","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/live2d_models/miku/assets/mtn/miku_m_05.mtn","path":"live2d_models/miku/assets/mtn/miku_m_05.mtn","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/live2d_models/miku/assets/mtn/miku_m_06.mtn","path":"live2d_models/miku/assets/mtn/miku_m_06.mtn","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/live2d_models/miku/assets/mtn/miku_shake_01.mtn","path":"live2d_models/miku/assets/mtn/miku_shake_01.mtn","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/live2d_models/ni-j/assets/moc/ni-j.moc","path":"live2d_models/ni-j/assets/moc/ni-j.moc","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/live2d_models/ni-j/assets/mtn/00_idle.mtn","path":"live2d_models/ni-j/assets/mtn/00_idle.mtn","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/live2d_models/ni-j/assets/mtn/01_happy.mtn","path":"live2d_models/ni-j/assets/mtn/01_happy.mtn","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/live2d_models/ni-j/assets/mtn/02_angry.mtn","path":"live2d_models/ni-j/assets/mtn/02_angry.mtn","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/live2d_models/ni-j/assets/mtn/03_fear.mtn","path":"live2d_models/ni-j/assets/mtn/03_fear.mtn","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/live2d_models/ni-j/assets/mtn/04_surprise.mtn","path":"live2d_models/ni-j/assets/mtn/04_surprise.mtn","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/live2d_models/ni-j/assets/mtn/05_fun.mtn","path":"live2d_models/ni-j/assets/mtn/05_fun.mtn","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/live2d_models/ni-j/assets/mtn/06_love.mtn","path":"live2d_models/ni-j/assets/mtn/06_love.mtn","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/live2d_models/ni-j/assets/mtn/07_bye.mtn","path":"live2d_models/ni-j/assets/mtn/07_bye.mtn","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/live2d_models/ni-j/assets/mtn/08_sad.mtn","path":"live2d_models/ni-j/assets/mtn/08_sad.mtn","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/live2d_models/ni-j/assets/mtn/09_yawn.mtn","path":"live2d_models/ni-j/assets/mtn/09_yawn.mtn","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/live2d_models/ni-j/assets/mtn/10_yeah.mtn","path":"live2d_models/ni-j/assets/mtn/10_yeah.mtn","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/live2d_models/ni-j/assets/mtn/11_muscle.mtn","path":"live2d_models/ni-j/assets/mtn/11_muscle.mtn","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/live2d_models/ni-j/assets/mtn/12_stagger.mtn","path":"live2d_models/ni-j/assets/mtn/12_stagger.mtn","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/live2d_models/ni-j/assets/mtn/13_cry.mtn","path":"live2d_models/ni-j/assets/mtn/13_cry.mtn","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/live2d_models/ni-j/assets/mtn/14_ sigh.mtn","path":"live2d_models/ni-j/assets/mtn/14_ sigh.mtn","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/live2d_models/ni-j/assets/mtn/15_joy.mtn","path":"live2d_models/ni-j/assets/mtn/15_joy.mtn","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/live2d_models/ni-j/assets/mtn/16_menace.mtn","path":"live2d_models/ni-j/assets/mtn/16_menace.mtn","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/live2d_models/ni-j/assets/mtn/17_yes.mtn","path":"live2d_models/ni-j/assets/mtn/17_yes.mtn","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/live2d_models/ni-j/assets/mtn/18_no.mtn","path":"live2d_models/ni-j/assets/mtn/18_no.mtn","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/live2d_models/ni-j/assets/mtn/19_walk.mtn","path":"live2d_models/ni-j/assets/mtn/19_walk.mtn","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/live2d_models/ni-j/assets/mtn/20_sleep.mtn","path":"live2d_models/ni-j/assets/mtn/20_sleep.mtn","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/live2d_models/nico/assets/moc/nico.moc","path":"live2d_models/nico/assets/moc/nico.moc","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/live2d_models/nico/assets/mtn/00_idle.mtn","path":"live2d_models/nico/assets/mtn/00_idle.mtn","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/live2d_models/nico/assets/mtn/01_happy.mtn","path":"live2d_models/nico/assets/mtn/01_happy.mtn","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/live2d_models/nico/assets/mtn/02_angry.mtn","path":"live2d_models/nico/assets/mtn/02_angry.mtn","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/live2d_models/nico/assets/mtn/03_fear.mtn","path":"live2d_models/nico/assets/mtn/03_fear.mtn","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/live2d_models/nico/assets/mtn/04_surprise.mtn","path":"live2d_models/nico/assets/mtn/04_surprise.mtn","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/live2d_models/nico/assets/mtn/05_fun.mtn","path":"live2d_models/nico/assets/mtn/05_fun.mtn","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/live2d_models/nico/assets/mtn/06_love.mtn","path":"live2d_models/nico/assets/mtn/06_love.mtn","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/live2d_models/nico/assets/mtn/07_bye.mtn","path":"live2d_models/nico/assets/mtn/07_bye.mtn","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/live2d_models/nico/assets/mtn/08_sad.mtn","path":"live2d_models/nico/assets/mtn/08_sad.mtn","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/live2d_models/nico/assets/mtn/09_yawn.mtn","path":"live2d_models/nico/assets/mtn/09_yawn.mtn","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/live2d_models/nico/assets/mtn/10_yeah.mtn","path":"live2d_models/nico/assets/mtn/10_yeah.mtn","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/live2d_models/nico/assets/mtn/11_muscle.mtn","path":"live2d_models/nico/assets/mtn/11_muscle.mtn","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/live2d_models/nico/assets/mtn/12_stagger.mtn","path":"live2d_models/nico/assets/mtn/12_stagger.mtn","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/live2d_models/nico/assets/mtn/13_cry.mtn","path":"live2d_models/nico/assets/mtn/13_cry.mtn","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/live2d_models/nico/assets/mtn/14_ sigh.mtn","path":"live2d_models/nico/assets/mtn/14_ sigh.mtn","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/live2d_models/nico/assets/mtn/15_joy.mtn","path":"live2d_models/nico/assets/mtn/15_joy.mtn","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/live2d_models/nico/assets/mtn/16_menace.mtn","path":"live2d_models/nico/assets/mtn/16_menace.mtn","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/live2d_models/nico/assets/mtn/17_yes.mtn","path":"live2d_models/nico/assets/mtn/17_yes.mtn","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/live2d_models/nico/assets/mtn/18_no.mtn","path":"live2d_models/nico/assets/mtn/18_no.mtn","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/live2d_models/nico/assets/mtn/19_walk.mtn","path":"live2d_models/nico/assets/mtn/19_walk.mtn","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/live2d_models/nico/assets/mtn/20_sleep.mtn","path":"live2d_models/nico/assets/mtn/20_sleep.mtn","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/live2d_models/nipsilon/assets/moc/nipsilon.moc","path":"live2d_models/nipsilon/assets/moc/nipsilon.moc","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/live2d_models/nipsilon/assets/mtn/00_idle.mtn","path":"live2d_models/nipsilon/assets/mtn/00_idle.mtn","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/live2d_models/nipsilon/assets/mtn/01_happy.mtn","path":"live2d_models/nipsilon/assets/mtn/01_happy.mtn","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/live2d_models/nipsilon/assets/mtn/02_angry.mtn","path":"live2d_models/nipsilon/assets/mtn/02_angry.mtn","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/live2d_models/nipsilon/assets/mtn/03_fear.mtn","path":"live2d_models/nipsilon/assets/mtn/03_fear.mtn","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/live2d_models/nipsilon/assets/mtn/04_surprise.mtn","path":"live2d_models/nipsilon/assets/mtn/04_surprise.mtn","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/live2d_models/nipsilon/assets/mtn/05_fun.mtn","path":"live2d_models/nipsilon/assets/mtn/05_fun.mtn","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/live2d_models/nipsilon/assets/mtn/06_love.mtn","path":"live2d_models/nipsilon/assets/mtn/06_love.mtn","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/live2d_models/nipsilon/assets/mtn/07_bye.mtn","path":"live2d_models/nipsilon/assets/mtn/07_bye.mtn","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/live2d_models/nipsilon/assets/mtn/08_sad.mtn","path":"live2d_models/nipsilon/assets/mtn/08_sad.mtn","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/live2d_models/nipsilon/assets/mtn/09_yawn.mtn","path":"live2d_models/nipsilon/assets/mtn/09_yawn.mtn","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/live2d_models/nipsilon/assets/mtn/10_yeah.mtn","path":"live2d_models/nipsilon/assets/mtn/10_yeah.mtn","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/live2d_models/nipsilon/assets/mtn/11_muscle.mtn","path":"live2d_models/nipsilon/assets/mtn/11_muscle.mtn","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/live2d_models/nipsilon/assets/mtn/12_stagger.mtn","path":"live2d_models/nipsilon/assets/mtn/12_stagger.mtn","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/live2d_models/nipsilon/assets/mtn/13_cry.mtn","path":"live2d_models/nipsilon/assets/mtn/13_cry.mtn","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/live2d_models/nipsilon/assets/mtn/14_ sigh.mtn","path":"live2d_models/nipsilon/assets/mtn/14_ sigh.mtn","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/live2d_models/nipsilon/assets/mtn/15_joy.mtn","path":"live2d_models/nipsilon/assets/mtn/15_joy.mtn","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/live2d_models/nipsilon/assets/mtn/16_menace.mtn","path":"live2d_models/nipsilon/assets/mtn/16_menace.mtn","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/live2d_models/nipsilon/assets/mtn/17_yes.mtn","path":"live2d_models/nipsilon/assets/mtn/17_yes.mtn","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/live2d_models/nipsilon/assets/mtn/18_no.mtn","path":"live2d_models/nipsilon/assets/mtn/18_no.mtn","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/live2d_models/nipsilon/assets/mtn/19_walk.mtn","path":"live2d_models/nipsilon/assets/mtn/19_walk.mtn","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/live2d_models/nipsilon/assets/mtn/20_sleep.mtn","path":"live2d_models/nipsilon/assets/mtn/20_sleep.mtn","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/live2d_models/nietzsche/assets/moc/nietzsche.moc","path":"live2d_models/nietzsche/assets/moc/nietzsche.moc","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/live2d_models/nietzsche/assets/mtn/00_idle.mtn","path":"live2d_models/nietzsche/assets/mtn/00_idle.mtn","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/live2d_models/nietzsche/assets/mtn/01_happy.mtn","path":"live2d_models/nietzsche/assets/mtn/01_happy.mtn","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/live2d_models/nietzsche/assets/mtn/02_angry.mtn","path":"live2d_models/nietzsche/assets/mtn/02_angry.mtn","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/live2d_models/nietzsche/assets/mtn/03_fear.mtn","path":"live2d_models/nietzsche/assets/mtn/03_fear.mtn","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/live2d_models/nietzsche/assets/mtn/04_surprise.mtn","path":"live2d_models/nietzsche/assets/mtn/04_surprise.mtn","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/live2d_models/nietzsche/assets/mtn/05_fun.mtn","path":"live2d_models/nietzsche/assets/mtn/05_fun.mtn","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/live2d_models/nietzsche/assets/mtn/06_love.mtn","path":"live2d_models/nietzsche/assets/mtn/06_love.mtn","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/live2d_models/nietzsche/assets/mtn/07_bye.mtn","path":"live2d_models/nietzsche/assets/mtn/07_bye.mtn","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/live2d_models/nietzsche/assets/mtn/08_sad.mtn","path":"live2d_models/nietzsche/assets/mtn/08_sad.mtn","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/live2d_models/nietzsche/assets/mtn/09_yawn.mtn","path":"live2d_models/nietzsche/assets/mtn/09_yawn.mtn","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/live2d_models/nietzsche/assets/mtn/10_yeah.mtn","path":"live2d_models/nietzsche/assets/mtn/10_yeah.mtn","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/live2d_models/nietzsche/assets/mtn/11_muscle.mtn","path":"live2d_models/nietzsche/assets/mtn/11_muscle.mtn","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/live2d_models/nietzsche/assets/mtn/12_stagger.mtn","path":"live2d_models/nietzsche/assets/mtn/12_stagger.mtn","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/live2d_models/nietzsche/assets/mtn/13_cry.mtn","path":"live2d_models/nietzsche/assets/mtn/13_cry.mtn","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/live2d_models/nietzsche/assets/mtn/14_ sigh.mtn","path":"live2d_models/nietzsche/assets/mtn/14_ sigh.mtn","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/live2d_models/nietzsche/assets/mtn/15_joy.mtn","path":"live2d_models/nietzsche/assets/mtn/15_joy.mtn","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/live2d_models/nietzsche/assets/mtn/16_menace.mtn","path":"live2d_models/nietzsche/assets/mtn/16_menace.mtn","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/live2d_models/nietzsche/assets/mtn/17_yes.mtn","path":"live2d_models/nietzsche/assets/mtn/17_yes.mtn","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/live2d_models/nietzsche/assets/mtn/18_no.mtn","path":"live2d_models/nietzsche/assets/mtn/18_no.mtn","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/live2d_models/nietzsche/assets/mtn/19_walk.mtn","path":"live2d_models/nietzsche/assets/mtn/19_walk.mtn","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/live2d_models/nietzsche/assets/mtn/20_sleep.mtn","path":"live2d_models/nietzsche/assets/mtn/20_sleep.mtn","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/live2d_models/nito/assets/moc/nito.moc","path":"live2d_models/nito/assets/moc/nito.moc","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/live2d_models/nito/assets/mtn/00_idle.mtn","path":"live2d_models/nito/assets/mtn/00_idle.mtn","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/live2d_models/nito/assets/mtn/01_happy.mtn","path":"live2d_models/nito/assets/mtn/01_happy.mtn","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/live2d_models/nito/assets/mtn/02_angry.mtn","path":"live2d_models/nito/assets/mtn/02_angry.mtn","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/live2d_models/nito/assets/mtn/03_fear.mtn","path":"live2d_models/nito/assets/mtn/03_fear.mtn","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/live2d_models/nito/assets/mtn/04_surprise.mtn","path":"live2d_models/nito/assets/mtn/04_surprise.mtn","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/live2d_models/nito/assets/mtn/05_fun.mtn","path":"live2d_models/nito/assets/mtn/05_fun.mtn","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/live2d_models/nito/assets/mtn/06_love.mtn","path":"live2d_models/nito/assets/mtn/06_love.mtn","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/live2d_models/nito/assets/mtn/07_bye.mtn","path":"live2d_models/nito/assets/mtn/07_bye.mtn","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/live2d_models/nito/assets/mtn/08_sad.mtn","path":"live2d_models/nito/assets/mtn/08_sad.mtn","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/live2d_models/nito/assets/mtn/09_yawn.mtn","path":"live2d_models/nito/assets/mtn/09_yawn.mtn","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/live2d_models/nito/assets/mtn/10_yeah.mtn","path":"live2d_models/nito/assets/mtn/10_yeah.mtn","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/live2d_models/nito/assets/mtn/11_muscle.mtn","path":"live2d_models/nito/assets/mtn/11_muscle.mtn","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/live2d_models/nito/assets/mtn/12_stagger.mtn","path":"live2d_models/nito/assets/mtn/12_stagger.mtn","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/live2d_models/nito/assets/mtn/13_cry.mtn","path":"live2d_models/nito/assets/mtn/13_cry.mtn","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/live2d_models/nito/assets/mtn/14_ sigh.mtn","path":"live2d_models/nito/assets/mtn/14_ sigh.mtn","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/live2d_models/nito/assets/mtn/15_joy.mtn","path":"live2d_models/nito/assets/mtn/15_joy.mtn","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/live2d_models/nito/assets/mtn/16_menace.mtn","path":"live2d_models/nito/assets/mtn/16_menace.mtn","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/live2d_models/nito/assets/mtn/17_yes.mtn","path":"live2d_models/nito/assets/mtn/17_yes.mtn","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/live2d_models/nito/assets/mtn/18_no.mtn","path":"live2d_models/nito/assets/mtn/18_no.mtn","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/live2d_models/nito/assets/mtn/19_walk.mtn","path":"live2d_models/nito/assets/mtn/19_walk.mtn","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/live2d_models/nito/assets/mtn/20_sleep.mtn","path":"live2d_models/nito/assets/mtn/20_sleep.mtn","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/live2d_models/shizuku/assets/exp/f01.exp.json","path":"live2d_models/shizuku/assets/exp/f01.exp.json","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/live2d_models/shizuku/assets/exp/f02.exp.json","path":"live2d_models/shizuku/assets/exp/f02.exp.json","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/live2d_models/shizuku/assets/exp/f03.exp.json","path":"live2d_models/shizuku/assets/exp/f03.exp.json","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/live2d_models/shizuku/assets/exp/f04.exp.json","path":"live2d_models/shizuku/assets/exp/f04.exp.json","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/live2d_models/shizuku/assets/moc/shizuku.moc","path":"live2d_models/shizuku/assets/moc/shizuku.moc","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/live2d_models/shizuku/assets/mtn/flickHead_00.mtn","path":"live2d_models/shizuku/assets/mtn/flickHead_00.mtn","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/live2d_models/shizuku/assets/mtn/flickHead_01.mtn","path":"live2d_models/shizuku/assets/mtn/flickHead_01.mtn","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/live2d_models/shizuku/assets/mtn/flickHead_02.mtn","path":"live2d_models/shizuku/assets/mtn/flickHead_02.mtn","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/live2d_models/shizuku/assets/mtn/idle_00.mtn","path":"live2d_models/shizuku/assets/mtn/idle_00.mtn","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/live2d_models/shizuku/assets/mtn/idle_01.mtn","path":"live2d_models/shizuku/assets/mtn/idle_01.mtn","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/live2d_models/shizuku/assets/mtn/idle_02.mtn","path":"live2d_models/shizuku/assets/mtn/idle_02.mtn","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/live2d_models/shizuku/assets/mtn/pinchIn_00.mtn","path":"live2d_models/shizuku/assets/mtn/pinchIn_00.mtn","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/live2d_models/shizuku/assets/mtn/pinchIn_01.mtn","path":"live2d_models/shizuku/assets/mtn/pinchIn_01.mtn","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/live2d_models/shizuku/assets/mtn/pinchIn_02.mtn","path":"live2d_models/shizuku/assets/mtn/pinchIn_02.mtn","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/live2d_models/shizuku/assets/mtn/pinchOut_00.mtn","path":"live2d_models/shizuku/assets/mtn/pinchOut_00.mtn","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/live2d_models/shizuku/assets/mtn/pinchOut_01.mtn","path":"live2d_models/shizuku/assets/mtn/pinchOut_01.mtn","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/live2d_models/shizuku/assets/mtn/shake_00.mtn","path":"live2d_models/shizuku/assets/mtn/shake_00.mtn","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/live2d_models/shizuku/assets/mtn/pinchOut_02.mtn","path":"live2d_models/shizuku/assets/mtn/pinchOut_02.mtn","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/live2d_models/shizuku/assets/mtn/shake_01.mtn","path":"live2d_models/shizuku/assets/mtn/shake_01.mtn","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/live2d_models/shizuku/assets/mtn/shake_02.mtn","path":"live2d_models/shizuku/assets/mtn/shake_02.mtn","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/live2d_models/shizuku/assets/mtn/tapBody_00.mtn","path":"live2d_models/shizuku/assets/mtn/tapBody_00.mtn","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/live2d_models/shizuku/assets/mtn/tapBody_01.mtn","path":"live2d_models/shizuku/assets/mtn/tapBody_01.mtn","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/live2d_models/shizuku/assets/mtn/tapBody_02.mtn","path":"live2d_models/shizuku/assets/mtn/tapBody_02.mtn","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/live2d_models/shizuku/assets/snd/flickHead_00.mp3","path":"live2d_models/shizuku/assets/snd/flickHead_00.mp3","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/live2d_models/shizuku/assets/snd/flickHead_01.mp3","path":"live2d_models/shizuku/assets/snd/flickHead_01.mp3","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/live2d_models/shizuku/assets/snd/flickHead_02.mp3","path":"live2d_models/shizuku/assets/snd/flickHead_02.mp3","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/live2d_models/shizuku/assets/snd/pinchIn_00.mp3","path":"live2d_models/shizuku/assets/snd/pinchIn_00.mp3","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/live2d_models/shizuku/assets/snd/pinchIn_01.mp3","path":"live2d_models/shizuku/assets/snd/pinchIn_01.mp3","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/live2d_models/shizuku/assets/snd/pinchIn_02.mp3","path":"live2d_models/shizuku/assets/snd/pinchIn_02.mp3","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/live2d_models/shizuku/assets/snd/pinchOut_00.mp3","path":"live2d_models/shizuku/assets/snd/pinchOut_00.mp3","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/live2d_models/shizuku/assets/snd/pinchOut_01.mp3","path":"live2d_models/shizuku/assets/snd/pinchOut_01.mp3","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/live2d_models/shizuku/assets/snd/pinchOut_02.mp3","path":"live2d_models/shizuku/assets/snd/pinchOut_02.mp3","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/live2d_models/shizuku/assets/snd/shake_00.mp3","path":"live2d_models/shizuku/assets/snd/shake_00.mp3","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/live2d_models/shizuku/assets/snd/shake_02.mp3","path":"live2d_models/shizuku/assets/snd/shake_02.mp3","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/live2d_models/shizuku/assets/snd/shake_01.mp3","path":"live2d_models/shizuku/assets/snd/shake_01.mp3","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/live2d_models/shizuku/assets/snd/tapBody_00.mp3","path":"live2d_models/shizuku/assets/snd/tapBody_00.mp3","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/live2d_models/shizuku/assets/snd/tapBody_01.mp3","path":"live2d_models/shizuku/assets/snd/tapBody_01.mp3","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/live2d_models/shizuku/assets/snd/tapBody_02.mp3","path":"live2d_models/shizuku/assets/snd/tapBody_02.mp3","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/live2d_models/tororo/assets/moc/tororo.moc","path":"live2d_models/tororo/assets/moc/tororo.moc","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/live2d_models/tororo/assets/mtn/00_idle.mtn","path":"live2d_models/tororo/assets/mtn/00_idle.mtn","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/live2d_models/tororo/assets/mtn/01.mtn","path":"live2d_models/tororo/assets/mtn/01.mtn","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/live2d_models/tororo/assets/mtn/02.mtn","path":"live2d_models/tororo/assets/mtn/02.mtn","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/live2d_models/tororo/assets/mtn/03.mtn","path":"live2d_models/tororo/assets/mtn/03.mtn","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/live2d_models/tororo/assets/mtn/05.mtn","path":"live2d_models/tororo/assets/mtn/05.mtn","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/live2d_models/tororo/assets/mtn/04.mtn","path":"live2d_models/tororo/assets/mtn/04.mtn","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/live2d_models/tororo/assets/mtn/06.mtn","path":"live2d_models/tororo/assets/mtn/06.mtn","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/live2d_models/tororo/assets/mtn/07.mtn","path":"live2d_models/tororo/assets/mtn/07.mtn","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/live2d_models/tororo/assets/mtn/08.mtn","path":"live2d_models/tororo/assets/mtn/08.mtn","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/live2d_models/tsumiki/assets/exp/F01.exp.json","path":"live2d_models/tsumiki/assets/exp/F01.exp.json","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/live2d_models/tsumiki/assets/exp/F02.exp.json","path":"live2d_models/tsumiki/assets/exp/F02.exp.json","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/live2d_models/tsumiki/assets/exp/F03.exp.json","path":"live2d_models/tsumiki/assets/exp/F03.exp.json","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/live2d_models/tsumiki/assets/exp/F04.exp.json","path":"live2d_models/tsumiki/assets/exp/F04.exp.json","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/live2d_models/tsumiki/assets/exp/F05.exp.json","path":"live2d_models/tsumiki/assets/exp/F05.exp.json","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/live2d_models/tsumiki/assets/exp/F06.exp.json","path":"live2d_models/tsumiki/assets/exp/F06.exp.json","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/live2d_models/tsumiki/assets/exp/F07.exp.json","path":"live2d_models/tsumiki/assets/exp/F07.exp.json","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/live2d_models/tsumiki/assets/exp/F08.exp.json","path":"live2d_models/tsumiki/assets/exp/F08.exp.json","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/live2d_models/tsumiki/assets/exp/F09.exp.json","path":"live2d_models/tsumiki/assets/exp/F09.exp.json","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/live2d_models/tsumiki/assets/exp/F10.exp.json","path":"live2d_models/tsumiki/assets/exp/F10.exp.json","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/live2d_models/tsumiki/assets/moc/tsumiki.moc","path":"live2d_models/tsumiki/assets/moc/tsumiki.moc","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/live2d_models/tsumiki/assets/mtn/P01.mtn","path":"live2d_models/tsumiki/assets/mtn/P01.mtn","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/live2d_models/tsumiki/assets/mtn/tsumiki_idle_01.mtn","path":"live2d_models/tsumiki/assets/mtn/tsumiki_idle_01.mtn","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/live2d_models/tsumiki/assets/mtn/tsumiki_m_01.mtn","path":"live2d_models/tsumiki/assets/mtn/tsumiki_m_01.mtn","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/live2d_models/tsumiki/assets/mtn/tsumiki_m_01_df.mtn","path":"live2d_models/tsumiki/assets/mtn/tsumiki_m_01_df.mtn","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/live2d_models/tsumiki/assets/mtn/tsumiki_m_02.mtn","path":"live2d_models/tsumiki/assets/mtn/tsumiki_m_02.mtn","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/live2d_models/tsumiki/assets/mtn/tsumiki_m_03.mtn","path":"live2d_models/tsumiki/assets/mtn/tsumiki_m_03.mtn","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/live2d_models/tsumiki/assets/mtn/tsumiki_m_04.mtn","path":"live2d_models/tsumiki/assets/mtn/tsumiki_m_04.mtn","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/live2d_models/tsumiki/assets/mtn/tsumiki_m_05.mtn","path":"live2d_models/tsumiki/assets/mtn/tsumiki_m_05.mtn","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/live2d_models/tsumiki/assets/mtn/tsumiki_m_06.mtn","path":"live2d_models/tsumiki/assets/mtn/tsumiki_m_06.mtn","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/live2d_models/tsumiki/assets/mtn/tsumiki_m_07.mtn","path":"live2d_models/tsumiki/assets/mtn/tsumiki_m_07.mtn","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/live2d_models/tsumiki/assets/mtn/tsumiki_m_08.mtn","path":"live2d_models/tsumiki/assets/mtn/tsumiki_m_08.mtn","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/live2d_models/tsumiki/assets/mtn/tsumiki_m_09.mtn","path":"live2d_models/tsumiki/assets/mtn/tsumiki_m_09.mtn","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/live2d_models/tsumiki/assets/mtn/tsumiki_m_10.mtn","path":"live2d_models/tsumiki/assets/mtn/tsumiki_m_10.mtn","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/live2d_models/tsumiki/assets/mtn/tsumiki_m_11.mtn","path":"live2d_models/tsumiki/assets/mtn/tsumiki_m_11.mtn","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/live2d_models/tsumiki/assets/mtn/tsumiki_m_12.mtn","path":"live2d_models/tsumiki/assets/mtn/tsumiki_m_12.mtn","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/live2d_models/tsumiki/assets/mtn/tsumiki_m_13.mtn","path":"live2d_models/tsumiki/assets/mtn/tsumiki_m_13.mtn","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/live2d_models/tsumiki/assets/mtn/tsumiki_m_14.mtn","path":"live2d_models/tsumiki/assets/mtn/tsumiki_m_14.mtn","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/live2d_models/tsumiki/assets/mtn/tsumiki_m_15.mtn","path":"live2d_models/tsumiki/assets/mtn/tsumiki_m_15.mtn","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/live2d_models/tsumiki/assets/mtn/tsumiki_m_16.mtn","path":"live2d_models/tsumiki/assets/mtn/tsumiki_m_16.mtn","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/live2d_models/tsumiki/assets/mtn/tsumiki_m_18.mtn","path":"live2d_models/tsumiki/assets/mtn/tsumiki_m_18.mtn","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/live2d_models/tsumiki/assets/mtn/tsumiki_m_17.mtn","path":"live2d_models/tsumiki/assets/mtn/tsumiki_m_17.mtn","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/live2d_models/tsumiki/assets/mtn/tsumiki_m_19.mtn","path":"live2d_models/tsumiki/assets/mtn/tsumiki_m_19.mtn","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/live2d_models/tsumiki/assets/mtn/tsumiki_m_20.mtn","path":"live2d_models/tsumiki/assets/mtn/tsumiki_m_20.mtn","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/live2d_models/tsumiki/assets/mtn/tsumiki_m_21.mtn","path":"live2d_models/tsumiki/assets/mtn/tsumiki_m_21.mtn","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/live2d_models/tsumiki/assets/mtn/tsumiki_m_22.mtn","path":"live2d_models/tsumiki/assets/mtn/tsumiki_m_22.mtn","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/live2d_models/tsumiki/assets/mtn/tsumiki_m_23.mtn","path":"live2d_models/tsumiki/assets/mtn/tsumiki_m_23.mtn","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/live2d_models/tsumiki/assets/mtn/tsumiki_m_24.mtn","path":"live2d_models/tsumiki/assets/mtn/tsumiki_m_24.mtn","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/live2d_models/unitychan/assets/moc/unitychan.moc","path":"live2d_models/unitychan/assets/moc/unitychan.moc","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/live2d_models/unitychan/assets/mtn/idle_01.mtn","path":"live2d_models/unitychan/assets/mtn/idle_01.mtn","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/live2d_models/unitychan/assets/mtn/idle_02.mtn","path":"live2d_models/unitychan/assets/mtn/idle_02.mtn","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/live2d_models/unitychan/assets/mtn/m_01.mtn","path":"live2d_models/unitychan/assets/mtn/m_01.mtn","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/live2d_models/unitychan/assets/mtn/m_02.mtn","path":"live2d_models/unitychan/assets/mtn/m_02.mtn","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/live2d_models/unitychan/assets/mtn/m_03.mtn","path":"live2d_models/unitychan/assets/mtn/m_03.mtn","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/live2d_models/unitychan/assets/mtn/m_04.mtn","path":"live2d_models/unitychan/assets/mtn/m_04.mtn","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/live2d_models/unitychan/assets/mtn/m_05.mtn","path":"live2d_models/unitychan/assets/mtn/m_05.mtn","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/live2d_models/unitychan/assets/mtn/m_06.mtn","path":"live2d_models/unitychan/assets/mtn/m_06.mtn","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/live2d_models/unitychan/assets/mtn/m_07.mtn","path":"live2d_models/unitychan/assets/mtn/m_07.mtn","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/live2d_models/unitychan/assets/mtn/m_08.mtn","path":"live2d_models/unitychan/assets/mtn/m_08.mtn","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/live2d_models/unitychan/assets/mtn/m_09.mtn","path":"live2d_models/unitychan/assets/mtn/m_09.mtn","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/live2d_models/unitychan/assets/mtn/m_10.mtn","path":"live2d_models/unitychan/assets/mtn/m_10.mtn","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/live2d_models/unitychan/assets/mtn/m_11.mtn","path":"live2d_models/unitychan/assets/mtn/m_11.mtn","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/live2d_models/unitychan/assets/mtn/m_12.mtn","path":"live2d_models/unitychan/assets/mtn/m_12.mtn","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/live2d_models/unitychan/assets/mtn/m_13.mtn","path":"live2d_models/unitychan/assets/mtn/m_13.mtn","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/live2d_models/unitychan/assets/mtn/m_14.mtn","path":"live2d_models/unitychan/assets/mtn/m_14.mtn","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/live2d_models/wanko/assets/moc/wanko.moc","path":"live2d_models/wanko/assets/moc/wanko.moc","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/live2d_models/wanko/assets/mtn/idle_01.mtn","path":"live2d_models/wanko/assets/mtn/idle_01.mtn","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/live2d_models/wanko/assets/mtn/idle_02.mtn","path":"live2d_models/wanko/assets/mtn/idle_02.mtn","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/live2d_models/wanko/assets/mtn/idle_03.mtn","path":"live2d_models/wanko/assets/mtn/idle_03.mtn","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/live2d_models/wanko/assets/mtn/idle_04.mtn","path":"live2d_models/wanko/assets/mtn/idle_04.mtn","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/live2d_models/wanko/assets/mtn/shake_01.mtn","path":"live2d_models/wanko/assets/mtn/shake_01.mtn","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/live2d_models/wanko/assets/mtn/shake_02.mtn","path":"live2d_models/wanko/assets/mtn/shake_02.mtn","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/live2d_models/wanko/assets/mtn/touch_01.mtn","path":"live2d_models/wanko/assets/mtn/touch_01.mtn","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/live2d_models/wanko/assets/mtn/touch_02.mtn","path":"live2d_models/wanko/assets/mtn/touch_02.mtn","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/live2d_models/wanko/assets/mtn/touch_03.mtn","path":"live2d_models/wanko/assets/mtn/touch_03.mtn","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/live2d_models/wanko/assets/mtn/touch_04.mtn","path":"live2d_models/wanko/assets/mtn/touch_04.mtn","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/live2d_models/wanko/assets/mtn/touch_05.mtn","path":"live2d_models/wanko/assets/mtn/touch_05.mtn","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/live2d_models/wanko/assets/mtn/touch_06.mtn","path":"live2d_models/wanko/assets/mtn/touch_06.mtn","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/live2d_models/z16/assets/exp/f00.exp.json","path":"live2d_models/z16/assets/exp/f00.exp.json","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/live2d_models/z16/assets/moc/z16.moc","path":"live2d_models/z16/assets/moc/z16.moc","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/live2d_models/z16/assets/mtn/idle.mtn","path":"live2d_models/z16/assets/mtn/idle.mtn","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/live2d_models/chitose/assets/moc/chitose.2048/texture_00.png","path":"live2d_models/chitose/assets/moc/chitose.2048/texture_00.png","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/live2d_models/epsilon2_1/assets/moc/Epsilon2.1.2048/texture_00.png","path":"live2d_models/epsilon2_1/assets/moc/Epsilon2.1.2048/texture_00.png","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/live2d_models/gf/assets/moc/Gantzert_Felixander.2048/texture_00.png","path":"live2d_models/gf/assets/moc/Gantzert_Felixander.2048/texture_00.png","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/live2d_models/gf/assets/moc/Gantzert_Felixander.2048/texture_01.png","path":"live2d_models/gf/assets/moc/Gantzert_Felixander.2048/texture_01.png","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/live2d_models/gf/assets/moc/Gantzert_Felixander.2048/texture_02.png","path":"live2d_models/gf/assets/moc/Gantzert_Felixander.2048/texture_02.png","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/live2d_models/gf/assets/moc/Gantzert_Felixander.2048/texture_03.png","path":"live2d_models/gf/assets/moc/Gantzert_Felixander.2048/texture_03.png","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/live2d_models/gf/assets/moc/Gantzert_Felixander.2048/texture_04.png","path":"live2d_models/gf/assets/moc/Gantzert_Felixander.2048/texture_04.png","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/live2d_models/gf/assets/moc/Gantzert_Felixander.2048/texture_05.png","path":"live2d_models/gf/assets/moc/Gantzert_Felixander.2048/texture_05.png","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/live2d_models/gf/assets/moc/Gantzert_Felixander.2048/texture_06.png","path":"live2d_models/gf/assets/moc/Gantzert_Felixander.2048/texture_06.png","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/live2d_models/haruto/assets/moc/haruto.2048/texture_00.png","path":"live2d_models/haruto/assets/moc/haruto.2048/texture_00.png","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/live2d_models/haru/02/assets/exp/f01.exp.json","path":"live2d_models/haru/02/assets/exp/f01.exp.json","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/live2d_models/haru/02/assets/exp/f02.exp.json","path":"live2d_models/haru/02/assets/exp/f02.exp.json","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/live2d_models/haru/02/assets/exp/f03.exp.json","path":"live2d_models/haru/02/assets/exp/f03.exp.json","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/live2d_models/haru/02/assets/exp/f04.exp.json","path":"live2d_models/haru/02/assets/exp/f04.exp.json","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/live2d_models/haru/02/assets/exp/f05.exp.json","path":"live2d_models/haru/02/assets/exp/f05.exp.json","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/live2d_models/haru/02/assets/exp/f06.exp.json","path":"live2d_models/haru/02/assets/exp/f06.exp.json","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/live2d_models/haru/02/assets/exp/f07.exp.json","path":"live2d_models/haru/02/assets/exp/f07.exp.json","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/live2d_models/haru/02/assets/exp/f08.exp.json","path":"live2d_models/haru/02/assets/exp/f08.exp.json","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/live2d_models/haru/02/assets/moc/haru02.moc","path":"live2d_models/haru/02/assets/moc/haru02.moc","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/live2d_models/haru/02/assets/mtn/flickHead_00.mtn","path":"live2d_models/haru/02/assets/mtn/flickHead_00.mtn","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/live2d_models/haru/02/assets/mtn/idle_00.mtn","path":"live2d_models/haru/02/assets/mtn/idle_00.mtn","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/live2d_models/haru/02/assets/mtn/idle_01.mtn","path":"live2d_models/haru/02/assets/mtn/idle_01.mtn","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/live2d_models/haru/02/assets/mtn/idle_02.mtn","path":"live2d_models/haru/02/assets/mtn/idle_02.mtn","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/live2d_models/haru/02/assets/mtn/pinchIn_00.mtn","path":"live2d_models/haru/02/assets/mtn/pinchIn_00.mtn","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/live2d_models/haru/02/assets/mtn/pinchOut_00.mtn","path":"live2d_models/haru/02/assets/mtn/pinchOut_00.mtn","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/live2d_models/haru/02/assets/mtn/shake_00.mtn","path":"live2d_models/haru/02/assets/mtn/shake_00.mtn","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/live2d_models/haru/02/assets/mtn/tapBody_00.mtn","path":"live2d_models/haru/02/assets/mtn/tapBody_00.mtn","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/live2d_models/haru/02/assets/mtn/tapBody_01.mtn","path":"live2d_models/haru/02/assets/mtn/tapBody_01.mtn","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/live2d_models/haru/02/assets/mtn/tapBody_02.mtn","path":"live2d_models/haru/02/assets/mtn/tapBody_02.mtn","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/live2d_models/haru/02/assets/mtn/tapBody_03.mtn","path":"live2d_models/haru/02/assets/mtn/tapBody_03.mtn","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/live2d_models/haru/02/assets/mtn/tapBody_04.mtn","path":"live2d_models/haru/02/assets/mtn/tapBody_04.mtn","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/live2d_models/haru/02/assets/mtn/tapBody_05.mtn","path":"live2d_models/haru/02/assets/mtn/tapBody_05.mtn","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/live2d_models/haru/02/assets/mtn/tapBody_06.mtn","path":"live2d_models/haru/02/assets/mtn/tapBody_06.mtn","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/live2d_models/haru/02/assets/mtn/tapBody_07.mtn","path":"live2d_models/haru/02/assets/mtn/tapBody_07.mtn","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/live2d_models/haru/02/assets/mtn/tapBody_08.mtn","path":"live2d_models/haru/02/assets/mtn/tapBody_08.mtn","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/live2d_models/haru/02/assets/mtn/tapBody_09.mtn","path":"live2d_models/haru/02/assets/mtn/tapBody_09.mtn","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/live2d_models/haru/02/assets/snd/flickHead_00.mp3","path":"live2d_models/haru/02/assets/snd/flickHead_00.mp3","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/live2d_models/haru/02/assets/snd/pinchIn_00.mp3","path":"live2d_models/haru/02/assets/snd/pinchIn_00.mp3","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/live2d_models/haru/02/assets/snd/pinchOut_00.mp3","path":"live2d_models/haru/02/assets/snd/pinchOut_00.mp3","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/live2d_models/haru/02/assets/snd/shake_00.mp3","path":"live2d_models/haru/02/assets/snd/shake_00.mp3","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/live2d_models/haru/02/assets/snd/tapBody_00.mp3","path":"live2d_models/haru/02/assets/snd/tapBody_00.mp3","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/live2d_models/haru/02/assets/snd/tapBody_01.mp3","path":"live2d_models/haru/02/assets/snd/tapBody_01.mp3","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/live2d_models/haru/02/assets/snd/tapBody_02.mp3","path":"live2d_models/haru/02/assets/snd/tapBody_02.mp3","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/live2d_models/haru/01/assets/exp/f01.exp.json","path":"live2d_models/haru/01/assets/exp/f01.exp.json","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/live2d_models/haru/01/assets/exp/f02.exp.json","path":"live2d_models/haru/01/assets/exp/f02.exp.json","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/live2d_models/haru/01/assets/exp/f03.exp.json","path":"live2d_models/haru/01/assets/exp/f03.exp.json","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/live2d_models/haru/01/assets/exp/f04.exp.json","path":"live2d_models/haru/01/assets/exp/f04.exp.json","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/live2d_models/haru/01/assets/exp/f05.exp.json","path":"live2d_models/haru/01/assets/exp/f05.exp.json","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/live2d_models/haru/01/assets/exp/f06.exp.json","path":"live2d_models/haru/01/assets/exp/f06.exp.json","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/live2d_models/haru/01/assets/exp/f07.exp.json","path":"live2d_models/haru/01/assets/exp/f07.exp.json","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/live2d_models/haru/01/assets/exp/f08.exp.json","path":"live2d_models/haru/01/assets/exp/f08.exp.json","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/live2d_models/haru/01/assets/moc/haru01.moc","path":"live2d_models/haru/01/assets/moc/haru01.moc","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/live2d_models/haru/01/assets/mtn/flickHead_00.mtn","path":"live2d_models/haru/01/assets/mtn/flickHead_00.mtn","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/live2d_models/haru/01/assets/mtn/idle_00.mtn","path":"live2d_models/haru/01/assets/mtn/idle_00.mtn","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/live2d_models/haru/01/assets/mtn/idle_01.mtn","path":"live2d_models/haru/01/assets/mtn/idle_01.mtn","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/live2d_models/haru/01/assets/mtn/idle_02.mtn","path":"live2d_models/haru/01/assets/mtn/idle_02.mtn","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/live2d_models/haru/01/assets/mtn/pinchIn_00.mtn","path":"live2d_models/haru/01/assets/mtn/pinchIn_00.mtn","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/live2d_models/haru/01/assets/mtn/pinchOut_00.mtn","path":"live2d_models/haru/01/assets/mtn/pinchOut_00.mtn","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/live2d_models/haru/01/assets/mtn/shake_00.mtn","path":"live2d_models/haru/01/assets/mtn/shake_00.mtn","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/live2d_models/haru/01/assets/mtn/tapBody_00.mtn","path":"live2d_models/haru/01/assets/mtn/tapBody_00.mtn","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/live2d_models/haru/01/assets/mtn/tapBody_01.mtn","path":"live2d_models/haru/01/assets/mtn/tapBody_01.mtn","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/live2d_models/haru/01/assets/mtn/tapBody_02.mtn","path":"live2d_models/haru/01/assets/mtn/tapBody_02.mtn","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/live2d_models/haru/01/assets/mtn/tapBody_03.mtn","path":"live2d_models/haru/01/assets/mtn/tapBody_03.mtn","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/live2d_models/haru/01/assets/mtn/tapBody_04.mtn","path":"live2d_models/haru/01/assets/mtn/tapBody_04.mtn","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/live2d_models/haru/01/assets/mtn/tapBody_05.mtn","path":"live2d_models/haru/01/assets/mtn/tapBody_05.mtn","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/live2d_models/haru/01/assets/mtn/tapBody_06.mtn","path":"live2d_models/haru/01/assets/mtn/tapBody_06.mtn","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/live2d_models/haru/01/assets/mtn/tapBody_07.mtn","path":"live2d_models/haru/01/assets/mtn/tapBody_07.mtn","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/live2d_models/haru/01/assets/mtn/tapBody_08.mtn","path":"live2d_models/haru/01/assets/mtn/tapBody_08.mtn","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/live2d_models/haru/01/assets/mtn/tapBody_09.mtn","path":"live2d_models/haru/01/assets/mtn/tapBody_09.mtn","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/live2d_models/haru/01/assets/snd/flickHead_00.mp3","path":"live2d_models/haru/01/assets/snd/flickHead_00.mp3","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/live2d_models/haru/01/assets/snd/pinchIn_00.mp3","path":"live2d_models/haru/01/assets/snd/pinchIn_00.mp3","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/live2d_models/haru/01/assets/snd/pinchOut_00.mp3","path":"live2d_models/haru/01/assets/snd/pinchOut_00.mp3","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/live2d_models/haru/01/assets/snd/shake_00.mp3","path":"live2d_models/haru/01/assets/snd/shake_00.mp3","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/live2d_models/haru/01/assets/snd/tapBody_00.mp3","path":"live2d_models/haru/01/assets/snd/tapBody_00.mp3","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/live2d_models/haru/01/assets/snd/tapBody_01.mp3","path":"live2d_models/haru/01/assets/snd/tapBody_01.mp3","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/live2d_models/haru/01/assets/snd/tapBody_02.mp3","path":"live2d_models/haru/01/assets/snd/tapBody_02.mp3","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/live2d_models/hibiki/assets/moc/hibiki.2048/texture_00.png","path":"live2d_models/hibiki/assets/moc/hibiki.2048/texture_00.png","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/live2d_models/hijiki/assets/moc/hijiki.2048/texture_00.png","path":"live2d_models/hijiki/assets/moc/hijiki.2048/texture_00.png","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/live2d_models/izumi/assets/moc/izumi_illust.1024/texture_00.png","path":"live2d_models/izumi/assets/moc/izumi_illust.1024/texture_00.png","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/live2d_models/izumi/assets/moc/izumi_illust.1024/texture_02.png","path":"live2d_models/izumi/assets/moc/izumi_illust.1024/texture_02.png","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/live2d_models/izumi/assets/moc/izumi_illust.1024/texture_01.png","path":"live2d_models/izumi/assets/moc/izumi_illust.1024/texture_01.png","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/live2d_models/izumi/assets/moc/izumi_illust.1024/texture_03.png","path":"live2d_models/izumi/assets/moc/izumi_illust.1024/texture_03.png","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/live2d_models/koharu/assets/moc/koharu.2048/texture_00.png","path":"live2d_models/koharu/assets/moc/koharu.2048/texture_00.png","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/live2d_models/miku/assets/moc/miku.2048/texture_00.png","path":"live2d_models/miku/assets/moc/miku.2048/texture_00.png","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/live2d_models/ni-j/assets/moc/ni-j.2048/texture_00.png","path":"live2d_models/ni-j/assets/moc/ni-j.2048/texture_00.png","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/live2d_models/ni-j/assets/moc/ni-j.2048/texture_01.png","path":"live2d_models/ni-j/assets/moc/ni-j.2048/texture_01.png","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/live2d_models/nico/assets/moc/nico.2048/texture_00.png","path":"live2d_models/nico/assets/moc/nico.2048/texture_00.png","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/live2d_models/nico/assets/moc/nico.2048/texture_01.png","path":"live2d_models/nico/assets/moc/nico.2048/texture_01.png","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/live2d_models/nico/assets/moc/nico.2048/texture_02.png","path":"live2d_models/nico/assets/moc/nico.2048/texture_02.png","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/live2d_models/nipsilon/assets/moc/nipsilon.2048/texture_00.png","path":"live2d_models/nipsilon/assets/moc/nipsilon.2048/texture_00.png","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/live2d_models/nipsilon/assets/moc/nipsilon.2048/texture_01.png","path":"live2d_models/nipsilon/assets/moc/nipsilon.2048/texture_01.png","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/live2d_models/nipsilon/assets/moc/nipsilon.2048/texture_02.png","path":"live2d_models/nipsilon/assets/moc/nipsilon.2048/texture_02.png","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/live2d_models/nietzsche/assets/moc/nietzsche.2048/texture_00.png","path":"live2d_models/nietzsche/assets/moc/nietzsche.2048/texture_00.png","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/live2d_models/nietzsche/assets/moc/nietzsche.2048/texture_01.png","path":"live2d_models/nietzsche/assets/moc/nietzsche.2048/texture_01.png","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/live2d_models/nietzsche/assets/moc/nietzsche.2048/texture_02.png","path":"live2d_models/nietzsche/assets/moc/nietzsche.2048/texture_02.png","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/live2d_models/nito/assets/moc/nito.2048/texture_00.png","path":"live2d_models/nito/assets/moc/nito.2048/texture_00.png","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/live2d_models/nito/assets/moc/nito.2048/texture_01.png","path":"live2d_models/nito/assets/moc/nito.2048/texture_01.png","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/live2d_models/shizuku/assets/moc/shizuku.1024/texture_00.png","path":"live2d_models/shizuku/assets/moc/shizuku.1024/texture_00.png","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/live2d_models/shizuku/assets/moc/shizuku.1024/texture_01.png","path":"live2d_models/shizuku/assets/moc/shizuku.1024/texture_01.png","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/live2d_models/shizuku/assets/moc/shizuku.1024/texture_02.png","path":"live2d_models/shizuku/assets/moc/shizuku.1024/texture_02.png","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/live2d_models/shizuku/assets/moc/shizuku.1024/texture_03.png","path":"live2d_models/shizuku/assets/moc/shizuku.1024/texture_03.png","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/live2d_models/shizuku/assets/moc/shizuku.1024/texture_04.png","path":"live2d_models/shizuku/assets/moc/shizuku.1024/texture_04.png","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/live2d_models/shizuku/assets/moc/shizuku.1024/texture_05.png","path":"live2d_models/shizuku/assets/moc/shizuku.1024/texture_05.png","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/live2d_models/tororo/assets/moc/tororo.2048/texture_00.png","path":"live2d_models/tororo/assets/moc/tororo.2048/texture_00.png","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/live2d_models/tsumiki/assets/moc/tsumiki.2048/texture_00.png","path":"live2d_models/tsumiki/assets/moc/tsumiki.2048/texture_00.png","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/live2d_models/tsumiki/assets/moc/tsumiki.2048/texture_01.png","path":"live2d_models/tsumiki/assets/moc/tsumiki.2048/texture_01.png","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/live2d_models/unitychan/assets/moc/unitychan.2048/texture_00.png","path":"live2d_models/unitychan/assets/moc/unitychan.2048/texture_00.png","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/live2d_models/wanko/assets/moc/wanko.1024/texture_00.png","path":"live2d_models/wanko/assets/moc/wanko.1024/texture_00.png","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/live2d_models/z16/assets/moc/z16.1024/texture_00.png","path":"live2d_models/z16/assets/moc/z16.1024/texture_00.png","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/live2d_models/z16/assets/moc/z16.256/texture_00.png","path":"live2d_models/z16/assets/moc/z16.256/texture_00.png","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/live2d_models/z16/assets/moc/z16.512/texture_00.png","path":"live2d_models/z16/assets/moc/z16.512/texture_00.png","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/live2d_models/haru/02/assets/moc/haru02.1024/texture_02.png","path":"live2d_models/haru/02/assets/moc/haru02.1024/texture_02.png","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/live2d_models/haru/02/assets/moc/haru02.1024/texture_00.png","path":"live2d_models/haru/02/assets/moc/haru02.1024/texture_00.png","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/live2d_models/haru/02/assets/moc/haru02.1024/texture_01.png","path":"live2d_models/haru/02/assets/moc/haru02.1024/texture_01.png","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/live2d_models/haru/01/assets/moc/haru01.1024/texture_00.png","path":"live2d_models/haru/01/assets/moc/haru01.1024/texture_00.png","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/live2d_models/haru/01/assets/moc/haru01.1024/texture_01.png","path":"live2d_models/haru/01/assets/moc/haru01.1024/texture_01.png","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/live2d_models/haru/01/assets/moc/haru01.1024/texture_02.png","path":"live2d_models/haru/01/assets/moc/haru01.1024/texture_02.png","modified":0,"renderable":1}],"Cache":[{"_id":"source/CNAME","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1627548597000},{"_id":"source/.DS_Store","hash":"1f0f78f0794fac6b203394ba6ba6ad1f46fef675","modified":1628301156000},{"_id":"source/LICENSE.txt","hash":"760f751686112e986740b3f84b658a0906334276","modified":1627469504000},{"_id":"source/_posts/.DS_Store","hash":"040d64df6aa7023bb21d0126778507125fa84757","modified":1628308595000},{"_id":"source/_posts/Arthas安装使用.md","hash":"5bf51efbb83ec9528c454189911bf7e636d8a726","modified":1628312171000},{"_id":"source/_posts/JsonFormatTool.md","hash":"cd51d8d1c5eb957b74139a3715a5f3baf2df3b82","modified":1627727299000},{"_id":"source/_posts/Lockbox.md","hash":"8b93030df30326da1914b3311832745cf6a2325e","modified":1627727308000},{"_id":"source/_posts/awk命令使用介绍.md","hash":"82f7f4113994a2a5b9b3746dbbded15dd32371e4","modified":1627726204000},{"_id":"source/_posts/hello-world.md","hash":"7d98d6592de80fdcd2949bd7401cec12afd98cdf","modified":1627447525000},{"_id":"source/_posts/hexo命令说明.md","hash":"082fca362a3d88dd6802f04a392645ff3c2384a0","modified":1628314215000},{"_id":"source/_posts/swagger2word.md","hash":"c7c5c7988d6520a1369674a041e0fb553c7fdb89","modified":1627727290000},{"_id":"source/_posts/Java诊断工具Arthas入门教程/.DS_Store","hash":"de953d6341d321f3733458f7389e0fc226eb14bb","modified":1628300574000},{"_id":"source/_posts/Java诊断工具Arthas入门教程/Arthas-基础教程.md","hash":"467ba2610b807896ee692723f987a81bf0bbdb4a","modified":1628313593000},{"_id":"source/_posts/Java诊断工具Arthas最佳实践/ArthasHttpAPI案例.md","hash":"4381bb0e5144f9e35ca4688cb4e40316ad97bdaa","modified":1628314378000},{"_id":"source/_posts/Java诊断工具Arthas入门教程/Arthas-进阶.md","hash":"8f0dd938a827aef2b9ffb6d5319e6093ba462c03","modified":1628314245000},{"_id":"source/_posts/Java诊断工具Arthas最佳实践/ArthasWebConsole案例.md","hash":"05a0e5ae49c181f8031454a509acc45fa2ae801a","modified":1628314382000},{"_id":"source/_posts/Java诊断工具Arthas最佳实践/Arthas动态更新应用LoggerLevel案例.md","hash":"320d6fead5b24f4dcfda7a48531e8f1076e1f985","modified":1628314390000},{"_id":"source/_posts/Java诊断工具Arthas最佳实践/Arthas后台异步任务案例.md","hash":"3eec440a0ce3eab454ad11565daebdf182f2ca64","modified":1628314394000},{"_id":"source/_posts/Java诊断工具Arthas最佳实践/Arthas执行结果存日志案例.md","hash":"f2a50b2abcc63b9ec2d68757c47bb497951a803f","modified":1628314398000},{"_id":"source/_posts/Java诊断工具Arthas最佳实践/Arthas排查HTTP请求返回401案例.md","hash":"c348ac480c17cb5940c7d22a9e372c921ed24d72","modified":1628314402000},{"_id":"source/_posts/Java诊断工具Arthas最佳实践/Arthas排查HTTP请求返回404案例.md","hash":"52557121137518a50474207cb5f9c5ec7206e895","modified":1628314405000},{"_id":"source/_posts/Java诊断工具Arthas最佳实践/Arthas排查logger冲突问题案例.md","hash":"f484d6c1983be8c88010002fe514d9faaa985750","modified":1628314409000},{"_id":"source/_posts/Java诊断工具Arthas最佳实践/Arthas排查函数调用异常案例.md","hash":"3787e35d46eac596ed1726c202bfb9054cbe0483","modified":1628314413000},{"_id":"source/_posts/Java诊断工具Arthas最佳实践/Arthas查找TopN线程案例.md","hash":"a0f11e9d34172880621f951cf0d1a4c01be8aa45","modified":1628314416000},{"_id":"source/_posts/Java诊断工具Arthas最佳实践/Arthas热更新代码案例.md","hash":"6e2fdafb818a0857e0400e9257e90d589126735f","modified":1628314422000},{"_id":"source/_posts/Java诊断工具Arthas最佳实践/Arthas获取Spring上下文案例.md","hash":"102b33297ddbcbb77fcdea90781f9edc429e95c7","modified":1628314429000},{"_id":"source/_posts/Java诊断工具Arthas最佳实践/学习Arthasarthas-boot支持的参数案例.md","hash":"b8c3e7bd02284849783385e714511c02cf04d0ab","modified":1628314435000},{"_id":"source/_posts/Java诊断工具Arthas最佳实践/学习Arthasclassloader案例.md","hash":"faeb7fed7c436eff5eb04bdf96a2abc290ddd315","modified":1628314439000},{"_id":"source/_posts/Java诊断工具Arthas高级命令教程/Arthasdashboard命令.md","hash":"ad9ea8552a93329036271c2fa70e63de933f47dd","modified":1628314450000},{"_id":"source/_posts/Java诊断工具Arthas高级命令教程/Arthasclassloader命令.md","hash":"c45bf1f511898ce66040e8ee2d05116193a14164","modified":1628314446000},{"_id":"source/_posts/Java诊断工具Arthas高级命令教程/Arthasheapdump命令.md","hash":"156bd103f272c276c1a8433c57bb7f3abce654e6","modified":1628314469000},{"_id":"source/_posts/Java诊断工具Arthas高级命令教程/Arthasgetstatic命令.md","hash":"037842ee4a5ca0c683086fccf12cf6cbafe42357","modified":1628314462000},{"_id":"source/_posts/Java诊断工具Arthas高级命令教程/Arthasdump命令.md","hash":"b6264ef8a82a2924cc3266bbc90e20b563a04976","modified":1628314454000},{"_id":"source/_posts/Java诊断工具Arthas高级命令教程/Arthasjad命令.md","hash":"86050013104963ec16ec5c7f2b09b5038cc36fb6","modified":1628314473000},{"_id":"source/_posts/Java诊断工具Arthas高级命令教程/Arthasjvm命令.md","hash":"d314879a2545bea1146637467ad3079ebfbe92d1","modified":1628314477000},{"_id":"source/_posts/Java诊断工具Arthas高级命令教程/Arthaslogger命令.md","hash":"fafba66e441a765e1fa6f385019c70504c30c8f1","modified":1628314480000},{"_id":"source/_posts/Java诊断工具Arthas高级命令教程/Arthasmbean命令.md","hash":"7842018f15112a4f564f3068d6c6f5cc8f4a29bb","modified":1628314484000},{"_id":"source/_posts/Java诊断工具Arthas高级命令教程/Arthasmc-redefine命令.md","hash":"23f1b2885240af5f98f0eea133d299463ddc778d","modified":1628314487000},{"_id":"source/_posts/Java诊断工具Arthas高级命令教程/Arthasmc-retransform命令.md","hash":"1ac7bf36e3722385912e7556c80cde137cdb3757","modified":1628314491000},{"_id":"source/_posts/Java诊断工具Arthas高级命令教程/Arthasmonitor命令.md","hash":"16bc7d2ff76b728333abb9eab9898a156de55161","modified":1628314495000},{"_id":"source/_posts/Java诊断工具Arthas高级命令教程/Arthasognl命令.md","hash":"95ce0dc3ae0bc158d8e742481f6b970e22259870","modified":1628314499000},{"_id":"source/_posts/Java诊断工具Arthas高级命令教程/Arthasperfcounter命令.md","hash":"295f66da500afbb494f44a0ad61f5f59365d1120","modified":1628314503000},{"_id":"source/_posts/Java诊断工具Arthas高级命令教程/Arthasprofiler命令.md","hash":"e3ebf62eaff14105354fb1fc69baed2edff6c5a0","modified":1628314507000},{"_id":"source/_posts/Java诊断工具Arthas高级命令教程/Arthassc命令.md","hash":"3103dcf14d56da12aaf75c9d0c6e8b42a53c64d9","modified":1628314511000},{"_id":"source/_posts/Java诊断工具Arthas高级命令教程/Arthassm命令.md","hash":"16c2a8654b17034b0da3ce54763b1210d145c4c3","modified":1628314515000},{"_id":"source/_posts/Java诊断工具Arthas高级命令教程/Arthassysenv命令.md","hash":"65031054abae662c2a79f286e94a66591f4051d1","modified":1628314523000},{"_id":"source/_posts/Java诊断工具Arthas高级命令教程/Arthasstack命令.md","hash":"bafcc12d8162afe2fce90b2a1f383f107a2e553e","modified":1628314519000},{"_id":"source/_posts/Java诊断工具Arthas高级命令教程/Arthassysprop命令.md","hash":"066f358e80bde573f5030d3fc035eb2af69423d3","modified":1628314526000},{"_id":"source/_posts/Java诊断工具Arthas高级命令教程/Arthasthread命令.md","hash":"1f36a3b002f627f5ad50e1a588af5f6b1fd88849","modified":1628314530000},{"_id":"source/_posts/Java诊断工具Arthas高级命令教程/Arthastrace命令.md","hash":"9e0dce0741ae7a6a98d76b10060eca942dd873e9","modified":1628314533000},{"_id":"source/_posts/Java诊断工具Arthas高级命令教程/Arthastt命令.md","hash":"0600bcbbfba53618b51898af07f0f8af790acaa5","modified":1628314537000},{"_id":"source/_posts/Java诊断工具Arthas高级命令教程/Arthasvmoption命令.md","hash":"8db7c2d7a5a97511c9d959b13c1e90337767c456","modified":1628314540000},{"_id":"source/_posts/Java诊断工具Arthas高级命令教程/Arthaswatch命令.md","hash":"8bc89c3cc38340b2846eace126e129c61ba61de9","modified":1628314544000},{"_id":"source/_posts/JsonFormatTool/JsonFormatTool-02.png","hash":"78bc89af84fa504c39740f736a88053d53b5084a","modified":1627475878000},{"_id":"source/_posts/JsonFormatTool/JsonFormatTool-01.png","hash":"123cc7e453080269ec4ca21dc9d3a9152e8cb3de","modified":1627475861000},{"_id":"source/_posts/Lockbox/Lockbox-00.png","hash":"fc302f2f0b42994b983b0af28df322d4e696eeb9","modified":1627476300000},{"_id":"source/_posts/Lockbox/Lockbox-01.png","hash":"8ac3f14d4bec22ba3557bc9a463eda0f06179f69","modified":1627476276000},{"_id":"source/_posts/swagger2word/swagger2word-01.png","hash":"0a47943016439d6b57268bb38d7f6d8696b1fd39","modified":1627475927000},{"_id":"source/_posts/Java诊断工具Arthas入门教程/Arthas-进阶/O1CN01i041kW1lw0FCaSKNn_!!6000000004882-2-tps-1231-284.png","hash":"2e97b2fb3d4b1566a4e14eb536add67a049bb063","modified":1628295500000},{"_id":"source/_posts/Java诊断工具Arthas入门教程/Arthas-进阶/arthas.png","hash":"12ce7982e26f9dbcf066c045a47b687e8173228a","modified":1628295478000},{"_id":"source/_posts/Java诊断工具Arthas入门教程/Arthas-进阶/O1CN01HzatXZ1RgccrlT90M_!!6000000002141-2-tps-529-244.png","hash":"fd9ef52dd52e1534d67e889078dfc36f57cd0c20","modified":1628295484000},{"_id":"source/_posts/Java诊断工具Arthas入门教程/Arthas-基础教程/O1CN01HzatXZ1RgccrlT90M_!!6000000002141-2-tps-529-244.png","hash":"fd9ef52dd52e1534d67e889078dfc36f57cd0c20","modified":1628294915000},{"_id":"source/_posts/Java诊断工具Arthas入门教程/Arthas-基础教程/arthas.png","hash":"12ce7982e26f9dbcf066c045a47b687e8173228a","modified":1628295478000},{"_id":"source/_posts/Java诊断工具Arthas最佳实践/ArthasHttpAPI案例/O1CN01HzatXZ1RgccrlT90M_!!6000000002141-2-tps-529-244.png","hash":"fd9ef52dd52e1534d67e889078dfc36f57cd0c20","modified":1628297693000},{"_id":"source/_posts/Java诊断工具Arthas最佳实践/ArthasHttpAPI案例/arthas.png","hash":"12ce7982e26f9dbcf066c045a47b687e8173228a","modified":1628297697000},{"_id":"source/_posts/Java诊断工具Arthas最佳实践/ArthasWebConsole案例/O1CN01HzatXZ1RgccrlT90M_!!6000000002141-2-tps-529-244.png","hash":"fd9ef52dd52e1534d67e889078dfc36f57cd0c20","modified":1628298526000},{"_id":"source/_posts/Java诊断工具Arthas最佳实践/ArthasWebConsole案例/arthas.png","hash":"12ce7982e26f9dbcf066c045a47b687e8173228a","modified":1628298521000},{"_id":"source/_posts/Java诊断工具Arthas最佳实践/ArthasWebConsole案例/O1CN01i041kW1lw0FCaSKNn_!!6000000004882-2-tps-1231-284.png","hash":"2e97b2fb3d4b1566a4e14eb536add67a049bb063","modified":1628298532000},{"_id":"source/_posts/Java诊断工具Arthas最佳实践/Arthas动态更新应用LoggerLevel案例/O1CN010Qbzcz1ctPSWSZI6L_!!6000000003658-2-tps-333-182.png","hash":"4f0de13d6df2f59b0ee15dfb2a1bb2b41a24d034","modified":1628298719000},{"_id":"source/_posts/Java诊断工具Arthas最佳实践/Arthas动态更新应用LoggerLevel案例/O1CN01HzatXZ1RgccrlT90M_!!6000000002141-2-tps-529-244.png","hash":"fd9ef52dd52e1534d67e889078dfc36f57cd0c20","modified":1628298633000},{"_id":"source/_posts/Java诊断工具Arthas最佳实践/Arthas动态更新应用LoggerLevel案例/arthas.png","hash":"12ce7982e26f9dbcf066c045a47b687e8173228a","modified":1628298628000},{"_id":"source/_posts/Java诊断工具Arthas最佳实践/Arthas后台异步任务案例/O1CN01HzatXZ1RgccrlT90M_!!6000000002141-2-tps-529-244.png","hash":"fd9ef52dd52e1534d67e889078dfc36f57cd0c20","modified":1628296700000},{"_id":"source/_posts/Java诊断工具Arthas最佳实践/Arthas执行结果存日志案例/O1CN01HzatXZ1RgccrlT90M_!!6000000002141-2-tps-529-244.png","hash":"fd9ef52dd52e1534d67e889078dfc36f57cd0c20","modified":1628298133000},{"_id":"source/_posts/Java诊断工具Arthas最佳实践/Arthas后台异步任务案例/arthas.png","hash":"12ce7982e26f9dbcf066c045a47b687e8173228a","modified":1628296694000},{"_id":"source/_posts/Java诊断工具Arthas最佳实践/Arthas执行结果存日志案例/arthas.png","hash":"12ce7982e26f9dbcf066c045a47b687e8173228a","modified":1628298138000},{"_id":"source/_posts/Java诊断工具Arthas最佳实践/Arthas排查HTTP请求返回401案例/O1CN010Qbzcz1ctPSWSZI6L_!!6000000003658-2-tps-333-182.png","hash":"4f0de13d6df2f59b0ee15dfb2a1bb2b41a24d034","modified":1628298719000},{"_id":"source/_posts/Java诊断工具Arthas最佳实践/Arthas排查HTTP请求返回401案例/O1CN01HzatXZ1RgccrlT90M_!!6000000002141-2-tps-529-244.png","hash":"fd9ef52dd52e1534d67e889078dfc36f57cd0c20","modified":1628297430000},{"_id":"source/_posts/Java诊断工具Arthas最佳实践/Arthas排查HTTP请求返回401案例/arthas.png","hash":"12ce7982e26f9dbcf066c045a47b687e8173228a","modified":1628297437000},{"_id":"source/_posts/Java诊断工具Arthas最佳实践/Arthas排查HTTP请求返回404案例/O1CN010Qbzcz1ctPSWSZI6L_!!6000000003658-2-tps-333-182.png","hash":"4f0de13d6df2f59b0ee15dfb2a1bb2b41a24d034","modified":1628298719000},{"_id":"source/_posts/Java诊断工具Arthas最佳实践/Arthas排查HTTP请求返回404案例/O1CN01HzatXZ1RgccrlT90M_!!6000000002141-2-tps-529-244.png","hash":"fd9ef52dd52e1534d67e889078dfc36f57cd0c20","modified":1628297528000},{"_id":"source/_posts/Java诊断工具Arthas最佳实践/Arthas排查HTTP请求返回404案例/arthas.png","hash":"12ce7982e26f9dbcf066c045a47b687e8173228a","modified":1628297537000},{"_id":"source/_posts/Java诊断工具Arthas最佳实践/Arthas排查logger冲突问题案例/O1CN010Qbzcz1ctPSWSZI6L_!!6000000003658-2-tps-333-182.png","hash":"4f0de13d6df2f59b0ee15dfb2a1bb2b41a24d034","modified":1628298719000},{"_id":"source/_posts/Java诊断工具Arthas最佳实践/Arthas排查logger冲突问题案例/O1CN01HzatXZ1RgccrlT90M_!!6000000002141-2-tps-529-244.png","hash":"fd9ef52dd52e1534d67e889078dfc36f57cd0c20","modified":1628298026000},{"_id":"source/_posts/Java诊断工具Arthas最佳实践/Arthas排查logger冲突问题案例/arthas.png","hash":"12ce7982e26f9dbcf066c045a47b687e8173228a","modified":1628298036000},{"_id":"source/_posts/Java诊断工具Arthas最佳实践/Arthas排查函数调用异常案例/O1CN010Qbzcz1ctPSWSZI6L_!!6000000003658-2-tps-333-182.png","hash":"4f0de13d6df2f59b0ee15dfb2a1bb2b41a24d034","modified":1628298719000},{"_id":"source/_posts/Java诊断工具Arthas最佳实践/Arthas排查函数调用异常案例/O1CN01HzatXZ1RgccrlT90M_!!6000000002141-2-tps-529-244.png","hash":"fd9ef52dd52e1534d67e889078dfc36f57cd0c20","modified":1628298394000},{"_id":"source/_posts/Java诊断工具Arthas最佳实践/Arthas排查函数调用异常案例/arthas.png","hash":"12ce7982e26f9dbcf066c045a47b687e8173228a","modified":1628298399000},{"_id":"source/_posts/Java诊断工具Arthas最佳实践/Arthas热更新代码案例/O1CN010Qbzcz1ctPSWSZI6L_!!6000000003658-2-tps-333-182.png","hash":"4f0de13d6df2f59b0ee15dfb2a1bb2b41a24d034","modified":1628298719000},{"_id":"source/_posts/Java诊断工具Arthas最佳实践/Arthas热更新代码案例/O1CN01HzatXZ1RgccrlT90M_!!6000000002141-2-tps-529-244.png","hash":"fd9ef52dd52e1534d67e889078dfc36f57cd0c20","modified":1628297915000},{"_id":"source/_posts/Java诊断工具Arthas最佳实践/Arthas热更新代码案例/arthas.png","hash":"12ce7982e26f9dbcf066c045a47b687e8173228a","modified":1628297926000},{"_id":"source/_posts/Java诊断工具Arthas最佳实践/Arthas查找TopN线程案例/O1CN01HzatXZ1RgccrlT90M_!!6000000002141-2-tps-529-244.png","hash":"fd9ef52dd52e1534d67e889078dfc36f57cd0c20","modified":1628298294000},{"_id":"source/_posts/Java诊断工具Arthas最佳实践/Arthas查找TopN线程案例/arthas.png","hash":"12ce7982e26f9dbcf066c045a47b687e8173228a","modified":1628298299000},{"_id":"source/_posts/Java诊断工具Arthas最佳实践/Arthas获取Spring上下文案例/O1CN010Qbzcz1ctPSWSZI6L_!!6000000003658-2-tps-333-182.png","hash":"4f0de13d6df2f59b0ee15dfb2a1bb2b41a24d034","modified":1628298719000},{"_id":"source/_posts/Java诊断工具Arthas最佳实践/Arthas获取Spring上下文案例/arthas.png","hash":"12ce7982e26f9dbcf066c045a47b687e8173228a","modified":1628297294000},{"_id":"source/_posts/Java诊断工具Arthas最佳实践/Arthas获取Spring上下文案例/O1CN01HzatXZ1RgccrlT90M_!!6000000002141-2-tps-529-244.png","hash":"fd9ef52dd52e1534d67e889078dfc36f57cd0c20","modified":1628297300000},{"_id":"source/_posts/Java诊断工具Arthas最佳实践/学习Arthasarthas-boot支持的参数案例/arthas.png","hash":"12ce7982e26f9dbcf066c045a47b687e8173228a","modified":1628296887000},{"_id":"source/_posts/Java诊断工具Arthas最佳实践/学习Arthasclassloader案例/O1CN010Qbzcz1ctPSWSZI6L_!!6000000003658-2-tps-333-182.png","hash":"4f0de13d6df2f59b0ee15dfb2a1bb2b41a24d034","modified":1628298719000},{"_id":"source/_posts/Java诊断工具Arthas最佳实践/学习Arthasclassloader案例/arthas.png","hash":"12ce7982e26f9dbcf066c045a47b687e8173228a","modified":1628297091000},{"_id":"source/_posts/Java诊断工具Arthas最佳实践/学习Arthasclassloader案例/O1CN01HzatXZ1RgccrlT90M_!!6000000002141-2-tps-529-244.png","hash":"fd9ef52dd52e1534d67e889078dfc36f57cd0c20","modified":1628297098000},{"_id":"source/_posts/Java诊断工具Arthas高级命令教程/Arthasclassloader命令/O1CN01HzatXZ1RgccrlT90M_!!6000000002141-2-tps-529-244.png","hash":"fd9ef52dd52e1534d67e889078dfc36f57cd0c20","modified":1628303819000},{"_id":"source/_posts/Java诊断工具Arthas高级命令教程/Arthasclassloader命令/arthas.png","hash":"12ce7982e26f9dbcf066c045a47b687e8173228a","modified":1628303798000},{"_id":"source/_posts/Java诊断工具Arthas高级命令教程/Arthasdump命令/arthas.png","hash":"12ce7982e26f9dbcf066c045a47b687e8173228a","modified":1628303935000},{"_id":"source/_posts/Java诊断工具Arthas高级命令教程/Arthasdump命令/O1CN01HzatXZ1RgccrlT90M_!!6000000002141-2-tps-529-244.png","hash":"fd9ef52dd52e1534d67e889078dfc36f57cd0c20","modified":1628303951000},{"_id":"source/_posts/Java诊断工具Arthas高级命令教程/Arthasdashboard命令/O1CN01HzatXZ1RgccrlT90M_!!6000000002141-2-tps-529-244.png","hash":"fd9ef52dd52e1534d67e889078dfc36f57cd0c20","modified":1628303884000},{"_id":"source/_posts/Java诊断工具Arthas高级命令教程/Arthasgetstatic命令/O1CN01HzatXZ1RgccrlT90M_!!6000000002141-2-tps-529-244.png","hash":"fd9ef52dd52e1534d67e889078dfc36f57cd0c20","modified":1628303992000},{"_id":"source/_posts/Java诊断工具Arthas高级命令教程/Arthasdashboard命令/arthas.png","hash":"12ce7982e26f9dbcf066c045a47b687e8173228a","modified":1628303864000},{"_id":"source/_posts/Java诊断工具Arthas高级命令教程/Arthasgetstatic命令/arthas.png","hash":"12ce7982e26f9dbcf066c045a47b687e8173228a","modified":1628303981000},{"_id":"source/_posts/Java诊断工具Arthas高级命令教程/Arthasheapdump命令/O1CN01HzatXZ1RgccrlT90M_!!6000000002141-2-tps-529-244.png","hash":"fd9ef52dd52e1534d67e889078dfc36f57cd0c20","modified":1628304047000},{"_id":"source/_posts/Java诊断工具Arthas高级命令教程/Arthasheapdump命令/arthas.png","hash":"12ce7982e26f9dbcf066c045a47b687e8173228a","modified":1628304032000},{"_id":"source/_posts/Java诊断工具Arthas高级命令教程/Arthasjad命令/O1CN01HzatXZ1RgccrlT90M_!!6000000002141-2-tps-529-244.png","hash":"fd9ef52dd52e1534d67e889078dfc36f57cd0c20","modified":1628304080000},{"_id":"source/_posts/Java诊断工具Arthas高级命令教程/Arthasjad命令/arthas.png","hash":"12ce7982e26f9dbcf066c045a47b687e8173228a","modified":1628304071000},{"_id":"source/_posts/Java诊断工具Arthas高级命令教程/Arthasjvm命令/arthas.png","hash":"12ce7982e26f9dbcf066c045a47b687e8173228a","modified":1628304104000},{"_id":"source/_posts/Java诊断工具Arthas高级命令教程/Arthasjvm命令/O1CN01HzatXZ1RgccrlT90M_!!6000000002141-2-tps-529-244.png","hash":"fd9ef52dd52e1534d67e889078dfc36f57cd0c20","modified":1628304112000},{"_id":"source/_posts/Java诊断工具Arthas高级命令教程/Arthaslogger命令/O1CN01HzatXZ1RgccrlT90M_!!6000000002141-2-tps-529-244.png","hash":"fd9ef52dd52e1534d67e889078dfc36f57cd0c20","modified":1628304152000},{"_id":"source/_posts/Java诊断工具Arthas高级命令教程/Arthaslogger命令/arthas.png","hash":"12ce7982e26f9dbcf066c045a47b687e8173228a","modified":1628304143000},{"_id":"source/_posts/Java诊断工具Arthas高级命令教程/Arthasmbean命令/O1CN01HzatXZ1RgccrlT90M_!!6000000002141-2-tps-529-244.png","hash":"fd9ef52dd52e1534d67e889078dfc36f57cd0c20","modified":1628304186000},{"_id":"source/_posts/Java诊断工具Arthas高级命令教程/Arthasmbean命令/arthas.png","hash":"12ce7982e26f9dbcf066c045a47b687e8173228a","modified":1628304175000},{"_id":"source/_posts/Java诊断工具Arthas高级命令教程/Arthasmc-redefine命令/O1CN010Qbzcz1ctPSWSZI6L_!!6000000003658-2-tps-333-182.png","hash":"4f0de13d6df2f59b0ee15dfb2a1bb2b41a24d034","modified":1628304222000},{"_id":"source/_posts/Java诊断工具Arthas高级命令教程/Arthasmc-redefine命令/O1CN01HzatXZ1RgccrlT90M_!!6000000002141-2-tps-529-244.png","hash":"fd9ef52dd52e1534d67e889078dfc36f57cd0c20","modified":1628304233000},{"_id":"source/_posts/Java诊断工具Arthas高级命令教程/Arthasmc-redefine命令/arthas.png","hash":"12ce7982e26f9dbcf066c045a47b687e8173228a","modified":1628304212000},{"_id":"source/_posts/Java诊断工具Arthas高级命令教程/Arthasmc-retransform命令/O1CN01HzatXZ1RgccrlT90M_!!6000000002141-2-tps-529-244.png","hash":"fd9ef52dd52e1534d67e889078dfc36f57cd0c20","modified":1628304284000},{"_id":"source/_posts/Java诊断工具Arthas高级命令教程/Arthasmc-retransform命令/O1CN010Qbzcz1ctPSWSZI6L_!!6000000003658-2-tps-333-182.png","hash":"4f0de13d6df2f59b0ee15dfb2a1bb2b41a24d034","modified":1628304273000},{"_id":"source/_posts/Java诊断工具Arthas高级命令教程/Arthasmc-retransform命令/arthas.png","hash":"12ce7982e26f9dbcf066c045a47b687e8173228a","modified":1628304261000},{"_id":"source/_posts/Java诊断工具Arthas高级命令教程/Arthasmonitor命令/O1CN01HzatXZ1RgccrlT90M_!!6000000002141-2-tps-529-244.png","hash":"fd9ef52dd52e1534d67e889078dfc36f57cd0c20","modified":1628304329000},{"_id":"source/_posts/Java诊断工具Arthas高级命令教程/Arthasmonitor命令/arthas.png","hash":"12ce7982e26f9dbcf066c045a47b687e8173228a","modified":1628304319000},{"_id":"source/_posts/Java诊断工具Arthas高级命令教程/Arthasognl命令/O1CN010Qbzcz1ctPSWSZI6L_!!6000000003658-2-tps-333-182.png","hash":"4f0de13d6df2f59b0ee15dfb2a1bb2b41a24d034","modified":1628304362000},{"_id":"source/_posts/Java诊断工具Arthas高级命令教程/Arthasognl命令/O1CN01HzatXZ1RgccrlT90M_!!6000000002141-2-tps-529-244.png","hash":"fd9ef52dd52e1534d67e889078dfc36f57cd0c20","modified":1628304371000},{"_id":"source/_posts/Java诊断工具Arthas高级命令教程/Arthasognl命令/arthas.png","hash":"12ce7982e26f9dbcf066c045a47b687e8173228a","modified":1628304354000},{"_id":"source/_posts/Java诊断工具Arthas高级命令教程/Arthasperfcounter命令/O1CN01HzatXZ1RgccrlT90M_!!6000000002141-2-tps-529-244.png","hash":"fd9ef52dd52e1534d67e889078dfc36f57cd0c20","modified":1628304406000},{"_id":"source/_posts/Java诊断工具Arthas高级命令教程/Arthasperfcounter命令/arthas.png","hash":"12ce7982e26f9dbcf066c045a47b687e8173228a","modified":1628304397000},{"_id":"source/_posts/Java诊断工具Arthas高级命令教程/Arthasprofiler命令/O1CN01HzatXZ1RgccrlT90M_!!6000000002141-2-tps-529-244.png","hash":"fd9ef52dd52e1534d67e889078dfc36f57cd0c20","modified":1628304443000},{"_id":"source/_posts/Java诊断工具Arthas高级命令教程/Arthassc命令/O1CN01HzatXZ1RgccrlT90M_!!6000000002141-2-tps-529-244.png","hash":"fd9ef52dd52e1534d67e889078dfc36f57cd0c20","modified":1628304503000},{"_id":"source/_posts/Java诊断工具Arthas高级命令教程/Arthassc命令/arthas.png","hash":"12ce7982e26f9dbcf066c045a47b687e8173228a","modified":1628304493000},{"_id":"source/_posts/Java诊断工具Arthas高级命令教程/Arthassm命令/O1CN01HzatXZ1RgccrlT90M_!!6000000002141-2-tps-529-244.png","hash":"fd9ef52dd52e1534d67e889078dfc36f57cd0c20","modified":1628304535000},{"_id":"source/_posts/Java诊断工具Arthas高级命令教程/Arthasprofiler命令/arthas.png","hash":"12ce7982e26f9dbcf066c045a47b687e8173228a","modified":1628304431000},{"_id":"source/_posts/Java诊断工具Arthas高级命令教程/Arthassm命令/arthas.png","hash":"12ce7982e26f9dbcf066c045a47b687e8173228a","modified":1628304527000},{"_id":"source/_posts/Java诊断工具Arthas高级命令教程/Arthassysenv命令/O1CN01HzatXZ1RgccrlT90M_!!6000000002141-2-tps-529-244.png","hash":"fd9ef52dd52e1534d67e889078dfc36f57cd0c20","modified":1628304596000},{"_id":"source/_posts/Java诊断工具Arthas高级命令教程/Arthassysenv命令/arthas.png","hash":"12ce7982e26f9dbcf066c045a47b687e8173228a","modified":1628304588000},{"_id":"source/_posts/Java诊断工具Arthas高级命令教程/Arthasstack命令/O1CN01HzatXZ1RgccrlT90M_!!6000000002141-2-tps-529-244.png","hash":"fd9ef52dd52e1534d67e889078dfc36f57cd0c20","modified":1628304566000},{"_id":"source/_posts/Java诊断工具Arthas高级命令教程/Arthasstack命令/arthas.png","hash":"12ce7982e26f9dbcf066c045a47b687e8173228a","modified":1628304557000},{"_id":"source/_posts/Java诊断工具Arthas高级命令教程/Arthassysprop命令/O1CN01HzatXZ1RgccrlT90M_!!6000000002141-2-tps-529-244.png","hash":"fd9ef52dd52e1534d67e889078dfc36f57cd0c20","modified":1628304628000},{"_id":"source/_posts/Java诊断工具Arthas高级命令教程/Arthassysprop命令/arthas.png","hash":"12ce7982e26f9dbcf066c045a47b687e8173228a","modified":1628304620000},{"_id":"source/_posts/Java诊断工具Arthas高级命令教程/Arthasthread命令/O1CN01HzatXZ1RgccrlT90M_!!6000000002141-2-tps-529-244.png","hash":"fd9ef52dd52e1534d67e889078dfc36f57cd0c20","modified":1628304663000},{"_id":"source/_posts/Java诊断工具Arthas高级命令教程/Arthasthread命令/arthas.png","hash":"12ce7982e26f9dbcf066c045a47b687e8173228a","modified":1628304653000},{"_id":"source/_posts/Java诊断工具Arthas高级命令教程/Arthastrace命令/O1CN01HzatXZ1RgccrlT90M_!!6000000002141-2-tps-529-244.png","hash":"fd9ef52dd52e1534d67e889078dfc36f57cd0c20","modified":1628304694000},{"_id":"source/_posts/Java诊断工具Arthas高级命令教程/Arthastrace命令/arthas.png","hash":"12ce7982e26f9dbcf066c045a47b687e8173228a","modified":1628304685000},{"_id":"source/_posts/Java诊断工具Arthas高级命令教程/Arthastt命令/O1CN01HzatXZ1RgccrlT90M_!!6000000002141-2-tps-529-244.png","hash":"fd9ef52dd52e1534d67e889078dfc36f57cd0c20","modified":1628304731000},{"_id":"source/_posts/Java诊断工具Arthas高级命令教程/Arthastt命令/arthas.png","hash":"12ce7982e26f9dbcf066c045a47b687e8173228a","modified":1628304722000},{"_id":"source/_posts/Java诊断工具Arthas高级命令教程/Arthasvmoption命令/O1CN01HzatXZ1RgccrlT90M_!!6000000002141-2-tps-529-244.png","hash":"fd9ef52dd52e1534d67e889078dfc36f57cd0c20","modified":1628304766000},{"_id":"source/_posts/Java诊断工具Arthas高级命令教程/Arthasvmoption命令/arthas.png","hash":"12ce7982e26f9dbcf066c045a47b687e8173228a","modified":1628304755000},{"_id":"source/_posts/Java诊断工具Arthas高级命令教程/Arthaswatch命令/O1CN01HzatXZ1RgccrlT90M_!!6000000002141-2-tps-529-244.png","hash":"fd9ef52dd52e1534d67e889078dfc36f57cd0c20","modified":1628304795000},{"_id":"source/_posts/Java诊断工具Arthas高级命令教程/Arthaswatch命令/arthas.png","hash":"12ce7982e26f9dbcf066c045a47b687e8173228a","modified":1628304787000},{"_id":"source/_posts/Lockbox/Lockbox-02-2.png","hash":"befb3b9a20389f97b0fd0f2bb28ed2adf49785be","modified":1627476107000},{"_id":"source/_posts/Lockbox/Lockbox-02-3.png","hash":"110dfcf3149701e83c1448778362f6cf7f346b63","modified":1627476131000},{"_id":"source/_posts/Lockbox/Lockbox-02.png","hash":"5246da58425402715166c509132b55753285fa3d","modified":1627475997000},{"_id":"source/_posts/Lockbox/Lockbox-03.png","hash":"9d059e68149968f621a276246ce33f3f4229c0b8","modified":1627476248000},{"_id":"source/_posts/Lockbox/Lockbox-02-1.png","hash":"c076cc371cf7033dbfad8c8fab53a59fbcb61141","modified":1627476045000},{"_id":"source/_posts/Java诊断工具Arthas高级命令教程/Arthasprofiler命令/arthas-output.png","hash":"1f82ddf6899ee767241b4f63e98cefcfe235bf74","modified":1628304455000},{"_id":"source/_posts/Java诊断工具Arthas最佳实践/ArthasHttpAPI案例/arthas-web-ui.png","hash":"56c62a5bd1a653a3509a05fa6dc8cddfe05337aa","modified":1628297683000},{"_id":"themes/yilia-plus/layout/_partial/toc.ejs","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1627463840000},{"_id":"source/_posts/Java诊断工具Arthas高级命令教程/Arthasprofiler命令/arthas-output-svg.png","hash":"7e48dc75040f056b9d7b892d2093078db6889caf","modified":1628304465000},{"_id":"themes/yilia-plus/.babelrc","hash":"b1b76475ac17dc9e2fa50af96c9e31eea2d0f2b4","modified":1627463840000},{"_id":"themes/yilia-plus/.DS_Store","hash":"9fd9be9fb889cc37b51da67a554a167b79a83063","modified":1627549200000},{"_id":"themes/yilia-plus/.editorconfig","hash":"da6d022b8f4d9c961e2f8f80677e92af8de0db4d","modified":1627463840000},{"_id":"themes/yilia-plus/.eslintignore","hash":"df0a50b13cc00acb749226fee3cee6e0351fb1d9","modified":1627463840000},{"_id":"themes/yilia-plus/.gitattributes","hash":"e0f24dceeb1e6878a1dd9b01a2b9df1bc037a867","modified":1627463840000},{"_id":"themes/yilia-plus/.eslintrc.js","hash":"5696ae049de010ed3786768b0c359f14c05b5ec6","modified":1627463840000},{"_id":"themes/yilia-plus/.gitignore","hash":"0515c36547693bbab9bb3e2ed9a5ee2cf7d89975","modified":1627463840000},{"_id":"themes/yilia-plus/LICENSE","hash":"88f6ff2e1df913b56239ee1899b80f6335dac5c8","modified":1627463840000},{"_id":"themes/yilia-plus/README.md","hash":"0e4ecb1f60582d55ae6efe5fdd8b3161e13934bd","modified":1627463840000},{"_id":"themes/yilia-plus/_config.yml","hash":"a7ae1c557f4227c963f2191b8db70139d0127e69","modified":1627726752000},{"_id":"themes/yilia-plus/package.json","hash":"3552aca4121b6cda0cea1d837801c59c73ca1268","modified":1627483004000},{"_id":"themes/yilia-plus/webpack.config.js","hash":"7a5fcf1d727c37050880cf6610dc1c55edacdd21","modified":1627463840000},{"_id":"themes/yilia-plus/.github/.DS_Store","hash":"fdfe8e214963e5675351a59364b590e18b308281","modified":1627465185000},{"_id":"themes/yilia-plus/.github/FUNDING.yml","hash":"387641ed8cb46ed60d7da1b00af0af9bd9412818","modified":1627463840000},{"_id":"themes/yilia-plus/.github/ISSUE_TEMPLATE.md","hash":"5ec55e34d1df613c4c6ee131b9193a282799611e","modified":1627463840000},{"_id":"themes/yilia-plus/.github/PULL_REQUEST_TEMPLATE.md","hash":"ec99cb7bd87f9b94342e067cf4c68897e4a92df8","modified":1627463840000},{"_id":"themes/yilia-plus/.vscode/settings.json","hash":"b2259991b410ba1cb14bbf65fcb1075316fb7cfe","modified":1627463840000},{"_id":"themes/yilia-plus/examples/index.html","hash":"e0b101738d43b8e79d478040af2536f6a2834d06","modified":1627463840000},{"_id":"themes/yilia-plus/languages/default.yml","hash":"2f221d8ff1732759583916203aac93491f576757","modified":1627463840000},{"_id":"themes/yilia-plus/languages/en.yml","hash":"545cab1548654455314ed5fb45419e948f01a567","modified":1627463840000},{"_id":"themes/yilia-plus/languages/fr.yml","hash":"84ab164b37c6abf625473e9a0c18f6f815dd5fd9","modified":1627463840000},{"_id":"themes/yilia-plus/languages/nl.yml","hash":"12ed59faba1fc4e8cdd1d42ab55ef518dde8039c","modified":1627463840000},{"_id":"themes/yilia-plus/languages/no.yml","hash":"965a171e70347215ec726952e63f5b47930931ef","modified":1627463840000},{"_id":"themes/yilia-plus/languages/ru.yml","hash":"4fda301bbd8b39f2c714e2c934eccc4b27c0a2b0","modified":1627463840000},{"_id":"themes/yilia-plus/languages/zh-CN.yml","hash":"2f221d8ff1732759583916203aac93491f576757","modified":1627463840000},{"_id":"themes/yilia-plus/languages/zh-Hans.yml","hash":"2dce39e94020d165ed227b81921474f1846f852f","modified":1627463840000},{"_id":"themes/yilia-plus/languages/zh-tw.yml","hash":"4896b719ed1a4c0a648953648868a451f263a755","modified":1627463840000},{"_id":"themes/yilia-plus/layout/archive.ejs","hash":"2703b07cc8ac64ae46d1d263f4653013c7e1666b","modified":1627463840000},{"_id":"themes/yilia-plus/layout/category.ejs","hash":"765426a9c8236828dc34759e604cc2c52292835a","modified":1627463840000},{"_id":"themes/yilia-plus/layout/index.ejs","hash":"2cd6286cdff07e9d83677c7976439bb6f5799ff9","modified":1627463840000},{"_id":"themes/yilia-plus/layout/layout.ejs","hash":"fc97c4931b33a500c610b3d3e9d07ccba85fd294","modified":1627463840000},{"_id":"themes/yilia-plus/layout/page.ejs","hash":"7d80e4e36b14d30a7cd2ac1f61376d9ebf264e8b","modified":1627463840000},{"_id":"themes/yilia-plus/layout/post.ejs","hash":"7d80e4e36b14d30a7cd2ac1f61376d9ebf264e8b","modified":1627463840000},{"_id":"themes/yilia-plus/layout/tag.ejs","hash":"eaa7b4ccb2ca7befb90142e4e68995fb1ea68b2e","modified":1627463840000},{"_id":"themes/yilia-plus/scripts/default_config.js","hash":"0456e54a3f637ab8676d3c2ce3280f4dbfffa758","modified":1627463840000},{"_id":"themes/yilia-plus/scripts/yilia_plus_log.js","hash":"8da11cf5d3beda92e17cceab18ed42e98102355f","modified":1627463840000},{"_id":"themes/yilia-plus/source/.DS_Store","hash":"577401cf8bea0978873e051e14ee92ee946094c1","modified":1627557282000},{"_id":"themes/yilia-plus/source-src/css.ejs","hash":"ba7ce6a0289f3b7038dca0a4a96f87fbbe473918","modified":1627463840000},{"_id":"themes/yilia-plus/source-src/script.ejs","hash":"e6fb74e9a5f560c90cacab260e82d92c4bcc2d2e","modified":1627463840000},{"_id":"themes/yilia-plus/.github/ISSUE_TEMPLATE/feature-request-improvement.md","hash":"0927a4c59555ebfb6458bb027173cc368c665bb3","modified":1627463840000},{"_id":"themes/yilia-plus/.github/ISSUE_TEMPLATE/bug_report.md","hash":"630401e12a290525f1469e2a4f1727ec6a692c69","modified":1627463840000},{"_id":"themes/yilia-plus/source/slider.a95b1d.js","hash":"75db7fcc216082f7363c098fe81c3cbd5e3c87de","modified":1627549170000},{"_id":"themes/yilia-plus/.github/ISSUE_TEMPLATE/question-help.md","hash":"e97015e31f65ec3246737bc09a8c9a5a6a2ab7ec","modified":1627463840000},{"_id":"themes/yilia-plus/.github/ISSUE_TEMPLATE/other.md","hash":"c3e2ec5af467d9de716f405f36bb3e8c65f1df9c","modified":1627463840000},{"_id":"themes/yilia-plus/examples/images/alipay.jpeg","hash":"7eb57147bd42d499f8ef0351d46673158b209f75","modified":1627463840000},{"_id":"themes/yilia-plus/examples/images/weixin.png","hash":"a1201bdc06e1467fea1f78cd56d8af45fdcfd5c0","modified":1627463840000},{"_id":"themes/yilia-plus/examples/images/qrcode.png","hash":"061607c067991f03bab78904fdba6e8b4bc174b0","modified":1627463840000},{"_id":"themes/yilia-plus/layout/_partial/activate-power-mode.ejs","hash":"eff31632727f38992ac50ee69b0eb938dafa145e","modified":1627463840000},{"_id":"themes/yilia-plus/layout/_partial/after-footer.ejs","hash":"1814f9f51664c7d082bca7aced966eb725ca7759","modified":1627463840000},{"_id":"themes/yilia-plus/layout/_partial/archive-post.ejs","hash":"1f7d4819b7f67602c4a1b99871808d2160b60978","modified":1627463840000},{"_id":"themes/yilia-plus/layout/_partial/archive.ejs","hash":"a6e94061ac55b9eb55275f87b608d62f6ea35659","modified":1627463840000},{"_id":"themes/yilia-plus/layout/_partial/aside.ejs","hash":"8edbd7993b9b061611a193533a664e2e85eae748","modified":1627463840000},{"_id":"themes/yilia-plus/layout/_partial/article.ejs","hash":"c64afc556331ec662587d2b98cd6564c909b61c9","modified":1628313917000},{"_id":"themes/yilia-plus/layout/_partial/background.ejs","hash":"de4d6912f8eaffc2955d0ae5aabf0eb1312d9778","modified":1627463840000},{"_id":"themes/yilia-plus/layout/_partial/baidu-analytics.ejs","hash":"f0e6e88f9f7eb08b8fe51449a8a3016273507924","modified":1627463840000},{"_id":"themes/yilia-plus/layout/_partial/baidu-push.ejs","hash":"15e992e247ae313845a6db9a1ddaa11ce12db4e3","modified":1627463840000},{"_id":"themes/yilia-plus/layout/_partial/css.ejs","hash":"97aa725458108d7850de5e86daddbb93b4747eef","modified":1627549170000},{"_id":"themes/yilia-plus/layout/_partial/footer.ejs","hash":"01274c435033c83ad012824d89d7630d56b904bf","modified":1627547174000},{"_id":"themes/yilia-plus/layout/_partial/google-analytics.ejs","hash":"5b389110f4d3b727c33c48f088a8bc7f8b577d19","modified":1627463840000},{"_id":"themes/yilia-plus/layout/_partial/head.ejs","hash":"f67f9cf7da5d301d087da5bf49dc11dcc153cba1","modified":1627463840000},{"_id":"themes/yilia-plus/layout/_partial/header.ejs","hash":"72cc1b87d463a7262701e60cec3d5041a2857d0a","modified":1627463840000},{"_id":"themes/yilia-plus/layout/_partial/hover-effect.ejs","hash":"752c3e6f796ef02f40b50703dfdab423c5f2b8ff","modified":1627463840000},{"_id":"themes/yilia-plus/layout/_partial/left-col.ejs","hash":"f35fa4df05c607b8b85cfee9ea10a0ab7a68459d","modified":1627463840000},{"_id":"themes/yilia-plus/layout/_partial/live2d-widget.ejs","hash":"c11c9974f7d2ef0adb483c4611124e008ad1da27","modified":1627463840000},{"_id":"themes/yilia-plus/layout/_partial/mobile-nav.ejs","hash":"2df48ba64658732f433033b64b0bbe674d904b9b","modified":1627463840000},{"_id":"themes/yilia-plus/layout/_partial/mathjax.ejs","hash":"2a6a030389d4c1e849d0b1ed4fb4205b8a931b90","modified":1627463840000},{"_id":"themes/yilia-plus/layout/_partial/tab-title-change.ejs","hash":"e13d347320660d3056d322abbaf4203736442b4d","modified":1627463840000},{"_id":"themes/yilia-plus/layout/_partial/tools.ejs","hash":"ede8bf25cd1f17b746edb2afecf369247779f1ef","modified":1627463840000},{"_id":"themes/yilia-plus/layout/_partial/viewer.ejs","hash":"bb75c67d036cfd312bd4e9cf7be4e67a3dd55a94","modified":1627468784000},{"_id":"themes/yilia-plus/scripts/filters/meta_generator.js","hash":"86b1380aab223359c75df6268bb0d39ae98f2d8e","modified":1627463840000},{"_id":"themes/yilia-plus/scripts/filters/index.js","hash":"e435b782178da75656f9616c7af564fb9ff0de50","modified":1627463840000},{"_id":"themes/yilia-plus/scripts/helpers/wordcount.js","hash":"f9c8fceb2130929b8f11e22b1c3476c99d1574a8","modified":1627463840000},{"_id":"themes/yilia-plus/scripts/helpers/yilia-plus-vendors.js","hash":"301d0537f7bae270e428de47f1b773dd1a65c3f3","modified":1627463840000},{"_id":"themes/yilia-plus/scripts/lib/core.js","hash":"7908a82a86d63f35c6f785cacb1cfaf99ae7e0f9","modified":1627463840000},{"_id":"themes/yilia-plus/source/fonts/fonteditor.3da1ef.woff","hash":"5a945ddf318d3ca68d0a1e8695b23287ff7e9816","modified":1627549170000},{"_id":"themes/yilia-plus/source/fonts/default-skin.b257fa.svg","hash":"2ac727c9e092331d35cce95af209ccfac6d4c7c7","modified":1627549170000},{"_id":"themes/yilia-plus/source/fonts/fonteditor.3e0d4a.svg","hash":"de1fbf8378d1966d43bf620b8acd6bf900a15a73","modified":1627549170000},{"_id":"themes/yilia-plus/source/fonts/fonteditor.86c132.eot","hash":"c29905356fb2116a454a262d6f15cdeb593a6cec","modified":1627549170000},{"_id":"themes/yilia-plus/source/fonts/fonteditor.bbc4b5.woff2","hash":"c748dc092f066f7e12626c801d416e64b95dacea","modified":1627549170000},{"_id":"themes/yilia-plus/source/fonts/fonteditor.fe4d8a.ttf","hash":"95d1a4991df9ce15562ff0344b318b5fc5f9ab70","modified":1627549170000},{"_id":"themes/yilia-plus/source/fonts/tooltip.4004ff.svg","hash":"a5e9fe67e0604c24279281d9fdd2ce1f4536d3e5","modified":1627463840000},{"_id":"themes/yilia-plus/source/fonts/tooltip.d04149.svg","hash":"a5e9fe67e0604c24279281d9fdd2ce1f4536d3e5","modified":1627549170000},{"_id":"themes/yilia-plus/source/img/default-skin.png","hash":"ed95a8e40a2c3478c5915376acb8e5f33677f24d","modified":1627549170000},{"_id":"themes/yilia-plus/source/img/alipay.jpg","hash":"ca6c3d18dfa1f6ae8b1e393447fca5399db7828c","modified":1627464898000},{"_id":"themes/yilia-plus/source/img/biubiubiu.gif","hash":"cccda381f96abe91b4d698da793abd6496466d3d","modified":1627463840000},{"_id":"themes/yilia-plus/source/img/forkme.png","hash":"b43e6e18b84edc40636204aa0eb9f266ef54a4e7","modified":1627463840000},{"_id":"themes/yilia-plus/source/img/gitee.svg","hash":"fcc6e28d0345e22a6195748cf759eee5d8e48719","modified":1627463840000},{"_id":"themes/yilia-plus/source/img/preloader.gif","hash":"6342367c93c82da1b9c620e97c84a389cc43d96d","modified":1627549170000},{"_id":"themes/yilia-plus/source/img/scrollbar_arrow.png","hash":"d64a33c4ddfbdb89deeb6f4e3d36eb84dc4777c0","modified":1627549170000},{"_id":"themes/yilia-plus/source/lib/busuanzi.pure.js","hash":"f54c44e2b30e551540b83640dd8c5ff266e157d5","modified":1627463840000},{"_id":"themes/yilia-plus/source/lib/clickLove.js","hash":"a35dfb7ff19796c005ee30b55fd95e39d6d59a89","modified":1627463840000},{"_id":"themes/yilia-plus/source/img/.DS_Store","hash":"df2fbeb1400acda0909a32c1cf6bf492f1121e07","modified":1627465086000},{"_id":"themes/yilia-plus/source/lib/default.css","hash":"c9c344d5c98cc90b5583865e71726bab1046cdeb","modified":1627463840000},{"_id":"themes/yilia-plus/source/lib/gitment.css","hash":"cb2e0be2c7ebbcc3e756340c811864115bf0ec56","modified":1627463840000},{"_id":"themes/yilia-plus/source/lib/snow.js","hash":"12ed5d697aa8a337064a1827ea94c0652c36b4e5","modified":1627463840000},{"_id":"themes/yilia-plus/source/lib/pace.min.js","hash":"9944dfb7814b911090e96446cea4d36e2b487234","modified":1627463840000},{"_id":"themes/yilia-plus/source/live2d_models/.DS_Store","hash":"3db5e96a995b2bad744a76b5a3ce4033109ae6a9","modified":1627549233000},{"_id":"themes/yilia-plus/source/lib/oauthcallback.browser.js","hash":"989b9e2638336461a9911ebf60e9a839819dd11f","modified":1627463840000},{"_id":"themes/yilia-plus/source/plugins/.DS_Store","hash":"b4ffdd08f6c83b44723ffddc3d8b22c5bbbc8d40","modified":1627549213000},{"_id":"themes/yilia-plus/source-src/css/_core.scss","hash":"c6488119c93ce33bbe15d428dac4a88c3844bf5a","modified":1627463840000},{"_id":"themes/yilia-plus/source-src/css/archive.scss","hash":"a3d39002134ec4728e73d7fd9b3f2427776534cc","modified":1627463840000},{"_id":"themes/yilia-plus/source-src/css/article-inner.scss","hash":"9661c0cc5e58530ef3ed6c9bb2e4e6e261b19198","modified":1627463840000},{"_id":"themes/yilia-plus/source-src/css/article-main.scss","hash":"5318d67971d41bf60cf87caba54cc29c808c8c02","modified":1627463840000},{"_id":"themes/yilia-plus/source-src/css/_function.scss","hash":"93a50dd19a93485712da1f8d0a1672482dd1eabc","modified":1627463840000},{"_id":"themes/yilia-plus/source-src/css/article-nav.scss","hash":"12ff50f47fe087459fab17e3022ab28c3b5958ab","modified":1627463840000},{"_id":"themes/yilia-plus/source-src/css/article.scss","hash":"4016353e822c235b520750272a10c1db60f2c36e","modified":1627463840000},{"_id":"themes/yilia-plus/source-src/css/aside.scss","hash":"126a72c7c428ad560ecc4dff146697e6b39c1e69","modified":1627463840000},{"_id":"themes/yilia-plus/source-src/css/comment.scss","hash":"ed2aad7e7a1a8e803287e2e1a3c94789989a63a1","modified":1627463840000},{"_id":"themes/yilia-plus/source-src/css/declare.scss","hash":"5313349b4da41faea53adb5c05b44b0513258bb0","modified":1627463840000},{"_id":"themes/yilia-plus/source-src/css/fonts.scss","hash":"bf5aec363e2ab2654bebd26e9919ba4eb66c816f","modified":1627463840000},{"_id":"themes/yilia-plus/source-src/css/footer.scss","hash":"2e1d9bd8a4f504a72734f9dfceea0ee4f58a9be4","modified":1627463840000},{"_id":"themes/yilia-plus/source-src/css/global.scss","hash":"5cd157920fab248daaf4fcbf40fb151365977d84","modified":1627463840000},{"_id":"themes/yilia-plus/source-src/css/grid.scss","hash":"22c9ec8b01691782340065ba25fd864ced141c1b","modified":1627463840000},{"_id":"themes/yilia-plus/source-src/css/hover-reveal.scss","hash":"8f558e7329e25c0d510a919d4c3911ff8afc7524","modified":1627463840000},{"_id":"themes/yilia-plus/source-src/css/highlight.scss","hash":"f76e578a8dbd92d48ecfee60eced2ad312cfd3e6","modified":1627463840000},{"_id":"themes/yilia-plus/source-src/css/left.scss","hash":"a0ed3a01ce1d87345f067be561adee3ed7da76b9","modified":1627463840000},{"_id":"themes/yilia-plus/source-src/css/main.scss","hash":"d46e6e9e77bcd7575a78ef226b46e3ca8fa7c902","modified":1627463840000},{"_id":"themes/yilia-plus/source-src/css/mobile-slider.scss","hash":"d74a5aebe2f38ca772e9585f246f05ba0216dca3","modified":1627463840000},{"_id":"themes/yilia-plus/source-src/css/mobile.scss","hash":"a321eb303627be2397520f59ca755d95e71952b8","modified":1627463840000},{"_id":"themes/yilia-plus/source-src/css/page.scss","hash":"23a2ffedb0aaf6de95532b1854364fe7053ae0af","modified":1627463840000},{"_id":"themes/yilia-plus/source-src/css/reward.scss","hash":"7309409e37a41c9228bb7fb74c27b22e177c8769","modified":1627483926000},{"_id":"themes/yilia-plus/source-src/css/scroll.scss","hash":"e920a07d275ca7c492e6c5ae0dd1ed6a31ba76e5","modified":1627463840000},{"_id":"themes/yilia-plus/source-src/css/share.scss","hash":"2d74ed49747c7b8c1297477fbf742f868281bb14","modified":1627463840000},{"_id":"themes/yilia-plus/source-src/css/social.scss","hash":"685f9eed9727e54e86acfb32ab00d6cb76129b25","modified":1627463840000},{"_id":"themes/yilia-plus/source-src/css/tags-cloud.scss","hash":"6cd41bb104b31164662f053c11da9b1bef21919b","modified":1627463840000},{"_id":"themes/yilia-plus/source-src/css/tags.scss","hash":"6b24db85c61e0055f37bbdf581acddf8693fbbc0","modified":1627463840000},{"_id":"themes/yilia-plus/source-src/css/tools.scss","hash":"35a3a1278b0227db3b81892ef88de6ce0aca1a2f","modified":1627463840000},{"_id":"themes/yilia-plus/source-src/css/tooltip.scss","hash":"eb34c1caa89ac9f2f354660d913c98ec8e5d5253","modified":1627480489000},{"_id":"themes/yilia-plus/source-src/js/aside.js","hash":"c22e7f9ce94a51924b7adb87fb02faa61f924d12","modified":1627463840000},{"_id":"themes/yilia-plus/source-src/js/anm.js","hash":"cd876d223aef66e6a65fa1ea023c55b1977b448f","modified":1627463840000},{"_id":"themes/yilia-plus/source-src/js/Q.js","hash":"d011af172064b6c6e0c7051d8f9879373ddac113","modified":1627463840000},{"_id":"themes/yilia-plus/source-src/js/browser.js","hash":"d6085974a6f963023ec41347398c7a101bce9ee3","modified":1627463840000},{"_id":"themes/yilia-plus/source-src/js/fix.js","hash":"ef1255de0790dd2bc762fed2cc68af4736a5622a","modified":1627463840000},{"_id":"themes/yilia-plus/source-src/js/main.js","hash":"96a6055825a2bb1a34123472f0d36cdc0e1d2b7a","modified":1627463840000},{"_id":"themes/yilia-plus/source-src/js/mobile.js","hash":"f3cfa47d4a4b1c30131f5c003c447d7faeabd6da","modified":1627463840000},{"_id":"themes/yilia-plus/source-src/js/slider.js","hash":"383e05285e25a9a5c4b8cab4d7eb95bd4026ea77","modified":1627463840000},{"_id":"themes/yilia-plus/source-src/js/share.js","hash":"d93d3dc3975b2b95083571b5e0ad2cca9a3b4e8e","modified":1627463840000},{"_id":"themes/yilia-plus/source-src/js/util.js","hash":"44b81602118c559758aeb63dce02cbe3683aadd8","modified":1627463840000},{"_id":"themes/yilia-plus/source-src/js/viewer.js","hash":"ac68741d8a181b0a3ec84e3490a6c90bbddb28c1","modified":1627463840000},{"_id":"themes/yilia-plus/layout/_partial/post/category.ejs","hash":"0809a4829aabeb4e911a3ed04ec28db4df7dfe3f","modified":1627463840000},{"_id":"themes/yilia-plus/layout/_partial/post/date.ejs","hash":"3900cb5a1f54ffed3d14ddd1f6492f21908693f6","modified":1627463840000},{"_id":"themes/yilia-plus/layout/_partial/post/changyan.ejs","hash":"5f99b55980da64a723a8e14d5a7daba0d6504647","modified":1627463840000},{"_id":"themes/yilia-plus/layout/_partial/post/giteement.ejs","hash":"1034300f4a9430b18a0fc8ad1b53d9ff5acf715c","modified":1627463840000},{"_id":"themes/yilia-plus/layout/_partial/post/gitment.ejs","hash":"a8225b146b63c44f44082a18cd580690674c1b25","modified":1627463840000},{"_id":"themes/yilia-plus/layout/_partial/post/nav.ejs","hash":"1036c8e4e1a7bc935ba173744da735a0d6ed09cd","modified":1627463840000},{"_id":"themes/yilia-plus/layout/_partial/post/share.ejs","hash":"a136ebe98afd675d6585355a33fb48127b587ec2","modified":1627463840000},{"_id":"themes/yilia-plus/layout/_partial/post/tag.ejs","hash":"2e783e68755abb852760eb0e627a3fbb50a05a55","modified":1627463840000},{"_id":"themes/yilia-plus/layout/_partial/post/title.ejs","hash":"3ef2238cebc9ec3af75d317dbe56f7bf3d2673ee","modified":1627463840000},{"_id":"themes/yilia-plus/layout/_partial/post/word.ejs","hash":"3cd2763d5aa7e3796fe1bb81c62539e0ff3b8fb7","modified":1627463840000},{"_id":"themes/yilia-plus/source/live2d_models/chitose/.gitignore","hash":"2aa039aab52800662710bbf503671c770af96621","modified":1627463840000},{"_id":"themes/yilia-plus/source/live2d_models/chitose/package.json","hash":"1a9787523593c242cb095109afd630f7e3e879e4","modified":1627463840000},{"_id":"themes/yilia-plus/source/live2d_models/chitose/package-lock.json","hash":"13a16c22c14ecd05babda1bcd05ae509f8e36e2f","modified":1627463840000},{"_id":"themes/yilia-plus/source/live2d_models/epsilon2_1/.gitignore","hash":"2aa039aab52800662710bbf503671c770af96621","modified":1627463840000},{"_id":"themes/yilia-plus/source/live2d_models/epsilon2_1/package.json","hash":"accba9f2f02f2fa65b9103eb2ae8f6d82a9c51aa","modified":1627463840000},{"_id":"themes/yilia-plus/source/live2d_models/epsilon2_1/package-lock.json","hash":"61398afc4263891ef8e47a07911494c4e223f187","modified":1627463840000},{"_id":"themes/yilia-plus/source/live2d_models/gf/package-lock.json","hash":"972676062fd3c5b3d9ff655226d57cc17491682e","modified":1627463840000},{"_id":"themes/yilia-plus/source/live2d_models/gf/.gitignore","hash":"2aa039aab52800662710bbf503671c770af96621","modified":1627463840000},{"_id":"themes/yilia-plus/source/live2d_models/gf/package.json","hash":"84ebad708c79bf7817c3969bc161fd4ca159d037","modified":1627463840000},{"_id":"themes/yilia-plus/source/live2d_models/haruto/.gitignore","hash":"2aa039aab52800662710bbf503671c770af96621","modified":1627463840000},{"_id":"themes/yilia-plus/source/live2d_models/haruto/package.json","hash":"9cf4a018e54719920f98f95063d5c08f1aecd8fe","modified":1627463840000},{"_id":"themes/yilia-plus/source/live2d_models/haruto/package-lock.json","hash":"39a3f632333ac36bf7cf51e7ac0b1e6fc8195945","modified":1627463840000},{"_id":"themes/yilia-plus/source/live2d_models/haru/.gitignore","hash":"2aa039aab52800662710bbf503671c770af96621","modified":1627463840000},{"_id":"themes/yilia-plus/source/live2d_models/haru/package-lock.json","hash":"1453c48dae23864d0c1232da5f462abd9d0b87fb","modified":1627463840000},{"_id":"themes/yilia-plus/source/live2d_models/hibiki/.gitignore","hash":"2aa039aab52800662710bbf503671c770af96621","modified":1627463840000},{"_id":"themes/yilia-plus/source/live2d_models/haru/package.json","hash":"e98010497cbf995d9ea9a7f4bddefe6bd65987c2","modified":1627463840000},{"_id":"themes/yilia-plus/source/live2d_models/hibiki/package-lock.json","hash":"2a2881a5677aa79d0bc94f5f2bc9c495c5f21d99","modified":1627463840000},{"_id":"themes/yilia-plus/source/live2d_models/hijiki/.gitignore","hash":"2aa039aab52800662710bbf503671c770af96621","modified":1627463840000},{"_id":"themes/yilia-plus/source/live2d_models/hibiki/package.json","hash":"7181977daa9ea701cbf19226c370c4f4c3aa2e5d","modified":1627463840000},{"_id":"themes/yilia-plus/source/live2d_models/hijiki/package-lock.json","hash":"004a6bb08de386c36806c36bb5f300041d7407cd","modified":1627463840000},{"_id":"themes/yilia-plus/source/live2d_models/hijiki/package.json","hash":"0d1c0f7205aa43ec73b60cf93fcf74e09b5392ed","modified":1627463840000},{"_id":"themes/yilia-plus/source/live2d_models/izumi/.gitignore","hash":"2aa039aab52800662710bbf503671c770af96621","modified":1627463840000},{"_id":"themes/yilia-plus/source/live2d_models/izumi/package-lock.json","hash":"a0209f204c31385293b7be0cb69bb0946dc08638","modified":1627463840000},{"_id":"themes/yilia-plus/source/live2d_models/izumi/package.json","hash":"1f93d62e12fa1a5ac39454700965c7fea48af6da","modified":1627463840000},{"_id":"themes/yilia-plus/source/live2d_models/koharu/.gitignore","hash":"2aa039aab52800662710bbf503671c770af96621","modified":1627463840000},{"_id":"themes/yilia-plus/source/live2d_models/koharu/package-lock.json","hash":"1a3502e15120fabb1c896982df702f6a4f33ec6d","modified":1627463840000},{"_id":"themes/yilia-plus/source/live2d_models/koharu/package.json","hash":"cdd641abdeabe453fb32a942a30a1114c92babba","modified":1627463840000},{"_id":"themes/yilia-plus/source/live2d_models/miku/.gitignore","hash":"2aa039aab52800662710bbf503671c770af96621","modified":1627463840000},{"_id":"themes/yilia-plus/source/live2d_models/miku/package.json","hash":"f4b568edfc4dc3ffda21b7170b412b3b8a3df76a","modified":1627463840000},{"_id":"themes/yilia-plus/source/live2d_models/ni-j/.gitignore","hash":"2aa039aab52800662710bbf503671c770af96621","modified":1627463840000},{"_id":"themes/yilia-plus/source/live2d_models/miku/package-lock.json","hash":"18a38b042d647ac54bf75a61feacecd979d5545b","modified":1627463840000},{"_id":"themes/yilia-plus/source/live2d_models/ni-j/package.json","hash":"2cd6630d13c432c3c2b672af956b7699d8703d2a","modified":1627463840000},{"_id":"themes/yilia-plus/source/live2d_models/ni-j/package-lock.json","hash":"018d46cfd7fd35a695ae71a904f37aa2bbc4602b","modified":1627463840000},{"_id":"themes/yilia-plus/source/live2d_models/nico/.gitignore","hash":"2aa039aab52800662710bbf503671c770af96621","modified":1627463840000},{"_id":"themes/yilia-plus/source/live2d_models/nico/package-lock.json","hash":"401865e9192a50901ff40d2927c196b6222781f8","modified":1627463840000},{"_id":"themes/yilia-plus/source/live2d_models/nico/package.json","hash":"2a5d7e4d8791dc21fc9e4bc858835906a359cae0","modified":1627463840000},{"_id":"themes/yilia-plus/source/live2d_models/nipsilon/.gitignore","hash":"2aa039aab52800662710bbf503671c770af96621","modified":1627463840000},{"_id":"themes/yilia-plus/source/live2d_models/nipsilon/package-lock.json","hash":"3aa9f4f3a55d6a3c4b0267e09a6b873c9885b467","modified":1627463840000},{"_id":"themes/yilia-plus/source/live2d_models/nipsilon/package.json","hash":"15b41830870ec1b800211b8963292ecb26ad792a","modified":1627463840000},{"_id":"themes/yilia-plus/source/live2d_models/nietzsche/.gitignore","hash":"2aa039aab52800662710bbf503671c770af96621","modified":1627463840000},{"_id":"themes/yilia-plus/source/live2d_models/nietzsche/package-lock.json","hash":"ce8eacb41468e4150992962bbef65a659d3751a3","modified":1627463840000},{"_id":"themes/yilia-plus/source/live2d_models/nietzsche/package.json","hash":"e7aec97ca2d70ab2ad4e44de71c30a22a5234303","modified":1627463840000},{"_id":"themes/yilia-plus/source/live2d_models/nito/.gitignore","hash":"2aa039aab52800662710bbf503671c770af96621","modified":1627463840000},{"_id":"themes/yilia-plus/source/live2d_models/nito/package-lock.json","hash":"c6a73af1e04dc2271eff24a0ec195884ac66a615","modified":1627463840000},{"_id":"themes/yilia-plus/source/live2d_models/nito/package.json","hash":"6144ca1bbbf20ba59de22f907abcacc3e2e38e66","modified":1627463840000},{"_id":"themes/yilia-plus/source/live2d_models/shizuku/.gitignore","hash":"2aa039aab52800662710bbf503671c770af96621","modified":1627463840000},{"_id":"themes/yilia-plus/source/live2d_models/shizuku/package.json","hash":"b5a428b63eca192e309289c98a23f36b53c5c239","modified":1627463840000},{"_id":"themes/yilia-plus/source/live2d_models/shizuku/package-lock.json","hash":"9ee7ec232b70b3ba036d73de5e01991d34422244","modified":1627463840000},{"_id":"themes/yilia-plus/source/live2d_models/tororo/package.json","hash":"35b2bf469066be74736e53942400922284dcef9d","modified":1627463840000},{"_id":"themes/yilia-plus/source/live2d_models/tororo/package-lock.json","hash":"2fb484f7bddd401d0162515482e97443da0db0b5","modified":1627463840000},{"_id":"themes/yilia-plus/source/live2d_models/tororo/.gitignore","hash":"2aa039aab52800662710bbf503671c770af96621","modified":1627463840000},{"_id":"themes/yilia-plus/source/live2d_models/tsumiki/.gitignore","hash":"2aa039aab52800662710bbf503671c770af96621","modified":1627463840000},{"_id":"themes/yilia-plus/source/live2d_models/tsumiki/package-lock.json","hash":"1204f760f1d7e8726405061445cc7f8693fd8c13","modified":1627463840000},{"_id":"themes/yilia-plus/source/live2d_models/tsumiki/package.json","hash":"0dd4fc54589e0101207792cc2a33e20306a5924e","modified":1627463840000},{"_id":"themes/yilia-plus/source/live2d_models/unitychan/.gitignore","hash":"2aa039aab52800662710bbf503671c770af96621","modified":1627463840000},{"_id":"themes/yilia-plus/source/live2d_models/unitychan/package-lock.json","hash":"e16e408bc25ff17269d231678e9759723e4cfd21","modified":1627463840000},{"_id":"themes/yilia-plus/source/live2d_models/wanko/.gitignore","hash":"2aa039aab52800662710bbf503671c770af96621","modified":1627463840000},{"_id":"themes/yilia-plus/source/live2d_models/unitychan/package.json","hash":"3e23d508ebf90fc230f175347efd56b18f3ee42b","modified":1627463840000},{"_id":"themes/yilia-plus/source/live2d_models/wanko/package-lock.json","hash":"ad19acef63585bae69f0919434aaf1d1aefa5956","modified":1627463840000},{"_id":"themes/yilia-plus/source/live2d_models/wanko/package.json","hash":"f97ec41764abc0d11e056088765123b6a8aae798","modified":1627463840000},{"_id":"themes/yilia-plus/source/live2d_models/z16/.DS_Store","hash":"9114c12707682ca5aaad9271cd4c8536560c0358","modified":1627549226000},{"_id":"themes/yilia-plus/source/live2d_models/z16/.gitignore","hash":"2aa039aab52800662710bbf503671c770af96621","modified":1627463840000},{"_id":"themes/yilia-plus/source/live2d_models/z16/package-lock.json","hash":"925d90cf2d1ec4fe19ff4b12839cc46e67c4c3e6","modified":1627463840000},{"_id":"themes/yilia-plus/source/live2d_models/z16/package.json","hash":"1669f3f4c7a862e384ed9bfe4c4f6158bf60f2ef","modified":1627463840000},{"_id":"themes/yilia-plus/source/plugins/TweenMax/HoverImg.js","hash":"ecc51aed76c22ca181870d4ba47765c0598e3a1b","modified":1627463840000},{"_id":"themes/yilia-plus/source/plugins/TweenMax/charming.min.js","hash":"0b11f943ec562c9031be07203058650eee74d73d","modified":1627463840000},{"_id":"themes/yilia-plus/source/plugins/activate-power-mode/activate-power-mode.js","hash":"8161c7d2b8fd7fa407db3c3429edd8d19f82ae81","modified":1627463840000},{"_id":"themes/yilia-plus/source/plugins/live2d-widget.js/manifest.json","hash":"38026df431641eaf04c205b7bea882f492eae749","modified":1627463840000},{"_id":"themes/yilia-plus/source/plugins/live2d-widget.js/L2Dwidget.min.js","hash":"189df71cee9f1273f134fd78114c72c69b5a44c1","modified":1627463840000},{"_id":"themes/yilia-plus/source/plugins/ribbon.js/.DS_Store","hash":"d10d8dda372df6682181b2ef6b278bdc3b49a965","modified":1627549213000},{"_id":"themes/yilia-plus/source/plugins/ribbon.js/ribbon.js","hash":"65b1a8f12d04b15d7ed6eeb9d11dec760a799c5f","modified":1627463840000},{"_id":"themes/yilia-plus/source/plugins/ribbon.js/ribbon.min.js","hash":"3c8e4d717ca107f3723def1795c8ed62a5f1a8d0","modified":1627463840000},{"_id":"themes/yilia-plus/source-src/css/core/_animation.scss","hash":"d36ff0c46a60185f177c462f232734e096d7530a","modified":1627463840000},{"_id":"themes/yilia-plus/source-src/css/core/_media-queries.scss","hash":"7b54eb05258e2de5bc682503e114d56afda10f8c","modified":1627463840000},{"_id":"themes/yilia-plus/source-src/css/core/_mixin.scss","hash":"3b3ea43a675c8d299916361cbb3f3a74982b2454","modified":1627463840000},{"_id":"themes/yilia-plus/source-src/css/core/_reset.scss","hash":"845716a861a3d73e8c6d4d60ef8f5594813a978a","modified":1627463840000},{"_id":"themes/yilia-plus/source-src/css/core/_variables.scss","hash":"b156876e7b529436ba4d8caff03d30af22d91072","modified":1627463840000},{"_id":"themes/yilia-plus/source-src/css/fonts/fonteditor.eot","hash":"c29905356fb2116a454a262d6f15cdeb593a6cec","modified":1627463840000},{"_id":"themes/yilia-plus/source-src/css/fonts/fonteditor.ttf","hash":"95d1a4991df9ce15562ff0344b318b5fc5f9ab70","modified":1627463840000},{"_id":"themes/yilia-plus/source-src/css/fonts/fonteditor.svg","hash":"de1fbf8378d1966d43bf620b8acd6bf900a15a73","modified":1627463840000},{"_id":"themes/yilia-plus/source-src/css/fonts/fonteditor.woff2","hash":"c748dc092f066f7e12626c801d416e64b95dacea","modified":1627463840000},{"_id":"themes/yilia-plus/source-src/css/fonts/fonteditor.woff","hash":"5a945ddf318d3ca68d0a1e8695b23287ff7e9816","modified":1627463840000},{"_id":"themes/yilia-plus/source-src/css/img/checkered-pattern.png","hash":"049262fa0886989d750637b264bed34ab51c23c8","modified":1627463840000},{"_id":"themes/yilia-plus/source-src/css/img/tooltip.svg","hash":"a5e9fe67e0604c24279281d9fdd2ce1f4536d3e5","modified":1627463840000},{"_id":"themes/yilia-plus/source-src/css/img/scrollbar_arrow.png","hash":"d64a33c4ddfbdb89deeb6f4e3d36eb84dc4777c0","modified":1627463840000},{"_id":"themes/yilia-plus/source/live2d_models/chitose/assets/chitose.model.json","hash":"a9b9986e72b8245f036f6ada876b84a3986c4218","modified":1627463840000},{"_id":"themes/yilia-plus/source/live2d_models/chitose/assets/chitose.physics.json","hash":"5ff4acbc4cf23a7f2ff211f50e53df6f6b7c0995","modified":1627463840000},{"_id":"themes/yilia-plus/source/live2d_models/chitose/assets/chitose.pose.json","hash":"52f9b579ca15b4b2dc4c5fa71172472dd6924264","modified":1627463840000},{"_id":"themes/yilia-plus/source/live2d_models/epsilon2_1/assets/Epsilon2.1.model.json","hash":"a47e7d1fd76d5a90d383fa049295c1cdd1546845","modified":1627463840000},{"_id":"themes/yilia-plus/source/live2d_models/epsilon2_1/assets/Epsilon2.1.physics.json","hash":"bbf1a8cb496831fbf9715d8431b82fffc9f89257","modified":1627463840000},{"_id":"themes/yilia-plus/source/live2d_models/gf/assets/Gantzert_Felixander.model.json","hash":"d5caeb1c758088ff03bc190cd8dcee98e6e02392","modified":1627463840000},{"_id":"themes/yilia-plus/source/live2d_models/haruto/assets/haruto.model.json","hash":"76f915f7edbd9c47df0ca041dddb151c0c93a2bf","modified":1627463840000},{"_id":"themes/yilia-plus/source/live2d_models/haruto/assets/haruto.physics.json","hash":"2fbf886979212357ba293bd35884f2cb5b26b6a6","modified":1627463840000},{"_id":"themes/yilia-plus/source/live2d_models/hibiki/assets/hibiki.physics.json","hash":"ba100c7a8c3fc777d05f41e3371d18c457febfa7","modified":1627463840000},{"_id":"themes/yilia-plus/source/live2d_models/hibiki/assets/hibiki.model.json","hash":"73bbc0004fc21039452f80dc6dc3c287723aedc4","modified":1627463840000},{"_id":"themes/yilia-plus/source/live2d_models/hijiki/assets/hijiki.model.json","hash":"feff43bf7498d213982c3736c2c029664e4bcbd2","modified":1627463840000},{"_id":"themes/yilia-plus/source/live2d_models/hijiki/assets/hijiki.pose.json","hash":"81438bf69b32c7c11e311b4fe043730cdc7b7ec2","modified":1627463840000},{"_id":"themes/yilia-plus/source/live2d_models/izumi/assets/izumi.model.json","hash":"3ba8caa98a3af7b09d7a79419a691f543a1e3ea4","modified":1627463840000},{"_id":"themes/yilia-plus/source/live2d_models/izumi/assets/izumi.physics.json","hash":"cee4a6e1c8ec3e1c2bfc8028ff49dc9c34c06258","modified":1627463840000},{"_id":"themes/yilia-plus/source/live2d_models/koharu/assets/koharu.model.json","hash":"ceccdefd776b7c9475a29cff0842796e4f58b7e9","modified":1627463840000},{"_id":"themes/yilia-plus/source/live2d_models/koharu/assets/koharu.physics.json","hash":"2fbf886979212357ba293bd35884f2cb5b26b6a6","modified":1627463840000},{"_id":"themes/yilia-plus/source/live2d_models/miku/assets/miku.model.json","hash":"32e49dfc6cb4d9c537453bb083aab39ed708c476","modified":1627463840000},{"_id":"themes/yilia-plus/source/live2d_models/ni-j/assets/ni-j.model.json","hash":"3c77e66d6436136bf50d5fdbc8ee8cd543a35e01","modified":1627463840000},{"_id":"themes/yilia-plus/source/live2d_models/ni-j/assets/ni-j.pose.json","hash":"a8c949d20eebf1e716a495bf806b2eccff62a925","modified":1627463840000},{"_id":"themes/yilia-plus/source/live2d_models/miku/assets/miku.physics.json","hash":"d5ca7f215044ba5bf1cdb8045a5c99b64ec258ce","modified":1627463840000},{"_id":"themes/yilia-plus/source/live2d_models/ni-j/assets/ni-j.physics.json","hash":"ef2dd194f934f129f5f4db7785a9c7b7e45671ff","modified":1627463840000},{"_id":"themes/yilia-plus/source/live2d_models/nico/assets/nico.pose.json","hash":"a8c949d20eebf1e716a495bf806b2eccff62a925","modified":1627463840000},{"_id":"themes/yilia-plus/source/live2d_models/nico/assets/nico.physics.json","hash":"1db72a0413771e14d74de955af728224318e91d1","modified":1627463840000},{"_id":"themes/yilia-plus/source/live2d_models/nico/assets/nico.model.json","hash":"9f007936f4748e80a1da60ca078daed595acffee","modified":1627463840000},{"_id":"themes/yilia-plus/source/live2d_models/nipsilon/assets/nipsilon.model.json","hash":"271e40dfe9c04c8b5f5e4c6a9aa4f7ee6c65cff9","modified":1627463840000},{"_id":"themes/yilia-plus/source/live2d_models/nipsilon/assets/nipsilon.physics.json","hash":"5e83e055f99be8c8752fdcad30f9ed043111b83b","modified":1627463840000},{"_id":"themes/yilia-plus/source/live2d_models/nipsilon/assets/nipsilon.pose.json","hash":"a8c949d20eebf1e716a495bf806b2eccff62a925","modified":1627463840000},{"_id":"themes/yilia-plus/source/live2d_models/nietzsche/assets/nietzche.model.json","hash":"4f8fb457ddf9b0aa930cbcd4a3258ccdbf9e7506","modified":1627463840000},{"_id":"themes/yilia-plus/source/live2d_models/nietzsche/assets/nietzsche.physics.json","hash":"5e83e055f99be8c8752fdcad30f9ed043111b83b","modified":1627463840000},{"_id":"themes/yilia-plus/source/live2d_models/nietzsche/assets/nietzsche.pose.json","hash":"a8c949d20eebf1e716a495bf806b2eccff62a925","modified":1627463840000},{"_id":"themes/yilia-plus/source/live2d_models/nito/assets/nito.model.json","hash":"7d7930d1fc8114ae0e694624db457612dca64814","modified":1627463840000},{"_id":"themes/yilia-plus/source/live2d_models/nito/assets/nito.physics.json","hash":"27db548eec3c5f3c71330e675b3f602cd86f2242","modified":1627463840000},{"_id":"themes/yilia-plus/source/live2d_models/nito/assets/nito.pose.json","hash":"a8c949d20eebf1e716a495bf806b2eccff62a925","modified":1627463840000},{"_id":"themes/yilia-plus/source/live2d_models/shizuku/assets/shizuku.model.json","hash":"19a05bd41b806a935cea42c2000626fc82da2536","modified":1627463840000},{"_id":"themes/yilia-plus/source/live2d_models/shizuku/assets/shizuku.physics.json","hash":"6484d646e79a44c83784c6ae434cf7349746c5c8","modified":1627463840000},{"_id":"themes/yilia-plus/source/live2d_models/shizuku/assets/shizuku.pose.json","hash":"ac5505efbf80ba0a2e5783d67fe232bc5c6f1f80","modified":1627463840000},{"_id":"themes/yilia-plus/source/live2d_models/tororo/assets/tororo.model.json","hash":"3b96ea33460642d288c98327444966d93a0c11ba","modified":1627463840000},{"_id":"themes/yilia-plus/source/live2d_models/tsumiki/assets/tsumiki.physics.json","hash":"737f5ef200fd8d33b75bf19176dcff311591bd8f","modified":1627463840000},{"_id":"themes/yilia-plus/source/live2d_models/tororo/assets/tororo.pose.json","hash":"81438bf69b32c7c11e311b4fe043730cdc7b7ec2","modified":1627463840000},{"_id":"themes/yilia-plus/source/live2d_models/tsumiki/assets/tsumiki.model.json","hash":"3d5d18ccaf9dc5d4bb42e1c6c3a3d8d89b55524b","modified":1627463840000},{"_id":"themes/yilia-plus/source/live2d_models/unitychan/assets/unitychan.model.json","hash":"6baa976186d98050740e02eadc796036a16f6fa2","modified":1627463840000},{"_id":"themes/yilia-plus/source/live2d_models/unitychan/assets/unitychan.physics.json","hash":"d32ffd9263044d17d46facb5d878ea3683b8023e","modified":1627463840000},{"_id":"themes/yilia-plus/source/live2d_models/wanko/assets/wanko.model.json","hash":"b98a8ce54fbcf1606a489f1bc5f26b1a18c82d79","modified":1627463840000},{"_id":"themes/yilia-plus/source/live2d_models/z16/assets/z16.physics.json","hash":"67f13f60030d7e4c7f824c001ab5254ce4b9bafd","modified":1627463840000},{"_id":"themes/yilia-plus/source/live2d_models/z16/assets/z16.model.json","hash":"e69f3d2ecc9bf51b3972ad9df8f6aaa31956910c","modified":1627463840000},{"_id":"themes/yilia-plus/source-src/css/fonts/bak/fonts.scss","hash":"f44c67b61208f6b4a6aa27c90a01fdb0c087d25a","modified":1627463840000},{"_id":"themes/yilia-plus/source/plugins/ribbon.js/demo/index.html","hash":"97ff0bb6307330d15d81075eba56bd85eb589905","modified":1627463840000},{"_id":"themes/yilia-plus/source-src/css/fonts/bak/iconfont.svg","hash":"f9304e5714d20861be7d8f4d36687e88e86b9e1b","modified":1627463840000},{"_id":"themes/yilia-plus/source-src/css/fonts/bak/iconfont.ttf","hash":"f342ac8bf4d937f42a7d6a0032ad267ab47eb7f2","modified":1627463840000},{"_id":"themes/yilia-plus/source-src/css/fonts/bak/iconfont.eot","hash":"bc8c5e88f4994a852041b4d83f126d9c4d419b4a","modified":1627463840000},{"_id":"themes/yilia-plus/source-src/css/fonts/bak/iconfont.woff","hash":"aa9672cb097f7fd73ae5a03bcd3d9d726935bc0a","modified":1627463840000},{"_id":"themes/yilia-plus/source-src/css/fonts/yilia-plus/fonteditor.eot","hash":"de1e6a237496055048752b719dbbb4872bf6aaa9","modified":1627463840000},{"_id":"themes/yilia-plus/source-src/css/fonts/yilia-plus/fonteditor.svg","hash":"c65b80c65e6042a778011798a4e60832ed424c92","modified":1627463840000},{"_id":"themes/yilia-plus/source-src/css/fonts/yilia-plus/fonteditor.ttf","hash":"eab3ed2ad51d365b48c647a4ab0fae7e5a8368a1","modified":1627463840000},{"_id":"themes/yilia-plus/source/live2d_models/chitose/assets/exp/f03.exp.json","hash":"a506220e6b908154eea59f4bcfd73e7a457616b6","modified":1627463840000},{"_id":"themes/yilia-plus/source-src/css/fonts/yilia-plus/fonteditor.woff","hash":"555d609b08a87cee313fa64ce4677cc90aa9512d","modified":1627463840000},{"_id":"themes/yilia-plus/source/live2d_models/chitose/assets/exp/f02.exp.json","hash":"5b3dfc33ba22945adb77efacb9c55efbfd4975f9","modified":1627463840000},{"_id":"themes/yilia-plus/source/live2d_models/chitose/assets/exp/f01.exp.json","hash":"84073a497ddb6e56c6cfc244a0fb217ba473abf9","modified":1627463840000},{"_id":"themes/yilia-plus/source/live2d_models/chitose/assets/exp/f05.exp.json","hash":"154b1b33701c61570e8adc5cab977ea3198ade6a","modified":1627463840000},{"_id":"themes/yilia-plus/source/live2d_models/chitose/assets/exp/f06.exp.json","hash":"f3db49d621e2008b9eb59fba98e10db5dbd19d3d","modified":1627463840000},{"_id":"themes/yilia-plus/source/live2d_models/chitose/assets/exp/f07.exp.json","hash":"1ad00a1e4843b5b31b0c43fa292193bb049f6779","modified":1627463840000},{"_id":"themes/yilia-plus/source/live2d_models/chitose/assets/mtn/chitose_handwave.mtn","hash":"3d7a0f7ffda7d2ac3bb6fde6ccc49521c0d7713b","modified":1627463840000},{"_id":"themes/yilia-plus/source/live2d_models/chitose/assets/mtn/chitose_idle.mtn","hash":"f3d1ab532e49a20e98cadb0290c959d7f1086eb6","modified":1627463840000},{"_id":"themes/yilia-plus/source/live2d_models/chitose/assets/mtn/chitose_kime01.mtn","hash":"97308ef8c5798374a6b1ba6cdec53d6732a4728a","modified":1627463840000},{"_id":"themes/yilia-plus/source/live2d_models/chitose/assets/exp/f04.exp.json","hash":"6fee0e4d489e8ca3b7252b9dfc7c25cbe6a6a1e7","modified":1627463840000},{"_id":"themes/yilia-plus/source/live2d_models/chitose/assets/mtn/chitose_kime02.mtn","hash":"3eed16b70dc2f7b7e50417f19207e3cabccaa166","modified":1627463840000},{"_id":"themes/yilia-plus/source/live2d_models/epsilon2_1/assets/exp/f01.exp.json","hash":"84073a497ddb6e56c6cfc244a0fb217ba473abf9","modified":1627463840000},{"_id":"themes/yilia-plus/source/live2d_models/epsilon2_1/assets/exp/f02.exp.json","hash":"fb553024b5a62d0a54ba32c40b5d12598dc434e7","modified":1627463840000},{"_id":"themes/yilia-plus/source/live2d_models/epsilon2_1/assets/exp/f03.exp.json","hash":"02d1ac5b6d9019a1ee89b9d4d82894458deae35d","modified":1627463840000},{"_id":"themes/yilia-plus/source/live2d_models/epsilon2_1/assets/exp/f04.exp.json","hash":"05dccc2eab9b9d019af1a9cc6f748276376dd828","modified":1627463840000},{"_id":"themes/yilia-plus/source/live2d_models/epsilon2_1/assets/exp/f05.exp.json","hash":"b53d5e42ca3105b19e5fe5fbf7fe4a6b4ced61f2","modified":1627463840000},{"_id":"themes/yilia-plus/source/live2d_models/epsilon2_1/assets/exp/f06.exp.json","hash":"0a7f5b3ac25b13d8688b1f529f3279a8342e3c75","modified":1627463840000},{"_id":"themes/yilia-plus/source/live2d_models/epsilon2_1/assets/exp/f07.exp.json","hash":"d501ae71f1e36ff7e7834422900c0e84b8de8f28","modified":1627463840000},{"_id":"themes/yilia-plus/source/live2d_models/epsilon2_1/assets/exp/f08.exp.json","hash":"1dbb31e341c9fcc59475bd2594d60648c0c3e51c","modified":1627463840000},{"_id":"themes/yilia-plus/source/live2d_models/epsilon2_1/assets/mtn/Epsilon2.1_m_01.mtn","hash":"eecc2854bea6bf90c9f0a0013281ec600c32f2bc","modified":1627463840000},{"_id":"themes/yilia-plus/source/live2d_models/epsilon2_1/assets/mtn/Epsilon2.1_m_02.mtn","hash":"7a000a218b098172eeeb8a81e551d558bbaa6f8a","modified":1627463840000},{"_id":"themes/yilia-plus/source/live2d_models/epsilon2_1/assets/mtn/Epsilon2.1_idle_01.mtn","hash":"b4e67d3091aba34efcf9ff3659fa36f6f1a4bd22","modified":1627463840000},{"_id":"themes/yilia-plus/source/live2d_models/epsilon2_1/assets/mtn/Epsilon2.1_m_03.mtn","hash":"3568fc9f7ba95f2521abec8e1241da62581ab7cf","modified":1627463840000},{"_id":"themes/yilia-plus/source/live2d_models/epsilon2_1/assets/mtn/Epsilon2.1_m_04.mtn","hash":"b717b620d044859762716d104e137dc9c09c8cce","modified":1627463840000},{"_id":"themes/yilia-plus/source/live2d_models/epsilon2_1/assets/mtn/Epsilon2.1_m_05.mtn","hash":"f3a671a29f5d831f04284a8d5fe5adb90cd1e400","modified":1627463840000},{"_id":"themes/yilia-plus/source/live2d_models/epsilon2_1/assets/mtn/Epsilon2.1_m_06.mtn","hash":"fec328bedb7d5af53e0cfd0eb5991f4574c3676a","modified":1627463840000},{"_id":"themes/yilia-plus/source/live2d_models/epsilon2_1/assets/mtn/Epsilon2.1_m_07.mtn","hash":"2fd581bfc662b050c41afb904b9ae54b59d7d010","modified":1627463840000},{"_id":"themes/yilia-plus/source/live2d_models/epsilon2_1/assets/mtn/Epsilon2.1_m_08.mtn","hash":"e61753f72a1c170926c59c71490596aaeee30ca6","modified":1627463840000},{"_id":"themes/yilia-plus/source/live2d_models/epsilon2_1/assets/mtn/Epsilon2.1_m_sp_01.mtn","hash":"d72c01b4d9c4faf0f4cb472c390a35712b2ee7f5","modified":1627463840000},{"_id":"themes/yilia-plus/source/live2d_models/epsilon2_1/assets/mtn/Epsilon2.1_m_sp_02.mtn","hash":"08f6d29160ce7100441efdd8ac7bbd89fc9c5120","modified":1627463840000},{"_id":"themes/yilia-plus/source/live2d_models/epsilon2_1/assets/mtn/Epsilon2.1_m_sp_04.mtn","hash":"42ae0fbe437cd97c623c09bee100c3695abb30ce","modified":1627463840000},{"_id":"themes/yilia-plus/source/live2d_models/epsilon2_1/assets/mtn/Epsilon2.1_m_sp_03.mtn","hash":"55c11be6e505791de438c43ad25c31409713544a","modified":1627463840000},{"_id":"themes/yilia-plus/source/live2d_models/epsilon2_1/assets/mtn/Epsilon2.1_m_sp_05.mtn","hash":"9eb78800c41148712ac30e1342f025110db0f8d3","modified":1627463840000},{"_id":"themes/yilia-plus/source/live2d_models/epsilon2_1/assets/mtn/Epsilon2.1_shake_01.mtn","hash":"8f81d974ada9b6800fa6eb852a41906a9e1f4c77","modified":1627463840000},{"_id":"themes/yilia-plus/source/live2d_models/gf/assets/mtn/A_00_idle.mtn","hash":"d383fc08986b4d1f746d71abbea6f7b5f54dcc95","modified":1627463840000},{"_id":"themes/yilia-plus/source/live2d_models/gf/assets/mtn/A_01.mtn","hash":"91d2def2e00393fcedaaca36cd80340fa95a2d1b","modified":1627463840000},{"_id":"themes/yilia-plus/source/live2d_models/gf/assets/mtn/A_02.mtn","hash":"9283c809509daf3f580dcb92bab14960b5a89283","modified":1627463840000},{"_id":"themes/yilia-plus/source/live2d_models/gf/assets/mtn/A_03.mtn","hash":"afec07ed22acdf28a5c49b78c560e29c3c2cfaa0","modified":1627463840000},{"_id":"themes/yilia-plus/source/live2d_models/gf/assets/mtn/A_04.mtn","hash":"50360a6572518b447af3315236659a576aa1b248","modified":1627463840000},{"_id":"themes/yilia-plus/source/live2d_models/haruto/assets/mtn/01.mtn","hash":"61d7d590d9feb71b32fd6bd142b59410d75bc1fa","modified":1627463840000},{"_id":"themes/yilia-plus/source/live2d_models/gf/assets/mtn/A_05.mtn","hash":"40ad1e684108035c6478b76c9e4e1953104725da","modified":1627463840000},{"_id":"themes/yilia-plus/source/live2d_models/haruto/assets/mtn/02.mtn","hash":"efc99efdff39c93372cff0f6d62c4e748e1a5593","modified":1627463840000},{"_id":"themes/yilia-plus/source/live2d_models/haruto/assets/mtn/03.mtn","hash":"a72b697a92a7cff40d15774b143b465b34cee5e6","modified":1627463840000},{"_id":"themes/yilia-plus/source/live2d_models/haruto/assets/mtn/04.mtn","hash":"32c888667455a3ff6f1b04f910c1a5cc4de30af0","modified":1627463840000},{"_id":"themes/yilia-plus/source/live2d_models/haruto/assets/mtn/05.mtn","hash":"637e00442da4042cd4b0ed2cc62ffb1559881814","modified":1627463840000},{"_id":"themes/yilia-plus/source/live2d_models/haruto/assets/mtn/06.mtn","hash":"df10cc1d333c96da1296a4853c1ddbd44d8a11f3","modified":1627463840000},{"_id":"themes/yilia-plus/source/live2d_models/haruto/assets/mtn/07.mtn","hash":"d8c9410135c81604eba665b59808089808e0851a","modified":1627463840000},{"_id":"themes/yilia-plus/source/live2d_models/haruto/assets/mtn/08.mtn","hash":"9b95ef8548b979d1fca557c74f8d66fb15b34578","modified":1627463840000},{"_id":"themes/yilia-plus/source/live2d_models/haruto/assets/mtn/09.mtn","hash":"ecf1283b72e1c4b7e3a97343cd97726813f18790","modified":1627463840000},{"_id":"themes/yilia-plus/source/live2d_models/haruto/assets/mtn/idle_02.mtn","hash":"d130dd1d194f05b3eb5391289b0339999e37c3a6","modified":1627463840000},{"_id":"themes/yilia-plus/source/live2d_models/haru/02/assets/haru02.physics.json","hash":"490ab4735f5cddca766344468591c0eb90cda1f7","modified":1627463840000},{"_id":"themes/yilia-plus/source/live2d_models/haru/02/assets/haru02.model.json","hash":"ffed6d4654deeb772e389213f84701940ee0126f","modified":1627463840000},{"_id":"themes/yilia-plus/source/live2d_models/haru/02/assets/haru02.pose.json","hash":"4fb902065bd3f309fa0029fe2505424851fd489f","modified":1627463840000},{"_id":"themes/yilia-plus/source/live2d_models/haru/01/assets/haru01.model.json","hash":"cab2aac3d697eafa420e8a02b1f52c1f19666ffd","modified":1627463840000},{"_id":"themes/yilia-plus/source/live2d_models/haru/01/assets/haru01.physics.json","hash":"490ab4735f5cddca766344468591c0eb90cda1f7","modified":1627463840000},{"_id":"themes/yilia-plus/source/live2d_models/haru/01/assets/haru01.pose.json","hash":"4fb902065bd3f309fa0029fe2505424851fd489f","modified":1627463840000},{"_id":"themes/yilia-plus/source/live2d_models/hibiki/assets/exp/f01.exp.json","hash":"84073a497ddb6e56c6cfc244a0fb217ba473abf9","modified":1627463840000},{"_id":"themes/yilia-plus/source/live2d_models/hibiki/assets/exp/f02.exp.json","hash":"a5f786a8ebce6d2b14efcd4476179ed324c8def6","modified":1627463840000},{"_id":"themes/yilia-plus/source/live2d_models/hibiki/assets/exp/f03.exp.json","hash":"b8f958f736acd4eb7433043fbae946487e872f5b","modified":1627463840000},{"_id":"themes/yilia-plus/source/live2d_models/hibiki/assets/exp/f04.exp.json","hash":"19fdb5558be54a9ec6d882e2d1780a369bc66b62","modified":1627463840000},{"_id":"themes/yilia-plus/source/live2d_models/hibiki/assets/exp/f05.exp.json","hash":"8fdbc6eabb1890bc5953f170f95e4404bd3d62b4","modified":1627463840000},{"_id":"themes/yilia-plus/source/live2d_models/hibiki/assets/exp/f06.exp.json","hash":"b8ee09beda85aff415e6598ecd6573a238e15d18","modified":1627463840000},{"_id":"themes/yilia-plus/source/live2d_models/hibiki/assets/mtn/hibiki_01.mtn","hash":"cd220b89c26e1267fd7ab8f7cfc714fcd4c3b5a3","modified":1627463840000},{"_id":"themes/yilia-plus/source/live2d_models/hibiki/assets/mtn/hibiki_02.mtn","hash":"985154bee77e2934afe74a45071f51e0aa1ac84d","modified":1627463840000},{"_id":"themes/yilia-plus/source/live2d_models/hibiki/assets/mtn/hibiki_03.mtn","hash":"0b2e7cb2a32b70a629d9d21205863bb163d06d47","modified":1627463840000},{"_id":"themes/yilia-plus/source/live2d_models/hibiki/assets/mtn/hibiki_04.mtn","hash":"6a753859998d7afa17f119f37c5765f0c10b7bca","modified":1627463840000},{"_id":"themes/yilia-plus/source/live2d_models/hibiki/assets/mtn/hibiki_05.mtn","hash":"67dc8d35f050e36d08010d55ddbfd06544fb7ad5","modified":1627463840000},{"_id":"themes/yilia-plus/source/live2d_models/hibiki/assets/mtn/idle_01.mtn","hash":"3fac7f98ab71858018cbbf21b5a3ad99166d275b","modified":1627463840000},{"_id":"themes/yilia-plus/source/live2d_models/hibiki/assets/mtn/idle_02.mtn","hash":"9f7dae129a20775b3209a16ee28e27f496e90ba5","modified":1627463840000},{"_id":"themes/yilia-plus/source/live2d_models/hibiki/assets/mtn/idle_03.mtn","hash":"c85916f8699673b0511fd00cd1953896879e0cc5","modified":1627463840000},{"_id":"themes/yilia-plus/source/live2d_models/hibiki/assets/mtn/idle_04.mtn","hash":"80d4e53606b3268623b03d12a28570efdb5739ad","modified":1627463840000},{"_id":"themes/yilia-plus/source/live2d_models/hibiki/assets/snd/hibiki_01.mp3","hash":"2880911aa4a85958fe02e54b912fbf7e6a1896c6","modified":1627463840000},{"_id":"themes/yilia-plus/source/live2d_models/hibiki/assets/snd/hibiki_02.mp3","hash":"75358d4c7ec03c4b1dc02ef60c716d94f031fe2f","modified":1627463840000},{"_id":"themes/yilia-plus/source/live2d_models/hibiki/assets/snd/hibiki_03.mp3","hash":"df05cb8288b17e1ad00ed66a731f1558db28cf9b","modified":1627463840000},{"_id":"themes/yilia-plus/source/live2d_models/hibiki/assets/snd/hibiki_04.mp3","hash":"57d76906838b186bee2d47f768e54ac18e44d472","modified":1627463840000},{"_id":"themes/yilia-plus/source/live2d_models/hibiki/assets/snd/hibiki_05.mp3","hash":"e8788bb9e92467e21933ac2140114a21b9ad215a","modified":1627463840000},{"_id":"themes/yilia-plus/source/live2d_models/hijiki/assets/mtn/00_idle.mtn","hash":"b224c60e463b9f71ddbfc0c720e430496c175f4f","modified":1627463840000},{"_id":"themes/yilia-plus/source/live2d_models/hijiki/assets/mtn/01.mtn","hash":"fb550833ae22c9954c3e01df37ed29b2d61700f2","modified":1627463840000},{"_id":"themes/yilia-plus/source/live2d_models/hijiki/assets/mtn/02.mtn","hash":"7eafc52edc73b7cb80ae70d34b43c6ac778fa47b","modified":1627463840000},{"_id":"themes/yilia-plus/source/live2d_models/hijiki/assets/mtn/03.mtn","hash":"f900737c7a98441cbb2e05255427e6260e19ae68","modified":1627463840000},{"_id":"themes/yilia-plus/source/live2d_models/hijiki/assets/mtn/04.mtn","hash":"c7a25d3c5d783639bae18db2f3cd284b819c3c85","modified":1627463840000},{"_id":"themes/yilia-plus/source/live2d_models/hijiki/assets/mtn/05.mtn","hash":"dd20ad24b5d1830a5d44b9bccb28f922eea5e0e5","modified":1627463840000},{"_id":"themes/yilia-plus/source/live2d_models/hijiki/assets/mtn/06.mtn","hash":"ad404bd852d276cdd3d054c953e23f90e4e45ae1","modified":1627463840000},{"_id":"themes/yilia-plus/source/live2d_models/hijiki/assets/mtn/07.mtn","hash":"b7f2e3a9fa4f3ffbb6e64a08f8d9f45ca1868ffb","modified":1627463840000},{"_id":"themes/yilia-plus/source/live2d_models/hijiki/assets/mtn/08.mtn","hash":"4411c7651ff65195b113d95e7d5ebef8a59a37d9","modified":1627463840000},{"_id":"themes/yilia-plus/source/live2d_models/izumi/assets/exp/f01.exp.json","hash":"84073a497ddb6e56c6cfc244a0fb217ba473abf9","modified":1627463840000},{"_id":"themes/yilia-plus/source/live2d_models/izumi/assets/exp/f02.exp.json","hash":"d4c339f80452528f6cacba3ffe97fbb9e2e4d144","modified":1627463840000},{"_id":"themes/yilia-plus/source/live2d_models/izumi/assets/exp/f03.exp.json","hash":"fc1f79f65c09c845f08ee92d237f8cfabe90a3c6","modified":1627463840000},{"_id":"themes/yilia-plus/source/live2d_models/izumi/assets/exp/f04.exp.json","hash":"2e4f19882061c1b9bf49537244550cb5c9dd8a18","modified":1627463840000},{"_id":"themes/yilia-plus/source/live2d_models/izumi/assets/exp/f05.exp.json","hash":"b0c99350872f614a2a7f60e6479a4799d2d74986","modified":1627463840000},{"_id":"themes/yilia-plus/source/live2d_models/izumi/assets/exp/f06.exp.json","hash":"fd90baab724e71a25c8fd1eba2fab97974906374","modified":1627463840000},{"_id":"themes/yilia-plus/source/live2d_models/izumi/assets/exp/f07.exp.json","hash":"bb8dc60fc59444fee419265e68216bdcc0282b0b","modified":1627463840000},{"_id":"themes/yilia-plus/source/live2d_models/izumi/assets/mtn/idle_01.mtn","hash":"ce50f5c562b282dcb11679f682fe0f9e1bb0f37b","modified":1627463840000},{"_id":"themes/yilia-plus/source/live2d_models/izumi/assets/mtn/idle_02.mtn","hash":"0c6b52bf64db7bbfee81ee24240ca991320764b4","modified":1627463840000},{"_id":"themes/yilia-plus/source/live2d_models/izumi/assets/mtn/idle_03.mtn","hash":"b374923d973970f2c8331b3420660952e2bd8bf5","modified":1627463840000},{"_id":"themes/yilia-plus/source/live2d_models/izumi/assets/mtn/idle_04.mtn","hash":"97c0a45af4f0b9f4b828f43eccb1c77c360af637","modified":1627463840000},{"_id":"themes/yilia-plus/source/live2d_models/izumi/assets/mtn/izumi_01.mtn","hash":"36286812dc692e00a0b69e71d7fe3c8a2b672281","modified":1627463840000},{"_id":"themes/yilia-plus/source/live2d_models/izumi/assets/mtn/izumi_02.mtn","hash":"90add71910fd83c1c66bfb73db6d6d4766c98dac","modified":1627463840000},{"_id":"themes/yilia-plus/source/live2d_models/izumi/assets/mtn/izumi_03.mtn","hash":"fc7f8e01f8e7744cbd13a8fea44dda8270f21aeb","modified":1627463840000},{"_id":"themes/yilia-plus/source/live2d_models/izumi/assets/mtn/izumi_04.mtn","hash":"551b95d80d31ed4f06d19d99ccc4f795a8392ea3","modified":1627463840000},{"_id":"themes/yilia-plus/source/live2d_models/izumi/assets/mtn/izumi_05.mtn","hash":"dbfea56881f31a79bffb6d107e7b1fa867e2da0e","modified":1627463840000},{"_id":"themes/yilia-plus/source/live2d_models/izumi/assets/mtn/izumi_06.mtn","hash":"c1a63e659fcc6d5b1b0eac7eaff60faf43e2cb28","modified":1627463840000},{"_id":"themes/yilia-plus/source/live2d_models/izumi/assets/mtn/izumi_07.mtn","hash":"e2f9e8cb428fa83251a45166d8f9acad570a47d9","modified":1627463840000},{"_id":"themes/yilia-plus/source/live2d_models/izumi/assets/mtn/izumi_08.mtn","hash":"19fc90977a0ca30c18f4afae90d4c3ea27a9b094","modified":1627463840000},{"_id":"themes/yilia-plus/source/live2d_models/izumi/assets/mtn/izumi_09.mtn","hash":"97199471755394bed243a29b4cb8397518487296","modified":1627463840000},{"_id":"themes/yilia-plus/source/live2d_models/izumi/assets/mtn/izumi_10.mtn","hash":"244ae631fb963ed7619e5d63f189d947a2497eb2","modified":1627463840000},{"_id":"themes/yilia-plus/source/live2d_models/izumi/assets/snd/izumi_01.mp3","hash":"11dd394ab4d11d3a3c6d6a1a305ff3a1d1fed21d","modified":1627463840000},{"_id":"themes/yilia-plus/source/live2d_models/izumi/assets/snd/izumi_02.mp3","hash":"d35189bae63cc6ef18d3a949c4a46dd5ed74c6b3","modified":1627463840000},{"_id":"themes/yilia-plus/source/live2d_models/izumi/assets/snd/izumi_04.mp3","hash":"7647fb1e8823bb48ee5f82dbeac35e3f61b74bef","modified":1627463840000},{"_id":"themes/yilia-plus/source/live2d_models/izumi/assets/snd/izumi_03.mp3","hash":"b3d6e98bc30eaf8ac0cf7ffe2f297742a819b380","modified":1627463840000},{"_id":"themes/yilia-plus/source/live2d_models/izumi/assets/snd/izumi_05.mp3","hash":"05e44723c24b387a0eab37a0ab4120ef19ae317e","modified":1627463840000},{"_id":"themes/yilia-plus/source/live2d_models/izumi/assets/snd/izumi_06.mp3","hash":"f39ee4b85ed9877100c028bf938a9a8fd0d2cb6b","modified":1627463840000},{"_id":"themes/yilia-plus/source/live2d_models/izumi/assets/snd/izumi_07.mp3","hash":"0c13c0096d02ceb37b3bcce085206b5d6d8ae834","modified":1627463840000},{"_id":"themes/yilia-plus/source/live2d_models/izumi/assets/snd/izumi_09.mp3","hash":"f7bce48ee99bdad6fa187c484872eafce0b0e351","modified":1627463840000},{"_id":"themes/yilia-plus/source/live2d_models/koharu/assets/mtn/01.mtn","hash":"61d7d590d9feb71b32fd6bd142b59410d75bc1fa","modified":1627463840000},{"_id":"themes/yilia-plus/source/live2d_models/izumi/assets/snd/izumi_10.mp3","hash":"53013c1cc56296a3843d4c8e3f01fd67747b169b","modified":1627463840000},{"_id":"themes/yilia-plus/source/live2d_models/izumi/assets/snd/izumi_08.mp3","hash":"0b73b4f9216ee6b944a91b599c942d567a39fe0f","modified":1627463840000},{"_id":"themes/yilia-plus/source/live2d_models/koharu/assets/mtn/03.mtn","hash":"a72b697a92a7cff40d15774b143b465b34cee5e6","modified":1627463840000},{"_id":"themes/yilia-plus/source/live2d_models/koharu/assets/mtn/04.mtn","hash":"32c888667455a3ff6f1b04f910c1a5cc4de30af0","modified":1627463840000},{"_id":"themes/yilia-plus/source/live2d_models/koharu/assets/mtn/02.mtn","hash":"efc99efdff39c93372cff0f6d62c4e748e1a5593","modified":1627463840000},{"_id":"themes/yilia-plus/source/live2d_models/koharu/assets/mtn/05.mtn","hash":"637e00442da4042cd4b0ed2cc62ffb1559881814","modified":1627463840000},{"_id":"themes/yilia-plus/source/live2d_models/koharu/assets/mtn/06.mtn","hash":"df10cc1d333c96da1296a4853c1ddbd44d8a11f3","modified":1627463840000},{"_id":"themes/yilia-plus/source/live2d_models/koharu/assets/mtn/07.mtn","hash":"d8c9410135c81604eba665b59808089808e0851a","modified":1627463840000},{"_id":"themes/yilia-plus/source/live2d_models/koharu/assets/mtn/08.mtn","hash":"9b95ef8548b979d1fca557c74f8d66fb15b34578","modified":1627463840000},{"_id":"themes/yilia-plus/source/live2d_models/koharu/assets/mtn/09.mtn","hash":"ecf1283b72e1c4b7e3a97343cd97726813f18790","modified":1627463840000},{"_id":"themes/yilia-plus/source/live2d_models/koharu/assets/mtn/idle.mtn","hash":"058d4628ab04bf42c279501ba4fa37116d384e41","modified":1627463840000},{"_id":"themes/yilia-plus/source/live2d_models/miku/assets/mtn/miku_idle_01.mtn","hash":"5633f73601cf8b0a318e7a7265f71cc782683251","modified":1627463840000},{"_id":"themes/yilia-plus/source/live2d_models/miku/assets/mtn/miku_m_01.mtn","hash":"bd0ea5f2f0528b21c4e5632838b69e478b652e88","modified":1627463840000},{"_id":"themes/yilia-plus/source/live2d_models/miku/assets/mtn/miku_m_02.mtn","hash":"2eda9602d626d89285e0c0c5f564383964516cc8","modified":1627463840000},{"_id":"themes/yilia-plus/source/live2d_models/miku/assets/mtn/miku_m_03.mtn","hash":"94ef9d31a78f7f90d3fb213c4353afbdb3462cff","modified":1627463840000},{"_id":"themes/yilia-plus/source/live2d_models/miku/assets/mtn/miku_m_04.mtn","hash":"5c440e8f4cd45e73a7c8044ea0e2ea11234f9fd9","modified":1627463840000},{"_id":"themes/yilia-plus/source/live2d_models/miku/assets/mtn/miku_m_05.mtn","hash":"73b9b162c1dbf9a6747364ae47b12cba9da0bbec","modified":1627463840000},{"_id":"themes/yilia-plus/source/live2d_models/miku/assets/mtn/miku_m_06.mtn","hash":"0bfd6ad29e5e171a1ce03a7acb8ffcca9f463902","modified":1627463840000},{"_id":"themes/yilia-plus/source/live2d_models/miku/assets/mtn/miku_shake_01.mtn","hash":"190875ab6cdeee7ae87c4c296429b848c942dd8a","modified":1627463840000},{"_id":"themes/yilia-plus/source/live2d_models/ni-j/assets/mtn/00_idle.mtn","hash":"3686b7bfdb43f85f4fe1d94ed59379d2c4bee41d","modified":1627463840000},{"_id":"themes/yilia-plus/source/live2d_models/ni-j/assets/mtn/01_happy.mtn","hash":"2020573671b39c81fbd784a8b873ebee019ca501","modified":1627463840000},{"_id":"themes/yilia-plus/source/live2d_models/ni-j/assets/mtn/02_angry.mtn","hash":"f75e1f580c64695fbbf8ba3c5f49eafc7208411d","modified":1627463840000},{"_id":"themes/yilia-plus/source/live2d_models/ni-j/assets/mtn/03_fear.mtn","hash":"b6cdb8fa48960b2a6e66d78ea992221e8108437b","modified":1627463840000},{"_id":"themes/yilia-plus/source/live2d_models/ni-j/assets/mtn/05_fun.mtn","hash":"4b956c9c028dce753fafa1859404a136975786d4","modified":1627463840000},{"_id":"themes/yilia-plus/source/live2d_models/ni-j/assets/mtn/04_surprise.mtn","hash":"4b911af06de9bc6f386aecd623851e5799edaa96","modified":1627463840000},{"_id":"themes/yilia-plus/source/live2d_models/ni-j/assets/mtn/06_love.mtn","hash":"c9f90cc2e2be55ac9c19cf6a962330dad3833fc1","modified":1627463840000},{"_id":"themes/yilia-plus/source/live2d_models/ni-j/assets/mtn/07_bye.mtn","hash":"6a3e90e8efb64cd5b187196625a3d8915efb21c8","modified":1627463840000},{"_id":"themes/yilia-plus/source/live2d_models/ni-j/assets/mtn/08_sad.mtn","hash":"63647d9320bf3928d658e1275adbfaeba88748b7","modified":1627463840000},{"_id":"themes/yilia-plus/source/live2d_models/ni-j/assets/mtn/09_yawn.mtn","hash":"e0e29a712b01be59ae8bba2e1a0d850e06260d20","modified":1627463840000},{"_id":"themes/yilia-plus/source/live2d_models/ni-j/assets/mtn/10_yeah.mtn","hash":"58c4bda1339f41fa8a7e554509a7a871bad392b8","modified":1627463840000},{"_id":"themes/yilia-plus/source/live2d_models/ni-j/assets/mtn/11_muscle.mtn","hash":"7d0e3466a996f8704e86913c723ac4b82f14ff47","modified":1627463840000},{"_id":"themes/yilia-plus/source/live2d_models/ni-j/assets/mtn/13_cry.mtn","hash":"27709b59d2e6cba73d69a67cadb8bf50413206a9","modified":1627463840000},{"_id":"themes/yilia-plus/source/live2d_models/ni-j/assets/mtn/12_stagger.mtn","hash":"3f1a0b25cb1b9fb150f7a9ef37e8c9ba8d4e6ba1","modified":1627463840000},{"_id":"themes/yilia-plus/source/live2d_models/ni-j/assets/mtn/14_ sigh.mtn","hash":"80c4e4f539253d86a7aa5faae2c5e5a3a7b1adcc","modified":1627463840000},{"_id":"themes/yilia-plus/source/live2d_models/ni-j/assets/mtn/15_joy.mtn","hash":"b76a24efc57e4c2cc4abf70c293b2e800029a20d","modified":1627463840000},{"_id":"themes/yilia-plus/source/live2d_models/ni-j/assets/mtn/16_menace.mtn","hash":"6edb6b114d53d7f93cff164992db475b0b6f09c3","modified":1627463840000},{"_id":"themes/yilia-plus/source/live2d_models/ni-j/assets/mtn/17_yes.mtn","hash":"a023cc93e55b3940f1a8690dcfa7ad1cfa534fad","modified":1627463840000},{"_id":"themes/yilia-plus/source/live2d_models/ni-j/assets/mtn/18_no.mtn","hash":"9a18a2537bf6634da2bafd3a57d236de30c73b4e","modified":1627463840000},{"_id":"themes/yilia-plus/source/live2d_models/ni-j/assets/mtn/19_walk.mtn","hash":"035516e8cdaa5b3c6e7524daca72294284a81126","modified":1627463840000},{"_id":"themes/yilia-plus/source/live2d_models/ni-j/assets/mtn/20_sleep.mtn","hash":"914e4670825467e5e8d2f6983bd21c7190e57310","modified":1627463840000},{"_id":"themes/yilia-plus/source/live2d_models/nico/assets/mtn/00_idle.mtn","hash":"3686b7bfdb43f85f4fe1d94ed59379d2c4bee41d","modified":1627463840000},{"_id":"themes/yilia-plus/source/live2d_models/nico/assets/mtn/02_angry.mtn","hash":"f75e1f580c64695fbbf8ba3c5f49eafc7208411d","modified":1627463840000},{"_id":"themes/yilia-plus/source/live2d_models/nico/assets/mtn/03_fear.mtn","hash":"b6cdb8fa48960b2a6e66d78ea992221e8108437b","modified":1627463840000},{"_id":"themes/yilia-plus/source/live2d_models/nico/assets/mtn/04_surprise.mtn","hash":"4b911af06de9bc6f386aecd623851e5799edaa96","modified":1627463840000},{"_id":"themes/yilia-plus/source/live2d_models/nico/assets/mtn/01_happy.mtn","hash":"2020573671b39c81fbd784a8b873ebee019ca501","modified":1627463840000},{"_id":"themes/yilia-plus/source/live2d_models/nico/assets/mtn/06_love.mtn","hash":"c9f90cc2e2be55ac9c19cf6a962330dad3833fc1","modified":1627463840000},{"_id":"themes/yilia-plus/source/live2d_models/nico/assets/mtn/07_bye.mtn","hash":"6a3e90e8efb64cd5b187196625a3d8915efb21c8","modified":1627463840000},{"_id":"themes/yilia-plus/source/live2d_models/nico/assets/mtn/08_sad.mtn","hash":"63647d9320bf3928d658e1275adbfaeba88748b7","modified":1627463840000},{"_id":"themes/yilia-plus/source/live2d_models/nico/assets/mtn/09_yawn.mtn","hash":"e0e29a712b01be59ae8bba2e1a0d850e06260d20","modified":1627463840000},{"_id":"themes/yilia-plus/source/live2d_models/nico/assets/mtn/10_yeah.mtn","hash":"58c4bda1339f41fa8a7e554509a7a871bad392b8","modified":1627463840000},{"_id":"themes/yilia-plus/source/live2d_models/nico/assets/mtn/05_fun.mtn","hash":"4b956c9c028dce753fafa1859404a136975786d4","modified":1627463840000},{"_id":"themes/yilia-plus/source/live2d_models/nico/assets/mtn/11_muscle.mtn","hash":"7d0e3466a996f8704e86913c723ac4b82f14ff47","modified":1627463840000},{"_id":"themes/yilia-plus/source/live2d_models/nico/assets/mtn/12_stagger.mtn","hash":"3f1a0b25cb1b9fb150f7a9ef37e8c9ba8d4e6ba1","modified":1627463840000},{"_id":"themes/yilia-plus/source/live2d_models/nico/assets/mtn/13_cry.mtn","hash":"27709b59d2e6cba73d69a67cadb8bf50413206a9","modified":1627463840000},{"_id":"themes/yilia-plus/source/live2d_models/nico/assets/mtn/14_ sigh.mtn","hash":"80c4e4f539253d86a7aa5faae2c5e5a3a7b1adcc","modified":1627463840000},{"_id":"themes/yilia-plus/source/live2d_models/nico/assets/mtn/15_joy.mtn","hash":"b76a24efc57e4c2cc4abf70c293b2e800029a20d","modified":1627463840000},{"_id":"themes/yilia-plus/source/live2d_models/nico/assets/mtn/16_menace.mtn","hash":"6edb6b114d53d7f93cff164992db475b0b6f09c3","modified":1627463840000},{"_id":"themes/yilia-plus/source/live2d_models/nico/assets/mtn/17_yes.mtn","hash":"a023cc93e55b3940f1a8690dcfa7ad1cfa534fad","modified":1627463840000},{"_id":"themes/yilia-plus/source/live2d_models/nico/assets/mtn/18_no.mtn","hash":"9a18a2537bf6634da2bafd3a57d236de30c73b4e","modified":1627463840000},{"_id":"themes/yilia-plus/source/live2d_models/nico/assets/mtn/19_walk.mtn","hash":"035516e8cdaa5b3c6e7524daca72294284a81126","modified":1627463840000},{"_id":"themes/yilia-plus/source/live2d_models/nico/assets/mtn/20_sleep.mtn","hash":"914e4670825467e5e8d2f6983bd21c7190e57310","modified":1627463840000},{"_id":"themes/yilia-plus/source/live2d_models/nipsilon/assets/mtn/00_idle.mtn","hash":"3686b7bfdb43f85f4fe1d94ed59379d2c4bee41d","modified":1627463840000},{"_id":"themes/yilia-plus/source/live2d_models/nipsilon/assets/mtn/01_happy.mtn","hash":"2020573671b39c81fbd784a8b873ebee019ca501","modified":1627463840000},{"_id":"themes/yilia-plus/source/live2d_models/nipsilon/assets/mtn/02_angry.mtn","hash":"f75e1f580c64695fbbf8ba3c5f49eafc7208411d","modified":1627463840000},{"_id":"themes/yilia-plus/source/live2d_models/nipsilon/assets/mtn/03_fear.mtn","hash":"b6cdb8fa48960b2a6e66d78ea992221e8108437b","modified":1627463840000},{"_id":"themes/yilia-plus/source/live2d_models/nipsilon/assets/mtn/04_surprise.mtn","hash":"4b911af06de9bc6f386aecd623851e5799edaa96","modified":1627463840000},{"_id":"themes/yilia-plus/source/live2d_models/nipsilon/assets/mtn/05_fun.mtn","hash":"4b956c9c028dce753fafa1859404a136975786d4","modified":1627463840000},{"_id":"themes/yilia-plus/source/live2d_models/nipsilon/assets/mtn/06_love.mtn","hash":"c9f90cc2e2be55ac9c19cf6a962330dad3833fc1","modified":1627463840000},{"_id":"themes/yilia-plus/source/live2d_models/nipsilon/assets/mtn/07_bye.mtn","hash":"6a3e90e8efb64cd5b187196625a3d8915efb21c8","modified":1627463840000},{"_id":"themes/yilia-plus/source/live2d_models/nipsilon/assets/mtn/08_sad.mtn","hash":"63647d9320bf3928d658e1275adbfaeba88748b7","modified":1627463840000},{"_id":"themes/yilia-plus/source/live2d_models/nipsilon/assets/mtn/09_yawn.mtn","hash":"e0e29a712b01be59ae8bba2e1a0d850e06260d20","modified":1627463840000},{"_id":"themes/yilia-plus/source/live2d_models/nipsilon/assets/mtn/10_yeah.mtn","hash":"58c4bda1339f41fa8a7e554509a7a871bad392b8","modified":1627463840000},{"_id":"themes/yilia-plus/source/live2d_models/nipsilon/assets/mtn/11_muscle.mtn","hash":"7d0e3466a996f8704e86913c723ac4b82f14ff47","modified":1627463840000},{"_id":"themes/yilia-plus/source/live2d_models/nipsilon/assets/mtn/12_stagger.mtn","hash":"3f1a0b25cb1b9fb150f7a9ef37e8c9ba8d4e6ba1","modified":1627463840000},{"_id":"themes/yilia-plus/source/live2d_models/nipsilon/assets/mtn/13_cry.mtn","hash":"27709b59d2e6cba73d69a67cadb8bf50413206a9","modified":1627463840000},{"_id":"themes/yilia-plus/source/live2d_models/nipsilon/assets/mtn/14_ sigh.mtn","hash":"80c4e4f539253d86a7aa5faae2c5e5a3a7b1adcc","modified":1627463840000},{"_id":"themes/yilia-plus/source/live2d_models/nipsilon/assets/mtn/15_joy.mtn","hash":"b76a24efc57e4c2cc4abf70c293b2e800029a20d","modified":1627463840000},{"_id":"themes/yilia-plus/source/live2d_models/nipsilon/assets/mtn/16_menace.mtn","hash":"6edb6b114d53d7f93cff164992db475b0b6f09c3","modified":1627463840000},{"_id":"themes/yilia-plus/source/live2d_models/nipsilon/assets/mtn/17_yes.mtn","hash":"a023cc93e55b3940f1a8690dcfa7ad1cfa534fad","modified":1627463840000},{"_id":"themes/yilia-plus/source/live2d_models/nipsilon/assets/mtn/18_no.mtn","hash":"9a18a2537bf6634da2bafd3a57d236de30c73b4e","modified":1627463840000},{"_id":"themes/yilia-plus/source/live2d_models/nipsilon/assets/mtn/19_walk.mtn","hash":"035516e8cdaa5b3c6e7524daca72294284a81126","modified":1627463840000},{"_id":"themes/yilia-plus/source/live2d_models/nipsilon/assets/mtn/20_sleep.mtn","hash":"914e4670825467e5e8d2f6983bd21c7190e57310","modified":1627463840000},{"_id":"themes/yilia-plus/source/live2d_models/nietzsche/assets/mtn/00_idle.mtn","hash":"3686b7bfdb43f85f4fe1d94ed59379d2c4bee41d","modified":1627463840000},{"_id":"themes/yilia-plus/source/live2d_models/nietzsche/assets/mtn/01_happy.mtn","hash":"2020573671b39c81fbd784a8b873ebee019ca501","modified":1627463840000},{"_id":"themes/yilia-plus/source/live2d_models/nietzsche/assets/mtn/02_angry.mtn","hash":"f75e1f580c64695fbbf8ba3c5f49eafc7208411d","modified":1627463840000},{"_id":"themes/yilia-plus/source/live2d_models/nietzsche/assets/mtn/04_surprise.mtn","hash":"4b911af06de9bc6f386aecd623851e5799edaa96","modified":1627463840000},{"_id":"themes/yilia-plus/source/live2d_models/nietzsche/assets/mtn/03_fear.mtn","hash":"b6cdb8fa48960b2a6e66d78ea992221e8108437b","modified":1627463840000},{"_id":"themes/yilia-plus/source/live2d_models/nietzsche/assets/mtn/05_fun.mtn","hash":"4b956c9c028dce753fafa1859404a136975786d4","modified":1627463840000},{"_id":"themes/yilia-plus/source/live2d_models/nietzsche/assets/mtn/06_love.mtn","hash":"c9f90cc2e2be55ac9c19cf6a962330dad3833fc1","modified":1627463840000},{"_id":"themes/yilia-plus/source/live2d_models/nietzsche/assets/mtn/07_bye.mtn","hash":"6a3e90e8efb64cd5b187196625a3d8915efb21c8","modified":1627463840000},{"_id":"themes/yilia-plus/source/live2d_models/nietzsche/assets/mtn/08_sad.mtn","hash":"63647d9320bf3928d658e1275adbfaeba88748b7","modified":1627463840000},{"_id":"themes/yilia-plus/source/live2d_models/nietzsche/assets/mtn/09_yawn.mtn","hash":"e0e29a712b01be59ae8bba2e1a0d850e06260d20","modified":1627463840000},{"_id":"themes/yilia-plus/source/live2d_models/nietzsche/assets/mtn/10_yeah.mtn","hash":"58c4bda1339f41fa8a7e554509a7a871bad392b8","modified":1627463840000},{"_id":"themes/yilia-plus/source/live2d_models/nietzsche/assets/mtn/11_muscle.mtn","hash":"7d0e3466a996f8704e86913c723ac4b82f14ff47","modified":1627463840000},{"_id":"themes/yilia-plus/source/live2d_models/nietzsche/assets/mtn/12_stagger.mtn","hash":"3f1a0b25cb1b9fb150f7a9ef37e8c9ba8d4e6ba1","modified":1627463840000},{"_id":"themes/yilia-plus/source/live2d_models/nietzsche/assets/mtn/13_cry.mtn","hash":"27709b59d2e6cba73d69a67cadb8bf50413206a9","modified":1627463840000},{"_id":"themes/yilia-plus/source/live2d_models/nietzsche/assets/mtn/15_joy.mtn","hash":"b76a24efc57e4c2cc4abf70c293b2e800029a20d","modified":1627463840000},{"_id":"themes/yilia-plus/source/live2d_models/nietzsche/assets/mtn/14_ sigh.mtn","hash":"80c4e4f539253d86a7aa5faae2c5e5a3a7b1adcc","modified":1627463840000},{"_id":"themes/yilia-plus/source/live2d_models/nietzsche/assets/mtn/16_menace.mtn","hash":"6edb6b114d53d7f93cff164992db475b0b6f09c3","modified":1627463840000},{"_id":"themes/yilia-plus/source/live2d_models/nietzsche/assets/mtn/17_yes.mtn","hash":"a023cc93e55b3940f1a8690dcfa7ad1cfa534fad","modified":1627463840000},{"_id":"themes/yilia-plus/source/live2d_models/nietzsche/assets/mtn/18_no.mtn","hash":"9a18a2537bf6634da2bafd3a57d236de30c73b4e","modified":1627463840000},{"_id":"themes/yilia-plus/source/live2d_models/nietzsche/assets/mtn/19_walk.mtn","hash":"035516e8cdaa5b3c6e7524daca72294284a81126","modified":1627463840000},{"_id":"themes/yilia-plus/source/live2d_models/nietzsche/assets/mtn/20_sleep.mtn","hash":"914e4670825467e5e8d2f6983bd21c7190e57310","modified":1627463840000},{"_id":"themes/yilia-plus/source/live2d_models/nito/assets/mtn/00_idle.mtn","hash":"3686b7bfdb43f85f4fe1d94ed59379d2c4bee41d","modified":1627463840000},{"_id":"themes/yilia-plus/source/live2d_models/nito/assets/mtn/01_happy.mtn","hash":"2020573671b39c81fbd784a8b873ebee019ca501","modified":1627463840000},{"_id":"themes/yilia-plus/source/live2d_models/nito/assets/mtn/02_angry.mtn","hash":"f75e1f580c64695fbbf8ba3c5f49eafc7208411d","modified":1627463840000},{"_id":"themes/yilia-plus/source/live2d_models/nito/assets/mtn/03_fear.mtn","hash":"b6cdb8fa48960b2a6e66d78ea992221e8108437b","modified":1627463840000},{"_id":"themes/yilia-plus/source/live2d_models/nito/assets/mtn/04_surprise.mtn","hash":"4b911af06de9bc6f386aecd623851e5799edaa96","modified":1627463840000},{"_id":"themes/yilia-plus/source/live2d_models/nito/assets/mtn/05_fun.mtn","hash":"4b956c9c028dce753fafa1859404a136975786d4","modified":1627463840000},{"_id":"themes/yilia-plus/source/live2d_models/nito/assets/mtn/06_love.mtn","hash":"c9f90cc2e2be55ac9c19cf6a962330dad3833fc1","modified":1627463840000},{"_id":"themes/yilia-plus/source/live2d_models/nito/assets/mtn/07_bye.mtn","hash":"6a3e90e8efb64cd5b187196625a3d8915efb21c8","modified":1627463840000},{"_id":"themes/yilia-plus/source/live2d_models/nito/assets/mtn/08_sad.mtn","hash":"63647d9320bf3928d658e1275adbfaeba88748b7","modified":1627463840000},{"_id":"themes/yilia-plus/source/live2d_models/nito/assets/mtn/10_yeah.mtn","hash":"58c4bda1339f41fa8a7e554509a7a871bad392b8","modified":1627463840000},{"_id":"themes/yilia-plus/source/live2d_models/nito/assets/mtn/09_yawn.mtn","hash":"e0e29a712b01be59ae8bba2e1a0d850e06260d20","modified":1627463840000},{"_id":"themes/yilia-plus/source/live2d_models/nito/assets/mtn/11_muscle.mtn","hash":"7d0e3466a996f8704e86913c723ac4b82f14ff47","modified":1627463840000},{"_id":"themes/yilia-plus/source/live2d_models/nito/assets/mtn/12_stagger.mtn","hash":"3f1a0b25cb1b9fb150f7a9ef37e8c9ba8d4e6ba1","modified":1627463840000},{"_id":"themes/yilia-plus/source/live2d_models/nito/assets/mtn/13_cry.mtn","hash":"27709b59d2e6cba73d69a67cadb8bf50413206a9","modified":1627463840000},{"_id":"themes/yilia-plus/source/live2d_models/nito/assets/mtn/14_ sigh.mtn","hash":"80c4e4f539253d86a7aa5faae2c5e5a3a7b1adcc","modified":1627463840000},{"_id":"themes/yilia-plus/source/live2d_models/nito/assets/mtn/15_joy.mtn","hash":"b76a24efc57e4c2cc4abf70c293b2e800029a20d","modified":1627463840000},{"_id":"themes/yilia-plus/source/live2d_models/nito/assets/mtn/16_menace.mtn","hash":"6edb6b114d53d7f93cff164992db475b0b6f09c3","modified":1627463840000},{"_id":"themes/yilia-plus/source/live2d_models/nito/assets/mtn/17_yes.mtn","hash":"a023cc93e55b3940f1a8690dcfa7ad1cfa534fad","modified":1627463840000},{"_id":"themes/yilia-plus/source/live2d_models/nito/assets/mtn/18_no.mtn","hash":"9a18a2537bf6634da2bafd3a57d236de30c73b4e","modified":1627463840000},{"_id":"themes/yilia-plus/source/live2d_models/nito/assets/mtn/19_walk.mtn","hash":"035516e8cdaa5b3c6e7524daca72294284a81126","modified":1627463840000},{"_id":"themes/yilia-plus/source/live2d_models/shizuku/assets/exp/f02.exp.json","hash":"241b6afafa2e25c6d7a54692a8b5aa060a137ab1","modified":1627463840000},{"_id":"themes/yilia-plus/source/live2d_models/shizuku/assets/exp/f04.exp.json","hash":"35e746ede62e7090e7dfb08561d77772f58b4153","modified":1627463840000},{"_id":"themes/yilia-plus/source/live2d_models/shizuku/assets/exp/f01.exp.json","hash":"84073a497ddb6e56c6cfc244a0fb217ba473abf9","modified":1627463840000},{"_id":"themes/yilia-plus/source/live2d_models/nito/assets/mtn/20_sleep.mtn","hash":"914e4670825467e5e8d2f6983bd21c7190e57310","modified":1627463840000},{"_id":"themes/yilia-plus/source/live2d_models/shizuku/assets/exp/f03.exp.json","hash":"fbf7729e504f14f83f976827fcf62301a6579a34","modified":1627463840000},{"_id":"themes/yilia-plus/source/live2d_models/shizuku/assets/mtn/flickHead_00.mtn","hash":"f64c79c9171660db5c440bef229ac2e35a1597d5","modified":1627463840000},{"_id":"themes/yilia-plus/source/live2d_models/shizuku/assets/mtn/flickHead_01.mtn","hash":"a1011d6bf397bcd3c3c968d9616f88fe1ffbc83c","modified":1627463840000},{"_id":"themes/yilia-plus/source/live2d_models/shizuku/assets/mtn/flickHead_02.mtn","hash":"d3c9c0acb4dc25a2274f3b9faa71e5ce60ad92e4","modified":1627463840000},{"_id":"themes/yilia-plus/source/live2d_models/shizuku/assets/mtn/idle_00.mtn","hash":"f9fa4acb170959ed665690d18790fc618cea6bd2","modified":1627463840000},{"_id":"themes/yilia-plus/source/live2d_models/shizuku/assets/mtn/idle_01.mtn","hash":"fe824e9209bda79277f4785a637c38bf3b8e1cad","modified":1627463840000},{"_id":"themes/yilia-plus/source/live2d_models/shizuku/assets/mtn/idle_02.mtn","hash":"58b87745d9c2b2b5667549a52a781b6bfea44927","modified":1627463840000},{"_id":"themes/yilia-plus/source/live2d_models/shizuku/assets/mtn/pinchIn_00.mtn","hash":"70978b4c983f6a9fd6d3d9c24571586f7d6eac30","modified":1627463840000},{"_id":"themes/yilia-plus/source/live2d_models/shizuku/assets/mtn/pinchIn_01.mtn","hash":"a5fefb45115695db72b9499e627a51b2b9394f2c","modified":1627463840000},{"_id":"themes/yilia-plus/source/live2d_models/shizuku/assets/mtn/pinchIn_02.mtn","hash":"aa0d66ca9b06c374577fd7e64e89756de1e1f2ae","modified":1627463840000},{"_id":"themes/yilia-plus/source/live2d_models/shizuku/assets/mtn/pinchOut_00.mtn","hash":"e07fe8fd8c2810e3c1d28b730bd49c8c25849bad","modified":1627463840000},{"_id":"themes/yilia-plus/source/live2d_models/shizuku/assets/mtn/pinchOut_01.mtn","hash":"e05df948d08b17f34c993a9c1f901190509d5db0","modified":1627463840000},{"_id":"themes/yilia-plus/source/live2d_models/shizuku/assets/mtn/shake_00.mtn","hash":"5185d02c7ab9f0bec3d4a890b54b2378e553373d","modified":1627463840000},{"_id":"themes/yilia-plus/source/live2d_models/shizuku/assets/mtn/pinchOut_02.mtn","hash":"b323fd350d334b33bbdfb31194ae664089986c27","modified":1627463840000},{"_id":"themes/yilia-plus/source/live2d_models/shizuku/assets/mtn/shake_01.mtn","hash":"e812985a56796e122018f9d57d1606a4866ff7d1","modified":1627463840000},{"_id":"themes/yilia-plus/source/live2d_models/shizuku/assets/mtn/shake_02.mtn","hash":"2702970805e07777974c383613e631730982bcff","modified":1627463840000},{"_id":"themes/yilia-plus/source/live2d_models/shizuku/assets/mtn/tapBody_00.mtn","hash":"835aa3d4a8fbd26c0bb66b164a19464fa3f17a99","modified":1627463840000},{"_id":"themes/yilia-plus/source/live2d_models/shizuku/assets/mtn/tapBody_01.mtn","hash":"78fca17436ab5e065e27f419f135aa6c0a0b52ef","modified":1627463840000},{"_id":"themes/yilia-plus/source/live2d_models/shizuku/assets/mtn/tapBody_02.mtn","hash":"a75acb51c1191ce5050d3ee1af6f2dcc787c7c5e","modified":1627463840000},{"_id":"themes/yilia-plus/source/live2d_models/shizuku/assets/snd/flickHead_01.mp3","hash":"436d0bbccf6e7a2744447554947eee4563608970","modified":1627463840000},{"_id":"themes/yilia-plus/source/live2d_models/shizuku/assets/snd/flickHead_00.mp3","hash":"356388d939006b03cf9e6158c603b58d4800bec1","modified":1627463840000},{"_id":"themes/yilia-plus/source/live2d_models/shizuku/assets/snd/flickHead_02.mp3","hash":"5f63477ce63f2073e24d68fea906fe136fe6349e","modified":1627463840000},{"_id":"themes/yilia-plus/source/live2d_models/shizuku/assets/snd/pinchIn_01.mp3","hash":"d5c8cc6f61b56222a83a5174f75006f83c3b88da","modified":1627463840000},{"_id":"themes/yilia-plus/source/live2d_models/shizuku/assets/snd/pinchIn_00.mp3","hash":"f9baa3b7cadec20b714135fc49cfab3ff6adeeb4","modified":1627463840000},{"_id":"themes/yilia-plus/source/live2d_models/shizuku/assets/snd/shake_00.mp3","hash":"f65dd58e7b44ec5c865d13c190316070b625b5fe","modified":1627463840000},{"_id":"themes/yilia-plus/source/live2d_models/shizuku/assets/snd/shake_01.mp3","hash":"c1e0e8a07ff268ee06c2b7825d1b645e193f21b9","modified":1627463840000},{"_id":"themes/yilia-plus/source/live2d_models/shizuku/assets/snd/shake_02.mp3","hash":"8882b94bce00f09232588b7301badb105fa8acab","modified":1627463840000},{"_id":"themes/yilia-plus/source/live2d_models/shizuku/assets/snd/tapBody_00.mp3","hash":"003e68a59a9c8392e230f34c91860efbd946277a","modified":1627463840000},{"_id":"themes/yilia-plus/source/live2d_models/tororo/assets/mtn/00_idle.mtn","hash":"b224c60e463b9f71ddbfc0c720e430496c175f4f","modified":1627463840000},{"_id":"themes/yilia-plus/source/live2d_models/shizuku/assets/snd/tapBody_02.mp3","hash":"15e7815ed0a0e5164e18e0c53b97aedc742a134d","modified":1627463840000},{"_id":"themes/yilia-plus/source/live2d_models/tororo/assets/mtn/01.mtn","hash":"fb550833ae22c9954c3e01df37ed29b2d61700f2","modified":1627463840000},{"_id":"themes/yilia-plus/source/live2d_models/shizuku/assets/snd/tapBody_01.mp3","hash":"5314b50f153df71559e51e2586581c006df00722","modified":1627463840000},{"_id":"themes/yilia-plus/source/live2d_models/tororo/assets/mtn/02.mtn","hash":"7eafc52edc73b7cb80ae70d34b43c6ac778fa47b","modified":1627463840000},{"_id":"themes/yilia-plus/source/live2d_models/tororo/assets/mtn/03.mtn","hash":"f900737c7a98441cbb2e05255427e6260e19ae68","modified":1627463840000},{"_id":"themes/yilia-plus/source/live2d_models/tororo/assets/mtn/05.mtn","hash":"dd20ad24b5d1830a5d44b9bccb28f922eea5e0e5","modified":1627463840000},{"_id":"themes/yilia-plus/source/live2d_models/tororo/assets/mtn/04.mtn","hash":"c7a25d3c5d783639bae18db2f3cd284b819c3c85","modified":1627463840000},{"_id":"themes/yilia-plus/source/live2d_models/tororo/assets/mtn/06.mtn","hash":"ad404bd852d276cdd3d054c953e23f90e4e45ae1","modified":1627463840000},{"_id":"themes/yilia-plus/source/live2d_models/tororo/assets/mtn/07.mtn","hash":"b7f2e3a9fa4f3ffbb6e64a08f8d9f45ca1868ffb","modified":1627463840000},{"_id":"themes/yilia-plus/source/live2d_models/tororo/assets/mtn/08.mtn","hash":"4411c7651ff65195b113d95e7d5ebef8a59a37d9","modified":1627463840000},{"_id":"themes/yilia-plus/source/live2d_models/tsumiki/assets/exp/F01.exp.json","hash":"7c0a23a6f3f0a584887be3d3b482ecc7a359306e","modified":1627463840000},{"_id":"themes/yilia-plus/source/live2d_models/tsumiki/assets/exp/F02.exp.json","hash":"5e7fffd67c06aee0cdcab0b8f816fd6a125db260","modified":1627463840000},{"_id":"themes/yilia-plus/source/live2d_models/tsumiki/assets/exp/F03.exp.json","hash":"ab92d6fd93d152a4739d93cc6a650c36623dcf72","modified":1627463840000},{"_id":"themes/yilia-plus/source/live2d_models/tsumiki/assets/exp/F04.exp.json","hash":"19c9ad9d05ea7cb15ccdabeaa14ec84c2763af9c","modified":1627463840000},{"_id":"themes/yilia-plus/source/live2d_models/tsumiki/assets/exp/F05.exp.json","hash":"afd807b47a00389374949731dd97087aeeec28d7","modified":1627463840000},{"_id":"themes/yilia-plus/source/live2d_models/tsumiki/assets/exp/F06.exp.json","hash":"8dd11423a36822927463c3adfdd629d4126f2205","modified":1627463840000},{"_id":"themes/yilia-plus/source/live2d_models/tsumiki/assets/exp/F07.exp.json","hash":"65441e1c9d27f4af55b45759e3c8407af2b72c3e","modified":1627463840000},{"_id":"themes/yilia-plus/source/live2d_models/tsumiki/assets/exp/F08.exp.json","hash":"03284527751a22b05336329df15e103fdc7e95ec","modified":1627463840000},{"_id":"themes/yilia-plus/source/live2d_models/tsumiki/assets/exp/F09.exp.json","hash":"eb7d53e7617247158e4d538e2e7f1a602cfe21a5","modified":1627463840000},{"_id":"themes/yilia-plus/source/live2d_models/tsumiki/assets/exp/F10.exp.json","hash":"61bccc68a43662888862fe46c91f579958097ed9","modified":1627463840000},{"_id":"themes/yilia-plus/source/live2d_models/tsumiki/assets/mtn/P01.mtn","hash":"4b6d266d9fe31e01c4e13ac2049435b5d70b5589","modified":1627463840000},{"_id":"themes/yilia-plus/source/live2d_models/tsumiki/assets/mtn/tsumiki_m_01.mtn","hash":"b1b0e2237926a52970703bcfdd5cf6bb6fc39248","modified":1627463840000},{"_id":"themes/yilia-plus/source/live2d_models/tsumiki/assets/mtn/tsumiki_m_01_df.mtn","hash":"4b008605c2f61f37fd295d929df8b51e9f1f447e","modified":1627463840000},{"_id":"themes/yilia-plus/source/live2d_models/tsumiki/assets/mtn/tsumiki_idle_01.mtn","hash":"dd178b1cb3817bd2d7e6f56f25daf3ffacd4afdd","modified":1627463840000},{"_id":"themes/yilia-plus/source/live2d_models/tsumiki/assets/mtn/tsumiki_m_02.mtn","hash":"43f73acf0ec68e5ddda2fb212b3bd62b4ec63829","modified":1627463840000},{"_id":"themes/yilia-plus/source/live2d_models/tsumiki/assets/mtn/tsumiki_m_03.mtn","hash":"bbd6a2cbe87dea113024d9d953bb42864cad31a5","modified":1627463840000},{"_id":"themes/yilia-plus/source/live2d_models/tsumiki/assets/mtn/tsumiki_m_04.mtn","hash":"b6395b5acb2136c8265f37483cfe60b4a1bfb66d","modified":1627463840000},{"_id":"themes/yilia-plus/source/live2d_models/tsumiki/assets/mtn/tsumiki_m_06.mtn","hash":"2641628ced0c982f214242744da73f1ab048c078","modified":1627463840000},{"_id":"themes/yilia-plus/source/live2d_models/tsumiki/assets/mtn/tsumiki_m_05.mtn","hash":"c118b3bcbf03d0cc07c9f6a2a8e8c495f07f4091","modified":1627463840000},{"_id":"themes/yilia-plus/source/live2d_models/tsumiki/assets/mtn/tsumiki_m_07.mtn","hash":"ec5da8fb40ff26dc3e9f306cade5f4bfc2f15642","modified":1627463840000},{"_id":"themes/yilia-plus/source/live2d_models/tsumiki/assets/mtn/tsumiki_m_08.mtn","hash":"98768aafeb239e75f788969eb995adbe7a89bc3f","modified":1627463840000},{"_id":"themes/yilia-plus/source/live2d_models/tsumiki/assets/mtn/tsumiki_m_09.mtn","hash":"c4f3635225ba606873a7c14cc91bf5a28a2afa95","modified":1627463840000},{"_id":"themes/yilia-plus/source/live2d_models/tsumiki/assets/mtn/tsumiki_m_10.mtn","hash":"8e6d0609ae64f8dd4db0e5e85addbc677fac3a79","modified":1627463840000},{"_id":"themes/yilia-plus/source/live2d_models/tsumiki/assets/mtn/tsumiki_m_13.mtn","hash":"d20d09dfbdf42d13240c45f9d2fa4474a4541dd8","modified":1627463840000},{"_id":"themes/yilia-plus/source/live2d_models/tsumiki/assets/mtn/tsumiki_m_14.mtn","hash":"2480493fffb4fd8135ef1e88c5f717952b7d6542","modified":1627463840000},{"_id":"themes/yilia-plus/source/live2d_models/tsumiki/assets/mtn/tsumiki_m_15.mtn","hash":"4fa8d8667c41cd5b3c49cf4bdd8b36cf0a9158b9","modified":1627463840000},{"_id":"themes/yilia-plus/source/live2d_models/tsumiki/assets/mtn/tsumiki_m_17.mtn","hash":"6346ebcf76b0780987f552b16c4c62c39732597f","modified":1627463840000},{"_id":"themes/yilia-plus/source/live2d_models/tsumiki/assets/mtn/tsumiki_m_18.mtn","hash":"34fbff31238e9b6a541f5f03a00bec5cbcec6649","modified":1627463840000},{"_id":"themes/yilia-plus/source/live2d_models/tsumiki/assets/mtn/tsumiki_m_19.mtn","hash":"685fc0130899e903d9c9433ec1c1a987323d6c8c","modified":1627463840000},{"_id":"themes/yilia-plus/source/live2d_models/tsumiki/assets/mtn/tsumiki_m_16.mtn","hash":"03843599008ab2ee23d9d03174924609ad042ce6","modified":1627463840000},{"_id":"themes/yilia-plus/source/live2d_models/tsumiki/assets/mtn/tsumiki_m_20.mtn","hash":"076ca7be2c81e776794245a3865478b20428e416","modified":1627463840000},{"_id":"themes/yilia-plus/source/live2d_models/tsumiki/assets/mtn/tsumiki_m_21.mtn","hash":"bd917f60537e4e9037c85bf356d4c25e75e2807c","modified":1627463840000},{"_id":"themes/yilia-plus/source/live2d_models/tsumiki/assets/mtn/tsumiki_m_22.mtn","hash":"0fb02e4734ab8c455e1405dfed9546af583595ae","modified":1627463840000},{"_id":"themes/yilia-plus/source/live2d_models/tsumiki/assets/mtn/tsumiki_m_24.mtn","hash":"696502793e9917abc495645be784262e3b997bde","modified":1627463840000},{"_id":"themes/yilia-plus/source/live2d_models/tsumiki/assets/mtn/tsumiki_m_23.mtn","hash":"d5a156e295e575c615b673350c025e3270afee8e","modified":1627463840000},{"_id":"themes/yilia-plus/source/live2d_models/unitychan/assets/mtn/idle_01.mtn","hash":"e38a7dcfcad059b695f935b2071a1270c1ddf905","modified":1627463840000},{"_id":"themes/yilia-plus/source/live2d_models/unitychan/assets/mtn/idle_02.mtn","hash":"8c3929962a4991c94bf7aeaf33169d61ccaccb2c","modified":1627463840000},{"_id":"themes/yilia-plus/source/live2d_models/unitychan/assets/mtn/m_01.mtn","hash":"97d08b57c3b07a854f69cdef3ce6d13a2b2ece1c","modified":1627463840000},{"_id":"themes/yilia-plus/source/live2d_models/unitychan/assets/mtn/m_02.mtn","hash":"a4dd9580452854f6adc7b30e9e85702a7641179c","modified":1627463840000},{"_id":"themes/yilia-plus/source/live2d_models/unitychan/assets/mtn/m_04.mtn","hash":"32f8515854a89878c5becbabf56dabd4c675d437","modified":1627463840000},{"_id":"themes/yilia-plus/source/live2d_models/unitychan/assets/mtn/m_03.mtn","hash":"dd140c6c4702f3fbd785a85a4d5d8cfa32b9bc32","modified":1627463840000},{"_id":"themes/yilia-plus/source/live2d_models/unitychan/assets/mtn/m_05.mtn","hash":"ca1f068a2c9c56519e4306115b95d1f497f31124","modified":1627463840000},{"_id":"themes/yilia-plus/source/live2d_models/unitychan/assets/mtn/m_06.mtn","hash":"cb16f119956346e4b15a1c432491423893cf2389","modified":1627463840000},{"_id":"themes/yilia-plus/source/live2d_models/unitychan/assets/mtn/m_07.mtn","hash":"35caceb556d9bb4fc2a5ed4f8c51d766a6e70405","modified":1627463840000},{"_id":"themes/yilia-plus/source/live2d_models/unitychan/assets/mtn/m_08.mtn","hash":"fbd6ae1967446a421d8505a8d29d5f7f64b5c0d7","modified":1627463840000},{"_id":"themes/yilia-plus/source/live2d_models/unitychan/assets/mtn/m_09.mtn","hash":"4b942bfbde2a82f19bb4aab7e54e3caae9691da6","modified":1627463840000},{"_id":"themes/yilia-plus/source/live2d_models/unitychan/assets/mtn/m_10.mtn","hash":"837f0cda82543d87c12108957a16e482964f3796","modified":1627463840000},{"_id":"themes/yilia-plus/source/live2d_models/unitychan/assets/mtn/m_11.mtn","hash":"2c5ec476b9e3246d8c7a5ae4611401d3420cfa1e","modified":1627463840000},{"_id":"themes/yilia-plus/source/live2d_models/unitychan/assets/mtn/m_12.mtn","hash":"90e96587969b78785c16cdffbdbe0b220cac39b7","modified":1627463840000},{"_id":"themes/yilia-plus/source/live2d_models/unitychan/assets/mtn/m_13.mtn","hash":"f08d7f660fda4029fec2acb1f1389f855b5d1b96","modified":1627463840000},{"_id":"themes/yilia-plus/source/live2d_models/unitychan/assets/mtn/m_14.mtn","hash":"4c5c7fdc05237a090341d4690bd7e07344728e9e","modified":1627463840000},{"_id":"themes/yilia-plus/source/live2d_models/wanko/assets/mtn/idle_01.mtn","hash":"908abce18f6cf7fd4bc1486f048c25a517f4a34a","modified":1627463840000},{"_id":"themes/yilia-plus/source/live2d_models/wanko/assets/mtn/idle_02.mtn","hash":"865874c50848fbc9a55011391531e2ec171c9b91","modified":1627463840000},{"_id":"themes/yilia-plus/source/live2d_models/wanko/assets/mtn/idle_03.mtn","hash":"84684914ebf5dc5b2df160338bb97dcc0a978476","modified":1627463840000},{"_id":"themes/yilia-plus/source/live2d_models/wanko/assets/mtn/idle_04.mtn","hash":"78e22091792abb0600f724a5dfd60371257954e8","modified":1627463840000},{"_id":"themes/yilia-plus/source/live2d_models/wanko/assets/mtn/shake_01.mtn","hash":"dffc54733127832f8f5e91aced55a83da58fa215","modified":1627463840000},{"_id":"themes/yilia-plus/source/live2d_models/wanko/assets/mtn/shake_02.mtn","hash":"7b6c914f6c33450eda2e53d9b638fd7045c0f683","modified":1627463840000},{"_id":"themes/yilia-plus/source/live2d_models/wanko/assets/mtn/touch_01.mtn","hash":"99270ea8fe1f8f5d88eadb94f36bd0810009d1e6","modified":1627463840000},{"_id":"themes/yilia-plus/source/live2d_models/wanko/assets/mtn/touch_02.mtn","hash":"4d1f099fbd18d15c598a644227ed5bf942a2ba71","modified":1627463840000},{"_id":"themes/yilia-plus/source/live2d_models/wanko/assets/mtn/touch_03.mtn","hash":"9c394975083915f0f3786caff1762381348b041e","modified":1627463840000},{"_id":"themes/yilia-plus/source/live2d_models/wanko/assets/mtn/touch_04.mtn","hash":"8d2302cfdaec698e575048797ff4f30ae4d202de","modified":1627463840000},{"_id":"themes/yilia-plus/source/live2d_models/wanko/assets/mtn/touch_05.mtn","hash":"9610bb8a937ba9b11445a3894d8cc0733a2b67e5","modified":1627463840000},{"_id":"themes/yilia-plus/source/live2d_models/wanko/assets/mtn/touch_06.mtn","hash":"feb9237c73f2045ed1704c01b5362c9a54ee5a18","modified":1627463840000},{"_id":"themes/yilia-plus/source/live2d_models/z16/assets/exp/f00.exp.json","hash":"84073a497ddb6e56c6cfc244a0fb217ba473abf9","modified":1627463840000},{"_id":"themes/yilia-plus/source/live2d_models/z16/assets/mtn/idle.mtn","hash":"f6b879d9f1d096509a7edbc971b8fdd9697932e9","modified":1627463840000},{"_id":"themes/yilia-plus/source/live2d_models/haru/02/assets/exp/f01.exp.json","hash":"84073a497ddb6e56c6cfc244a0fb217ba473abf9","modified":1627463840000},{"_id":"themes/yilia-plus/source/live2d_models/haru/02/assets/exp/f02.exp.json","hash":"461fe8077a2289e309ffc7edf561501a7edcce88","modified":1627463840000},{"_id":"themes/yilia-plus/source/live2d_models/haru/02/assets/exp/f03.exp.json","hash":"a65382a1a8d8f7034eac2c811b9f122a8b3f1403","modified":1627463840000},{"_id":"themes/yilia-plus/source/live2d_models/haru/02/assets/exp/f04.exp.json","hash":"3156286d7e0281e15c637a889aa415eef3224fa7","modified":1627463840000},{"_id":"themes/yilia-plus/source/live2d_models/haru/02/assets/exp/f05.exp.json","hash":"1123786fb0bb9c31f7d30cf14b2299f898cdc207","modified":1627463840000},{"_id":"themes/yilia-plus/source/live2d_models/haru/02/assets/exp/f06.exp.json","hash":"d962889ec7c563d818ddb5ab1e58cd337b5e62db","modified":1627463840000},{"_id":"themes/yilia-plus/source/live2d_models/haru/02/assets/exp/f07.exp.json","hash":"d55366c9bcf382e8273cf1803f65cdb8a4a0d336","modified":1627463840000},{"_id":"themes/yilia-plus/source/live2d_models/haru/02/assets/exp/f08.exp.json","hash":"4a9ba4b11d9797f59c7b043d2b807ed8253f3cc4","modified":1627463840000},{"_id":"themes/yilia-plus/source/live2d_models/haru/02/assets/mtn/flickHead_00.mtn","hash":"66577f6dde2bec905930fba0dd5f06de939c8f1e","modified":1627463840000},{"_id":"themes/yilia-plus/source/live2d_models/haru/02/assets/mtn/idle_00.mtn","hash":"bbaaafe4de159dd4fb73d137d283c640d3fede53","modified":1627463840000},{"_id":"themes/yilia-plus/source/live2d_models/haru/02/assets/mtn/idle_01.mtn","hash":"035c196f276ed177239ea05eeaece68b0fda2935","modified":1627463840000},{"_id":"themes/yilia-plus/source/live2d_models/haru/02/assets/mtn/idle_02.mtn","hash":"82291b3b78339d52f559a65d02b78e0b30180503","modified":1627463840000},{"_id":"themes/yilia-plus/source/live2d_models/haru/02/assets/mtn/pinchIn_00.mtn","hash":"ed792ed8226aa5a3e5bf059285b2c95855c11303","modified":1627463840000},{"_id":"themes/yilia-plus/source/live2d_models/haru/02/assets/mtn/pinchOut_00.mtn","hash":"db831991287e3a4724578f068a68e48168081d5a","modified":1627463840000},{"_id":"themes/yilia-plus/source/live2d_models/haru/02/assets/mtn/shake_00.mtn","hash":"7e938c4abe83273766c4562a571301811dea1de6","modified":1627463840000},{"_id":"themes/yilia-plus/source/live2d_models/haru/02/assets/mtn/tapBody_00.mtn","hash":"4041b2f1f2f4a84454180f9dab14e46d99e135c0","modified":1627463840000},{"_id":"themes/yilia-plus/source/live2d_models/haru/02/assets/mtn/tapBody_01.mtn","hash":"91fbfe1870f7a0a5f5fdb87c213c41b2a8cb5648","modified":1627463840000},{"_id":"themes/yilia-plus/source/live2d_models/haru/02/assets/mtn/tapBody_02.mtn","hash":"e93a2163cbb85525338e11a520e317329b11fb65","modified":1627463840000},{"_id":"themes/yilia-plus/source/live2d_models/haru/02/assets/mtn/tapBody_03.mtn","hash":"fcd573576112ad5f4e4b7dc0b750de79f150f971","modified":1627463840000},{"_id":"themes/yilia-plus/source/live2d_models/haru/02/assets/mtn/tapBody_04.mtn","hash":"557811c5f4ddbd393542366ef95794b19fc60387","modified":1627463840000},{"_id":"themes/yilia-plus/source/live2d_models/haru/02/assets/mtn/tapBody_05.mtn","hash":"5f48e50e938f98636519c370745a39b921907719","modified":1627463840000},{"_id":"themes/yilia-plus/source/live2d_models/haru/02/assets/mtn/tapBody_06.mtn","hash":"3d06ac66c04eb12c64d36551dd85389f0b0ee51f","modified":1627463840000},{"_id":"themes/yilia-plus/source/live2d_models/haru/02/assets/mtn/tapBody_07.mtn","hash":"d299747aaf27377d552ef1f8b4fce9871a65c37d","modified":1627463840000},{"_id":"themes/yilia-plus/source/live2d_models/haru/02/assets/mtn/tapBody_08.mtn","hash":"64a03a904d701039bf81e1296ee79537c2e8800e","modified":1627463840000},{"_id":"themes/yilia-plus/source/live2d_models/haru/02/assets/mtn/tapBody_09.mtn","hash":"4f50c17dcf352995e51a4d462b9ca7a9e9197d5c","modified":1627463840000},{"_id":"themes/yilia-plus/source/live2d_models/haru/02/assets/snd/pinchIn_00.mp3","hash":"d143662d2c8cfb1150f719d3d55c75d454535690","modified":1627463840000},{"_id":"themes/yilia-plus/source/live2d_models/haru/02/assets/snd/flickHead_00.mp3","hash":"0b447e7e38eb20f3f7e8ba2a5ea5f521f6e37a26","modified":1627463840000},{"_id":"themes/yilia-plus/source/live2d_models/haru/02/assets/snd/pinchOut_00.mp3","hash":"6872da79e1b515b2c996eecee4ca150e22aa48c0","modified":1627463840000},{"_id":"themes/yilia-plus/source/live2d_models/haru/02/assets/snd/shake_00.mp3","hash":"28b245865f200b61cb009dfbd3811d9e9b0748fb","modified":1627463840000},{"_id":"themes/yilia-plus/source/live2d_models/haru/02/assets/snd/tapBody_00.mp3","hash":"23c998ca4549b7908aef029d28b6ae22cbfcdc82","modified":1627463840000},{"_id":"themes/yilia-plus/source/live2d_models/haru/02/assets/snd/tapBody_01.mp3","hash":"d3d5607dbe394225e2ee858531b7767f567c4e10","modified":1627463840000},{"_id":"themes/yilia-plus/source/live2d_models/haru/02/assets/snd/tapBody_02.mp3","hash":"be111df9ecd006e992f94cb4280c2b66d9cd23ed","modified":1627463840000},{"_id":"themes/yilia-plus/source/live2d_models/haru/01/assets/exp/f01.exp.json","hash":"84073a497ddb6e56c6cfc244a0fb217ba473abf9","modified":1627463840000},{"_id":"themes/yilia-plus/source/live2d_models/haru/01/assets/exp/f02.exp.json","hash":"461fe8077a2289e309ffc7edf561501a7edcce88","modified":1627463840000},{"_id":"themes/yilia-plus/source/live2d_models/haru/01/assets/exp/f03.exp.json","hash":"a65382a1a8d8f7034eac2c811b9f122a8b3f1403","modified":1627463840000},{"_id":"themes/yilia-plus/source/live2d_models/haru/01/assets/exp/f04.exp.json","hash":"3156286d7e0281e15c637a889aa415eef3224fa7","modified":1627463840000},{"_id":"themes/yilia-plus/source/live2d_models/haru/01/assets/exp/f06.exp.json","hash":"d962889ec7c563d818ddb5ab1e58cd337b5e62db","modified":1627463840000},{"_id":"themes/yilia-plus/source/live2d_models/haru/01/assets/exp/f05.exp.json","hash":"1123786fb0bb9c31f7d30cf14b2299f898cdc207","modified":1627463840000},{"_id":"themes/yilia-plus/source/live2d_models/haru/01/assets/exp/f07.exp.json","hash":"d55366c9bcf382e8273cf1803f65cdb8a4a0d336","modified":1627463840000},{"_id":"themes/yilia-plus/source/live2d_models/haru/01/assets/exp/f08.exp.json","hash":"4a9ba4b11d9797f59c7b043d2b807ed8253f3cc4","modified":1627463840000},{"_id":"themes/yilia-plus/source/live2d_models/haru/01/assets/mtn/idle_02.mtn","hash":"82291b3b78339d52f559a65d02b78e0b30180503","modified":1627463840000},{"_id":"themes/yilia-plus/source/live2d_models/haru/01/assets/mtn/idle_01.mtn","hash":"035c196f276ed177239ea05eeaece68b0fda2935","modified":1627463840000},{"_id":"themes/yilia-plus/source/live2d_models/haru/01/assets/mtn/flickHead_00.mtn","hash":"66577f6dde2bec905930fba0dd5f06de939c8f1e","modified":1627463840000},{"_id":"themes/yilia-plus/source/live2d_models/haru/01/assets/mtn/idle_00.mtn","hash":"bbaaafe4de159dd4fb73d137d283c640d3fede53","modified":1627463840000},{"_id":"themes/yilia-plus/source/live2d_models/haru/01/assets/mtn/pinchIn_00.mtn","hash":"ed792ed8226aa5a3e5bf059285b2c95855c11303","modified":1627463840000},{"_id":"themes/yilia-plus/source/live2d_models/haru/01/assets/mtn/pinchOut_00.mtn","hash":"db831991287e3a4724578f068a68e48168081d5a","modified":1627463840000},{"_id":"themes/yilia-plus/source/live2d_models/haru/01/assets/mtn/shake_00.mtn","hash":"7e938c4abe83273766c4562a571301811dea1de6","modified":1627463840000},{"_id":"themes/yilia-plus/source/live2d_models/haru/01/assets/mtn/tapBody_00.mtn","hash":"4041b2f1f2f4a84454180f9dab14e46d99e135c0","modified":1627463840000},{"_id":"themes/yilia-plus/source/live2d_models/haru/01/assets/mtn/tapBody_01.mtn","hash":"91fbfe1870f7a0a5f5fdb87c213c41b2a8cb5648","modified":1627463840000},{"_id":"themes/yilia-plus/source/live2d_models/haru/01/assets/mtn/tapBody_02.mtn","hash":"e93a2163cbb85525338e11a520e317329b11fb65","modified":1627463840000},{"_id":"themes/yilia-plus/source/live2d_models/haru/01/assets/mtn/tapBody_03.mtn","hash":"fcd573576112ad5f4e4b7dc0b750de79f150f971","modified":1627463840000},{"_id":"themes/yilia-plus/source/live2d_models/haru/01/assets/mtn/tapBody_04.mtn","hash":"557811c5f4ddbd393542366ef95794b19fc60387","modified":1627463840000},{"_id":"themes/yilia-plus/source/live2d_models/haru/01/assets/mtn/tapBody_05.mtn","hash":"5f48e50e938f98636519c370745a39b921907719","modified":1627463840000},{"_id":"themes/yilia-plus/source/live2d_models/haru/01/assets/mtn/tapBody_06.mtn","hash":"3d06ac66c04eb12c64d36551dd85389f0b0ee51f","modified":1627463840000},{"_id":"themes/yilia-plus/source/live2d_models/haru/01/assets/mtn/tapBody_07.mtn","hash":"d299747aaf27377d552ef1f8b4fce9871a65c37d","modified":1627463840000},{"_id":"themes/yilia-plus/source/live2d_models/haru/01/assets/mtn/tapBody_08.mtn","hash":"64a03a904d701039bf81e1296ee79537c2e8800e","modified":1627463840000},{"_id":"themes/yilia-plus/source/live2d_models/haru/01/assets/mtn/tapBody_09.mtn","hash":"4f50c17dcf352995e51a4d462b9ca7a9e9197d5c","modified":1627463840000},{"_id":"themes/yilia-plus/source/live2d_models/haru/01/assets/snd/flickHead_00.mp3","hash":"0b447e7e38eb20f3f7e8ba2a5ea5f521f6e37a26","modified":1627463840000},{"_id":"themes/yilia-plus/source/live2d_models/haru/01/assets/snd/pinchIn_00.mp3","hash":"d143662d2c8cfb1150f719d3d55c75d454535690","modified":1627463840000},{"_id":"themes/yilia-plus/source/live2d_models/haru/01/assets/snd/pinchOut_00.mp3","hash":"6872da79e1b515b2c996eecee4ca150e22aa48c0","modified":1627463840000},{"_id":"themes/yilia-plus/source/live2d_models/haru/01/assets/snd/tapBody_00.mp3","hash":"23c998ca4549b7908aef029d28b6ae22cbfcdc82","modified":1627463840000},{"_id":"themes/yilia-plus/source/live2d_models/haru/01/assets/snd/shake_00.mp3","hash":"28b245865f200b61cb009dfbd3811d9e9b0748fb","modified":1627463840000},{"_id":"themes/yilia-plus/source/live2d_models/haru/01/assets/snd/tapBody_02.mp3","hash":"be111df9ecd006e992f94cb4280c2b66d9cd23ed","modified":1627463840000},{"_id":"themes/yilia-plus/source/live2d_models/haru/01/assets/snd/tapBody_01.mp3","hash":"d3d5607dbe394225e2ee858531b7767f567c4e10","modified":1627463840000},{"_id":"themes/yilia-plus/source/live2d_models/z16/assets/moc/z16.256/texture_00.png","hash":"19f22619c246067d519aa1e6e477497cc4342414","modified":1627463840000},{"_id":"themes/yilia-plus/source/live2d_models/z16/assets/moc/z16.512/texture_00.png","hash":"251b9f944fb1575c01a62b8a9d7522fe76954b3b","modified":1627463840000},{"_id":"themes/yilia-plus/source/live2d_models/haru/01/assets/moc/haru01.1024/texture_00.png","hash":"f3c4103630bbf0660f793f90a14b51fdb7dfb7ea","modified":1627463840000},{"_id":"themes/yilia-plus/source/live2d_models/haru/02/assets/moc/haru02.1024/texture_00.png","hash":"f3c4103630bbf0660f793f90a14b51fdb7dfb7ea","modified":1627463840000},{"_id":"themes/yilia-plus/source/main.7ea20a.css","hash":"730d229bc07e6c09dc23f7b10a2ba187931e349d","modified":1628313934000},{"_id":"themes/yilia-plus/source/main.7ea20a.js","hash":"f8fde8b462ec0fbe1e5a231b9bd871241eacdc17","modified":1627549170000},{"_id":"themes/yilia-plus/source/mobile.467748.js","hash":"448860f4e30351fada95db9c974e68b372182656","modified":1627549170000},{"_id":"themes/yilia-plus/source/gitment/APlayer.min.js","hash":"9f131b6ca3b89e52545a279356b79530bbb52a64","modified":1627463840000},{"_id":"themes/yilia-plus/source/img/weixin.png","hash":"9aead0fbb3a9ed9808c6965957d1ee27f42e26cc","modified":1627464898000},{"_id":"themes/yilia-plus/source/lib/gitment.js.bak","hash":"ded86ac10cc79a7d28e2ea44778e792cef6c3470","modified":1627463840000},{"_id":"themes/yilia-plus/source/lib/jquery-2.1.4.min.js","hash":"43dc554608df885a59ddeece1598c6ace434d747","modified":1627463840000},{"_id":"themes/yilia-plus/source/plugins/TweenMax/TweenMax.min.js","hash":"8598fc6507e8948a0f99a61bb1dc345ecc1e1f6f","modified":1627463840000},{"_id":"themes/yilia-plus/source/plugins/live2d-widget.js/L2Dwidget.min.js.map","hash":"75322ae0754f0580c0fb5ce9176ab72ce4009903","modified":1627463840000},{"_id":"themes/yilia-plus/source/live2d_models/epsilon2_1/assets/moc/Epsilon2.1.moc","hash":"2148649bde741b6e1557c0ea3c076e5ce5a23632","modified":1627463840000},{"_id":"themes/yilia-plus/source/live2d_models/shizuku/assets/snd/pinchIn_02.mp3","hash":"5b63e02607571ac601c500995e836e6c861b1c62","modified":1627463840000},{"_id":"themes/yilia-plus/source/live2d_models/shizuku/assets/snd/pinchOut_01.mp3","hash":"8a081030fd53c07bffe3edd48f87a371ca77296b","modified":1627463840000},{"_id":"themes/yilia-plus/source/live2d_models/shizuku/assets/snd/pinchOut_00.mp3","hash":"0654f38f6e9fd623eaf8be11b5d58c9d12991949","modified":1627463840000},{"_id":"themes/yilia-plus/source/live2d_models/shizuku/assets/snd/pinchOut_02.mp3","hash":"554edb2f3838cbdc27d1a9c6b8a9cb6eb465cbdd","modified":1627463840000},{"_id":"themes/yilia-plus/source/live2d_models/tsumiki/assets/mtn/tsumiki_m_11.mtn","hash":"63b0adf0414ebad9a3bec91417629d983c546975","modified":1627463840000},{"_id":"themes/yilia-plus/source/live2d_models/tsumiki/assets/mtn/tsumiki_m_12.mtn","hash":"b68b20df9b695e0d7ac93a5865097b27c3123f21","modified":1627463840000},{"_id":"themes/yilia-plus/source/live2d_models/wanko/assets/moc/wanko.moc","hash":"7b188cd4dcddfe5bdba8ec51a65cb1c21cd2e57a","modified":1627463840000},{"_id":"themes/yilia-plus/source/live2d_models/z16/assets/moc/z16.moc","hash":"6b0241e80e94664d694b43ad05333960de2550c1","modified":1627463840000},{"_id":"themes/yilia-plus/source/live2d_models/gf/assets/moc/Gantzert_Felixander.2048/texture_04.png","hash":"2c63a9622a875fea1abcdb9ef437b64556090d22","modified":1627463840000},{"_id":"themes/yilia-plus/source/live2d_models/ni-j/assets/moc/ni-j.2048/texture_00.png","hash":"413695bc00193e587b85c944df11d721192dd9a0","modified":1627463840000},{"_id":"themes/yilia-plus/source/live2d_models/nico/assets/moc/nico.2048/texture_00.png","hash":"413695bc00193e587b85c944df11d721192dd9a0","modified":1627463840000},{"_id":"themes/yilia-plus/source/live2d_models/nico/assets/moc/nico.2048/texture_02.png","hash":"8e4a632c61506e3cc07d8ba704aa4ec2567fe11b","modified":1627463840000},{"_id":"themes/yilia-plus/source/live2d_models/nipsilon/assets/moc/nipsilon.2048/texture_01.png","hash":"413695bc00193e587b85c944df11d721192dd9a0","modified":1627463840000},{"_id":"themes/yilia-plus/source/live2d_models/nietzsche/assets/moc/nietzsche.2048/texture_00.png","hash":"413695bc00193e587b85c944df11d721192dd9a0","modified":1627463840000},{"_id":"themes/yilia-plus/source/live2d_models/nietzsche/assets/moc/nietzsche.2048/texture_01.png","hash":"fc5a8b833e1b089808e893158a71b8597161fda0","modified":1627463840000},{"_id":"themes/yilia-plus/source/live2d_models/nito/assets/moc/nito.2048/texture_01.png","hash":"413695bc00193e587b85c944df11d721192dd9a0","modified":1627463840000},{"_id":"themes/yilia-plus/source/live2d_models/shizuku/assets/moc/shizuku.1024/texture_00.png","hash":"21bdb28b31783e23b26b3aa061e90be4088665aa","modified":1627463840000},{"_id":"themes/yilia-plus/source/live2d_models/shizuku/assets/moc/shizuku.1024/texture_05.png","hash":"0cd00007fb8bff62a2eb08e1d7c43abab8722224","modified":1627463840000},{"_id":"themes/yilia-plus/source/live2d_models/wanko/assets/moc/wanko.1024/texture_00.png","hash":"c405c1eeb82bcced7aa7a20f04a76168f60ad561","modified":1627463840000},{"_id":"themes/yilia-plus/source/live2d_models/shizuku/assets/moc/shizuku.1024/texture_03.png","hash":"07f568a2bb8045b6bdff7783fb4daf62c821f9ab","modified":1627463840000},{"_id":"themes/yilia-plus/source/live2d_models/haru/02/assets/moc/haru02.1024/texture_01.png","hash":"dd05d6b7f8f0d0c167b040f41ffd7c10a3747d96","modified":1627463840000},{"_id":"themes/yilia-plus/source/live2d_models/haru/01/assets/moc/haru01.1024/texture_01.png","hash":"dd05d6b7f8f0d0c167b040f41ffd7c10a3747d96","modified":1627463840000},{"_id":"themes/yilia-plus/source/live2d_models/haru/01/assets/moc/haru01.1024/texture_02.png","hash":"6a1e0b336da79557325da9f58a69a380d67ecbb1","modified":1627463840000},{"_id":"themes/yilia-plus/layout/_partial/script.ejs","hash":"3432a71edfe1f10cd31d2606638e9c9044871bd8","modified":1627549170000},{"_id":"themes/yilia-plus/source/img/head.jpg","hash":"b7b6d82340efef53ef885791d4a06902bbf96ff2","modified":1627469256000},{"_id":"themes/yilia-plus/source/lib/gitment.js","hash":"d1dd326c7b21f36ad78d55c451a1f0bbb13d201c","modified":1627463840000},{"_id":"themes/yilia-plus/source/lib/gitment.js.bak2","hash":"abf60c1466261231717cb25faf854ecae9d76b43","modified":1627463840000},{"_id":"themes/yilia-plus/source/plugins/live2d-widget.js/L2Dwidget.0.min.js","hash":"3cfe69c7d1bf48ba529e243f3892f7919d57ccc0","modified":1627463840000},{"_id":"themes/yilia-plus/source/plugins/live2d-widget.js/L2Dwidget.common.js","hash":"b6a9fa8908ce9b64fe27b632935219eb10fd9283","modified":1627463840000},{"_id":"themes/yilia-plus/source/live2d_models/hibiki/assets/moc/hibiki.moc","hash":"deff9b550df1e2dc47a57f1099e46de6737a0ec6","modified":1627463840000},{"_id":"themes/yilia-plus/source/live2d_models/miku/assets/moc/miku.moc","hash":"a57e92e12f1fcb21d4d3a9ac34f01badbeff3671","modified":1627463840000},{"_id":"themes/yilia-plus/source/live2d_models/unitychan/assets/moc/unitychan.moc","hash":"94047b7bb9a99f43ab4dbe5b013a8fb9de854086","modified":1627463840000},{"_id":"themes/yilia-plus/source/live2d_models/gf/assets/moc/Gantzert_Felixander.2048/texture_03.png","hash":"80f11d03197912296cd27ce7f59f490336396309","modified":1627463840000},{"_id":"themes/yilia-plus/source/live2d_models/gf/assets/moc/Gantzert_Felixander.2048/texture_06.png","hash":"e04b38575cb49bf538d98d0bcc642be4eaf89f73","modified":1627463840000},{"_id":"themes/yilia-plus/source/live2d_models/ni-j/assets/moc/ni-j.2048/texture_01.png","hash":"f868cb3bffe97108ef677c43659a6ad7f6a906b2","modified":1627463840000},{"_id":"themes/yilia-plus/source/live2d_models/shizuku/assets/moc/shizuku.1024/texture_01.png","hash":"3d0e745f3e560071ee08beeecde186e5ea35d99e","modified":1627463840000},{"_id":"themes/yilia-plus/source/live2d_models/shizuku/assets/moc/shizuku.1024/texture_04.png","hash":"f764d594841905db8b2998dd61c329866125ad97","modified":1627463840000},{"_id":"themes/yilia-plus/source/live2d_models/unitychan/assets/moc/unitychan.2048/texture_00.png","hash":"2268ef1522ce750bb63f59a6bd1022c8c531e307","modified":1627463840000},{"_id":"themes/yilia-plus/source/live2d_models/z16/assets/moc/z16.1024/texture_00.png","hash":"c4f7c067d7d37601490554438ab801fce1feb92d","modified":1627463840000},{"_id":"themes/yilia-plus/source/live2d_models/haru/02/assets/moc/haru02.1024/texture_02.png","hash":"df02ff8355fca1389bbed5153dc1dadd8cd1c704","modified":1627463840000},{"_id":"themes/yilia-plus/examples/images/Yilia-plus.png","hash":"23884fe970ec806b05511288f52cd576f5ac1fff","modified":1627463840000},{"_id":"themes/yilia-plus/examples/images/web.png","hash":"9748de6b01c6b044c421d548993b1024abeb8b0c","modified":1627463840000},{"_id":"themes/yilia-plus/source/live2d_models/hijiki/assets/moc/hijiki.moc","hash":"44289e62545a7046e0f5231103a851750b78524e","modified":1627463840000},{"_id":"themes/yilia-plus/source/live2d_models/izumi/assets/moc/izumi_illust.moc","hash":"819e029e0d81ed64c59d47fc747026d4bbe637d6","modified":1627463840000},{"_id":"themes/yilia-plus/source/live2d_models/ni-j/assets/moc/ni-j.moc","hash":"d846e2c4a4db0f003f2eda466f64cf2165e39ad8","modified":1627463840000},{"_id":"themes/yilia-plus/source/live2d_models/nipsilon/assets/moc/nipsilon.moc","hash":"77ea4fba30cd6f056d1175654a8c950523cdf37e","modified":1627463840000},{"_id":"themes/yilia-plus/source/live2d_models/nietzsche/assets/moc/nietzsche.moc","hash":"63e70620e9eee593dbb77b26209ad64afa82f571","modified":1627463840000},{"_id":"themes/yilia-plus/source/live2d_models/nito/assets/moc/nito.moc","hash":"aae6ab7a4687b166b30fb3bbfb1de5e91a5641e4","modified":1627463840000},{"_id":"themes/yilia-plus/source/live2d_models/tororo/assets/moc/tororo.moc","hash":"44289e62545a7046e0f5231103a851750b78524e","modified":1627463840000},{"_id":"themes/yilia-plus/source/live2d_models/gf/assets/moc/Gantzert_Felixander.2048/texture_05.png","hash":"e6b2987797dbcf113879024df919aa716ded9d4e","modified":1627463840000},{"_id":"themes/yilia-plus/source/live2d_models/haruto/assets/moc/haruto.2048/texture_00.png","hash":"62b970aa1480a1c18bdc4e74e297f2a1b34ca9fa","modified":1627463840000},{"_id":"themes/yilia-plus/source/live2d_models/haru/02/assets/moc/haru02.moc","hash":"748cf01b45bebb3b217d6363f9d5ff81ab942787","modified":1627463840000},{"_id":"themes/yilia-plus/source/live2d_models/haru/01/assets/moc/haru01.moc","hash":"d2223b555b3bdbbd955301c4c5bcbe7ebe19bec1","modified":1627463840000},{"_id":"themes/yilia-plus/source/live2d_models/hibiki/assets/moc/hibiki.2048/texture_00.png","hash":"91349297cc411865cf5605a998b68a97fe67eec5","modified":1627463840000},{"_id":"themes/yilia-plus/source/live2d_models/nico/assets/moc/nico.2048/texture_01.png","hash":"9a19b242b9309624de1e43703b240c1c72bf2205","modified":1627463840000},{"_id":"themes/yilia-plus/source/live2d_models/shizuku/assets/moc/shizuku.1024/texture_02.png","hash":"055eb2da9c13e9116be93a1e60c0ea2b660af864","modified":1627463840000},{"_id":"themes/yilia-plus/source/live2d_models/chitose/assets/moc/chitose.moc","hash":"7e328a496119887e4caaaa5b81adb3aacb0dac19","modified":1627463840000},{"_id":"themes/yilia-plus/source/live2d_models/haruto/assets/moc/haruto.moc","hash":"57bec0b245b49ea941d61ba3dee671f20441afae","modified":1627463840000},{"_id":"themes/yilia-plus/source/live2d_models/koharu/assets/moc/koharu.moc","hash":"5eec3fba21444dd6f774b913510b5955e2c0605b","modified":1627463840000},{"_id":"themes/yilia-plus/source/live2d_models/hijiki/assets/moc/hijiki.2048/texture_00.png","hash":"66464e0d96439695b5542c5e2f5be60739c29999","modified":1627463840000},{"_id":"themes/yilia-plus/source/live2d_models/koharu/assets/moc/koharu.2048/texture_00.png","hash":"0879b61b745084781722636bba9f278f31ce5fc1","modified":1627463840000},{"_id":"themes/yilia-plus/source/live2d_models/nipsilon/assets/moc/nipsilon.2048/texture_00.png","hash":"8ea2e684b826d4a8548b237ab86b3bb701ca8d5b","modified":1627463840000},{"_id":"themes/yilia-plus/source/live2d_models/nito/assets/moc/nito.2048/texture_00.png","hash":"8ea2e684b826d4a8548b237ab86b3bb701ca8d5b","modified":1627463840000},{"_id":"themes/yilia-plus/source/live2d_models/tsumiki/assets/moc/tsumiki.2048/texture_01.png","hash":"ffbb082160de6e3bb664b1a4e16b503a80b549c2","modified":1627463840000},{"_id":"themes/yilia-plus/package-lock.json","hash":"ca47b7356157b012b7bec6ba3f030e00c017ca1e","modified":1627483004000},{"_id":"themes/yilia-plus/source/live2d_models/nipsilon/assets/moc/nipsilon.2048/texture_02.png","hash":"8052842f4b880ce16a01703a128d8881f63f8543","modified":1627463840000},{"_id":"themes/yilia-plus/source/live2d_models/tsumiki/assets/moc/tsumiki.2048/texture_00.png","hash":"0316bc67bc2bde4017530989f34d62981ed88ab5","modified":1627463840000},{"_id":"themes/yilia-plus/source/live2d_models/tororo/assets/moc/tororo.2048/texture_00.png","hash":"98af764b541083e87fc2f8e85f02d2db38c898cc","modified":1627463840000},{"_id":"themes/yilia-plus/source/live2d_models/nietzsche/assets/moc/nietzsche.2048/texture_02.png","hash":"9abe0e1b8fe05ad4c678f17fd0f47a064f98908d","modified":1627463840000},{"_id":"themes/yilia-plus/source/live2d_models/nico/assets/moc/nico.moc","hash":"371b0d972aca62a2b67d32398be091d792f0b3cb","modified":1627463840000},{"_id":"themes/yilia-plus/source/live2d_models/tsumiki/assets/moc/tsumiki.moc","hash":"cc023058ae61f70acf7580c4e2352b84eaf1a7b9","modified":1627463840000},{"_id":"themes/yilia-plus/source/live2d_models/epsilon2_1/assets/moc/Epsilon2.1.2048/texture_00.png","hash":"5a245b4c78e6ebaad4d50e47361d1fada208ae5f","modified":1627463840000},{"_id":"themes/yilia-plus/source/live2d_models/gf/assets/moc/Gantzert_Felixander.2048/texture_02.png","hash":"1c2cf2502769b3a359c121823f9ecdb114063288","modified":1627463840000},{"_id":"source/_posts/Java诊断工具Arthas高级命令教程/Arthasdashboard命令/dashboard.png","hash":"15c22e12e5e5a100665ff7e27b4dd1c01cc88e46","modified":1628303906000},{"_id":"themes/yilia-plus/source/lib/giteement.browser.js","hash":"824925ebd507d6b6fe3005f6c90c64809638456b","modified":1627463840000},{"_id":"themes/yilia-plus/source/live2d_models/gf/assets/moc/Gantzert_Felixander.2048/texture_01.png","hash":"da2a0785207727ba87a30ed6853dafd9978eb7b4","modified":1627463840000},{"_id":"themes/yilia-plus/source/live2d_models/izumi/assets/moc/izumi_illust.1024/texture_02.png","hash":"4b45fb19ee5b662678692132feae93119ff56d08","modified":1627463840000},{"_id":"themes/yilia-plus/source/live2d_models/izumi/assets/moc/izumi_illust.1024/texture_01.png","hash":"274627b4750bac66b29a9c19a939aca1655b1d27","modified":1627463840000},{"_id":"themes/yilia-plus/source/plugins/live2d-widget.js/L2Dwidget.common.js.map","hash":"8de60ae490ab3d62c91c8ce60a256079b6afd3d8","modified":1627463840000},{"_id":"themes/yilia-plus/source/live2d_models/shizuku/assets/moc/shizuku.moc","hash":"c2670a0f75830edc89d7fe6d074de4ee67e8dc5d","modified":1627463840000},{"_id":"themes/yilia-plus/source/live2d_models/gf/assets/moc/Gantzert_Felixander.2048/texture_00.png","hash":"ff5b30d94adfcca1e5b77a3b7d3d75d750707d83","modified":1627463840000},{"_id":"themes/yilia-plus/source/live2d_models/izumi/assets/moc/izumi_illust.1024/texture_03.png","hash":"84005d6e75ed9db0f531b6e5e0d6d541da796b04","modified":1627463840000},{"_id":"themes/yilia-plus/source/live2d_models/miku/assets/moc/miku.2048/texture_00.png","hash":"26fe101720ab8e55fb62c87b563d0dbb903c5eaf","modified":1627463840000},{"_id":"themes/yilia-plus/source/plugins/live2d-widget.js/L2Dwidget.0.min.js.map","hash":"3b3a7076b747b092d6e48f42a8a3497aa21280ee","modified":1627463840000},{"_id":"themes/yilia-plus/source/live2d_models/izumi/assets/moc/izumi_illust.1024/texture_00.png","hash":"bfcecfa399b328ac15eba45f2b6b3b18d50f2daf","modified":1627463840000},{"_id":"themes/yilia-plus/source/live2d_models/gf/assets/moc/Gantzert_Felixander.moc","hash":"67d418af2db593b0b6f318e95f49d4370515c8f0","modified":1627463840000},{"_id":"themes/yilia-plus/source/live2d_models/chitose/assets/moc/chitose.2048/texture_00.png","hash":"505dbba0bec5d7fda0cead773caa540a0158a610","modified":1627463840000},{"_id":"public/content.json","hash":"626fc97ff67a44349bac79143b52fc2d329d45d7","modified":1628314623592},{"_id":"public/2021/08/07/Java诊断工具Arthas高级命令教程/Arthasclassloader命令/index.html","hash":"1bc8c98b98683f1c210d64079ce47b7161cae813","modified":1628314623592},{"_id":"public/2021/08/07/Java诊断工具Arthas高级命令教程/Arthasdump命令/index.html","hash":"2747d992f80a395d02bf5fe9c35ee441154f12b1","modified":1628314623592},{"_id":"public/2021/08/07/Java诊断工具Arthas高级命令教程/Arthasjad命令/index.html","hash":"6ec63f6445aa88ff5e75025d52f4faddcec0406a","modified":1628314623592},{"_id":"public/2021/08/07/Java诊断工具Arthas高级命令教程/Arthasmc-redefine命令/index.html","hash":"6ef3f33669a05019325be478f08d09c5d242e19d","modified":1628314623592},{"_id":"public/2021/08/07/Java诊断工具Arthas高级命令教程/Arthassc命令/index.html","hash":"514f15f9cf3ba76db4b4fff851d758986b6979a2","modified":1628314623592},{"_id":"public/2021/08/07/Java诊断工具Arthas高级命令教程/Arthassm命令/index.html","hash":"e9dea90ad4bafc0b1ec959f10262b658ea259f78","modified":1628314623592},{"_id":"public/2021/08/07/Java诊断工具Arthas高级命令教程/Arthasmc-retransform命令/index.html","hash":"472e2440885a8bee19e970f920463158d9d9ab7c","modified":1628314623592},{"_id":"public/2021/08/07/Java诊断工具Arthas高级命令教程/Arthasmonitor命令/index.html","hash":"093377f8210205bea86a9802c59fbfd9bdf324c7","modified":1628314623592},{"_id":"public/2021/08/07/Java诊断工具Arthas高级命令教程/Arthasprofiler命令/index.html","hash":"56d70d2903d26820fe36cbaa535b26e320ff0f90","modified":1628314623592},{"_id":"public/2021/08/07/Java诊断工具Arthas高级命令教程/Arthasstack命令/index.html","hash":"e6f6b809e2b9102aca718a3b79f61569f11d19fd","modified":1628314623592},{"_id":"public/2021/08/07/Java诊断工具Arthas高级命令教程/Arthastrace命令/index.html","hash":"2d66ab2ae33c11e85b53ed4c3fa3ee82443a4ddb","modified":1628314623592},{"_id":"public/2021/08/07/Java诊断工具Arthas高级命令教程/Arthaswatch命令/index.html","hash":"20bfa2275ceed0e10becc52391a8b8ce25958a54","modified":1628314623592},{"_id":"public/2021/08/07/Java诊断工具Arthas高级命令教程/Arthastt命令/index.html","hash":"b6fe3315c205275db3f147854df112fba6712dda","modified":1628314623592},{"_id":"public/2021/08/07/Java诊断工具Arthas高级命令教程/Arthasgetstatic命令/index.html","hash":"095b753a6d91f1d6d47ac7dc2f2e07df31d35663","modified":1628314623592},{"_id":"public/2021/08/07/Java诊断工具Arthas高级命令教程/Arthasdashboard命令/index.html","hash":"9b19ab4a97b7f573bc794cd300e22e789e117f9e","modified":1628314623592},{"_id":"public/2021/08/07/Java诊断工具Arthas高级命令教程/Arthasheapdump命令/index.html","hash":"87cad1aaac20499959429a3b8d969a39133113a3","modified":1628314623592},{"_id":"public/2021/08/07/Java诊断工具Arthas高级命令教程/Arthasjvm命令/index.html","hash":"b465f269bc8d9b389a520c9abdbcd116b2f9d5e4","modified":1628314623592},{"_id":"public/2021/08/07/Java诊断工具Arthas高级命令教程/Arthasmbean命令/index.html","hash":"5176d082941c3b7657558c67c5c30d6e7c39dd60","modified":1628314623592},{"_id":"public/2021/08/07/Java诊断工具Arthas高级命令教程/Arthaslogger命令/index.html","hash":"1d33ca8d5d9d91e056fd311c13d6f4cdfcf62bf5","modified":1628314623592},{"_id":"public/2021/08/07/Java诊断工具Arthas高级命令教程/Arthasognl命令/index.html","hash":"665cf9bca541b45a270c7d34c532fe572e775b0b","modified":1628314623592},{"_id":"public/2021/08/07/Java诊断工具Arthas高级命令教程/Arthasperfcounter命令/index.html","hash":"5430507fb8829f3faa7aedd32ae7bea8280224e2","modified":1628314623592},{"_id":"public/2021/08/07/Java诊断工具Arthas高级命令教程/Arthassysprop命令/index.html","hash":"29244b7aa5ef9ef4d5f8c498083847df90b6ea3e","modified":1628314623592},{"_id":"public/2021/08/07/Java诊断工具Arthas高级命令教程/Arthassysenv命令/index.html","hash":"5cd50d0f51ab2ffc188dc1ab496155bec78bbf5a","modified":1628314623592},{"_id":"public/2021/08/07/Java诊断工具Arthas高级命令教程/Arthasthread命令/index.html","hash":"64c7b9a112f622f5391b523fd26a4ca88efb1dca","modified":1628314623592},{"_id":"public/2021/08/07/Java诊断工具Arthas高级命令教程/Arthasvmoption命令/index.html","hash":"f89015e5d388d4bf4e036166804a96017089960f","modified":1628314623592},{"_id":"public/2021/08/07/Java诊断工具Arthas最佳实践/Arthas动态更新应用LoggerLevel案例/index.html","hash":"b864c75351e733cdb6835a6f171445ecd8430c19","modified":1628314623592},{"_id":"public/2021/08/07/Java诊断工具Arthas最佳实践/ArthasWebConsole案例/index.html","hash":"781f79616244059068aeb3f9050c19affdbd057f","modified":1628314623592},{"_id":"public/2021/08/07/Java诊断工具Arthas最佳实践/Arthas排查函数调用异常案例/index.html","hash":"bb230a44418dbc9475ca89563650e28405500d49","modified":1628314623592},{"_id":"public/2021/08/07/Java诊断工具Arthas最佳实践/Arthas执行结果存日志案例/index.html","hash":"d16661f473a4af0ee3c44d682aac7d3960ef6394","modified":1628314623592},{"_id":"public/2021/08/07/Java诊断工具Arthas最佳实践/Arthas查找TopN线程案例/index.html","hash":"2c68faf79559521132bf7979d8f0e2ee0dd0496f","modified":1628314623592},{"_id":"public/2021/08/07/Java诊断工具Arthas最佳实践/Arthas排查logger冲突问题案例/index.html","hash":"250ea10badcc0920093616c45a8e79ac8aa9612e","modified":1628314623592},{"_id":"public/2021/08/07/Java诊断工具Arthas最佳实践/Arthas热更新代码案例/index.html","hash":"b1986aeafd63a16a6872e1426dfdf188a563004e","modified":1628314623592},{"_id":"public/2021/08/07/Java诊断工具Arthas最佳实践/ArthasHttpAPI案例/index.html","hash":"b7cfbc3246e038d243e293c35c619fe8b68ec66e","modified":1628314623592},{"_id":"public/2021/08/07/Java诊断工具Arthas最佳实践/Arthas排查HTTP请求返回404案例/index.html","hash":"46edc0123873243192799ce06b33bf3201be0f88","modified":1628314623592},{"_id":"public/2021/08/07/Java诊断工具Arthas最佳实践/Arthas排查HTTP请求返回401案例/index.html","hash":"e5619e3ce4e39c7cbdd52a6149e3063dfc7d4cfc","modified":1628314623592},{"_id":"public/2021/08/07/Java诊断工具Arthas最佳实践/Arthas获取Spring上下文案例/index.html","hash":"0163dfc13b258ade4bdc2de0cf99a5c7c986e288","modified":1628314623592},{"_id":"public/2021/08/07/Java诊断工具Arthas最佳实践/学习Arthasarthas-boot支持的参数案例/index.html","hash":"d25be2ba02bf8f3b5a11befb2adfc627b970f6ac","modified":1628314623592},{"_id":"public/2021/08/07/Java诊断工具Arthas最佳实践/学习Arthasclassloader案例/index.html","hash":"3af2e3edb2fa4982865ec982090589768a9d4054","modified":1628314623592},{"_id":"public/2021/08/07/Java诊断工具Arthas最佳实践/Arthas后台异步任务案例/index.html","hash":"07f5eb1d33d957ebfcc67545081334d7b71e83e9","modified":1628314623592},{"_id":"public/2021/08/07/Java诊断工具Arthas入门教程/Arthas-进阶/index.html","hash":"51b859b5e1fc56605951e2ebedb631f15248cb36","modified":1628314623592},{"_id":"public/2021/08/07/Java诊断工具Arthas入门教程/Arthas-基础教程/index.html","hash":"a80a399661e9a6bfbf4d0923e51f87bb24d8f4e2","modified":1628314623592},{"_id":"public/2021/07/31/awk命令使用介绍/index.html","hash":"fba381b4e903a871de036771cca1cd7cada044e7","modified":1628314623592},{"_id":"public/2021/07/30/Arthas安装使用/index.html","hash":"239227cbb38a775fba02954cb33e022f54b3f168","modified":1628314623592},{"_id":"public/2021/07/28/JsonFormatTool/index.html","hash":"7882fe1f8d94c52ba56ff1fb6bae971b884acc62","modified":1628314623592},{"_id":"public/2021/07/28/Lockbox/index.html","hash":"e9102e2f1595997834196090f82daa3dc4d32f54","modified":1628314623592},{"_id":"public/2021/07/28/swagger2word/index.html","hash":"9da201a31c60689fc086746b0d1d5d238a2ea841","modified":1628314623592},{"_id":"public/2021/07/28/hello-world/index.html","hash":"80c58be32449fa4fc1d0ef7c17729c452d2ecdd6","modified":1628314623592},{"_id":"public/2021/07/28/hexo命令说明/index.html","hash":"52e681169474ece743791b45ec4392693c4c41df","modified":1628314623592},{"_id":"public/archives/index.html","hash":"a4b91461667affb427f4f040e043d8d995af53ef","modified":1628314623592},{"_id":"public/archives/page/2/index.html","hash":"6ee571861189008281433cde15263f4aa4f09309","modified":1628314623592},{"_id":"public/archives/page/3/index.html","hash":"ee9a737b05e2edd8e21566cd594534bc38fc1293","modified":1628314623592},{"_id":"public/archives/page/4/index.html","hash":"449d01739cda36e3191661b418c9b658bd0463b7","modified":1628314623592},{"_id":"public/archives/page/5/index.html","hash":"fdb2df659c4478b1905d0d777c33927678835ffe","modified":1628314623592},{"_id":"public/archives/2021/index.html","hash":"7252260d52762ae5bd3872d92807b44683ebb93b","modified":1628314623592},{"_id":"public/archives/2021/page/2/index.html","hash":"964f4f622a432120e00d62757f25b97145f3a2ad","modified":1628314623592},{"_id":"public/archives/2021/page/3/index.html","hash":"da65e6eb287ce63917db4c2b128ace86cdbd3f0f","modified":1628314623592},{"_id":"public/archives/2021/page/4/index.html","hash":"6979d801f2438e22e86aaa4d1234dccc91b3a0b8","modified":1628314623592},{"_id":"public/archives/2021/page/5/index.html","hash":"68ac6bef59e9d7461015390f7a2d4040041be774","modified":1628314623592},{"_id":"public/archives/2021/07/index.html","hash":"564b0f876ad149e6c8c8b0e16e61e3e63b93c0f7","modified":1628314623592},{"_id":"public/archives/2021/08/index.html","hash":"aa8ab604665477af3ed74c52fd53d23a59bc226f","modified":1628314623592},{"_id":"public/archives/2021/08/page/2/index.html","hash":"18f6c480c5ff1d9dc2188ec303d51494d365cc31","modified":1628314623592},{"_id":"public/archives/2021/08/page/3/index.html","hash":"07bf9a09ebc07d5e9d429db4cb0b9586a00e169c","modified":1628314623592},{"_id":"public/archives/2021/08/page/4/index.html","hash":"30a34be9429b66e0d4f600e60b5e1c208f08c8f2","modified":1628314623592},{"_id":"public/archives/2021/08/page/5/index.html","hash":"4fffa49b55cfd1bcbc11a359a97098e2a13d3b50","modified":1628314623592},{"_id":"public/categories/java技术栈/index.html","hash":"ece2f08d6721f5525208d9a502927d9dda82900a","modified":1628314623592},{"_id":"public/categories/个人作品展示/index.html","hash":"cb59888a1a72fc107f7f6a54dcd78ac397ec9902","modified":1628314623592},{"_id":"public/categories/linux技术/index.html","hash":"91e51ca14f86e873368cc80e0e28d2d213c1e239","modified":1628314623592},{"_id":"public/categories/默认分类/技术笔记/index.html","hash":"635f95b49a10f7fa19180832ac05af6d359df2dc","modified":1628314623592},{"_id":"public/categories/默认分类/index.html","hash":"17c7115c28f82107d40656ade89183e1d2e2f45c","modified":1628314623592},{"_id":"public/index.html","hash":"7eae6a63e35387d2eb50347ad9a9cbef0bb1090c","modified":1628314623592},{"_id":"public/page/2/index.html","hash":"e863a0edb210b5d41f817d31e4c8529fcb3d9ea7","modified":1628314623592},{"_id":"public/page/3/index.html","hash":"6de5fbdc4d821f8f3de02640e52b04e56b055793","modified":1628314623592},{"_id":"public/page/4/index.html","hash":"afa7cb9f91868a0f44ecb2050422aad71261be78","modified":1628314623592},{"_id":"public/page/5/index.html","hash":"4c70a93558ca9eb08bc5a41f64a8aec917406820","modified":1628314623592},{"_id":"public/tags/技术笔记/index.html","hash":"9cadf6d4087be22a42df172222c36447810d4533","modified":1628314623592},{"_id":"public/tags/java/index.html","hash":"2e51bb43e2ce9bfeb7d9756759088fe7cc4f7478","modified":1628314623592},{"_id":"public/tags/shell/index.html","hash":"c35dd2debf64971957cad7fc25ad1b1a786efff0","modified":1628314623592},{"_id":"public/tags/hexo/index.html","hash":"5177d67466fc06f7bfdc5397e27e16105aa1f05f","modified":1628314623592},{"_id":"public/tags/linux/index.html","hash":"193559b8f0cdd3b1664722982ab1443f47aeee29","modified":1628314623592},{"_id":"public/tags/随笔/index.html","hash":"2fb2d687b1c5d603c48a2b44cdbf745e375213d5","modified":1628314623592},{"_id":"public/tags/Java-诊断工具-Arthas-入门教程/index.html","hash":"47b27227cf9dd6d0770d5f8bf0bfdbc7415007bb","modified":1628314623592},{"_id":"public/tags/Java-诊断工具-Arthas-最佳实践/index.html","hash":"f7b26f0828de7b20f0c6d46d20aae3fa7915cd38","modified":1628314623592},{"_id":"public/tags/Java-诊断工具-Arthas-最佳实践/page/2/index.html","hash":"33a180eed4ac0b3467b0b95781e1146ca2d65bfc","modified":1628314623592},{"_id":"public/tags/Java-诊断工具-Arthas-高级命令教程/index.html","hash":"164681277a7582b3b174054a91b8aacdd9d846f7","modified":1628314623592},{"_id":"public/tags/Java-诊断工具-Arthas-高级命令教程/page/2/index.html","hash":"9adcd9d46d95dd77cf5b5ea22c5d9cf130cfe7d0","modified":1628314623592},{"_id":"public/tags/Java-诊断工具-Arthas-高级命令教程/page/3/index.html","hash":"520895f8ec59e48f8d701aef04cfb10c23b7e6a9","modified":1628314623592},{"_id":"public/CNAME","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1628314623592},{"_id":"public/LICENSE.txt","hash":"760f751686112e986740b3f84b658a0906334276","modified":1628314623592},{"_id":"public/fonts/fonteditor.3da1ef.woff","hash":"5a945ddf318d3ca68d0a1e8695b23287ff7e9816","modified":1628314623592},{"_id":"public/fonts/default-skin.b257fa.svg","hash":"2ac727c9e092331d35cce95af209ccfac6d4c7c7","modified":1628314623592},{"_id":"public/fonts/fonteditor.3e0d4a.svg","hash":"de1fbf8378d1966d43bf620b8acd6bf900a15a73","modified":1628314623592},{"_id":"public/fonts/fonteditor.86c132.eot","hash":"c29905356fb2116a454a262d6f15cdeb593a6cec","modified":1628314623592},{"_id":"public/fonts/fonteditor.bbc4b5.woff2","hash":"c748dc092f066f7e12626c801d416e64b95dacea","modified":1628314623592},{"_id":"public/fonts/fonteditor.fe4d8a.ttf","hash":"95d1a4991df9ce15562ff0344b318b5fc5f9ab70","modified":1628314623592},{"_id":"public/fonts/tooltip.4004ff.svg","hash":"a5e9fe67e0604c24279281d9fdd2ce1f4536d3e5","modified":1628314623592},{"_id":"public/fonts/tooltip.d04149.svg","hash":"a5e9fe67e0604c24279281d9fdd2ce1f4536d3e5","modified":1628314623592},{"_id":"public/img/alipay.jpg","hash":"ca6c3d18dfa1f6ae8b1e393447fca5399db7828c","modified":1628314623592},{"_id":"public/img/biubiubiu.gif","hash":"cccda381f96abe91b4d698da793abd6496466d3d","modified":1628314623592},{"_id":"public/img/forkme.png","hash":"b43e6e18b84edc40636204aa0eb9f266ef54a4e7","modified":1628314623592},{"_id":"public/img/default-skin.png","hash":"ed95a8e40a2c3478c5915376acb8e5f33677f24d","modified":1628314623592},{"_id":"public/img/gitee.svg","hash":"fcc6e28d0345e22a6195748cf759eee5d8e48719","modified":1628314623592},{"_id":"public/img/preloader.gif","hash":"6342367c93c82da1b9c620e97c84a389cc43d96d","modified":1628314623592},{"_id":"public/img/scrollbar_arrow.png","hash":"d64a33c4ddfbdb89deeb6f4e3d36eb84dc4777c0","modified":1628314623592},{"_id":"public/live2d_models/chitose/assets/mtn/chitose_handwave.mtn","hash":"3d7a0f7ffda7d2ac3bb6fde6ccc49521c0d7713b","modified":1628314623592},{"_id":"public/live2d_models/chitose/assets/mtn/chitose_idle.mtn","hash":"f3d1ab532e49a20e98cadb0290c959d7f1086eb6","modified":1628314623592},{"_id":"public/live2d_models/chitose/assets/mtn/chitose_kime01.mtn","hash":"97308ef8c5798374a6b1ba6cdec53d6732a4728a","modified":1628314623592},{"_id":"public/live2d_models/chitose/assets/mtn/chitose_kime02.mtn","hash":"3eed16b70dc2f7b7e50417f19207e3cabccaa166","modified":1628314623592},{"_id":"public/live2d_models/epsilon2_1/assets/mtn/Epsilon2.1_idle_01.mtn","hash":"b4e67d3091aba34efcf9ff3659fa36f6f1a4bd22","modified":1628314623592},{"_id":"public/live2d_models/epsilon2_1/assets/mtn/Epsilon2.1_m_02.mtn","hash":"7a000a218b098172eeeb8a81e551d558bbaa6f8a","modified":1628314623592},{"_id":"public/live2d_models/epsilon2_1/assets/mtn/Epsilon2.1_m_01.mtn","hash":"eecc2854bea6bf90c9f0a0013281ec600c32f2bc","modified":1628314623592},{"_id":"public/live2d_models/epsilon2_1/assets/mtn/Epsilon2.1_m_03.mtn","hash":"3568fc9f7ba95f2521abec8e1241da62581ab7cf","modified":1628314623592},{"_id":"public/live2d_models/epsilon2_1/assets/mtn/Epsilon2.1_m_04.mtn","hash":"b717b620d044859762716d104e137dc9c09c8cce","modified":1628314623592},{"_id":"public/live2d_models/epsilon2_1/assets/mtn/Epsilon2.1_m_05.mtn","hash":"f3a671a29f5d831f04284a8d5fe5adb90cd1e400","modified":1628314623592},{"_id":"public/live2d_models/epsilon2_1/assets/mtn/Epsilon2.1_m_07.mtn","hash":"2fd581bfc662b050c41afb904b9ae54b59d7d010","modified":1628314623592},{"_id":"public/live2d_models/epsilon2_1/assets/mtn/Epsilon2.1_m_06.mtn","hash":"fec328bedb7d5af53e0cfd0eb5991f4574c3676a","modified":1628314623592},{"_id":"public/live2d_models/epsilon2_1/assets/mtn/Epsilon2.1_m_08.mtn","hash":"e61753f72a1c170926c59c71490596aaeee30ca6","modified":1628314623592},{"_id":"public/live2d_models/epsilon2_1/assets/mtn/Epsilon2.1_m_sp_01.mtn","hash":"d72c01b4d9c4faf0f4cb472c390a35712b2ee7f5","modified":1628314623592},{"_id":"public/live2d_models/epsilon2_1/assets/mtn/Epsilon2.1_m_sp_02.mtn","hash":"08f6d29160ce7100441efdd8ac7bbd89fc9c5120","modified":1628314623592},{"_id":"public/live2d_models/epsilon2_1/assets/mtn/Epsilon2.1_m_sp_04.mtn","hash":"42ae0fbe437cd97c623c09bee100c3695abb30ce","modified":1628314623592},{"_id":"public/live2d_models/epsilon2_1/assets/mtn/Epsilon2.1_m_sp_03.mtn","hash":"55c11be6e505791de438c43ad25c31409713544a","modified":1628314623592},{"_id":"public/live2d_models/epsilon2_1/assets/mtn/Epsilon2.1_m_sp_05.mtn","hash":"9eb78800c41148712ac30e1342f025110db0f8d3","modified":1628314623592},{"_id":"public/live2d_models/epsilon2_1/assets/mtn/Epsilon2.1_shake_01.mtn","hash":"8f81d974ada9b6800fa6eb852a41906a9e1f4c77","modified":1628314623592},{"_id":"public/live2d_models/gf/assets/mtn/A_00_idle.mtn","hash":"d383fc08986b4d1f746d71abbea6f7b5f54dcc95","modified":1628314623592},{"_id":"public/live2d_models/gf/assets/mtn/A_01.mtn","hash":"91d2def2e00393fcedaaca36cd80340fa95a2d1b","modified":1628314623592},{"_id":"public/live2d_models/gf/assets/mtn/A_02.mtn","hash":"9283c809509daf3f580dcb92bab14960b5a89283","modified":1628314623592},{"_id":"public/live2d_models/gf/assets/mtn/A_03.mtn","hash":"afec07ed22acdf28a5c49b78c560e29c3c2cfaa0","modified":1628314623592},{"_id":"public/live2d_models/gf/assets/mtn/A_04.mtn","hash":"50360a6572518b447af3315236659a576aa1b248","modified":1628314623592},{"_id":"public/live2d_models/gf/assets/mtn/A_05.mtn","hash":"40ad1e684108035c6478b76c9e4e1953104725da","modified":1628314623592},{"_id":"public/live2d_models/haruto/assets/mtn/01.mtn","hash":"61d7d590d9feb71b32fd6bd142b59410d75bc1fa","modified":1628314623592},{"_id":"public/live2d_models/haruto/assets/mtn/02.mtn","hash":"efc99efdff39c93372cff0f6d62c4e748e1a5593","modified":1628314623592},{"_id":"public/live2d_models/haruto/assets/mtn/03.mtn","hash":"a72b697a92a7cff40d15774b143b465b34cee5e6","modified":1628314623592},{"_id":"public/live2d_models/haruto/assets/mtn/04.mtn","hash":"32c888667455a3ff6f1b04f910c1a5cc4de30af0","modified":1628314623592},{"_id":"public/live2d_models/haruto/assets/mtn/05.mtn","hash":"637e00442da4042cd4b0ed2cc62ffb1559881814","modified":1628314623592},{"_id":"public/live2d_models/haruto/assets/mtn/06.mtn","hash":"df10cc1d333c96da1296a4853c1ddbd44d8a11f3","modified":1628314623592},{"_id":"public/live2d_models/haruto/assets/mtn/07.mtn","hash":"d8c9410135c81604eba665b59808089808e0851a","modified":1628314623592},{"_id":"public/live2d_models/haruto/assets/mtn/08.mtn","hash":"9b95ef8548b979d1fca557c74f8d66fb15b34578","modified":1628314623592},{"_id":"public/live2d_models/haruto/assets/mtn/09.mtn","hash":"ecf1283b72e1c4b7e3a97343cd97726813f18790","modified":1628314623592},{"_id":"public/live2d_models/haruto/assets/mtn/idle_02.mtn","hash":"d130dd1d194f05b3eb5391289b0339999e37c3a6","modified":1628314623592},{"_id":"public/live2d_models/hibiki/assets/mtn/hibiki_01.mtn","hash":"cd220b89c26e1267fd7ab8f7cfc714fcd4c3b5a3","modified":1628314623592},{"_id":"public/live2d_models/hibiki/assets/mtn/hibiki_02.mtn","hash":"985154bee77e2934afe74a45071f51e0aa1ac84d","modified":1628314623592},{"_id":"public/live2d_models/hibiki/assets/mtn/hibiki_03.mtn","hash":"0b2e7cb2a32b70a629d9d21205863bb163d06d47","modified":1628314623592},{"_id":"public/live2d_models/hibiki/assets/mtn/hibiki_04.mtn","hash":"6a753859998d7afa17f119f37c5765f0c10b7bca","modified":1628314623592},{"_id":"public/live2d_models/hibiki/assets/mtn/hibiki_05.mtn","hash":"67dc8d35f050e36d08010d55ddbfd06544fb7ad5","modified":1628314623592},{"_id":"public/live2d_models/hibiki/assets/mtn/idle_01.mtn","hash":"3fac7f98ab71858018cbbf21b5a3ad99166d275b","modified":1628314623592},{"_id":"public/live2d_models/hibiki/assets/mtn/idle_02.mtn","hash":"9f7dae129a20775b3209a16ee28e27f496e90ba5","modified":1628314623592},{"_id":"public/live2d_models/hibiki/assets/mtn/idle_03.mtn","hash":"c85916f8699673b0511fd00cd1953896879e0cc5","modified":1628314623592},{"_id":"public/live2d_models/hibiki/assets/mtn/idle_04.mtn","hash":"80d4e53606b3268623b03d12a28570efdb5739ad","modified":1628314623592},{"_id":"public/live2d_models/hibiki/assets/snd/hibiki_01.mp3","hash":"2880911aa4a85958fe02e54b912fbf7e6a1896c6","modified":1628314623592},{"_id":"public/live2d_models/hibiki/assets/snd/hibiki_02.mp3","hash":"75358d4c7ec03c4b1dc02ef60c716d94f031fe2f","modified":1628314623592},{"_id":"public/live2d_models/hibiki/assets/snd/hibiki_03.mp3","hash":"df05cb8288b17e1ad00ed66a731f1558db28cf9b","modified":1628314623592},{"_id":"public/live2d_models/hijiki/assets/mtn/00_idle.mtn","hash":"b224c60e463b9f71ddbfc0c720e430496c175f4f","modified":1628314623592},{"_id":"public/live2d_models/hibiki/assets/snd/hibiki_04.mp3","hash":"57d76906838b186bee2d47f768e54ac18e44d472","modified":1628314623592},{"_id":"public/live2d_models/hijiki/assets/mtn/03.mtn","hash":"f900737c7a98441cbb2e05255427e6260e19ae68","modified":1628314623592},{"_id":"public/live2d_models/hijiki/assets/mtn/02.mtn","hash":"7eafc52edc73b7cb80ae70d34b43c6ac778fa47b","modified":1628314623592},{"_id":"public/live2d_models/hijiki/assets/mtn/01.mtn","hash":"fb550833ae22c9954c3e01df37ed29b2d61700f2","modified":1628314623592},{"_id":"public/live2d_models/hijiki/assets/mtn/05.mtn","hash":"dd20ad24b5d1830a5d44b9bccb28f922eea5e0e5","modified":1628314623592},{"_id":"public/live2d_models/hijiki/assets/mtn/04.mtn","hash":"c7a25d3c5d783639bae18db2f3cd284b819c3c85","modified":1628314623592},{"_id":"public/live2d_models/hibiki/assets/snd/hibiki_05.mp3","hash":"e8788bb9e92467e21933ac2140114a21b9ad215a","modified":1628314623592},{"_id":"public/live2d_models/hijiki/assets/mtn/07.mtn","hash":"b7f2e3a9fa4f3ffbb6e64a08f8d9f45ca1868ffb","modified":1628314623592},{"_id":"public/live2d_models/hijiki/assets/mtn/08.mtn","hash":"4411c7651ff65195b113d95e7d5ebef8a59a37d9","modified":1628314623592},{"_id":"public/live2d_models/hijiki/assets/mtn/06.mtn","hash":"ad404bd852d276cdd3d054c953e23f90e4e45ae1","modified":1628314623592},{"_id":"public/live2d_models/izumi/assets/mtn/idle_01.mtn","hash":"ce50f5c562b282dcb11679f682fe0f9e1bb0f37b","modified":1628314623592},{"_id":"public/live2d_models/izumi/assets/mtn/idle_02.mtn","hash":"0c6b52bf64db7bbfee81ee24240ca991320764b4","modified":1628314623592},{"_id":"public/live2d_models/izumi/assets/mtn/idle_03.mtn","hash":"b374923d973970f2c8331b3420660952e2bd8bf5","modified":1628314623592},{"_id":"public/live2d_models/izumi/assets/mtn/idle_04.mtn","hash":"97c0a45af4f0b9f4b828f43eccb1c77c360af637","modified":1628314623592},{"_id":"public/live2d_models/izumi/assets/mtn/izumi_01.mtn","hash":"36286812dc692e00a0b69e71d7fe3c8a2b672281","modified":1628314623592},{"_id":"public/live2d_models/izumi/assets/mtn/izumi_02.mtn","hash":"90add71910fd83c1c66bfb73db6d6d4766c98dac","modified":1628314623592},{"_id":"public/live2d_models/izumi/assets/mtn/izumi_03.mtn","hash":"fc7f8e01f8e7744cbd13a8fea44dda8270f21aeb","modified":1628314623592},{"_id":"public/live2d_models/izumi/assets/mtn/izumi_04.mtn","hash":"551b95d80d31ed4f06d19d99ccc4f795a8392ea3","modified":1628314623592},{"_id":"public/live2d_models/izumi/assets/mtn/izumi_05.mtn","hash":"dbfea56881f31a79bffb6d107e7b1fa867e2da0e","modified":1628314623592},{"_id":"public/live2d_models/izumi/assets/mtn/izumi_06.mtn","hash":"c1a63e659fcc6d5b1b0eac7eaff60faf43e2cb28","modified":1628314623592},{"_id":"public/live2d_models/izumi/assets/mtn/izumi_07.mtn","hash":"e2f9e8cb428fa83251a45166d8f9acad570a47d9","modified":1628314623592},{"_id":"public/live2d_models/izumi/assets/mtn/izumi_08.mtn","hash":"19fc90977a0ca30c18f4afae90d4c3ea27a9b094","modified":1628314623592},{"_id":"public/live2d_models/izumi/assets/mtn/izumi_09.mtn","hash":"97199471755394bed243a29b4cb8397518487296","modified":1628314623592},{"_id":"public/live2d_models/izumi/assets/mtn/izumi_10.mtn","hash":"244ae631fb963ed7619e5d63f189d947a2497eb2","modified":1628314623592},{"_id":"public/live2d_models/izumi/assets/snd/izumi_01.mp3","hash":"11dd394ab4d11d3a3c6d6a1a305ff3a1d1fed21d","modified":1628314623592},{"_id":"public/live2d_models/izumi/assets/snd/izumi_03.mp3","hash":"b3d6e98bc30eaf8ac0cf7ffe2f297742a819b380","modified":1628314623592},{"_id":"public/live2d_models/izumi/assets/snd/izumi_04.mp3","hash":"7647fb1e8823bb48ee5f82dbeac35e3f61b74bef","modified":1628314623592},{"_id":"public/live2d_models/izumi/assets/snd/izumi_06.mp3","hash":"f39ee4b85ed9877100c028bf938a9a8fd0d2cb6b","modified":1628314623592},{"_id":"public/live2d_models/izumi/assets/snd/izumi_02.mp3","hash":"d35189bae63cc6ef18d3a949c4a46dd5ed74c6b3","modified":1628314623592},{"_id":"public/live2d_models/izumi/assets/snd/izumi_05.mp3","hash":"05e44723c24b387a0eab37a0ab4120ef19ae317e","modified":1628314623592},{"_id":"public/live2d_models/izumi/assets/snd/izumi_07.mp3","hash":"0c13c0096d02ceb37b3bcce085206b5d6d8ae834","modified":1628314623592},{"_id":"public/live2d_models/izumi/assets/snd/izumi_08.mp3","hash":"0b73b4f9216ee6b944a91b599c942d567a39fe0f","modified":1628314623592},{"_id":"public/live2d_models/izumi/assets/snd/izumi_09.mp3","hash":"f7bce48ee99bdad6fa187c484872eafce0b0e351","modified":1628314623592},{"_id":"public/live2d_models/koharu/assets/mtn/01.mtn","hash":"61d7d590d9feb71b32fd6bd142b59410d75bc1fa","modified":1628314623592},{"_id":"public/live2d_models/koharu/assets/mtn/03.mtn","hash":"a72b697a92a7cff40d15774b143b465b34cee5e6","modified":1628314623592},{"_id":"public/live2d_models/izumi/assets/snd/izumi_10.mp3","hash":"53013c1cc56296a3843d4c8e3f01fd67747b169b","modified":1628314623592},{"_id":"public/live2d_models/koharu/assets/mtn/02.mtn","hash":"efc99efdff39c93372cff0f6d62c4e748e1a5593","modified":1628314623592},{"_id":"public/live2d_models/koharu/assets/mtn/04.mtn","hash":"32c888667455a3ff6f1b04f910c1a5cc4de30af0","modified":1628314623592},{"_id":"public/live2d_models/koharu/assets/mtn/05.mtn","hash":"637e00442da4042cd4b0ed2cc62ffb1559881814","modified":1628314623592},{"_id":"public/live2d_models/koharu/assets/mtn/06.mtn","hash":"df10cc1d333c96da1296a4853c1ddbd44d8a11f3","modified":1628314623592},{"_id":"public/live2d_models/koharu/assets/mtn/07.mtn","hash":"d8c9410135c81604eba665b59808089808e0851a","modified":1628314623592},{"_id":"public/live2d_models/koharu/assets/mtn/08.mtn","hash":"9b95ef8548b979d1fca557c74f8d66fb15b34578","modified":1628314623592},{"_id":"public/live2d_models/koharu/assets/mtn/09.mtn","hash":"ecf1283b72e1c4b7e3a97343cd97726813f18790","modified":1628314623592},{"_id":"public/live2d_models/koharu/assets/mtn/idle.mtn","hash":"058d4628ab04bf42c279501ba4fa37116d384e41","modified":1628314623592},{"_id":"public/live2d_models/miku/assets/mtn/miku_m_02.mtn","hash":"2eda9602d626d89285e0c0c5f564383964516cc8","modified":1628314623592},{"_id":"public/live2d_models/miku/assets/mtn/miku_idle_01.mtn","hash":"5633f73601cf8b0a318e7a7265f71cc782683251","modified":1628314623592},{"_id":"public/live2d_models/miku/assets/mtn/miku_m_01.mtn","hash":"bd0ea5f2f0528b21c4e5632838b69e478b652e88","modified":1628314623592},{"_id":"public/live2d_models/miku/assets/mtn/miku_m_03.mtn","hash":"94ef9d31a78f7f90d3fb213c4353afbdb3462cff","modified":1628314623592},{"_id":"public/live2d_models/miku/assets/mtn/miku_m_04.mtn","hash":"5c440e8f4cd45e73a7c8044ea0e2ea11234f9fd9","modified":1628314623592},{"_id":"public/live2d_models/miku/assets/mtn/miku_m_05.mtn","hash":"73b9b162c1dbf9a6747364ae47b12cba9da0bbec","modified":1628314623592},{"_id":"public/live2d_models/miku/assets/mtn/miku_m_06.mtn","hash":"0bfd6ad29e5e171a1ce03a7acb8ffcca9f463902","modified":1628314623592},{"_id":"public/live2d_models/ni-j/assets/mtn/00_idle.mtn","hash":"3686b7bfdb43f85f4fe1d94ed59379d2c4bee41d","modified":1628314623592},{"_id":"public/live2d_models/miku/assets/mtn/miku_shake_01.mtn","hash":"190875ab6cdeee7ae87c4c296429b848c942dd8a","modified":1628314623592},{"_id":"public/live2d_models/ni-j/assets/mtn/01_happy.mtn","hash":"2020573671b39c81fbd784a8b873ebee019ca501","modified":1628314623592},{"_id":"public/live2d_models/ni-j/assets/mtn/02_angry.mtn","hash":"f75e1f580c64695fbbf8ba3c5f49eafc7208411d","modified":1628314623592},{"_id":"public/live2d_models/ni-j/assets/mtn/03_fear.mtn","hash":"b6cdb8fa48960b2a6e66d78ea992221e8108437b","modified":1628314623592},{"_id":"public/live2d_models/ni-j/assets/mtn/04_surprise.mtn","hash":"4b911af06de9bc6f386aecd623851e5799edaa96","modified":1628314623592},{"_id":"public/live2d_models/ni-j/assets/mtn/05_fun.mtn","hash":"4b956c9c028dce753fafa1859404a136975786d4","modified":1628314623592},{"_id":"public/live2d_models/ni-j/assets/mtn/06_love.mtn","hash":"c9f90cc2e2be55ac9c19cf6a962330dad3833fc1","modified":1628314623592},{"_id":"public/live2d_models/ni-j/assets/mtn/07_bye.mtn","hash":"6a3e90e8efb64cd5b187196625a3d8915efb21c8","modified":1628314623592},{"_id":"public/live2d_models/ni-j/assets/mtn/08_sad.mtn","hash":"63647d9320bf3928d658e1275adbfaeba88748b7","modified":1628314623592},{"_id":"public/live2d_models/ni-j/assets/mtn/09_yawn.mtn","hash":"e0e29a712b01be59ae8bba2e1a0d850e06260d20","modified":1628314623592},{"_id":"public/live2d_models/ni-j/assets/mtn/10_yeah.mtn","hash":"58c4bda1339f41fa8a7e554509a7a871bad392b8","modified":1628314623592},{"_id":"public/live2d_models/ni-j/assets/mtn/12_stagger.mtn","hash":"3f1a0b25cb1b9fb150f7a9ef37e8c9ba8d4e6ba1","modified":1628314623592},{"_id":"public/live2d_models/ni-j/assets/mtn/13_cry.mtn","hash":"27709b59d2e6cba73d69a67cadb8bf50413206a9","modified":1628314623592},{"_id":"public/live2d_models/ni-j/assets/mtn/11_muscle.mtn","hash":"7d0e3466a996f8704e86913c723ac4b82f14ff47","modified":1628314623592},{"_id":"public/live2d_models/ni-j/assets/mtn/14_ sigh.mtn","hash":"80c4e4f539253d86a7aa5faae2c5e5a3a7b1adcc","modified":1628314623592},{"_id":"public/live2d_models/ni-j/assets/mtn/15_joy.mtn","hash":"b76a24efc57e4c2cc4abf70c293b2e800029a20d","modified":1628314623592},{"_id":"public/live2d_models/ni-j/assets/mtn/16_menace.mtn","hash":"6edb6b114d53d7f93cff164992db475b0b6f09c3","modified":1628314623592},{"_id":"public/live2d_models/ni-j/assets/mtn/17_yes.mtn","hash":"a023cc93e55b3940f1a8690dcfa7ad1cfa534fad","modified":1628314623592},{"_id":"public/live2d_models/ni-j/assets/mtn/18_no.mtn","hash":"9a18a2537bf6634da2bafd3a57d236de30c73b4e","modified":1628314623592},{"_id":"public/live2d_models/ni-j/assets/mtn/19_walk.mtn","hash":"035516e8cdaa5b3c6e7524daca72294284a81126","modified":1628314623592},{"_id":"public/live2d_models/nico/assets/mtn/00_idle.mtn","hash":"3686b7bfdb43f85f4fe1d94ed59379d2c4bee41d","modified":1628314623592},{"_id":"public/live2d_models/ni-j/assets/mtn/20_sleep.mtn","hash":"914e4670825467e5e8d2f6983bd21c7190e57310","modified":1628314623592},{"_id":"public/live2d_models/nico/assets/mtn/01_happy.mtn","hash":"2020573671b39c81fbd784a8b873ebee019ca501","modified":1628314623592},{"_id":"public/live2d_models/nico/assets/mtn/02_angry.mtn","hash":"f75e1f580c64695fbbf8ba3c5f49eafc7208411d","modified":1628314623592},{"_id":"public/live2d_models/nico/assets/mtn/03_fear.mtn","hash":"b6cdb8fa48960b2a6e66d78ea992221e8108437b","modified":1628314623592},{"_id":"public/live2d_models/nico/assets/mtn/04_surprise.mtn","hash":"4b911af06de9bc6f386aecd623851e5799edaa96","modified":1628314623592},{"_id":"public/live2d_models/nico/assets/mtn/05_fun.mtn","hash":"4b956c9c028dce753fafa1859404a136975786d4","modified":1628314623592},{"_id":"public/live2d_models/nico/assets/mtn/07_bye.mtn","hash":"6a3e90e8efb64cd5b187196625a3d8915efb21c8","modified":1628314623592},{"_id":"public/live2d_models/nico/assets/mtn/06_love.mtn","hash":"c9f90cc2e2be55ac9c19cf6a962330dad3833fc1","modified":1628314623592},{"_id":"public/live2d_models/nico/assets/mtn/08_sad.mtn","hash":"63647d9320bf3928d658e1275adbfaeba88748b7","modified":1628314623592},{"_id":"public/live2d_models/nico/assets/mtn/10_yeah.mtn","hash":"58c4bda1339f41fa8a7e554509a7a871bad392b8","modified":1628314623592},{"_id":"public/live2d_models/nico/assets/mtn/09_yawn.mtn","hash":"e0e29a712b01be59ae8bba2e1a0d850e06260d20","modified":1628314623592},{"_id":"public/live2d_models/nico/assets/mtn/11_muscle.mtn","hash":"7d0e3466a996f8704e86913c723ac4b82f14ff47","modified":1628314623592},{"_id":"public/live2d_models/nico/assets/mtn/12_stagger.mtn","hash":"3f1a0b25cb1b9fb150f7a9ef37e8c9ba8d4e6ba1","modified":1628314623592},{"_id":"public/live2d_models/nico/assets/mtn/14_ sigh.mtn","hash":"80c4e4f539253d86a7aa5faae2c5e5a3a7b1adcc","modified":1628314623592},{"_id":"public/live2d_models/nico/assets/mtn/15_joy.mtn","hash":"b76a24efc57e4c2cc4abf70c293b2e800029a20d","modified":1628314623592},{"_id":"public/live2d_models/nico/assets/mtn/13_cry.mtn","hash":"27709b59d2e6cba73d69a67cadb8bf50413206a9","modified":1628314623592},{"_id":"public/live2d_models/nico/assets/mtn/16_menace.mtn","hash":"6edb6b114d53d7f93cff164992db475b0b6f09c3","modified":1628314623592},{"_id":"public/live2d_models/nico/assets/mtn/17_yes.mtn","hash":"a023cc93e55b3940f1a8690dcfa7ad1cfa534fad","modified":1628314623592},{"_id":"public/live2d_models/nico/assets/mtn/19_walk.mtn","hash":"035516e8cdaa5b3c6e7524daca72294284a81126","modified":1628314623592},{"_id":"public/live2d_models/nico/assets/mtn/18_no.mtn","hash":"9a18a2537bf6634da2bafd3a57d236de30c73b4e","modified":1628314623592},{"_id":"public/live2d_models/nico/assets/mtn/20_sleep.mtn","hash":"914e4670825467e5e8d2f6983bd21c7190e57310","modified":1628314623592},{"_id":"public/live2d_models/nipsilon/assets/mtn/00_idle.mtn","hash":"3686b7bfdb43f85f4fe1d94ed59379d2c4bee41d","modified":1628314623592},{"_id":"public/live2d_models/nipsilon/assets/mtn/01_happy.mtn","hash":"2020573671b39c81fbd784a8b873ebee019ca501","modified":1628314623592},{"_id":"public/live2d_models/nipsilon/assets/mtn/02_angry.mtn","hash":"f75e1f580c64695fbbf8ba3c5f49eafc7208411d","modified":1628314623592},{"_id":"public/live2d_models/nipsilon/assets/mtn/03_fear.mtn","hash":"b6cdb8fa48960b2a6e66d78ea992221e8108437b","modified":1628314623592},{"_id":"public/live2d_models/nipsilon/assets/mtn/04_surprise.mtn","hash":"4b911af06de9bc6f386aecd623851e5799edaa96","modified":1628314623592},{"_id":"public/live2d_models/nipsilon/assets/mtn/05_fun.mtn","hash":"4b956c9c028dce753fafa1859404a136975786d4","modified":1628314623592},{"_id":"public/live2d_models/nipsilon/assets/mtn/06_love.mtn","hash":"c9f90cc2e2be55ac9c19cf6a962330dad3833fc1","modified":1628314623592},{"_id":"public/live2d_models/nipsilon/assets/mtn/07_bye.mtn","hash":"6a3e90e8efb64cd5b187196625a3d8915efb21c8","modified":1628314623592},{"_id":"public/live2d_models/nipsilon/assets/mtn/08_sad.mtn","hash":"63647d9320bf3928d658e1275adbfaeba88748b7","modified":1628314623592},{"_id":"public/live2d_models/nipsilon/assets/mtn/10_yeah.mtn","hash":"58c4bda1339f41fa8a7e554509a7a871bad392b8","modified":1628314623592},{"_id":"public/live2d_models/nipsilon/assets/mtn/09_yawn.mtn","hash":"e0e29a712b01be59ae8bba2e1a0d850e06260d20","modified":1628314623592},{"_id":"public/live2d_models/nipsilon/assets/mtn/11_muscle.mtn","hash":"7d0e3466a996f8704e86913c723ac4b82f14ff47","modified":1628314623592},{"_id":"public/live2d_models/nipsilon/assets/mtn/12_stagger.mtn","hash":"3f1a0b25cb1b9fb150f7a9ef37e8c9ba8d4e6ba1","modified":1628314623592},{"_id":"public/live2d_models/nipsilon/assets/mtn/13_cry.mtn","hash":"27709b59d2e6cba73d69a67cadb8bf50413206a9","modified":1628314623592},{"_id":"public/live2d_models/nipsilon/assets/mtn/14_ sigh.mtn","hash":"80c4e4f539253d86a7aa5faae2c5e5a3a7b1adcc","modified":1628314623592},{"_id":"public/live2d_models/nipsilon/assets/mtn/15_joy.mtn","hash":"b76a24efc57e4c2cc4abf70c293b2e800029a20d","modified":1628314623592},{"_id":"public/live2d_models/nipsilon/assets/mtn/16_menace.mtn","hash":"6edb6b114d53d7f93cff164992db475b0b6f09c3","modified":1628314623592},{"_id":"public/live2d_models/nipsilon/assets/mtn/17_yes.mtn","hash":"a023cc93e55b3940f1a8690dcfa7ad1cfa534fad","modified":1628314623592},{"_id":"public/live2d_models/nipsilon/assets/mtn/18_no.mtn","hash":"9a18a2537bf6634da2bafd3a57d236de30c73b4e","modified":1628314623592},{"_id":"public/live2d_models/nipsilon/assets/mtn/19_walk.mtn","hash":"035516e8cdaa5b3c6e7524daca72294284a81126","modified":1628314623592},{"_id":"public/live2d_models/nietzsche/assets/mtn/00_idle.mtn","hash":"3686b7bfdb43f85f4fe1d94ed59379d2c4bee41d","modified":1628314623592},{"_id":"public/live2d_models/nietzsche/assets/mtn/01_happy.mtn","hash":"2020573671b39c81fbd784a8b873ebee019ca501","modified":1628314623592},{"_id":"public/live2d_models/nipsilon/assets/mtn/20_sleep.mtn","hash":"914e4670825467e5e8d2f6983bd21c7190e57310","modified":1628314623592},{"_id":"public/live2d_models/nietzsche/assets/mtn/02_angry.mtn","hash":"f75e1f580c64695fbbf8ba3c5f49eafc7208411d","modified":1628314623592},{"_id":"public/live2d_models/nietzsche/assets/mtn/04_surprise.mtn","hash":"4b911af06de9bc6f386aecd623851e5799edaa96","modified":1628314623592},{"_id":"public/live2d_models/nietzsche/assets/mtn/03_fear.mtn","hash":"b6cdb8fa48960b2a6e66d78ea992221e8108437b","modified":1628314623592},{"_id":"public/live2d_models/nietzsche/assets/mtn/06_love.mtn","hash":"c9f90cc2e2be55ac9c19cf6a962330dad3833fc1","modified":1628314623592},{"_id":"public/live2d_models/nietzsche/assets/mtn/05_fun.mtn","hash":"4b956c9c028dce753fafa1859404a136975786d4","modified":1628314623592},{"_id":"public/live2d_models/nietzsche/assets/mtn/08_sad.mtn","hash":"63647d9320bf3928d658e1275adbfaeba88748b7","modified":1628314623592},{"_id":"public/live2d_models/nietzsche/assets/mtn/07_bye.mtn","hash":"6a3e90e8efb64cd5b187196625a3d8915efb21c8","modified":1628314623592},{"_id":"public/live2d_models/nietzsche/assets/mtn/09_yawn.mtn","hash":"e0e29a712b01be59ae8bba2e1a0d850e06260d20","modified":1628314623592},{"_id":"public/live2d_models/nietzsche/assets/mtn/10_yeah.mtn","hash":"58c4bda1339f41fa8a7e554509a7a871bad392b8","modified":1628314623592},{"_id":"public/live2d_models/nietzsche/assets/mtn/11_muscle.mtn","hash":"7d0e3466a996f8704e86913c723ac4b82f14ff47","modified":1628314623592},{"_id":"public/live2d_models/nietzsche/assets/mtn/12_stagger.mtn","hash":"3f1a0b25cb1b9fb150f7a9ef37e8c9ba8d4e6ba1","modified":1628314623592},{"_id":"public/live2d_models/nietzsche/assets/mtn/13_cry.mtn","hash":"27709b59d2e6cba73d69a67cadb8bf50413206a9","modified":1628314623592},{"_id":"public/live2d_models/nietzsche/assets/mtn/15_joy.mtn","hash":"b76a24efc57e4c2cc4abf70c293b2e800029a20d","modified":1628314623592},{"_id":"public/live2d_models/nietzsche/assets/mtn/14_ sigh.mtn","hash":"80c4e4f539253d86a7aa5faae2c5e5a3a7b1adcc","modified":1628314623592},{"_id":"public/live2d_models/nietzsche/assets/mtn/16_menace.mtn","hash":"6edb6b114d53d7f93cff164992db475b0b6f09c3","modified":1628314623592},{"_id":"public/live2d_models/nietzsche/assets/mtn/17_yes.mtn","hash":"a023cc93e55b3940f1a8690dcfa7ad1cfa534fad","modified":1628314623592},{"_id":"public/live2d_models/nietzsche/assets/mtn/18_no.mtn","hash":"9a18a2537bf6634da2bafd3a57d236de30c73b4e","modified":1628314623592},{"_id":"public/live2d_models/nietzsche/assets/mtn/19_walk.mtn","hash":"035516e8cdaa5b3c6e7524daca72294284a81126","modified":1628314623592},{"_id":"public/live2d_models/nito/assets/mtn/00_idle.mtn","hash":"3686b7bfdb43f85f4fe1d94ed59379d2c4bee41d","modified":1628314623592},{"_id":"public/live2d_models/nietzsche/assets/mtn/20_sleep.mtn","hash":"914e4670825467e5e8d2f6983bd21c7190e57310","modified":1628314623592},{"_id":"public/live2d_models/nito/assets/mtn/01_happy.mtn","hash":"2020573671b39c81fbd784a8b873ebee019ca501","modified":1628314623592},{"_id":"public/live2d_models/nito/assets/mtn/02_angry.mtn","hash":"f75e1f580c64695fbbf8ba3c5f49eafc7208411d","modified":1628314623592},{"_id":"public/live2d_models/nito/assets/mtn/03_fear.mtn","hash":"b6cdb8fa48960b2a6e66d78ea992221e8108437b","modified":1628314623592},{"_id":"public/live2d_models/nito/assets/mtn/04_surprise.mtn","hash":"4b911af06de9bc6f386aecd623851e5799edaa96","modified":1628314623592},{"_id":"public/live2d_models/nito/assets/mtn/05_fun.mtn","hash":"4b956c9c028dce753fafa1859404a136975786d4","modified":1628314623592},{"_id":"public/live2d_models/nito/assets/mtn/06_love.mtn","hash":"c9f90cc2e2be55ac9c19cf6a962330dad3833fc1","modified":1628314623592},{"_id":"public/live2d_models/nito/assets/mtn/07_bye.mtn","hash":"6a3e90e8efb64cd5b187196625a3d8915efb21c8","modified":1628314623592},{"_id":"public/live2d_models/nito/assets/mtn/08_sad.mtn","hash":"63647d9320bf3928d658e1275adbfaeba88748b7","modified":1628314623592},{"_id":"public/live2d_models/nito/assets/mtn/09_yawn.mtn","hash":"e0e29a712b01be59ae8bba2e1a0d850e06260d20","modified":1628314623592},{"_id":"public/live2d_models/nito/assets/mtn/10_yeah.mtn","hash":"58c4bda1339f41fa8a7e554509a7a871bad392b8","modified":1628314623592},{"_id":"public/live2d_models/nito/assets/mtn/11_muscle.mtn","hash":"7d0e3466a996f8704e86913c723ac4b82f14ff47","modified":1628314623592},{"_id":"public/live2d_models/nito/assets/mtn/12_stagger.mtn","hash":"3f1a0b25cb1b9fb150f7a9ef37e8c9ba8d4e6ba1","modified":1628314623592},{"_id":"public/live2d_models/nito/assets/mtn/13_cry.mtn","hash":"27709b59d2e6cba73d69a67cadb8bf50413206a9","modified":1628314623592},{"_id":"public/live2d_models/nito/assets/mtn/14_ sigh.mtn","hash":"80c4e4f539253d86a7aa5faae2c5e5a3a7b1adcc","modified":1628314623592},{"_id":"public/live2d_models/nito/assets/mtn/15_joy.mtn","hash":"b76a24efc57e4c2cc4abf70c293b2e800029a20d","modified":1628314623592},{"_id":"public/live2d_models/nito/assets/mtn/16_menace.mtn","hash":"6edb6b114d53d7f93cff164992db475b0b6f09c3","modified":1628314623592},{"_id":"public/live2d_models/nito/assets/mtn/17_yes.mtn","hash":"a023cc93e55b3940f1a8690dcfa7ad1cfa534fad","modified":1628314623592},{"_id":"public/live2d_models/nito/assets/mtn/18_no.mtn","hash":"9a18a2537bf6634da2bafd3a57d236de30c73b4e","modified":1628314623592},{"_id":"public/live2d_models/nito/assets/mtn/19_walk.mtn","hash":"035516e8cdaa5b3c6e7524daca72294284a81126","modified":1628314623592},{"_id":"public/live2d_models/nito/assets/mtn/20_sleep.mtn","hash":"914e4670825467e5e8d2f6983bd21c7190e57310","modified":1628314623592},{"_id":"public/live2d_models/shizuku/assets/mtn/flickHead_00.mtn","hash":"f64c79c9171660db5c440bef229ac2e35a1597d5","modified":1628314623592},{"_id":"public/live2d_models/shizuku/assets/mtn/flickHead_01.mtn","hash":"a1011d6bf397bcd3c3c968d9616f88fe1ffbc83c","modified":1628314623592},{"_id":"public/live2d_models/shizuku/assets/mtn/flickHead_02.mtn","hash":"d3c9c0acb4dc25a2274f3b9faa71e5ce60ad92e4","modified":1628314623592},{"_id":"public/live2d_models/shizuku/assets/mtn/idle_00.mtn","hash":"f9fa4acb170959ed665690d18790fc618cea6bd2","modified":1628314623592},{"_id":"public/live2d_models/shizuku/assets/mtn/idle_01.mtn","hash":"fe824e9209bda79277f4785a637c38bf3b8e1cad","modified":1628314623592},{"_id":"public/live2d_models/shizuku/assets/mtn/idle_02.mtn","hash":"58b87745d9c2b2b5667549a52a781b6bfea44927","modified":1628314623592},{"_id":"public/live2d_models/shizuku/assets/mtn/pinchIn_00.mtn","hash":"70978b4c983f6a9fd6d3d9c24571586f7d6eac30","modified":1628314623592},{"_id":"public/live2d_models/shizuku/assets/mtn/pinchIn_01.mtn","hash":"a5fefb45115695db72b9499e627a51b2b9394f2c","modified":1628314623592},{"_id":"public/live2d_models/shizuku/assets/mtn/pinchIn_02.mtn","hash":"aa0d66ca9b06c374577fd7e64e89756de1e1f2ae","modified":1628314623592},{"_id":"public/live2d_models/shizuku/assets/mtn/pinchOut_00.mtn","hash":"e07fe8fd8c2810e3c1d28b730bd49c8c25849bad","modified":1628314623592},{"_id":"public/live2d_models/shizuku/assets/mtn/shake_00.mtn","hash":"5185d02c7ab9f0bec3d4a890b54b2378e553373d","modified":1628314623592},{"_id":"public/live2d_models/shizuku/assets/mtn/pinchOut_01.mtn","hash":"e05df948d08b17f34c993a9c1f901190509d5db0","modified":1628314623592},{"_id":"public/live2d_models/shizuku/assets/mtn/shake_02.mtn","hash":"2702970805e07777974c383613e631730982bcff","modified":1628314623592},{"_id":"public/live2d_models/shizuku/assets/mtn/shake_01.mtn","hash":"e812985a56796e122018f9d57d1606a4866ff7d1","modified":1628314623592},{"_id":"public/live2d_models/shizuku/assets/mtn/pinchOut_02.mtn","hash":"b323fd350d334b33bbdfb31194ae664089986c27","modified":1628314623592},{"_id":"public/live2d_models/shizuku/assets/mtn/tapBody_00.mtn","hash":"835aa3d4a8fbd26c0bb66b164a19464fa3f17a99","modified":1628314623592},{"_id":"public/live2d_models/shizuku/assets/mtn/tapBody_01.mtn","hash":"78fca17436ab5e065e27f419f135aa6c0a0b52ef","modified":1628314623592},{"_id":"public/live2d_models/shizuku/assets/snd/flickHead_00.mp3","hash":"356388d939006b03cf9e6158c603b58d4800bec1","modified":1628314623592},{"_id":"public/live2d_models/shizuku/assets/mtn/tapBody_02.mtn","hash":"a75acb51c1191ce5050d3ee1af6f2dcc787c7c5e","modified":1628314623592},{"_id":"public/live2d_models/shizuku/assets/snd/flickHead_01.mp3","hash":"436d0bbccf6e7a2744447554947eee4563608970","modified":1628314623592},{"_id":"public/live2d_models/shizuku/assets/snd/flickHead_02.mp3","hash":"5f63477ce63f2073e24d68fea906fe136fe6349e","modified":1628314623592},{"_id":"public/live2d_models/shizuku/assets/snd/pinchIn_00.mp3","hash":"f9baa3b7cadec20b714135fc49cfab3ff6adeeb4","modified":1628314623592},{"_id":"public/live2d_models/shizuku/assets/snd/pinchIn_01.mp3","hash":"d5c8cc6f61b56222a83a5174f75006f83c3b88da","modified":1628314623592},{"_id":"public/live2d_models/shizuku/assets/snd/shake_00.mp3","hash":"f65dd58e7b44ec5c865d13c190316070b625b5fe","modified":1628314623592},{"_id":"public/live2d_models/shizuku/assets/snd/shake_02.mp3","hash":"8882b94bce00f09232588b7301badb105fa8acab","modified":1628314623592},{"_id":"public/live2d_models/shizuku/assets/snd/tapBody_00.mp3","hash":"003e68a59a9c8392e230f34c91860efbd946277a","modified":1628314623592},{"_id":"public/live2d_models/shizuku/assets/snd/shake_01.mp3","hash":"c1e0e8a07ff268ee06c2b7825d1b645e193f21b9","modified":1628314623592},{"_id":"public/live2d_models/shizuku/assets/snd/tapBody_02.mp3","hash":"15e7815ed0a0e5164e18e0c53b97aedc742a134d","modified":1628314623592},{"_id":"public/live2d_models/shizuku/assets/snd/tapBody_01.mp3","hash":"5314b50f153df71559e51e2586581c006df00722","modified":1628314623592},{"_id":"public/live2d_models/tororo/assets/mtn/00_idle.mtn","hash":"b224c60e463b9f71ddbfc0c720e430496c175f4f","modified":1628314623592},{"_id":"public/live2d_models/tororo/assets/mtn/02.mtn","hash":"7eafc52edc73b7cb80ae70d34b43c6ac778fa47b","modified":1628314623592},{"_id":"public/live2d_models/tororo/assets/mtn/03.mtn","hash":"f900737c7a98441cbb2e05255427e6260e19ae68","modified":1628314623592},{"_id":"public/live2d_models/tororo/assets/mtn/01.mtn","hash":"fb550833ae22c9954c3e01df37ed29b2d61700f2","modified":1628314623592},{"_id":"public/live2d_models/tororo/assets/mtn/04.mtn","hash":"c7a25d3c5d783639bae18db2f3cd284b819c3c85","modified":1628314623592},{"_id":"public/live2d_models/tororo/assets/mtn/05.mtn","hash":"dd20ad24b5d1830a5d44b9bccb28f922eea5e0e5","modified":1628314623592},{"_id":"public/live2d_models/tororo/assets/mtn/07.mtn","hash":"b7f2e3a9fa4f3ffbb6e64a08f8d9f45ca1868ffb","modified":1628314623592},{"_id":"public/live2d_models/tororo/assets/mtn/08.mtn","hash":"4411c7651ff65195b113d95e7d5ebef8a59a37d9","modified":1628314623592},{"_id":"public/live2d_models/tororo/assets/mtn/06.mtn","hash":"ad404bd852d276cdd3d054c953e23f90e4e45ae1","modified":1628314623592},{"_id":"public/live2d_models/tsumiki/assets/mtn/P01.mtn","hash":"4b6d266d9fe31e01c4e13ac2049435b5d70b5589","modified":1628314623592},{"_id":"public/live2d_models/tsumiki/assets/mtn/tsumiki_m_01.mtn","hash":"b1b0e2237926a52970703bcfdd5cf6bb6fc39248","modified":1628314623592},{"_id":"public/live2d_models/tsumiki/assets/mtn/tsumiki_m_01_df.mtn","hash":"4b008605c2f61f37fd295d929df8b51e9f1f447e","modified":1628314623592},{"_id":"public/live2d_models/tsumiki/assets/mtn/tsumiki_idle_01.mtn","hash":"dd178b1cb3817bd2d7e6f56f25daf3ffacd4afdd","modified":1628314623592},{"_id":"public/live2d_models/tsumiki/assets/mtn/tsumiki_m_02.mtn","hash":"43f73acf0ec68e5ddda2fb212b3bd62b4ec63829","modified":1628314623592},{"_id":"public/live2d_models/tsumiki/assets/mtn/tsumiki_m_03.mtn","hash":"bbd6a2cbe87dea113024d9d953bb42864cad31a5","modified":1628314623592},{"_id":"public/live2d_models/tsumiki/assets/mtn/tsumiki_m_04.mtn","hash":"b6395b5acb2136c8265f37483cfe60b4a1bfb66d","modified":1628314623592},{"_id":"public/live2d_models/tsumiki/assets/mtn/tsumiki_m_05.mtn","hash":"c118b3bcbf03d0cc07c9f6a2a8e8c495f07f4091","modified":1628314623592},{"_id":"public/live2d_models/tsumiki/assets/mtn/tsumiki_m_06.mtn","hash":"2641628ced0c982f214242744da73f1ab048c078","modified":1628314623592},{"_id":"public/live2d_models/tsumiki/assets/mtn/tsumiki_m_07.mtn","hash":"ec5da8fb40ff26dc3e9f306cade5f4bfc2f15642","modified":1628314623592},{"_id":"public/live2d_models/tsumiki/assets/mtn/tsumiki_m_08.mtn","hash":"98768aafeb239e75f788969eb995adbe7a89bc3f","modified":1628314623592},{"_id":"public/live2d_models/tsumiki/assets/mtn/tsumiki_m_09.mtn","hash":"c4f3635225ba606873a7c14cc91bf5a28a2afa95","modified":1628314623592},{"_id":"public/live2d_models/tsumiki/assets/mtn/tsumiki_m_10.mtn","hash":"8e6d0609ae64f8dd4db0e5e85addbc677fac3a79","modified":1628314623592},{"_id":"public/live2d_models/tsumiki/assets/mtn/tsumiki_m_13.mtn","hash":"d20d09dfbdf42d13240c45f9d2fa4474a4541dd8","modified":1628314623592},{"_id":"public/live2d_models/tsumiki/assets/mtn/tsumiki_m_14.mtn","hash":"2480493fffb4fd8135ef1e88c5f717952b7d6542","modified":1628314623592},{"_id":"public/live2d_models/tsumiki/assets/mtn/tsumiki_m_15.mtn","hash":"4fa8d8667c41cd5b3c49cf4bdd8b36cf0a9158b9","modified":1628314623592},{"_id":"public/live2d_models/tsumiki/assets/mtn/tsumiki_m_18.mtn","hash":"34fbff31238e9b6a541f5f03a00bec5cbcec6649","modified":1628314623592},{"_id":"public/live2d_models/tsumiki/assets/mtn/tsumiki_m_20.mtn","hash":"076ca7be2c81e776794245a3865478b20428e416","modified":1628314623592},{"_id":"public/live2d_models/tsumiki/assets/mtn/tsumiki_m_21.mtn","hash":"bd917f60537e4e9037c85bf356d4c25e75e2807c","modified":1628314623592},{"_id":"public/live2d_models/tsumiki/assets/mtn/tsumiki_m_19.mtn","hash":"685fc0130899e903d9c9433ec1c1a987323d6c8c","modified":1628314623592},{"_id":"public/live2d_models/tsumiki/assets/mtn/tsumiki_m_17.mtn","hash":"6346ebcf76b0780987f552b16c4c62c39732597f","modified":1628314623592},{"_id":"public/live2d_models/tsumiki/assets/mtn/tsumiki_m_22.mtn","hash":"0fb02e4734ab8c455e1405dfed9546af583595ae","modified":1628314623592},{"_id":"public/live2d_models/tsumiki/assets/mtn/tsumiki_m_16.mtn","hash":"03843599008ab2ee23d9d03174924609ad042ce6","modified":1628314623592},{"_id":"public/live2d_models/tsumiki/assets/mtn/tsumiki_m_23.mtn","hash":"d5a156e295e575c615b673350c025e3270afee8e","modified":1628314623592},{"_id":"public/live2d_models/tsumiki/assets/mtn/tsumiki_m_24.mtn","hash":"696502793e9917abc495645be784262e3b997bde","modified":1628314623592},{"_id":"public/live2d_models/unitychan/assets/mtn/idle_01.mtn","hash":"e38a7dcfcad059b695f935b2071a1270c1ddf905","modified":1628314623592},{"_id":"public/live2d_models/unitychan/assets/mtn/idle_02.mtn","hash":"8c3929962a4991c94bf7aeaf33169d61ccaccb2c","modified":1628314623592},{"_id":"public/live2d_models/unitychan/assets/mtn/m_01.mtn","hash":"97d08b57c3b07a854f69cdef3ce6d13a2b2ece1c","modified":1628314623592},{"_id":"public/live2d_models/unitychan/assets/mtn/m_02.mtn","hash":"a4dd9580452854f6adc7b30e9e85702a7641179c","modified":1628314623592},{"_id":"public/live2d_models/unitychan/assets/mtn/m_03.mtn","hash":"dd140c6c4702f3fbd785a85a4d5d8cfa32b9bc32","modified":1628314623592},{"_id":"public/live2d_models/unitychan/assets/mtn/m_04.mtn","hash":"32f8515854a89878c5becbabf56dabd4c675d437","modified":1628314623592},{"_id":"public/live2d_models/unitychan/assets/mtn/m_05.mtn","hash":"ca1f068a2c9c56519e4306115b95d1f497f31124","modified":1628314623592},{"_id":"public/live2d_models/unitychan/assets/mtn/m_06.mtn","hash":"cb16f119956346e4b15a1c432491423893cf2389","modified":1628314623592},{"_id":"public/live2d_models/unitychan/assets/mtn/m_07.mtn","hash":"35caceb556d9bb4fc2a5ed4f8c51d766a6e70405","modified":1628314623592},{"_id":"public/live2d_models/unitychan/assets/mtn/m_08.mtn","hash":"fbd6ae1967446a421d8505a8d29d5f7f64b5c0d7","modified":1628314623592},{"_id":"public/live2d_models/unitychan/assets/mtn/m_09.mtn","hash":"4b942bfbde2a82f19bb4aab7e54e3caae9691da6","modified":1628314623592},{"_id":"public/live2d_models/unitychan/assets/mtn/m_12.mtn","hash":"90e96587969b78785c16cdffbdbe0b220cac39b7","modified":1628314623592},{"_id":"public/live2d_models/unitychan/assets/mtn/m_11.mtn","hash":"2c5ec476b9e3246d8c7a5ae4611401d3420cfa1e","modified":1628314623592},{"_id":"public/live2d_models/unitychan/assets/mtn/m_10.mtn","hash":"837f0cda82543d87c12108957a16e482964f3796","modified":1628314623592},{"_id":"public/live2d_models/unitychan/assets/mtn/m_13.mtn","hash":"f08d7f660fda4029fec2acb1f1389f855b5d1b96","modified":1628314623592},{"_id":"public/live2d_models/unitychan/assets/mtn/m_14.mtn","hash":"4c5c7fdc05237a090341d4690bd7e07344728e9e","modified":1628314623592},{"_id":"public/live2d_models/wanko/assets/mtn/idle_01.mtn","hash":"908abce18f6cf7fd4bc1486f048c25a517f4a34a","modified":1628314623592},{"_id":"public/live2d_models/wanko/assets/mtn/idle_02.mtn","hash":"865874c50848fbc9a55011391531e2ec171c9b91","modified":1628314623592},{"_id":"public/live2d_models/wanko/assets/mtn/idle_03.mtn","hash":"84684914ebf5dc5b2df160338bb97dcc0a978476","modified":1628314623592},{"_id":"public/live2d_models/wanko/assets/mtn/shake_02.mtn","hash":"7b6c914f6c33450eda2e53d9b638fd7045c0f683","modified":1628314623592},{"_id":"public/live2d_models/wanko/assets/mtn/touch_01.mtn","hash":"99270ea8fe1f8f5d88eadb94f36bd0810009d1e6","modified":1628314623592},{"_id":"public/live2d_models/wanko/assets/mtn/idle_04.mtn","hash":"78e22091792abb0600f724a5dfd60371257954e8","modified":1628314623592},{"_id":"public/live2d_models/wanko/assets/mtn/shake_01.mtn","hash":"dffc54733127832f8f5e91aced55a83da58fa215","modified":1628314623592},{"_id":"public/live2d_models/wanko/assets/mtn/touch_02.mtn","hash":"4d1f099fbd18d15c598a644227ed5bf942a2ba71","modified":1628314623592},{"_id":"public/live2d_models/wanko/assets/mtn/touch_03.mtn","hash":"9c394975083915f0f3786caff1762381348b041e","modified":1628314623592},{"_id":"public/live2d_models/wanko/assets/mtn/touch_06.mtn","hash":"feb9237c73f2045ed1704c01b5362c9a54ee5a18","modified":1628314623592},{"_id":"public/live2d_models/wanko/assets/mtn/touch_04.mtn","hash":"8d2302cfdaec698e575048797ff4f30ae4d202de","modified":1628314623592},{"_id":"public/live2d_models/wanko/assets/mtn/touch_05.mtn","hash":"9610bb8a937ba9b11445a3894d8cc0733a2b67e5","modified":1628314623592},{"_id":"public/live2d_models/z16/assets/mtn/idle.mtn","hash":"f6b879d9f1d096509a7edbc971b8fdd9697932e9","modified":1628314623592},{"_id":"public/live2d_models/haru/02/assets/mtn/flickHead_00.mtn","hash":"66577f6dde2bec905930fba0dd5f06de939c8f1e","modified":1628314623592},{"_id":"public/live2d_models/haru/02/assets/mtn/idle_00.mtn","hash":"bbaaafe4de159dd4fb73d137d283c640d3fede53","modified":1628314623592},{"_id":"public/live2d_models/haru/02/assets/mtn/idle_01.mtn","hash":"035c196f276ed177239ea05eeaece68b0fda2935","modified":1628314623592},{"_id":"public/live2d_models/haru/02/assets/mtn/pinchIn_00.mtn","hash":"ed792ed8226aa5a3e5bf059285b2c95855c11303","modified":1628314623592},{"_id":"public/live2d_models/haru/02/assets/mtn/idle_02.mtn","hash":"82291b3b78339d52f559a65d02b78e0b30180503","modified":1628314623592},{"_id":"public/live2d_models/haru/02/assets/mtn/pinchOut_00.mtn","hash":"db831991287e3a4724578f068a68e48168081d5a","modified":1628314623592},{"_id":"public/live2d_models/haru/02/assets/mtn/tapBody_00.mtn","hash":"4041b2f1f2f4a84454180f9dab14e46d99e135c0","modified":1628314623592},{"_id":"public/live2d_models/haru/02/assets/mtn/shake_00.mtn","hash":"7e938c4abe83273766c4562a571301811dea1de6","modified":1628314623592},{"_id":"public/live2d_models/haru/02/assets/mtn/tapBody_03.mtn","hash":"fcd573576112ad5f4e4b7dc0b750de79f150f971","modified":1628314623592},{"_id":"public/live2d_models/haru/02/assets/mtn/tapBody_01.mtn","hash":"91fbfe1870f7a0a5f5fdb87c213c41b2a8cb5648","modified":1628314623592},{"_id":"public/live2d_models/haru/02/assets/mtn/tapBody_02.mtn","hash":"e93a2163cbb85525338e11a520e317329b11fb65","modified":1628314623592},{"_id":"public/live2d_models/haru/02/assets/mtn/tapBody_04.mtn","hash":"557811c5f4ddbd393542366ef95794b19fc60387","modified":1628314623592},{"_id":"public/live2d_models/haru/02/assets/mtn/tapBody_05.mtn","hash":"5f48e50e938f98636519c370745a39b921907719","modified":1628314623592},{"_id":"public/live2d_models/haru/02/assets/mtn/tapBody_06.mtn","hash":"3d06ac66c04eb12c64d36551dd85389f0b0ee51f","modified":1628314623592},{"_id":"public/live2d_models/haru/02/assets/mtn/tapBody_07.mtn","hash":"d299747aaf27377d552ef1f8b4fce9871a65c37d","modified":1628314623592},{"_id":"public/live2d_models/haru/02/assets/mtn/tapBody_08.mtn","hash":"64a03a904d701039bf81e1296ee79537c2e8800e","modified":1628314623592},{"_id":"public/live2d_models/haru/02/assets/mtn/tapBody_09.mtn","hash":"4f50c17dcf352995e51a4d462b9ca7a9e9197d5c","modified":1628314623592},{"_id":"public/live2d_models/haru/02/assets/snd/flickHead_00.mp3","hash":"0b447e7e38eb20f3f7e8ba2a5ea5f521f6e37a26","modified":1628314623592},{"_id":"public/live2d_models/haru/02/assets/snd/pinchOut_00.mp3","hash":"6872da79e1b515b2c996eecee4ca150e22aa48c0","modified":1628314623592},{"_id":"public/live2d_models/haru/02/assets/snd/pinchIn_00.mp3","hash":"d143662d2c8cfb1150f719d3d55c75d454535690","modified":1628314623592},{"_id":"public/live2d_models/haru/02/assets/snd/shake_00.mp3","hash":"28b245865f200b61cb009dfbd3811d9e9b0748fb","modified":1628314623592},{"_id":"public/live2d_models/haru/02/assets/snd/tapBody_00.mp3","hash":"23c998ca4549b7908aef029d28b6ae22cbfcdc82","modified":1628314623592},{"_id":"public/live2d_models/haru/02/assets/snd/tapBody_01.mp3","hash":"d3d5607dbe394225e2ee858531b7767f567c4e10","modified":1628314623592},{"_id":"public/live2d_models/haru/02/assets/snd/tapBody_02.mp3","hash":"be111df9ecd006e992f94cb4280c2b66d9cd23ed","modified":1628314623592},{"_id":"public/live2d_models/haru/01/assets/mtn/flickHead_00.mtn","hash":"66577f6dde2bec905930fba0dd5f06de939c8f1e","modified":1628314623592},{"_id":"public/live2d_models/haru/01/assets/mtn/idle_00.mtn","hash":"bbaaafe4de159dd4fb73d137d283c640d3fede53","modified":1628314623592},{"_id":"public/live2d_models/haru/01/assets/mtn/idle_01.mtn","hash":"035c196f276ed177239ea05eeaece68b0fda2935","modified":1628314623592},{"_id":"public/live2d_models/haru/01/assets/mtn/idle_02.mtn","hash":"82291b3b78339d52f559a65d02b78e0b30180503","modified":1628314623592},{"_id":"public/live2d_models/haru/01/assets/mtn/pinchOut_00.mtn","hash":"db831991287e3a4724578f068a68e48168081d5a","modified":1628314623592},{"_id":"public/live2d_models/haru/01/assets/mtn/shake_00.mtn","hash":"7e938c4abe83273766c4562a571301811dea1de6","modified":1628314623592},{"_id":"public/live2d_models/haru/01/assets/mtn/pinchIn_00.mtn","hash":"ed792ed8226aa5a3e5bf059285b2c95855c11303","modified":1628314623592},{"_id":"public/live2d_models/haru/01/assets/mtn/tapBody_00.mtn","hash":"4041b2f1f2f4a84454180f9dab14e46d99e135c0","modified":1628314623592},{"_id":"public/live2d_models/haru/01/assets/mtn/tapBody_01.mtn","hash":"91fbfe1870f7a0a5f5fdb87c213c41b2a8cb5648","modified":1628314623592},{"_id":"public/live2d_models/haru/01/assets/mtn/tapBody_02.mtn","hash":"e93a2163cbb85525338e11a520e317329b11fb65","modified":1628314623592},{"_id":"public/live2d_models/haru/01/assets/mtn/tapBody_03.mtn","hash":"fcd573576112ad5f4e4b7dc0b750de79f150f971","modified":1628314623592},{"_id":"public/live2d_models/haru/01/assets/mtn/tapBody_04.mtn","hash":"557811c5f4ddbd393542366ef95794b19fc60387","modified":1628314623592},{"_id":"public/live2d_models/haru/01/assets/mtn/tapBody_05.mtn","hash":"5f48e50e938f98636519c370745a39b921907719","modified":1628314623592},{"_id":"public/live2d_models/haru/01/assets/mtn/tapBody_07.mtn","hash":"d299747aaf27377d552ef1f8b4fce9871a65c37d","modified":1628314623592},{"_id":"public/live2d_models/haru/01/assets/mtn/tapBody_06.mtn","hash":"3d06ac66c04eb12c64d36551dd85389f0b0ee51f","modified":1628314623592},{"_id":"public/live2d_models/haru/01/assets/mtn/tapBody_08.mtn","hash":"64a03a904d701039bf81e1296ee79537c2e8800e","modified":1628314623592},{"_id":"public/live2d_models/haru/01/assets/mtn/tapBody_09.mtn","hash":"4f50c17dcf352995e51a4d462b9ca7a9e9197d5c","modified":1628314623592},{"_id":"public/live2d_models/haru/01/assets/snd/flickHead_00.mp3","hash":"0b447e7e38eb20f3f7e8ba2a5ea5f521f6e37a26","modified":1628314623592},{"_id":"public/live2d_models/haru/01/assets/snd/pinchIn_00.mp3","hash":"d143662d2c8cfb1150f719d3d55c75d454535690","modified":1628314623592},{"_id":"public/live2d_models/haru/01/assets/snd/pinchOut_00.mp3","hash":"6872da79e1b515b2c996eecee4ca150e22aa48c0","modified":1628314623592},{"_id":"public/live2d_models/haru/01/assets/snd/shake_00.mp3","hash":"28b245865f200b61cb009dfbd3811d9e9b0748fb","modified":1628314623592},{"_id":"public/live2d_models/haru/01/assets/snd/tapBody_00.mp3","hash":"23c998ca4549b7908aef029d28b6ae22cbfcdc82","modified":1628314623592},{"_id":"public/live2d_models/haru/01/assets/snd/tapBody_02.mp3","hash":"be111df9ecd006e992f94cb4280c2b66d9cd23ed","modified":1628314623592},{"_id":"public/live2d_models/haru/01/assets/snd/tapBody_01.mp3","hash":"d3d5607dbe394225e2ee858531b7767f567c4e10","modified":1628314623592},{"_id":"public/live2d_models/z16/assets/moc/z16.256/texture_00.png","hash":"19f22619c246067d519aa1e6e477497cc4342414","modified":1628314623592},{"_id":"public/live2d_models/z16/assets/moc/z16.512/texture_00.png","hash":"251b9f944fb1575c01a62b8a9d7522fe76954b3b","modified":1628314623592},{"_id":"public/live2d_models/haru/01/assets/moc/haru01.1024/texture_00.png","hash":"f3c4103630bbf0660f793f90a14b51fdb7dfb7ea","modified":1628314623592},{"_id":"public/live2d_models/haru/02/assets/moc/haru02.1024/texture_00.png","hash":"f3c4103630bbf0660f793f90a14b51fdb7dfb7ea","modified":1628314623592},{"_id":"public/2021/07/28/Lockbox/Lockbox-01.png","hash":"8ac3f14d4bec22ba3557bc9a463eda0f06179f69","modified":1628314623592},{"_id":"public/2021/07/28/Lockbox/Lockbox-00.png","hash":"fc302f2f0b42994b983b0af28df322d4e696eeb9","modified":1628314623592},{"_id":"public/2021/08/07/Java诊断工具Arthas最佳实践/ArthasWebConsole案例/O1CN01HzatXZ1RgccrlT90M_!!6000000002141-2-tps-529-244.png","hash":"fd9ef52dd52e1534d67e889078dfc36f57cd0c20","modified":1628314623592},{"_id":"public/2021/07/28/JsonFormatTool/JsonFormatTool-01.png","hash":"123cc7e453080269ec4ca21dc9d3a9152e8cb3de","modified":1628314623592},{"_id":"public/2021/07/28/swagger2word/swagger2word-01.png","hash":"0a47943016439d6b57268bb38d7f6d8696b1fd39","modified":1628314623592},{"_id":"public/2021/08/07/Java诊断工具Arthas最佳实践/ArthasWebConsole案例/O1CN01i041kW1lw0FCaSKNn_!!6000000004882-2-tps-1231-284.png","hash":"2e97b2fb3d4b1566a4e14eb536add67a049bb063","modified":1628314623592},{"_id":"public/2021/08/07/Java诊断工具Arthas最佳实践/ArthasWebConsole案例/arthas.png","hash":"12ce7982e26f9dbcf066c045a47b687e8173228a","modified":1628314623592},{"_id":"public/2021/07/28/JsonFormatTool/JsonFormatTool-02.png","hash":"78bc89af84fa504c39740f736a88053d53b5084a","modified":1628314623592},{"_id":"public/2021/08/07/Java诊断工具Arthas入门教程/Arthas-基础教程/O1CN01HzatXZ1RgccrlT90M_!!6000000002141-2-tps-529-244.png","hash":"fd9ef52dd52e1534d67e889078dfc36f57cd0c20","modified":1628314623592},{"_id":"public/2021/08/07/Java诊断工具Arthas最佳实践/ArthasHttpAPI案例/O1CN01HzatXZ1RgccrlT90M_!!6000000002141-2-tps-529-244.png","hash":"fd9ef52dd52e1534d67e889078dfc36f57cd0c20","modified":1628314623592},{"_id":"public/2021/08/07/Java诊断工具Arthas入门教程/Arthas-基础教程/arthas.png","hash":"12ce7982e26f9dbcf066c045a47b687e8173228a","modified":1628314623592},{"_id":"public/2021/08/07/Java诊断工具Arthas最佳实践/ArthasHttpAPI案例/arthas.png","hash":"12ce7982e26f9dbcf066c045a47b687e8173228a","modified":1628314623592},{"_id":"public/2021/08/07/Java诊断工具Arthas最佳实践/Arthas动态更新应用LoggerLevel案例/O1CN010Qbzcz1ctPSWSZI6L_!!6000000003658-2-tps-333-182.png","hash":"4f0de13d6df2f59b0ee15dfb2a1bb2b41a24d034","modified":1628314623592},{"_id":"public/2021/08/07/Java诊断工具Arthas最佳实践/Arthas动态更新应用LoggerLevel案例/O1CN01HzatXZ1RgccrlT90M_!!6000000002141-2-tps-529-244.png","hash":"fd9ef52dd52e1534d67e889078dfc36f57cd0c20","modified":1628314623592},{"_id":"public/2021/08/07/Java诊断工具Arthas最佳实践/Arthas后台异步任务案例/O1CN01HzatXZ1RgccrlT90M_!!6000000002141-2-tps-529-244.png","hash":"fd9ef52dd52e1534d67e889078dfc36f57cd0c20","modified":1628314623592},{"_id":"public/2021/08/07/Java诊断工具Arthas最佳实践/Arthas动态更新应用LoggerLevel案例/arthas.png","hash":"12ce7982e26f9dbcf066c045a47b687e8173228a","modified":1628314623592},{"_id":"public/2021/08/07/Java诊断工具Arthas最佳实践/Arthas执行结果存日志案例/O1CN01HzatXZ1RgccrlT90M_!!6000000002141-2-tps-529-244.png","hash":"fd9ef52dd52e1534d67e889078dfc36f57cd0c20","modified":1628314623592},{"_id":"public/2021/08/07/Java诊断工具Arthas最佳实践/Arthas后台异步任务案例/arthas.png","hash":"12ce7982e26f9dbcf066c045a47b687e8173228a","modified":1628314623592},{"_id":"public/2021/08/07/Java诊断工具Arthas最佳实践/Arthas执行结果存日志案例/arthas.png","hash":"12ce7982e26f9dbcf066c045a47b687e8173228a","modified":1628314623592},{"_id":"public/2021/08/07/Java诊断工具Arthas最佳实践/Arthas排查HTTP请求返回401案例/O1CN010Qbzcz1ctPSWSZI6L_!!6000000003658-2-tps-333-182.png","hash":"4f0de13d6df2f59b0ee15dfb2a1bb2b41a24d034","modified":1628314623592},{"_id":"public/2021/08/07/Java诊断工具Arthas最佳实践/Arthas排查HTTP请求返回401案例/O1CN01HzatXZ1RgccrlT90M_!!6000000002141-2-tps-529-244.png","hash":"fd9ef52dd52e1534d67e889078dfc36f57cd0c20","modified":1628314623592},{"_id":"public/2021/08/07/Java诊断工具Arthas最佳实践/Arthas排查logger冲突问题案例/O1CN010Qbzcz1ctPSWSZI6L_!!6000000003658-2-tps-333-182.png","hash":"4f0de13d6df2f59b0ee15dfb2a1bb2b41a24d034","modified":1628314623592},{"_id":"public/2021/08/07/Java诊断工具Arthas最佳实践/Arthas排查logger冲突问题案例/O1CN01HzatXZ1RgccrlT90M_!!6000000002141-2-tps-529-244.png","hash":"fd9ef52dd52e1534d67e889078dfc36f57cd0c20","modified":1628314623592},{"_id":"public/2021/08/07/Java诊断工具Arthas最佳实践/Arthas排查HTTP请求返回401案例/arthas.png","hash":"12ce7982e26f9dbcf066c045a47b687e8173228a","modified":1628314623592},{"_id":"public/2021/08/07/Java诊断工具Arthas最佳实践/Arthas排查HTTP请求返回404案例/O1CN010Qbzcz1ctPSWSZI6L_!!6000000003658-2-tps-333-182.png","hash":"4f0de13d6df2f59b0ee15dfb2a1bb2b41a24d034","modified":1628314623592},{"_id":"public/2021/08/07/Java诊断工具Arthas最佳实践/Arthas排查HTTP请求返回404案例/O1CN01HzatXZ1RgccrlT90M_!!6000000002141-2-tps-529-244.png","hash":"fd9ef52dd52e1534d67e889078dfc36f57cd0c20","modified":1628314623592},{"_id":"public/2021/08/07/Java诊断工具Arthas最佳实践/Arthas排查函数调用异常案例/O1CN010Qbzcz1ctPSWSZI6L_!!6000000003658-2-tps-333-182.png","hash":"4f0de13d6df2f59b0ee15dfb2a1bb2b41a24d034","modified":1628314623592},{"_id":"public/2021/08/07/Java诊断工具Arthas最佳实践/Arthas排查函数调用异常案例/O1CN01HzatXZ1RgccrlT90M_!!6000000002141-2-tps-529-244.png","hash":"fd9ef52dd52e1534d67e889078dfc36f57cd0c20","modified":1628314623592},{"_id":"public/2021/08/07/Java诊断工具Arthas最佳实践/Arthas排查logger冲突问题案例/arthas.png","hash":"12ce7982e26f9dbcf066c045a47b687e8173228a","modified":1628314623592},{"_id":"public/2021/08/07/Java诊断工具Arthas最佳实践/Arthas排查HTTP请求返回404案例/arthas.png","hash":"12ce7982e26f9dbcf066c045a47b687e8173228a","modified":1628314623592},{"_id":"public/2021/08/07/Java诊断工具Arthas最佳实践/Arthas查找TopN线程案例/O1CN01HzatXZ1RgccrlT90M_!!6000000002141-2-tps-529-244.png","hash":"fd9ef52dd52e1534d67e889078dfc36f57cd0c20","modified":1628314623592},{"_id":"public/2021/08/07/Java诊断工具Arthas最佳实践/Arthas排查函数调用异常案例/arthas.png","hash":"12ce7982e26f9dbcf066c045a47b687e8173228a","modified":1628314623592},{"_id":"public/2021/08/07/Java诊断工具Arthas最佳实践/Arthas热更新代码案例/O1CN010Qbzcz1ctPSWSZI6L_!!6000000003658-2-tps-333-182.png","hash":"4f0de13d6df2f59b0ee15dfb2a1bb2b41a24d034","modified":1628314623592},{"_id":"public/2021/08/07/Java诊断工具Arthas最佳实践/Arthas热更新代码案例/O1CN01HzatXZ1RgccrlT90M_!!6000000002141-2-tps-529-244.png","hash":"fd9ef52dd52e1534d67e889078dfc36f57cd0c20","modified":1628314623592},{"_id":"public/2021/08/07/Java诊断工具Arthas最佳实践/Arthas获取Spring上下文案例/O1CN01HzatXZ1RgccrlT90M_!!6000000002141-2-tps-529-244.png","hash":"fd9ef52dd52e1534d67e889078dfc36f57cd0c20","modified":1628314623592},{"_id":"public/2021/08/07/Java诊断工具Arthas最佳实践/Arthas获取Spring上下文案例/O1CN010Qbzcz1ctPSWSZI6L_!!6000000003658-2-tps-333-182.png","hash":"4f0de13d6df2f59b0ee15dfb2a1bb2b41a24d034","modified":1628314623592},{"_id":"public/2021/08/07/Java诊断工具Arthas最佳实践/Arthas查找TopN线程案例/arthas.png","hash":"12ce7982e26f9dbcf066c045a47b687e8173228a","modified":1628314623592},{"_id":"public/2021/08/07/Java诊断工具Arthas最佳实践/Arthas热更新代码案例/arthas.png","hash":"12ce7982e26f9dbcf066c045a47b687e8173228a","modified":1628314623592},{"_id":"public/2021/08/07/Java诊断工具Arthas最佳实践/学习Arthasclassloader案例/O1CN01HzatXZ1RgccrlT90M_!!6000000002141-2-tps-529-244.png","hash":"fd9ef52dd52e1534d67e889078dfc36f57cd0c20","modified":1628314623592},{"_id":"public/2021/08/07/Java诊断工具Arthas最佳实践/学习Arthasarthas-boot支持的参数案例/arthas.png","hash":"12ce7982e26f9dbcf066c045a47b687e8173228a","modified":1628314623592},{"_id":"public/2021/08/07/Java诊断工具Arthas最佳实践/Arthas获取Spring上下文案例/arthas.png","hash":"12ce7982e26f9dbcf066c045a47b687e8173228a","modified":1628314623592},{"_id":"public/2021/08/07/Java诊断工具Arthas高级命令教程/Arthasdashboard命令/O1CN01HzatXZ1RgccrlT90M_!!6000000002141-2-tps-529-244.png","hash":"fd9ef52dd52e1534d67e889078dfc36f57cd0c20","modified":1628314623592},{"_id":"public/2021/08/07/Java诊断工具Arthas高级命令教程/Arthasclassloader命令/arthas.png","hash":"12ce7982e26f9dbcf066c045a47b687e8173228a","modified":1628314623592},{"_id":"public/2021/08/07/Java诊断工具Arthas高级命令教程/Arthasdashboard命令/arthas.png","hash":"12ce7982e26f9dbcf066c045a47b687e8173228a","modified":1628314623592},{"_id":"public/2021/08/07/Java诊断工具Arthas最佳实践/学习Arthasclassloader案例/arthas.png","hash":"12ce7982e26f9dbcf066c045a47b687e8173228a","modified":1628314623592},{"_id":"public/2021/08/07/Java诊断工具Arthas高级命令教程/Arthasclassloader命令/O1CN01HzatXZ1RgccrlT90M_!!6000000002141-2-tps-529-244.png","hash":"fd9ef52dd52e1534d67e889078dfc36f57cd0c20","modified":1628314623592},{"_id":"public/2021/08/07/Java诊断工具Arthas高级命令教程/Arthasgetstatic命令/O1CN01HzatXZ1RgccrlT90M_!!6000000002141-2-tps-529-244.png","hash":"fd9ef52dd52e1534d67e889078dfc36f57cd0c20","modified":1628314623592},{"_id":"public/2021/08/07/Java诊断工具Arthas高级命令教程/Arthasdump命令/O1CN01HzatXZ1RgccrlT90M_!!6000000002141-2-tps-529-244.png","hash":"fd9ef52dd52e1534d67e889078dfc36f57cd0c20","modified":1628314623592},{"_id":"public/2021/08/07/Java诊断工具Arthas高级命令教程/Arthasgetstatic命令/arthas.png","hash":"12ce7982e26f9dbcf066c045a47b687e8173228a","modified":1628314623592},{"_id":"public/2021/08/07/Java诊断工具Arthas高级命令教程/Arthasjad命令/O1CN01HzatXZ1RgccrlT90M_!!6000000002141-2-tps-529-244.png","hash":"fd9ef52dd52e1534d67e889078dfc36f57cd0c20","modified":1628314623592},{"_id":"public/2021/08/07/Java诊断工具Arthas最佳实践/学习Arthasclassloader案例/O1CN010Qbzcz1ctPSWSZI6L_!!6000000003658-2-tps-333-182.png","hash":"4f0de13d6df2f59b0ee15dfb2a1bb2b41a24d034","modified":1628314623592},{"_id":"public/2021/08/07/Java诊断工具Arthas高级命令教程/Arthasdump命令/arthas.png","hash":"12ce7982e26f9dbcf066c045a47b687e8173228a","modified":1628314623592},{"_id":"public/2021/08/07/Java诊断工具Arthas高级命令教程/Arthasjvm命令/O1CN01HzatXZ1RgccrlT90M_!!6000000002141-2-tps-529-244.png","hash":"fd9ef52dd52e1534d67e889078dfc36f57cd0c20","modified":1628314623592},{"_id":"public/2021/08/07/Java诊断工具Arthas高级命令教程/Arthasjad命令/arthas.png","hash":"12ce7982e26f9dbcf066c045a47b687e8173228a","modified":1628314623592},{"_id":"public/2021/08/07/Java诊断工具Arthas高级命令教程/Arthasjvm命令/arthas.png","hash":"12ce7982e26f9dbcf066c045a47b687e8173228a","modified":1628314623592},{"_id":"public/2021/08/07/Java诊断工具Arthas高级命令教程/Arthasmbean命令/O1CN01HzatXZ1RgccrlT90M_!!6000000002141-2-tps-529-244.png","hash":"fd9ef52dd52e1534d67e889078dfc36f57cd0c20","modified":1628314623592},{"_id":"public/2021/08/07/Java诊断工具Arthas高级命令教程/Arthaslogger命令/O1CN01HzatXZ1RgccrlT90M_!!6000000002141-2-tps-529-244.png","hash":"fd9ef52dd52e1534d67e889078dfc36f57cd0c20","modified":1628314623592},{"_id":"public/2021/08/07/Java诊断工具Arthas高级命令教程/Arthaslogger命令/arthas.png","hash":"12ce7982e26f9dbcf066c045a47b687e8173228a","modified":1628314623592},{"_id":"public/2021/08/07/Java诊断工具Arthas高级命令教程/Arthasmbean命令/arthas.png","hash":"12ce7982e26f9dbcf066c045a47b687e8173228a","modified":1628314623592},{"_id":"public/2021/08/07/Java诊断工具Arthas高级命令教程/Arthasheapdump命令/O1CN01HzatXZ1RgccrlT90M_!!6000000002141-2-tps-529-244.png","hash":"fd9ef52dd52e1534d67e889078dfc36f57cd0c20","modified":1628314623592},{"_id":"public/2021/08/07/Java诊断工具Arthas高级命令教程/Arthasheapdump命令/arthas.png","hash":"12ce7982e26f9dbcf066c045a47b687e8173228a","modified":1628314623592},{"_id":"public/2021/08/07/Java诊断工具Arthas高级命令教程/Arthasmc-redefine命令/O1CN010Qbzcz1ctPSWSZI6L_!!6000000003658-2-tps-333-182.png","hash":"4f0de13d6df2f59b0ee15dfb2a1bb2b41a24d034","modified":1628314623592},{"_id":"public/2021/08/07/Java诊断工具Arthas高级命令教程/Arthasmc-redefine命令/O1CN01HzatXZ1RgccrlT90M_!!6000000002141-2-tps-529-244.png","hash":"fd9ef52dd52e1534d67e889078dfc36f57cd0c20","modified":1628314623592},{"_id":"public/2021/08/07/Java诊断工具Arthas高级命令教程/Arthasmc-redefine命令/arthas.png","hash":"12ce7982e26f9dbcf066c045a47b687e8173228a","modified":1628314623592},{"_id":"public/2021/08/07/Java诊断工具Arthas高级命令教程/Arthasmc-retransform命令/O1CN010Qbzcz1ctPSWSZI6L_!!6000000003658-2-tps-333-182.png","hash":"4f0de13d6df2f59b0ee15dfb2a1bb2b41a24d034","modified":1628314623592},{"_id":"public/2021/08/07/Java诊断工具Arthas高级命令教程/Arthasmc-retransform命令/O1CN01HzatXZ1RgccrlT90M_!!6000000002141-2-tps-529-244.png","hash":"fd9ef52dd52e1534d67e889078dfc36f57cd0c20","modified":1628314623592},{"_id":"public/2021/08/07/Java诊断工具Arthas高级命令教程/Arthasmc-retransform命令/arthas.png","hash":"12ce7982e26f9dbcf066c045a47b687e8173228a","modified":1628314623592},{"_id":"public/2021/08/07/Java诊断工具Arthas高级命令教程/Arthasmonitor命令/arthas.png","hash":"12ce7982e26f9dbcf066c045a47b687e8173228a","modified":1628314623592},{"_id":"public/2021/08/07/Java诊断工具Arthas高级命令教程/Arthasmonitor命令/O1CN01HzatXZ1RgccrlT90M_!!6000000002141-2-tps-529-244.png","hash":"fd9ef52dd52e1534d67e889078dfc36f57cd0c20","modified":1628314623592},{"_id":"public/2021/08/07/Java诊断工具Arthas高级命令教程/Arthasognl命令/O1CN010Qbzcz1ctPSWSZI6L_!!6000000003658-2-tps-333-182.png","hash":"4f0de13d6df2f59b0ee15dfb2a1bb2b41a24d034","modified":1628314623592},{"_id":"public/2021/08/07/Java诊断工具Arthas高级命令教程/Arthasognl命令/O1CN01HzatXZ1RgccrlT90M_!!6000000002141-2-tps-529-244.png","hash":"fd9ef52dd52e1534d67e889078dfc36f57cd0c20","modified":1628314623592},{"_id":"public/2021/08/07/Java诊断工具Arthas高级命令教程/Arthasognl命令/arthas.png","hash":"12ce7982e26f9dbcf066c045a47b687e8173228a","modified":1628314623592},{"_id":"public/2021/08/07/Java诊断工具Arthas高级命令教程/Arthasperfcounter命令/O1CN01HzatXZ1RgccrlT90M_!!6000000002141-2-tps-529-244.png","hash":"fd9ef52dd52e1534d67e889078dfc36f57cd0c20","modified":1628314623592},{"_id":"public/2021/08/07/Java诊断工具Arthas高级命令教程/Arthasperfcounter命令/arthas.png","hash":"12ce7982e26f9dbcf066c045a47b687e8173228a","modified":1628314623592},{"_id":"public/2021/08/07/Java诊断工具Arthas高级命令教程/Arthasprofiler命令/O1CN01HzatXZ1RgccrlT90M_!!6000000002141-2-tps-529-244.png","hash":"fd9ef52dd52e1534d67e889078dfc36f57cd0c20","modified":1628314623592},{"_id":"public/2021/08/07/Java诊断工具Arthas高级命令教程/Arthasprofiler命令/arthas.png","hash":"12ce7982e26f9dbcf066c045a47b687e8173228a","modified":1628314623592},{"_id":"public/2021/08/07/Java诊断工具Arthas高级命令教程/Arthassc命令/O1CN01HzatXZ1RgccrlT90M_!!6000000002141-2-tps-529-244.png","hash":"fd9ef52dd52e1534d67e889078dfc36f57cd0c20","modified":1628314623592},{"_id":"public/2021/08/07/Java诊断工具Arthas高级命令教程/Arthassc命令/arthas.png","hash":"12ce7982e26f9dbcf066c045a47b687e8173228a","modified":1628314623592},{"_id":"public/2021/08/07/Java诊断工具Arthas高级命令教程/Arthassm命令/O1CN01HzatXZ1RgccrlT90M_!!6000000002141-2-tps-529-244.png","hash":"fd9ef52dd52e1534d67e889078dfc36f57cd0c20","modified":1628314623592},{"_id":"public/2021/08/07/Java诊断工具Arthas高级命令教程/Arthassm命令/arthas.png","hash":"12ce7982e26f9dbcf066c045a47b687e8173228a","modified":1628314623592},{"_id":"public/2021/08/07/Java诊断工具Arthas高级命令教程/Arthasstack命令/O1CN01HzatXZ1RgccrlT90M_!!6000000002141-2-tps-529-244.png","hash":"fd9ef52dd52e1534d67e889078dfc36f57cd0c20","modified":1628314623592},{"_id":"public/2021/08/07/Java诊断工具Arthas高级命令教程/Arthasstack命令/arthas.png","hash":"12ce7982e26f9dbcf066c045a47b687e8173228a","modified":1628314623592},{"_id":"public/2021/08/07/Java诊断工具Arthas高级命令教程/Arthassysenv命令/O1CN01HzatXZ1RgccrlT90M_!!6000000002141-2-tps-529-244.png","hash":"fd9ef52dd52e1534d67e889078dfc36f57cd0c20","modified":1628314623592},{"_id":"public/2021/08/07/Java诊断工具Arthas高级命令教程/Arthassysenv命令/arthas.png","hash":"12ce7982e26f9dbcf066c045a47b687e8173228a","modified":1628314623592},{"_id":"public/2021/08/07/Java诊断工具Arthas高级命令教程/Arthassysprop命令/O1CN01HzatXZ1RgccrlT90M_!!6000000002141-2-tps-529-244.png","hash":"fd9ef52dd52e1534d67e889078dfc36f57cd0c20","modified":1628314623592},{"_id":"public/2021/08/07/Java诊断工具Arthas高级命令教程/Arthassysprop命令/arthas.png","hash":"12ce7982e26f9dbcf066c045a47b687e8173228a","modified":1628314623592},{"_id":"public/2021/08/07/Java诊断工具Arthas高级命令教程/Arthasthread命令/O1CN01HzatXZ1RgccrlT90M_!!6000000002141-2-tps-529-244.png","hash":"fd9ef52dd52e1534d67e889078dfc36f57cd0c20","modified":1628314623592},{"_id":"public/2021/08/07/Java诊断工具Arthas高级命令教程/Arthasthread命令/arthas.png","hash":"12ce7982e26f9dbcf066c045a47b687e8173228a","modified":1628314623592},{"_id":"public/2021/08/07/Java诊断工具Arthas高级命令教程/Arthastrace命令/O1CN01HzatXZ1RgccrlT90M_!!6000000002141-2-tps-529-244.png","hash":"fd9ef52dd52e1534d67e889078dfc36f57cd0c20","modified":1628314623592},{"_id":"public/2021/08/07/Java诊断工具Arthas高级命令教程/Arthasvmoption命令/O1CN01HzatXZ1RgccrlT90M_!!6000000002141-2-tps-529-244.png","hash":"fd9ef52dd52e1534d67e889078dfc36f57cd0c20","modified":1628314623592},{"_id":"public/2021/08/07/Java诊断工具Arthas高级命令教程/Arthastrace命令/arthas.png","hash":"12ce7982e26f9dbcf066c045a47b687e8173228a","modified":1628314623592},{"_id":"public/2021/08/07/Java诊断工具Arthas高级命令教程/Arthasvmoption命令/arthas.png","hash":"12ce7982e26f9dbcf066c045a47b687e8173228a","modified":1628314623592},{"_id":"public/2021/08/07/Java诊断工具Arthas高级命令教程/Arthastt命令/O1CN01HzatXZ1RgccrlT90M_!!6000000002141-2-tps-529-244.png","hash":"fd9ef52dd52e1534d67e889078dfc36f57cd0c20","modified":1628314623592},{"_id":"public/2021/08/07/Java诊断工具Arthas高级命令教程/Arthastt命令/arthas.png","hash":"12ce7982e26f9dbcf066c045a47b687e8173228a","modified":1628314623592},{"_id":"public/2021/08/07/Java诊断工具Arthas高级命令教程/Arthaswatch命令/O1CN01HzatXZ1RgccrlT90M_!!6000000002141-2-tps-529-244.png","hash":"fd9ef52dd52e1534d67e889078dfc36f57cd0c20","modified":1628314623592},{"_id":"public/2021/08/07/Java诊断工具Arthas高级命令教程/Arthaswatch命令/arthas.png","hash":"12ce7982e26f9dbcf066c045a47b687e8173228a","modified":1628314623592},{"_id":"public/2021/08/07/Java诊断工具Arthas入门教程/Arthas-进阶/O1CN01HzatXZ1RgccrlT90M_!!6000000002141-2-tps-529-244.png","hash":"fd9ef52dd52e1534d67e889078dfc36f57cd0c20","modified":1628314623592},{"_id":"public/2021/08/07/Java诊断工具Arthas入门教程/Arthas-进阶/O1CN01i041kW1lw0FCaSKNn_!!6000000004882-2-tps-1231-284.png","hash":"2e97b2fb3d4b1566a4e14eb536add67a049bb063","modified":1628314623592},{"_id":"public/2021/08/07/Java诊断工具Arthas入门教程/Arthas-进阶/arthas.png","hash":"12ce7982e26f9dbcf066c045a47b687e8173228a","modified":1628314623592},{"_id":"public/img/weixin.png","hash":"9aead0fbb3a9ed9808c6965957d1ee27f42e26cc","modified":1628314623592},{"_id":"public/lib/gitment.js.bak","hash":"ded86ac10cc79a7d28e2ea44778e792cef6c3470","modified":1628314623592},{"_id":"public/plugins/live2d-widget.js/L2Dwidget.min.js.map","hash":"75322ae0754f0580c0fb5ce9176ab72ce4009903","modified":1628314623592},{"_id":"public/live2d_models/epsilon2_1/assets/moc/Epsilon2.1.moc","hash":"2148649bde741b6e1557c0ea3c076e5ce5a23632","modified":1628314623592},{"_id":"public/live2d_models/shizuku/assets/snd/pinchOut_01.mp3","hash":"8a081030fd53c07bffe3edd48f87a371ca77296b","modified":1628314623592},{"_id":"public/live2d_models/shizuku/assets/snd/pinchIn_02.mp3","hash":"5b63e02607571ac601c500995e836e6c861b1c62","modified":1628314623592},{"_id":"public/live2d_models/shizuku/assets/snd/pinchOut_02.mp3","hash":"554edb2f3838cbdc27d1a9c6b8a9cb6eb465cbdd","modified":1628314623592},{"_id":"public/live2d_models/shizuku/assets/snd/pinchOut_00.mp3","hash":"0654f38f6e9fd623eaf8be11b5d58c9d12991949","modified":1628314623592},{"_id":"public/live2d_models/tsumiki/assets/mtn/tsumiki_m_11.mtn","hash":"63b0adf0414ebad9a3bec91417629d983c546975","modified":1628314623592},{"_id":"public/live2d_models/tsumiki/assets/mtn/tsumiki_m_12.mtn","hash":"b68b20df9b695e0d7ac93a5865097b27c3123f21","modified":1628314623592},{"_id":"public/live2d_models/wanko/assets/moc/wanko.moc","hash":"7b188cd4dcddfe5bdba8ec51a65cb1c21cd2e57a","modified":1628314623592},{"_id":"public/live2d_models/z16/assets/moc/z16.moc","hash":"6b0241e80e94664d694b43ad05333960de2550c1","modified":1628314623592},{"_id":"public/live2d_models/gf/assets/moc/Gantzert_Felixander.2048/texture_04.png","hash":"2c63a9622a875fea1abcdb9ef437b64556090d22","modified":1628314623592},{"_id":"public/live2d_models/ni-j/assets/moc/ni-j.2048/texture_00.png","hash":"413695bc00193e587b85c944df11d721192dd9a0","modified":1628314623592},{"_id":"public/live2d_models/nipsilon/assets/moc/nipsilon.2048/texture_01.png","hash":"413695bc00193e587b85c944df11d721192dd9a0","modified":1628314623592},{"_id":"public/live2d_models/nico/assets/moc/nico.2048/texture_02.png","hash":"8e4a632c61506e3cc07d8ba704aa4ec2567fe11b","modified":1628314623592},{"_id":"public/live2d_models/nico/assets/moc/nico.2048/texture_00.png","hash":"413695bc00193e587b85c944df11d721192dd9a0","modified":1628314623592},{"_id":"public/live2d_models/nietzsche/assets/moc/nietzsche.2048/texture_00.png","hash":"413695bc00193e587b85c944df11d721192dd9a0","modified":1628314623592},{"_id":"public/live2d_models/nietzsche/assets/moc/nietzsche.2048/texture_01.png","hash":"fc5a8b833e1b089808e893158a71b8597161fda0","modified":1628314623592},{"_id":"public/live2d_models/nito/assets/moc/nito.2048/texture_01.png","hash":"413695bc00193e587b85c944df11d721192dd9a0","modified":1628314623592},{"_id":"public/live2d_models/shizuku/assets/moc/shizuku.1024/texture_00.png","hash":"21bdb28b31783e23b26b3aa061e90be4088665aa","modified":1628314623592},{"_id":"public/live2d_models/shizuku/assets/moc/shizuku.1024/texture_03.png","hash":"07f568a2bb8045b6bdff7783fb4daf62c821f9ab","modified":1628314623592},{"_id":"public/live2d_models/shizuku/assets/moc/shizuku.1024/texture_05.png","hash":"0cd00007fb8bff62a2eb08e1d7c43abab8722224","modified":1628314623592},{"_id":"public/live2d_models/wanko/assets/moc/wanko.1024/texture_00.png","hash":"c405c1eeb82bcced7aa7a20f04a76168f60ad561","modified":1628314623592},{"_id":"public/live2d_models/haru/02/assets/moc/haru02.1024/texture_01.png","hash":"dd05d6b7f8f0d0c167b040f41ffd7c10a3747d96","modified":1628314623592},{"_id":"public/live2d_models/haru/01/assets/moc/haru01.1024/texture_01.png","hash":"dd05d6b7f8f0d0c167b040f41ffd7c10a3747d96","modified":1628314623592},{"_id":"public/live2d_models/haru/01/assets/moc/haru01.1024/texture_02.png","hash":"6a1e0b336da79557325da9f58a69a380d67ecbb1","modified":1628314623592},{"_id":"public/2021/07/28/Lockbox/Lockbox-02-2.png","hash":"befb3b9a20389f97b0fd0f2bb28ed2adf49785be","modified":1628314623592},{"_id":"public/2021/07/28/Lockbox/Lockbox-02-3.png","hash":"110dfcf3149701e83c1448778362f6cf7f346b63","modified":1628314623592},{"_id":"public/2021/07/28/Lockbox/Lockbox-02.png","hash":"5246da58425402715166c509132b55753285fa3d","modified":1628314623592},{"_id":"public/2021/07/28/Lockbox/Lockbox-03.png","hash":"9d059e68149968f621a276246ce33f3f4229c0b8","modified":1628314623592},{"_id":"public/img/head.jpg","hash":"b7b6d82340efef53ef885791d4a06902bbf96ff2","modified":1628314623592},{"_id":"public/lib/gitment.js.bak2","hash":"abf60c1466261231717cb25faf854ecae9d76b43","modified":1628314623592},{"_id":"public/live2d_models/hibiki/assets/moc/hibiki.moc","hash":"deff9b550df1e2dc47a57f1099e46de6737a0ec6","modified":1628314623592},{"_id":"public/live2d_models/miku/assets/moc/miku.moc","hash":"a57e92e12f1fcb21d4d3a9ac34f01badbeff3671","modified":1628314623592},{"_id":"public/live2d_models/tororo/assets/moc/tororo.moc","hash":"44289e62545a7046e0f5231103a851750b78524e","modified":1628314623592},{"_id":"public/live2d_models/unitychan/assets/moc/unitychan.moc","hash":"94047b7bb9a99f43ab4dbe5b013a8fb9de854086","modified":1628314623592},{"_id":"public/live2d_models/gf/assets/moc/Gantzert_Felixander.2048/texture_03.png","hash":"80f11d03197912296cd27ce7f59f490336396309","modified":1628314623592},{"_id":"public/live2d_models/gf/assets/moc/Gantzert_Felixander.2048/texture_06.png","hash":"e04b38575cb49bf538d98d0bcc642be4eaf89f73","modified":1628314623592},{"_id":"public/live2d_models/ni-j/assets/moc/ni-j.2048/texture_01.png","hash":"f868cb3bffe97108ef677c43659a6ad7f6a906b2","modified":1628314623592},{"_id":"public/live2d_models/shizuku/assets/moc/shizuku.1024/texture_01.png","hash":"3d0e745f3e560071ee08beeecde186e5ea35d99e","modified":1628314623592},{"_id":"public/live2d_models/shizuku/assets/moc/shizuku.1024/texture_04.png","hash":"f764d594841905db8b2998dd61c329866125ad97","modified":1628314623592},{"_id":"public/live2d_models/unitychan/assets/moc/unitychan.2048/texture_00.png","hash":"2268ef1522ce750bb63f59a6bd1022c8c531e307","modified":1628314623592},{"_id":"public/live2d_models/z16/assets/moc/z16.1024/texture_00.png","hash":"c4f7c067d7d37601490554438ab801fce1feb92d","modified":1628314623592},{"_id":"public/live2d_models/haru/02/assets/moc/haru02.1024/texture_02.png","hash":"df02ff8355fca1389bbed5153dc1dadd8cd1c704","modified":1628314623592},{"_id":"public/2021/07/28/Lockbox/Lockbox-02-1.png","hash":"c076cc371cf7033dbfad8c8fab53a59fbcb61141","modified":1628314623592},{"_id":"public/2021/08/07/Java诊断工具Arthas高级命令教程/Arthasprofiler命令/arthas-output.png","hash":"1f82ddf6899ee767241b4f63e98cefcfe235bf74","modified":1628314623592},{"_id":"public/lib/busuanzi.pure.js","hash":"f54c44e2b30e551540b83640dd8c5ff266e157d5","modified":1628314623592},{"_id":"public/lib/default.css","hash":"c9c344d5c98cc90b5583865e71726bab1046cdeb","modified":1628314623592},{"_id":"public/lib/clickLove.js","hash":"9e8e79d69ad8338761272f86fe5cad0ad5e503cc","modified":1628314623592},{"_id":"public/lib/gitment.css","hash":"cb2e0be2c7ebbcc3e756340c811864115bf0ec56","modified":1628314623592},{"_id":"public/lib/pace.min.js","hash":"9944dfb7814b911090e96446cea4d36e2b487234","modified":1628314623592},{"_id":"public/lib/oauthcallback.browser.js","hash":"989b9e2638336461a9911ebf60e9a839819dd11f","modified":1628314623592},{"_id":"public/live2d_models/chitose/package.json","hash":"c5b1696877925757a369dde0b66ae857a184a1a3","modified":1628314623592},{"_id":"public/lib/snow.js","hash":"12ed5d697aa8a337064a1827ea94c0652c36b4e5","modified":1628314623592},{"_id":"public/live2d_models/epsilon2_1/package-lock.json","hash":"dcd7a1d062ac78cbc821b0aed14a5888f6ac6c66","modified":1628314623592},{"_id":"public/live2d_models/gf/package-lock.json","hash":"a69cde4811a9868b17ecc5c30cd109a8dac31517","modified":1628314623592},{"_id":"public/live2d_models/epsilon2_1/package.json","hash":"183bc1baa9ba97b40a74799a66a215665a8313c7","modified":1628314623592},{"_id":"public/live2d_models/gf/package.json","hash":"7db5654fd135fa7983df40d88969ad29a5ffb17d","modified":1628314623592},{"_id":"public/live2d_models/chitose/package-lock.json","hash":"81416d5dc6eb73844dc5d23620d2d8926cf2cc16","modified":1628314623592},{"_id":"public/live2d_models/haruto/package.json","hash":"c80910992505ea994a619b4a89423558e1b7892c","modified":1628314623592},{"_id":"public/live2d_models/haru/package-lock.json","hash":"a7ec24dfd1ac820792945d002f940ac148e38f1d","modified":1628314623592},{"_id":"public/live2d_models/haruto/package-lock.json","hash":"67e0274fdd53300f873656c9464cb1ee1f41cfe6","modified":1628314623592},{"_id":"public/live2d_models/haru/package.json","hash":"db61eea30ab8ec7d54954006f80d2699cb9725ec","modified":1628314623592},{"_id":"public/live2d_models/hibiki/package-lock.json","hash":"81a0982aba92efdbd98f9b5203319385aa3cad52","modified":1628314623592},{"_id":"public/live2d_models/hibiki/package.json","hash":"cf6af2a7188ed72fcbffbff207e000fa3f8a482f","modified":1628314623592},{"_id":"public/live2d_models/hijiki/package-lock.json","hash":"985ee74389f276692c88f3b039fcc632dc73819d","modified":1628314623592},{"_id":"public/live2d_models/hijiki/package.json","hash":"8f82d1cf92106d059f3a619910e5cc83bb6044d0","modified":1628314623592},{"_id":"public/live2d_models/izumi/package.json","hash":"2a15a868b8fbbf50a975ab23063585f0ece7f206","modified":1628314623592},{"_id":"public/live2d_models/koharu/package-lock.json","hash":"5ee7591c194c1f8c89dfe437863cd0a6b161f832","modified":1628314623592},{"_id":"public/live2d_models/izumi/package-lock.json","hash":"0e18be77e558654ef7eb84ac037226c6a2fc1e58","modified":1628314623592},{"_id":"public/live2d_models/koharu/package.json","hash":"4d7cb22cf4e1449b0babd18189a8dc1eb1ee9e0e","modified":1628314623592},{"_id":"public/live2d_models/miku/package.json","hash":"057f45aa125f0a95be51ba828d3e12a61058ee73","modified":1628314623592},{"_id":"public/live2d_models/ni-j/package-lock.json","hash":"2e6c14a3f4167e5de16492b0e8cbd6f9b5bc09e7","modified":1628314623592},{"_id":"public/live2d_models/miku/package-lock.json","hash":"ec31a7cc0e536e3c79d392a89674018ce2a3c488","modified":1628314623592},{"_id":"public/live2d_models/ni-j/package.json","hash":"b1ca7b43b45ee03b4dfbaeded741b6edf9e1523b","modified":1628314623592},{"_id":"public/live2d_models/nico/package-lock.json","hash":"6ebcc37f9661edd9b03d4922cc6bdfe66d90e765","modified":1628314623592},{"_id":"public/live2d_models/nico/package.json","hash":"e9cdb3b41566fb453b0e38e7763cfbc36a8c9241","modified":1628314623592},{"_id":"public/live2d_models/nipsilon/package-lock.json","hash":"afb471ff865ae1327beae650bfe0a602ad27a92a","modified":1628314623592},{"_id":"public/live2d_models/nipsilon/package.json","hash":"6b10ad8d148e29876559e9bf3dbfac3998f55c92","modified":1628314623592},{"_id":"public/live2d_models/nietzsche/package-lock.json","hash":"0ddcbcd20431260f3e25b3f1ee758357ef934cc5","modified":1628314623592},{"_id":"public/live2d_models/nietzsche/package.json","hash":"d89fe315b6a1b547c15eeef6ad5bbf38458f1bb6","modified":1628314623592},{"_id":"public/live2d_models/nito/package-lock.json","hash":"caf6080b25844aa44cb51dae30fb34691793eb07","modified":1628314623592},{"_id":"public/live2d_models/nito/package.json","hash":"09493580a6cd62f46859babec6c9f13dc617d4ea","modified":1628314623592},{"_id":"public/live2d_models/shizuku/package-lock.json","hash":"7a70380a9b50f5b7374fcf07af2fc8e59205e8d8","modified":1628314623592},{"_id":"public/live2d_models/shizuku/package.json","hash":"9ace1963033ab9a396ff7b8c90de4c8c48b51c0d","modified":1628314623592},{"_id":"public/live2d_models/tororo/package-lock.json","hash":"adca3b14a22758a9b5d6d392354a9916a4283505","modified":1628314623592},{"_id":"public/live2d_models/tororo/package.json","hash":"68f3ec7e366ec1c7c58112acb04a75ffc3feca58","modified":1628314623592},{"_id":"public/live2d_models/tsumiki/package-lock.json","hash":"d96d7121a59557be2bad97237e784fbdb01d7096","modified":1628314623592},{"_id":"public/live2d_models/tsumiki/package.json","hash":"baed56b3f5f732adb02aca10859687dcaf0faffc","modified":1628314623592},{"_id":"public/live2d_models/unitychan/package-lock.json","hash":"edb139e5fe6b99dbe2061533da424fef16c2a89d","modified":1628314623592},{"_id":"public/live2d_models/unitychan/package.json","hash":"fbd004c83803cc378e30a4dd4b942950add8dc5a","modified":1628314623592},{"_id":"public/live2d_models/wanko/package-lock.json","hash":"121d859582cd7a7cadec5ad7391d74461b179128","modified":1628314623592},{"_id":"public/live2d_models/wanko/package.json","hash":"2bca16153b313e3582df1438cf4bad8a9c8ffd16","modified":1628314623592},{"_id":"public/live2d_models/z16/package.json","hash":"25eb264b356de9f58c7b068b601b292ed3950864","modified":1628314623592},{"_id":"public/live2d_models/z16/package-lock.json","hash":"f3d9457756272106295c1b7b15b0cd65590aaf43","modified":1628314623592},{"_id":"public/plugins/TweenMax/HoverImg.js","hash":"ecc51aed76c22ca181870d4ba47765c0598e3a1b","modified":1628314623592},{"_id":"public/plugins/activate-power-mode/activate-power-mode.js","hash":"8161c7d2b8fd7fa407db3c3429edd8d19f82ae81","modified":1628314623592},{"_id":"public/plugins/TweenMax/charming.min.js","hash":"0b11f943ec562c9031be07203058650eee74d73d","modified":1628314623592},{"_id":"public/plugins/ribbon.js/ribbon.min.js","hash":"3c8e4d717ca107f3723def1795c8ed62a5f1a8d0","modified":1628314623592},{"_id":"public/plugins/ribbon.js/ribbon.js","hash":"65b1a8f12d04b15d7ed6eeb9d11dec760a799c5f","modified":1628314623592},{"_id":"public/plugins/live2d-widget.js/manifest.json","hash":"d3c86ddfd62f3560e306910369745116005f3892","modified":1628314623592},{"_id":"public/live2d_models/chitose/assets/chitose.model.json","hash":"a9b9986e72b8245f036f6ada876b84a3986c4218","modified":1628314623592},{"_id":"public/live2d_models/chitose/assets/chitose.physics.json","hash":"5ff4acbc4cf23a7f2ff211f50e53df6f6b7c0995","modified":1628314623592},{"_id":"public/live2d_models/chitose/assets/chitose.pose.json","hash":"52f9b579ca15b4b2dc4c5fa71172472dd6924264","modified":1628314623592},{"_id":"public/live2d_models/epsilon2_1/assets/Epsilon2.1.model.json","hash":"a47e7d1fd76d5a90d383fa049295c1cdd1546845","modified":1628314623592},{"_id":"public/live2d_models/gf/assets/Gantzert_Felixander.model.json","hash":"d5caeb1c758088ff03bc190cd8dcee98e6e02392","modified":1628314623592},{"_id":"public/live2d_models/epsilon2_1/assets/Epsilon2.1.physics.json","hash":"bbf1a8cb496831fbf9715d8431b82fffc9f89257","modified":1628314623592},{"_id":"public/live2d_models/haruto/assets/haruto.model.json","hash":"76f915f7edbd9c47df0ca041dddb151c0c93a2bf","modified":1628314623592},{"_id":"public/live2d_models/haruto/assets/haruto.physics.json","hash":"2fbf886979212357ba293bd35884f2cb5b26b6a6","modified":1628314623592},{"_id":"public/live2d_models/hibiki/assets/hibiki.physics.json","hash":"ba100c7a8c3fc777d05f41e3371d18c457febfa7","modified":1628314623592},{"_id":"public/live2d_models/hijiki/assets/hijiki.model.json","hash":"feff43bf7498d213982c3736c2c029664e4bcbd2","modified":1628314623592},{"_id":"public/live2d_models/hibiki/assets/hibiki.model.json","hash":"73bbc0004fc21039452f80dc6dc3c287723aedc4","modified":1628314623592},{"_id":"public/live2d_models/hijiki/assets/hijiki.pose.json","hash":"81438bf69b32c7c11e311b4fe043730cdc7b7ec2","modified":1628314623592},{"_id":"public/live2d_models/izumi/assets/izumi.model.json","hash":"3ba8caa98a3af7b09d7a79419a691f543a1e3ea4","modified":1628314623592},{"_id":"public/live2d_models/izumi/assets/izumi.physics.json","hash":"cee4a6e1c8ec3e1c2bfc8028ff49dc9c34c06258","modified":1628314623592},{"_id":"public/live2d_models/koharu/assets/koharu.model.json","hash":"ceccdefd776b7c9475a29cff0842796e4f58b7e9","modified":1628314623592},{"_id":"public/live2d_models/koharu/assets/koharu.physics.json","hash":"2fbf886979212357ba293bd35884f2cb5b26b6a6","modified":1628314623592},{"_id":"public/live2d_models/miku/assets/miku.model.json","hash":"32e49dfc6cb4d9c537453bb083aab39ed708c476","modified":1628314623592},{"_id":"public/live2d_models/ni-j/assets/ni-j.model.json","hash":"3c77e66d6436136bf50d5fdbc8ee8cd543a35e01","modified":1628314623592},{"_id":"public/live2d_models/miku/assets/miku.physics.json","hash":"d5ca7f215044ba5bf1cdb8045a5c99b64ec258ce","modified":1628314623592},{"_id":"public/live2d_models/ni-j/assets/ni-j.pose.json","hash":"a8c949d20eebf1e716a495bf806b2eccff62a925","modified":1628314623592},{"_id":"public/live2d_models/ni-j/assets/ni-j.physics.json","hash":"ef2dd194f934f129f5f4db7785a9c7b7e45671ff","modified":1628314623592},{"_id":"public/live2d_models/nico/assets/nico.model.json","hash":"9f007936f4748e80a1da60ca078daed595acffee","modified":1628314623592},{"_id":"public/live2d_models/nico/assets/nico.pose.json","hash":"a8c949d20eebf1e716a495bf806b2eccff62a925","modified":1628314623592},{"_id":"public/live2d_models/nipsilon/assets/nipsilon.model.json","hash":"271e40dfe9c04c8b5f5e4c6a9aa4f7ee6c65cff9","modified":1628314623592},{"_id":"public/live2d_models/nipsilon/assets/nipsilon.physics.json","hash":"5e83e055f99be8c8752fdcad30f9ed043111b83b","modified":1628314623592},{"_id":"public/live2d_models/nietzsche/assets/nietzche.model.json","hash":"4f8fb457ddf9b0aa930cbcd4a3258ccdbf9e7506","modified":1628314623592},{"_id":"public/live2d_models/nipsilon/assets/nipsilon.pose.json","hash":"a8c949d20eebf1e716a495bf806b2eccff62a925","modified":1628314623592},{"_id":"public/live2d_models/nico/assets/nico.physics.json","hash":"1db72a0413771e14d74de955af728224318e91d1","modified":1628314623592},{"_id":"public/live2d_models/nietzsche/assets/nietzsche.physics.json","hash":"5e83e055f99be8c8752fdcad30f9ed043111b83b","modified":1628314623592},{"_id":"public/live2d_models/nietzsche/assets/nietzsche.pose.json","hash":"a8c949d20eebf1e716a495bf806b2eccff62a925","modified":1628314623592},{"_id":"public/live2d_models/nito/assets/nito.model.json","hash":"7d7930d1fc8114ae0e694624db457612dca64814","modified":1628314623592},{"_id":"public/live2d_models/nito/assets/nito.physics.json","hash":"27db548eec3c5f3c71330e675b3f602cd86f2242","modified":1628314623592},{"_id":"public/live2d_models/shizuku/assets/shizuku.model.json","hash":"19a05bd41b806a935cea42c2000626fc82da2536","modified":1628314623592},{"_id":"public/live2d_models/nito/assets/nito.pose.json","hash":"a8c949d20eebf1e716a495bf806b2eccff62a925","modified":1628314623592},{"_id":"public/live2d_models/shizuku/assets/shizuku.physics.json","hash":"6484d646e79a44c83784c6ae434cf7349746c5c8","modified":1628314623592},{"_id":"public/live2d_models/shizuku/assets/shizuku.pose.json","hash":"ac5505efbf80ba0a2e5783d67fe232bc5c6f1f80","modified":1628314623592},{"_id":"public/live2d_models/tororo/assets/tororo.model.json","hash":"3b96ea33460642d288c98327444966d93a0c11ba","modified":1628314623592},{"_id":"public/live2d_models/tororo/assets/tororo.pose.json","hash":"81438bf69b32c7c11e311b4fe043730cdc7b7ec2","modified":1628314623592},{"_id":"public/live2d_models/tsumiki/assets/tsumiki.model.json","hash":"3d5d18ccaf9dc5d4bb42e1c6c3a3d8d89b55524b","modified":1628314623592},{"_id":"public/live2d_models/tsumiki/assets/tsumiki.physics.json","hash":"737f5ef200fd8d33b75bf19176dcff311591bd8f","modified":1628314623592},{"_id":"public/live2d_models/unitychan/assets/unitychan.model.json","hash":"6baa976186d98050740e02eadc796036a16f6fa2","modified":1628314623592},{"_id":"public/live2d_models/wanko/assets/wanko.model.json","hash":"b98a8ce54fbcf1606a489f1bc5f26b1a18c82d79","modified":1628314623592},{"_id":"public/live2d_models/unitychan/assets/unitychan.physics.json","hash":"d32ffd9263044d17d46facb5d878ea3683b8023e","modified":1628314623592},{"_id":"public/live2d_models/z16/assets/z16.model.json","hash":"e69f3d2ecc9bf51b3972ad9df8f6aaa31956910c","modified":1628314623592},{"_id":"public/live2d_models/z16/assets/z16.physics.json","hash":"67f13f60030d7e4c7f824c001ab5254ce4b9bafd","modified":1628314623592},{"_id":"public/plugins/ribbon.js/demo/index.html","hash":"97ff0bb6307330d15d81075eba56bd85eb589905","modified":1628314623592},{"_id":"public/live2d_models/chitose/assets/exp/f01.exp.json","hash":"84073a497ddb6e56c6cfc244a0fb217ba473abf9","modified":1628314623592},{"_id":"public/live2d_models/chitose/assets/exp/f02.exp.json","hash":"5b3dfc33ba22945adb77efacb9c55efbfd4975f9","modified":1628314623592},{"_id":"public/live2d_models/chitose/assets/exp/f03.exp.json","hash":"a506220e6b908154eea59f4bcfd73e7a457616b6","modified":1628314623592},{"_id":"public/live2d_models/chitose/assets/exp/f04.exp.json","hash":"6fee0e4d489e8ca3b7252b9dfc7c25cbe6a6a1e7","modified":1628314623592},{"_id":"public/live2d_models/chitose/assets/exp/f05.exp.json","hash":"154b1b33701c61570e8adc5cab977ea3198ade6a","modified":1628314623592},{"_id":"public/live2d_models/chitose/assets/exp/f06.exp.json","hash":"f3db49d621e2008b9eb59fba98e10db5dbd19d3d","modified":1628314623592},{"_id":"public/live2d_models/chitose/assets/exp/f07.exp.json","hash":"1ad00a1e4843b5b31b0c43fa292193bb049f6779","modified":1628314623592},{"_id":"public/live2d_models/epsilon2_1/assets/exp/f01.exp.json","hash":"84073a497ddb6e56c6cfc244a0fb217ba473abf9","modified":1628314623592},{"_id":"public/live2d_models/epsilon2_1/assets/exp/f04.exp.json","hash":"05dccc2eab9b9d019af1a9cc6f748276376dd828","modified":1628314623592},{"_id":"public/live2d_models/epsilon2_1/assets/exp/f03.exp.json","hash":"02d1ac5b6d9019a1ee89b9d4d82894458deae35d","modified":1628314623592},{"_id":"public/live2d_models/epsilon2_1/assets/exp/f02.exp.json","hash":"fb553024b5a62d0a54ba32c40b5d12598dc434e7","modified":1628314623592},{"_id":"public/live2d_models/epsilon2_1/assets/exp/f05.exp.json","hash":"b53d5e42ca3105b19e5fe5fbf7fe4a6b4ced61f2","modified":1628314623592},{"_id":"public/live2d_models/epsilon2_1/assets/exp/f06.exp.json","hash":"0a7f5b3ac25b13d8688b1f529f3279a8342e3c75","modified":1628314623592},{"_id":"public/live2d_models/epsilon2_1/assets/exp/f07.exp.json","hash":"d501ae71f1e36ff7e7834422900c0e84b8de8f28","modified":1628314623592},{"_id":"public/live2d_models/epsilon2_1/assets/exp/f08.exp.json","hash":"1dbb31e341c9fcc59475bd2594d60648c0c3e51c","modified":1628314623592},{"_id":"public/live2d_models/haru/02/assets/haru02.model.json","hash":"ffed6d4654deeb772e389213f84701940ee0126f","modified":1628314623592},{"_id":"public/live2d_models/haru/02/assets/haru02.physics.json","hash":"490ab4735f5cddca766344468591c0eb90cda1f7","modified":1628314623592},{"_id":"public/live2d_models/haru/02/assets/haru02.pose.json","hash":"4fb902065bd3f309fa0029fe2505424851fd489f","modified":1628314623592},{"_id":"public/live2d_models/haru/01/assets/haru01.model.json","hash":"cab2aac3d697eafa420e8a02b1f52c1f19666ffd","modified":1628314623592},{"_id":"public/live2d_models/haru/01/assets/haru01.physics.json","hash":"490ab4735f5cddca766344468591c0eb90cda1f7","modified":1628314623592},{"_id":"public/live2d_models/haru/01/assets/haru01.pose.json","hash":"4fb902065bd3f309fa0029fe2505424851fd489f","modified":1628314623592},{"_id":"public/live2d_models/hibiki/assets/exp/f02.exp.json","hash":"a5f786a8ebce6d2b14efcd4476179ed324c8def6","modified":1628314623592},{"_id":"public/live2d_models/hibiki/assets/exp/f01.exp.json","hash":"84073a497ddb6e56c6cfc244a0fb217ba473abf9","modified":1628314623592},{"_id":"public/live2d_models/hibiki/assets/exp/f03.exp.json","hash":"b8f958f736acd4eb7433043fbae946487e872f5b","modified":1628314623592},{"_id":"public/live2d_models/hibiki/assets/exp/f04.exp.json","hash":"19fdb5558be54a9ec6d882e2d1780a369bc66b62","modified":1628314623592},{"_id":"public/live2d_models/hibiki/assets/exp/f05.exp.json","hash":"8fdbc6eabb1890bc5953f170f95e4404bd3d62b4","modified":1628314623592},{"_id":"public/live2d_models/hibiki/assets/exp/f06.exp.json","hash":"b8ee09beda85aff415e6598ecd6573a238e15d18","modified":1628314623592},{"_id":"public/live2d_models/izumi/assets/exp/f01.exp.json","hash":"84073a497ddb6e56c6cfc244a0fb217ba473abf9","modified":1628314623592},{"_id":"public/live2d_models/izumi/assets/exp/f02.exp.json","hash":"d4c339f80452528f6cacba3ffe97fbb9e2e4d144","modified":1628314623592},{"_id":"public/live2d_models/izumi/assets/exp/f04.exp.json","hash":"2e4f19882061c1b9bf49537244550cb5c9dd8a18","modified":1628314623592},{"_id":"public/live2d_models/izumi/assets/exp/f03.exp.json","hash":"fc1f79f65c09c845f08ee92d237f8cfabe90a3c6","modified":1628314623592},{"_id":"public/live2d_models/izumi/assets/exp/f05.exp.json","hash":"b0c99350872f614a2a7f60e6479a4799d2d74986","modified":1628314623592},{"_id":"public/live2d_models/izumi/assets/exp/f06.exp.json","hash":"fd90baab724e71a25c8fd1eba2fab97974906374","modified":1628314623592},{"_id":"public/live2d_models/izumi/assets/exp/f07.exp.json","hash":"bb8dc60fc59444fee419265e68216bdcc0282b0b","modified":1628314623592},{"_id":"public/live2d_models/shizuku/assets/exp/f01.exp.json","hash":"84073a497ddb6e56c6cfc244a0fb217ba473abf9","modified":1628314623592},{"_id":"public/live2d_models/shizuku/assets/exp/f02.exp.json","hash":"241b6afafa2e25c6d7a54692a8b5aa060a137ab1","modified":1628314623592},{"_id":"public/live2d_models/shizuku/assets/exp/f03.exp.json","hash":"fbf7729e504f14f83f976827fcf62301a6579a34","modified":1628314623592},{"_id":"public/live2d_models/shizuku/assets/exp/f04.exp.json","hash":"35e746ede62e7090e7dfb08561d77772f58b4153","modified":1628314623592},{"_id":"public/live2d_models/tsumiki/assets/exp/F01.exp.json","hash":"7c0a23a6f3f0a584887be3d3b482ecc7a359306e","modified":1628314623592},{"_id":"public/live2d_models/tsumiki/assets/exp/F02.exp.json","hash":"5e7fffd67c06aee0cdcab0b8f816fd6a125db260","modified":1628314623592},{"_id":"public/live2d_models/tsumiki/assets/exp/F05.exp.json","hash":"afd807b47a00389374949731dd97087aeeec28d7","modified":1628314623592},{"_id":"public/live2d_models/tsumiki/assets/exp/F07.exp.json","hash":"65441e1c9d27f4af55b45759e3c8407af2b72c3e","modified":1628314623592},{"_id":"public/live2d_models/tsumiki/assets/exp/F03.exp.json","hash":"ab92d6fd93d152a4739d93cc6a650c36623dcf72","modified":1628314623592},{"_id":"public/live2d_models/tsumiki/assets/exp/F06.exp.json","hash":"8dd11423a36822927463c3adfdd629d4126f2205","modified":1628314623592},{"_id":"public/live2d_models/tsumiki/assets/exp/F08.exp.json","hash":"03284527751a22b05336329df15e103fdc7e95ec","modified":1628314623592},{"_id":"public/live2d_models/tsumiki/assets/exp/F09.exp.json","hash":"eb7d53e7617247158e4d538e2e7f1a602cfe21a5","modified":1628314623592},{"_id":"public/live2d_models/tsumiki/assets/exp/F10.exp.json","hash":"61bccc68a43662888862fe46c91f579958097ed9","modified":1628314623592},{"_id":"public/live2d_models/tsumiki/assets/exp/F04.exp.json","hash":"19c9ad9d05ea7cb15ccdabeaa14ec84c2763af9c","modified":1628314623592},{"_id":"public/live2d_models/z16/assets/exp/f00.exp.json","hash":"84073a497ddb6e56c6cfc244a0fb217ba473abf9","modified":1628314623592},{"_id":"public/live2d_models/haru/02/assets/exp/f02.exp.json","hash":"461fe8077a2289e309ffc7edf561501a7edcce88","modified":1628314623592},{"_id":"public/live2d_models/haru/02/assets/exp/f03.exp.json","hash":"a65382a1a8d8f7034eac2c811b9f122a8b3f1403","modified":1628314623592},{"_id":"public/live2d_models/haru/02/assets/exp/f04.exp.json","hash":"3156286d7e0281e15c637a889aa415eef3224fa7","modified":1628314623592},{"_id":"public/live2d_models/haru/02/assets/exp/f01.exp.json","hash":"84073a497ddb6e56c6cfc244a0fb217ba473abf9","modified":1628314623592},{"_id":"public/live2d_models/haru/02/assets/exp/f05.exp.json","hash":"1123786fb0bb9c31f7d30cf14b2299f898cdc207","modified":1628314623592},{"_id":"public/live2d_models/haru/02/assets/exp/f07.exp.json","hash":"d55366c9bcf382e8273cf1803f65cdb8a4a0d336","modified":1628314623592},{"_id":"public/live2d_models/haru/02/assets/exp/f06.exp.json","hash":"d962889ec7c563d818ddb5ab1e58cd337b5e62db","modified":1628314623592},{"_id":"public/live2d_models/haru/02/assets/exp/f08.exp.json","hash":"4a9ba4b11d9797f59c7b043d2b807ed8253f3cc4","modified":1628314623592},{"_id":"public/live2d_models/haru/01/assets/exp/f01.exp.json","hash":"84073a497ddb6e56c6cfc244a0fb217ba473abf9","modified":1628314623592},{"_id":"public/live2d_models/haru/01/assets/exp/f02.exp.json","hash":"461fe8077a2289e309ffc7edf561501a7edcce88","modified":1628314623592},{"_id":"public/live2d_models/haru/01/assets/exp/f03.exp.json","hash":"a65382a1a8d8f7034eac2c811b9f122a8b3f1403","modified":1628314623592},{"_id":"public/live2d_models/haru/01/assets/exp/f04.exp.json","hash":"3156286d7e0281e15c637a889aa415eef3224fa7","modified":1628314623592},{"_id":"public/live2d_models/haru/01/assets/exp/f06.exp.json","hash":"d962889ec7c563d818ddb5ab1e58cd337b5e62db","modified":1628314623592},{"_id":"public/live2d_models/haru/01/assets/exp/f05.exp.json","hash":"1123786fb0bb9c31f7d30cf14b2299f898cdc207","modified":1628314623592},{"_id":"public/live2d_models/haru/01/assets/exp/f07.exp.json","hash":"d55366c9bcf382e8273cf1803f65cdb8a4a0d336","modified":1628314623592},{"_id":"public/live2d_models/haru/01/assets/exp/f08.exp.json","hash":"4a9ba4b11d9797f59c7b043d2b807ed8253f3cc4","modified":1628314623592},{"_id":"public/live2d_models/hijiki/assets/moc/hijiki.moc","hash":"44289e62545a7046e0f5231103a851750b78524e","modified":1628314623592},{"_id":"public/live2d_models/izumi/assets/moc/izumi_illust.moc","hash":"819e029e0d81ed64c59d47fc747026d4bbe637d6","modified":1628314623592},{"_id":"public/live2d_models/ni-j/assets/moc/ni-j.moc","hash":"d846e2c4a4db0f003f2eda466f64cf2165e39ad8","modified":1628314623592},{"_id":"public/live2d_models/nipsilon/assets/moc/nipsilon.moc","hash":"77ea4fba30cd6f056d1175654a8c950523cdf37e","modified":1628314623592},{"_id":"public/live2d_models/nietzsche/assets/moc/nietzsche.moc","hash":"63e70620e9eee593dbb77b26209ad64afa82f571","modified":1628314623592},{"_id":"public/live2d_models/nito/assets/moc/nito.moc","hash":"aae6ab7a4687b166b30fb3bbfb1de5e91a5641e4","modified":1628314623592},{"_id":"public/live2d_models/gf/assets/moc/Gantzert_Felixander.2048/texture_05.png","hash":"e6b2987797dbcf113879024df919aa716ded9d4e","modified":1628314623592},{"_id":"public/live2d_models/haru/02/assets/moc/haru02.moc","hash":"748cf01b45bebb3b217d6363f9d5ff81ab942787","modified":1628314623592},{"_id":"public/live2d_models/haru/01/assets/moc/haru01.moc","hash":"d2223b555b3bdbbd955301c4c5bcbe7ebe19bec1","modified":1628314623592},{"_id":"public/live2d_models/hibiki/assets/moc/hibiki.2048/texture_00.png","hash":"91349297cc411865cf5605a998b68a97fe67eec5","modified":1628314623592},{"_id":"public/live2d_models/nico/assets/moc/nico.2048/texture_01.png","hash":"9a19b242b9309624de1e43703b240c1c72bf2205","modified":1628314623592},{"_id":"public/live2d_models/shizuku/assets/moc/shizuku.1024/texture_02.png","hash":"055eb2da9c13e9116be93a1e60c0ea2b660af864","modified":1628314623592},{"_id":"public/plugins/live2d-widget.js/L2Dwidget.min.js","hash":"189df71cee9f1273f134fd78114c72c69b5a44c1","modified":1628314623592},{"_id":"public/live2d_models/haruto/assets/moc/haruto.moc","hash":"57bec0b245b49ea941d61ba3dee671f20441afae","modified":1628314623592},{"_id":"public/live2d_models/koharu/assets/moc/koharu.moc","hash":"5eec3fba21444dd6f774b913510b5955e2c0605b","modified":1628314623592},{"_id":"public/live2d_models/haruto/assets/moc/haruto.2048/texture_00.png","hash":"62b970aa1480a1c18bdc4e74e297f2a1b34ca9fa","modified":1628314623592},{"_id":"public/live2d_models/hijiki/assets/moc/hijiki.2048/texture_00.png","hash":"66464e0d96439695b5542c5e2f5be60739c29999","modified":1628314623592},{"_id":"public/live2d_models/koharu/assets/moc/koharu.2048/texture_00.png","hash":"0879b61b745084781722636bba9f278f31ce5fc1","modified":1628314623592},{"_id":"public/live2d_models/nietzsche/assets/moc/nietzsche.2048/texture_02.png","hash":"9abe0e1b8fe05ad4c678f17fd0f47a064f98908d","modified":1628314623592},{"_id":"public/live2d_models/nito/assets/moc/nito.2048/texture_00.png","hash":"8ea2e684b826d4a8548b237ab86b3bb701ca8d5b","modified":1628314623592},{"_id":"public/live2d_models/tsumiki/assets/moc/tsumiki.2048/texture_00.png","hash":"0316bc67bc2bde4017530989f34d62981ed88ab5","modified":1628314623592},{"_id":"public/live2d_models/chitose/assets/moc/chitose.moc","hash":"7e328a496119887e4caaaa5b81adb3aacb0dac19","modified":1628314623592},{"_id":"public/live2d_models/nipsilon/assets/moc/nipsilon.2048/texture_00.png","hash":"8ea2e684b826d4a8548b237ab86b3bb701ca8d5b","modified":1628314623592},{"_id":"public/live2d_models/tsumiki/assets/moc/tsumiki.2048/texture_01.png","hash":"ffbb082160de6e3bb664b1a4e16b503a80b549c2","modified":1628314623592},{"_id":"public/2021/08/07/Java诊断工具Arthas最佳实践/ArthasHttpAPI案例/arthas-web-ui.png","hash":"56c62a5bd1a653a3509a05fa6dc8cddfe05337aa","modified":1628314623592},{"_id":"public/main.7ea20a.css","hash":"730d229bc07e6c09dc23f7b10a2ba187931e349d","modified":1628314623592},{"_id":"public/main.7ea20a.js","hash":"f8fde8b462ec0fbe1e5a231b9bd871241eacdc17","modified":1628314623592},{"_id":"public/slider.a95b1d.js","hash":"75db7fcc216082f7363c098fe81c3cbd5e3c87de","modified":1628314623592},{"_id":"public/live2d_models/epsilon2_1/assets/moc/Epsilon2.1.2048/texture_00.png","hash":"5a245b4c78e6ebaad4d50e47361d1fada208ae5f","modified":1628314623592},{"_id":"public/live2d_models/nipsilon/assets/moc/nipsilon.2048/texture_02.png","hash":"8052842f4b880ce16a01703a128d8881f63f8543","modified":1628314623592},{"_id":"public/gitment/APlayer.min.js","hash":"9f131b6ca3b89e52545a279356b79530bbb52a64","modified":1628314623592},{"_id":"public/live2d_models/nico/assets/moc/nico.moc","hash":"371b0d972aca62a2b67d32398be091d792f0b3cb","modified":1628314623592},{"_id":"public/live2d_models/tsumiki/assets/moc/tsumiki.moc","hash":"cc023058ae61f70acf7580c4e2352b84eaf1a7b9","modified":1628314623592},{"_id":"public/live2d_models/gf/assets/moc/Gantzert_Felixander.2048/texture_02.png","hash":"1c2cf2502769b3a359c121823f9ecdb114063288","modified":1628314623592},{"_id":"public/live2d_models/tororo/assets/moc/tororo.2048/texture_00.png","hash":"98af764b541083e87fc2f8e85f02d2db38c898cc","modified":1628314623592},{"_id":"public/lib/jquery-2.1.4.min.js","hash":"43dc554608df885a59ddeece1598c6ace434d747","modified":1628314623592},{"_id":"public/mobile.467748.js","hash":"448860f4e30351fada95db9c974e68b372182656","modified":1628314623592},{"_id":"public/plugins/TweenMax/TweenMax.min.js","hash":"8598fc6507e8948a0f99a61bb1dc345ecc1e1f6f","modified":1628314623592},{"_id":"public/live2d_models/izumi/assets/moc/izumi_illust.1024/texture_01.png","hash":"274627b4750bac66b29a9c19a939aca1655b1d27","modified":1628314623592},{"_id":"public/2021/08/07/Java诊断工具Arthas高级命令教程/Arthasprofiler命令/arthas-output-svg.png","hash":"7e48dc75040f056b9d7b892d2093078db6889caf","modified":1628314623592},{"_id":"public/lib/gitment.js","hash":"d1dd326c7b21f36ad78d55c451a1f0bbb13d201c","modified":1628314623592},{"_id":"public/plugins/live2d-widget.js/L2Dwidget.0.min.js","hash":"3cfe69c7d1bf48ba529e243f3892f7919d57ccc0","modified":1628314623592},{"_id":"public/plugins/live2d-widget.js/L2Dwidget.common.js","hash":"b6a9fa8908ce9b64fe27b632935219eb10fd9283","modified":1628314623592},{"_id":"public/plugins/live2d-widget.js/L2Dwidget.0.min.js.map","hash":"3b3a7076b747b092d6e48f42a8a3497aa21280ee","modified":1628314623592},{"_id":"public/plugins/live2d-widget.js/L2Dwidget.common.js.map","hash":"8de60ae490ab3d62c91c8ce60a256079b6afd3d8","modified":1628314623592},{"_id":"public/live2d_models/gf/assets/moc/Gantzert_Felixander.2048/texture_01.png","hash":"da2a0785207727ba87a30ed6853dafd9978eb7b4","modified":1628314623592},{"_id":"public/live2d_models/izumi/assets/moc/izumi_illust.1024/texture_02.png","hash":"4b45fb19ee5b662678692132feae93119ff56d08","modified":1628314623592},{"_id":"public/live2d_models/gf/assets/moc/Gantzert_Felixander.2048/texture_00.png","hash":"ff5b30d94adfcca1e5b77a3b7d3d75d750707d83","modified":1628314623592},{"_id":"public/live2d_models/shizuku/assets/moc/shizuku.moc","hash":"c2670a0f75830edc89d7fe6d074de4ee67e8dc5d","modified":1628314623592},{"_id":"public/live2d_models/miku/assets/moc/miku.2048/texture_00.png","hash":"26fe101720ab8e55fb62c87b563d0dbb903c5eaf","modified":1628314623592},{"_id":"public/live2d_models/izumi/assets/moc/izumi_illust.1024/texture_03.png","hash":"84005d6e75ed9db0f531b6e5e0d6d541da796b04","modified":1628314623592},{"_id":"public/live2d_models/izumi/assets/moc/izumi_illust.1024/texture_00.png","hash":"bfcecfa399b328ac15eba45f2b6b3b18d50f2daf","modified":1628314623592},{"_id":"public/2021/08/07/Java诊断工具Arthas高级命令教程/Arthasdashboard命令/dashboard.png","hash":"15c22e12e5e5a100665ff7e27b4dd1c01cc88e46","modified":1628314623592},{"_id":"public/live2d_models/chitose/assets/moc/chitose.2048/texture_00.png","hash":"505dbba0bec5d7fda0cead773caa540a0158a610","modified":1628314623592},{"_id":"public/live2d_models/gf/assets/moc/Gantzert_Felixander.moc","hash":"67d418af2db593b0b6f318e95f49d4370515c8f0","modified":1628314623592},{"_id":"public/lib/giteement.browser.js","hash":"824925ebd507d6b6fe3005f6c90c64809638456b","modified":1628314623592}],"Category":[{"name":"java技术栈","_id":"cks1cgr540002fw5igqncd5tm"},{"name":"个人作品展示","_id":"cks1cgr5b0007fw5if1me4wvi"},{"name":"linux技术","_id":"cks1cgr5k000ifw5i5j46fslk"},{"name":"默认分类","_id":"cks1cgr5o000pfw5i8k6t8lax"},{"name":"技术笔记","parent":"cks1cgr5o000pfw5i8k6t8lax","_id":"cks1cgr5y000zfw5iapji74mi"}],"Data":[],"Page":[],"Post":[{"title":"Arthas安装使用","date":"2021-07-30T10:12:31.000Z","_content":"\n\narthas-boot:\n```language\njava -jar arthas-boot.jar -h\njava -jar arthas-boot.jar #选择进程号\njava -jar arthas-boot.jar 18095 #指定进程号\njava -jar arthas-boot.jar $(ps -ef |grep $USER| grep \"PortalWebMain\"| grep 8001 | grep -v grep | awk '{print $2}')\n```\n\narthas-client:\n```language\njava -jar arthas-client.jar -h\njava -jar arthas-client.jar 127.0.0.1 3658\njava -jar arthas-client.jar -c 'dashboard -n 1'\njava -jar arthas-client.jar -f batch.as 127.0.0.1\n```","source":"_posts/Arthas安装使用.md","raw":"---\ntitle: Arthas安装使用\ndate: 2021-07-30 18:12:31\ncategories: [java技术栈]\ntags: [技术笔记,java]\n---\n\n\narthas-boot:\n```language\njava -jar arthas-boot.jar -h\njava -jar arthas-boot.jar #选择进程号\njava -jar arthas-boot.jar 18095 #指定进程号\njava -jar arthas-boot.jar $(ps -ef |grep $USER| grep \"PortalWebMain\"| grep 8001 | grep -v grep | awk '{print $2}')\n```\n\narthas-client:\n```language\njava -jar arthas-client.jar -h\njava -jar arthas-client.jar 127.0.0.1 3658\njava -jar arthas-client.jar -c 'dashboard -n 1'\njava -jar arthas-client.jar -f batch.as 127.0.0.1\n```","slug":"Arthas安装使用","published":1,"updated":"2021-08-07T04:56:11.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cks1cgr4w0000fw5i8tfv8s1f","content":"<p>arthas-boot:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">java -jar arthas-boot.jar -h</span><br><span class=\"line\">java -jar arthas-boot.jar #选择进程号</span><br><span class=\"line\">java -jar arthas-boot.jar 18095 #指定进程号</span><br><span class=\"line\">java -jar arthas-boot.jar $(ps -ef |grep $USER| grep &quot;PortalWebMain&quot;| grep 8001 | grep -v grep | awk &#x27;&#123;print $2&#125;&#x27;)</span><br></pre></td></tr></table></figure>\n\n<p>arthas-client:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">java -jar arthas-client.jar -h</span><br><span class=\"line\">java -jar arthas-client.jar 127.0.0.1 3658</span><br><span class=\"line\">java -jar arthas-client.jar -c &#x27;dashboard -n 1&#x27;</span><br><span class=\"line\">java -jar arthas-client.jar -f batch.as 127.0.0.1</span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"","more":"<p>arthas-boot:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">java -jar arthas-boot.jar -h</span><br><span class=\"line\">java -jar arthas-boot.jar #选择进程号</span><br><span class=\"line\">java -jar arthas-boot.jar 18095 #指定进程号</span><br><span class=\"line\">java -jar arthas-boot.jar $(ps -ef |grep $USER| grep &quot;PortalWebMain&quot;| grep 8001 | grep -v grep | awk &#x27;&#123;print $2&#125;&#x27;)</span><br></pre></td></tr></table></figure>\n\n<p>arthas-client:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">java -jar arthas-client.jar -h</span><br><span class=\"line\">java -jar arthas-client.jar 127.0.0.1 3658</span><br><span class=\"line\">java -jar arthas-client.jar -c &#x27;dashboard -n 1&#x27;</span><br><span class=\"line\">java -jar arthas-client.jar -f batch.as 127.0.0.1</span><br></pre></td></tr></table></figure>"},{"title":"JsonFormatTool 跨平台json 格式化工具","date":"2021-07-28T12:30:03.000Z","description":"基于Qt5 框架开发的 JsonFormatTool，一款跨平台的json格式化工具","_content":"\n> 基于Qt5 框架开发的 JsonFormatTool，一款跨平台的json格式化工具\n\n依托强大跨平台和高效的qt5框架，简洁明了的UI界面布局，使用便捷的文本按操作功能\n\n![文本操作展示模板](JsonFormatTool-01.png)\n\n支持搜索高亮的json树展示结构\n\n![树状操作展示模板](JsonFormatTool-02.png)\n\n","source":"_posts/JsonFormatTool.md","raw":"---\ntitle: JsonFormatTool 跨平台json 格式化工具\ndate: 2021-07-28 20:30:03\ncategories: [个人作品展示]\ndescription: 基于Qt5 框架开发的 JsonFormatTool，一款跨平台的json格式化工具\ntags:\n---\n\n> 基于Qt5 框架开发的 JsonFormatTool，一款跨平台的json格式化工具\n\n依托强大跨平台和高效的qt5框架，简洁明了的UI界面布局，使用便捷的文本按操作功能\n\n![文本操作展示模板](JsonFormatTool-01.png)\n\n支持搜索高亮的json树展示结构\n\n![树状操作展示模板](JsonFormatTool-02.png)\n\n","slug":"JsonFormatTool","published":1,"updated":"2021-07-31T10:28:19.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cks1cgr510001fw5i79kr9e8q","content":"<blockquote>\n<p>基于Qt5 框架开发的 JsonFormatTool，一款跨平台的json格式化工具</p>\n</blockquote>\n<p>依托强大跨平台和高效的qt5框架，简洁明了的UI界面布局，使用便捷的文本按操作功能</p>\n<p><img src=\"/jlynet.github.io/2021/07/28/JsonFormatTool/JsonFormatTool-01.png\" alt=\"文本操作展示模板\"></p>\n<p>支持搜索高亮的json树展示结构</p>\n<p><img src=\"/jlynet.github.io/2021/07/28/JsonFormatTool/JsonFormatTool-02.png\" alt=\"树状操作展示模板\"></p>\n","site":{"data":{}},"excerpt":"","more":"<blockquote>\n<p>基于Qt5 框架开发的 JsonFormatTool，一款跨平台的json格式化工具</p>\n</blockquote>\n<p>依托强大跨平台和高效的qt5框架，简洁明了的UI界面布局，使用便捷的文本按操作功能</p>\n<p><img src=\"/jlynet.github.io/2021/07/28/JsonFormatTool/JsonFormatTool-01.png\" alt=\"文本操作展示模板\"></p>\n<p>支持搜索高亮的json树展示结构</p>\n<p><img src=\"/jlynet.github.io/2021/07/28/JsonFormatTool/JsonFormatTool-02.png\" alt=\"树状操作展示模板\"></p>\n"},{"title":"Lockbox跨平台密码记事本管理工具","date":"2021-07-28T12:30:03.000Z","description":"基于Qt5框架开发的Lockbox，一款跨平台密码记事本管理工具","_content":"\n> 基于Qt5框架开发的Lockbox，一款跨平台密码记事本管理工具\n\n![创建密码箱](Lockbox-00.png)\n\n![登录界面](Lockbox-01.png)\n\n![主界面](Lockbox-02.png)\n\n![笔记记事本类型保存](Lockbox-02-1.png)\n\n![银行类笔记类型保存](Lockbox-02-2.png)\n\n![电子信箱网站类保存](Lockbox-02-3.png)\n\n![分类界面标题搜索](Lockbox-03.png)\n","source":"_posts/Lockbox.md","raw":"---\ntitle: Lockbox跨平台密码记事本管理工具\ndate: 2021-07-28 20:30:03\ncategories: [个人作品展示]\ndescription: 基于Qt5框架开发的Lockbox，一款跨平台密码记事本管理工具\ntags:\n---\n\n> 基于Qt5框架开发的Lockbox，一款跨平台密码记事本管理工具\n\n![创建密码箱](Lockbox-00.png)\n\n![登录界面](Lockbox-01.png)\n\n![主界面](Lockbox-02.png)\n\n![笔记记事本类型保存](Lockbox-02-1.png)\n\n![银行类笔记类型保存](Lockbox-02-2.png)\n\n![电子信箱网站类保存](Lockbox-02-3.png)\n\n![分类界面标题搜索](Lockbox-03.png)\n","slug":"Lockbox","published":1,"updated":"2021-07-31T10:28:28.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cks1cgr570004fw5ibzybg04g","content":"<blockquote>\n<p>基于Qt5框架开发的Lockbox，一款跨平台密码记事本管理工具</p>\n</blockquote>\n<p><img src=\"/jlynet.github.io/2021/07/28/Lockbox/Lockbox-00.png\" alt=\"创建密码箱\"></p>\n<p><img src=\"/jlynet.github.io/2021/07/28/Lockbox/Lockbox-01.png\" alt=\"登录界面\"></p>\n<p><img src=\"/jlynet.github.io/2021/07/28/Lockbox/Lockbox-02.png\" alt=\"主界面\"></p>\n<p><img src=\"/jlynet.github.io/2021/07/28/Lockbox/Lockbox-02-1.png\" alt=\"笔记记事本类型保存\"></p>\n<p><img src=\"/jlynet.github.io/2021/07/28/Lockbox/Lockbox-02-2.png\" alt=\"银行类笔记类型保存\"></p>\n<p><img src=\"/jlynet.github.io/2021/07/28/Lockbox/Lockbox-02-3.png\" alt=\"电子信箱网站类保存\"></p>\n<p><img src=\"/jlynet.github.io/2021/07/28/Lockbox/Lockbox-03.png\" alt=\"分类界面标题搜索\"></p>\n","site":{"data":{}},"excerpt":"","more":"<blockquote>\n<p>基于Qt5框架开发的Lockbox，一款跨平台密码记事本管理工具</p>\n</blockquote>\n<p><img src=\"/jlynet.github.io/2021/07/28/Lockbox/Lockbox-00.png\" alt=\"创建密码箱\"></p>\n<p><img src=\"/jlynet.github.io/2021/07/28/Lockbox/Lockbox-01.png\" alt=\"登录界面\"></p>\n<p><img src=\"/jlynet.github.io/2021/07/28/Lockbox/Lockbox-02.png\" alt=\"主界面\"></p>\n<p><img src=\"/jlynet.github.io/2021/07/28/Lockbox/Lockbox-02-1.png\" alt=\"笔记记事本类型保存\"></p>\n<p><img src=\"/jlynet.github.io/2021/07/28/Lockbox/Lockbox-02-2.png\" alt=\"银行类笔记类型保存\"></p>\n<p><img src=\"/jlynet.github.io/2021/07/28/Lockbox/Lockbox-02-3.png\" alt=\"电子信箱网站类保存\"></p>\n<p><img src=\"/jlynet.github.io/2021/07/28/Lockbox/Lockbox-03.png\" alt=\"分类界面标题搜索\"></p>\n"},{"title":"Hello World","_content":"Welcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/one-command-deployment.html)\n","source":"_posts/hello-world.md","raw":"---\ntitle: Hello World\n---\nWelcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/one-command-deployment.html)\n","slug":"hello-world","published":1,"date":"2021-07-28T04:45:25.000Z","updated":"2021-07-28T04:45:25.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cks1cgr590005fw5ib47492uu","content":"<p>Welcome to <a href=\"https://hexo.io/\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\">GitHub</a>.</p>\n<h2><span id=\"quick-start\">Quick Start</span></h2><h3><span id=\"create-a-new-post\">Create a new post</span></h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo new <span class=\"string\">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\">Writing</a></p>\n<h3><span id=\"run-server\">Run server</span></h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo server</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/server.html\">Server</a></p>\n<h3><span id=\"generate-static-files\">Generate static files</span></h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo generate</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\">Generating</a></p>\n<h3><span id=\"deploy-to-remote-sites\">Deploy to remote sites</span></h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo deploy</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/one-command-deployment.html\">Deployment</a></p>\n","site":{"data":{}},"excerpt":"","more":"<p>Welcome to <a href=\"https://hexo.io/\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\">GitHub</a>.</p>\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo new <span class=\"string\">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\">Writing</a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo server</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/server.html\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo generate</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo deploy</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/one-command-deployment.html\">Deployment</a></p>\n"},{"title":"awk命令使用介绍","date":"2021-07-31T03:59:37.000Z","_content":"\n\n**[awk](https://www.oschina.net/action/GoToLink?url=http%3A%2F%2Fen.wikipedia.org%2Fwiki%2FAwk)** 是一门非常优秀的文本处理工具，甚至可以上升作为一门程序设计语言。\n它处理文本的速度是快得惊人的，现在很多基于shell 日志分析工具都可以用它完成。特点是设计简单，速度表现很好，本文将介绍awk内置变量。\n格式： awk [ -F re] [parameter...] ['pattern {action}' ] [-f progfile][in_file...]\n\n**一、内置变量**\n\n| **属 性**   | **说 明**                                              |\n| ----------- | ------------------------------------------------------ |\n| $0          | 当前记录行，代表一行记录                               |\n| 1~1 n       | 当前记录的第n个字段，字段间由FS分隔                    |\n| FS          | 输入字段分隔符，默认是空格                             |\n| NF          | 当前记录中的字段个数，就是有多少列，一般取最后一列字段 |\n| NR          | 已经读出的记录数，就是行号，从1开始                    |\n| RS          | 输入的记录分隔符，默认为换行符                         |\n| OFS         | 输出字段分隔符，默是空格                               |\n| ORS         | 输出的记录分隔符，默认为换行符                         |\n| ARGC        | 命令行参数个数                                         |\n| ARGV        | 命令行参数数组                                         |\n| FILENAME    | 当前输入文件的名字                                     |\n| IGNORECASE  | 如果为真，则进行忽略大小写的匹配                       |\n| ARGIND      | 当前被处理文件的ARGV标志符                             |\n| CONVFMT     | 数字转换格式 %.6g                                      |\n| ENVIRON     | UNIX环境变量                                           |\n| ERRNO       | UNIX系统错误消息                                       |\n| FIELDWIDTHS | 输入字段宽度的空白分隔字符串                           |\n| FNR         | 当前记录数                                             |\n| OFMT        | 数字的输出格式 %.6g                                    |\n| RSTART      | 被匹配函数匹配的字符串首                               |\n| RLENGTH     | 被匹配函数匹配的字符串长度                             |\n| SUBSEP      | \\034                                                   |\n\n\n### Built-in variables\n\nAwk's built-in variables include the field variables: 1,1,2, 3, and so on (3,*a**n**d**s**o**o**n*(0 represents the entire record). They hold the text or values in the individual text-fields in a record.\n\nOther variables include:\n\n- NR: Keeps a current count of the number of input records.\n- NF: Keeps a count of the number of fields in an input record. The last field in the input record can be designated by $NF.\n- FS: Contains the \"field separator\" character used to divide fields on the input record. The default, \"white space\", includes any space and tab characters. FS can be reassigned to another character to change the field separator.\n- RS: Stores the current \"record separator\" character. Since, by default, an input line is the input record, the default record separator character is a \"newline\".\n- OFS: Stores the \"output field separator\", which separates the fields when Awk prints them. The default is a \"space\" character.\n- ORS: Stores the \"output record separator\", which separates the output records when Awk prints them. The default is a \"newline\" character.\n- OFMT: Stores the format for numeric output. The default format is \"%.6g\".\n- FILENAME: Contains the name of the current input-file.\n\n**二、 变量实例**\n**1） 常用操作**\nawk '/^root/ {print $0}' /etc/passwd\n结果： root:x:0:0:root:/root:/bin/bash            # /^root/ 为正则过滤表达式，$0代表是逐行\n\n**2） FS 分隔符**\nawk 'BEGIN{FS=\":\"} /^root/ {print 1,1,NF}' /etc/passwd\n结果： root /bin/bash       \n注： FS为字段分隔符，默认是空格。因为passwd里是”:”分隔，所以需要修改默认分隔符。NF是字段总数，0代表当前行记录，0代表当前行记录，1-n是当前行各个字段对应值，*n*是当前行各个字段对应值，NF代表最后一列。\n\n**3）** **记录条数**（NR，FNR）\nawk 'BEGIN{FS=\":\"}{print NR, 1,1,NF, \"\\t\", $0}' /etc/passwd\n结果：\n1 root /bin/bash  root:x:0:0:root:/root:/bin/bash\n2 daemon /bin/sh  daemon:x:1:1:daemon:/usr/sbin:/bin/sh\n3 bin /bin/sh  bin:x:2:2:bin:/bin:/bin/sh\n4 sys /bin/sh  sys:x:3:3:sys:/dev:/bin/sh\n5 sync /bin/sync  sync:x:4:65534:sync:/bin:/bin/sync\n\n........\n\nawk 'BEGIN{FS=\":\"}/^s/{print NR, 1,1,NF, \"\\t\", $0}' /etc/passwd          # 过滤以首字符”s“开头的所有行\n结果： \n4 sys /bin/sh  sys:x:3:3:sys:/dev:/bin/sh\n5 sync /bin/sync  sync:x:4:65534:sync:/bin:/bin/sync\n20 syslog /bin/false  syslog:x:101:103::/home/syslog:/bin/false\n........\n注： NR得到当前记录所在行\n\n**4） 字段分隔符**（OFS）\nawk 'BEGIN{FS=\":\"; OFS=\"##\"} /^root/ {print FNR, 1,1,NF}' /etc/passwd\n结果： 1##root##/bin/bash\n注： OFS设置默认字段分隔符， FNR当前记录行\n\n**5） 行记录分隔符**（ORS）\nawk 'BEGIN{FS=\":\"; ORS=\"##\"}{print FNR, 1,1,NF}' /etc/passwd\n结果： 1 root /bin/bash##2 daemon /bin/sh##3 bin /bin/sh##4 sys /bin/sh##5 sync /bin/sync##......\nawk 'BEGIN{FS=\":\"; ORS=\"\\n\"}{print FNR, 1,1,NF}' /etc/passwd          #   \"/n\" 是linux 中换行符\n结果：\n1 root /bin/bash\n2 daemon /bin/sh\n3 bin /bin/sh\n4 sys /bin/sh\n5 sync /bin/sync\n.......\n注： ORS默认是换行符，这里修改为：”##”，所有行之间用”##”分隔了\n\n**6） 参数获取**（ARGC ，ARGV）\nawk 'BEGIN{FS=\":\"; print \"ARGC=\"ARGC; for(k in ARGV) {print k\"=\"ARGV[k];}}' /etc/passwd\n结果： \nARGC=2\n0=awk\n1=/etc/passwd\n注： ARGC得到所有输入参数个数，ARGV获得输入参数内容是一个数组\n\n**7） 获得传入的文件名**（FILENAME）\n```language\nawk 'BEGIN{FS=\":\";}/^r/ {print FILENAME, \"\\t\", $0}' /etc/passwd\n```\n结果：\n/etc/passwd  root:x:0:0:root:/root:/bin/bash\n/etc/passwd  rtkit:x:110:117:RealtimeKit,,,:/proc:/bin/false\n注： FILENAME, 0-0−N,NF 不能使用在BEGIN中，BEGIN中不能获得任何与文件记录操作的变量\n\n**8） 获得linux环境变量**（ENVIRON）\nawk 'BEGIN{print ENVIRON[\"PATH\"];}' /etc/passwd\n结果： `/home/homer/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games`\n注：  ENVIRON是子典型数组，可以通过对应键值获得它的值，linux 环境变量还有HOME，`*H**O**M**E*`，PWD等，可以通过linux 命令 env 查看\n\n**9） 输出数据格式设置**（OFMT）\nawk 'BEGIN{OFMT=\"%.3f\"; print 1, 2.0, 3.1, 2/3, 123.11111111;}' /etc/passwd\n结果： 1   2   3.100   0.667   123.111\n注： OFMT默认输出格式是：%.6g 保留六位小数，这里修改OFMT会修改默认数据输出格式，如保留三位小数\n\n**10） 按宽度指定分隔符**（FIELDWIDTHS）\necho 20130108122448 | awk 'BEGIN{FIELDWIDTHS=\"4 2 2 2 2 3\"}{print 1\"-\"1\"−\"2\"-\"3,3,4\":\"5\":\"5\":\"6}'\n结果： 2013-01-08 12:24:48\n注： FIELDWIDTHS其格式为空格分隔的一串数字，用以对记录进行域的分隔，FIELDWIDTHS=\"4 2 2 2 2 2\"就表示1宽度是4，1宽度是4，2是2，$3是2 .... 这个时候会忽略FS分隔符\n\n**11） RSTART，RLENGTH使用**\nawk 'BEGIN{start=match(\"this is 1 teststr\", /[a-z]+$/); print start, RSTART, RLENGTH }'\n结果： 11 11 7\nawk 'BEGIN{start=match(\"this is a test\",/^[a-z ]+$/); print start, RSTART, RLENGTH }'\n结果： 0 0 -1\nawk 'BEGIN{start=match(\"this is a test\",/^[a-z ]+$/); print start, RSTART, RLENGTH }'\n结果： 1 1 14         # 增加了一个空格“ ”匹配\n注： RSTART 被匹配正则表达式首位置，RLENGTH 匹配字符长度，没有找到为-1\n\n**三、外部变量**\n**1） 基本用法**\nawk 中两个特别的表达式，BEGIN和END\n这两者都可用于pattern中，提供BEGIN和END的作用是给程序赋予 初始状态 和 程序结束 之后执行一些扫尾的工作。\na） 任何在BEGIN之后列出的操作（在{}内），将在awk开始扫描输入之前执行\nb） 任何在END之后列出的操作，将在扫描完全部的输入之后执行\n因此，通常使用BEGIN来显示变量和初始化变量，使用END来输出最终结果。\n示例： echo 'awk test' | awk 'BEGIN{print \"start....\"} {print $0} END{print \"end....\"}'\n结果： \nstart....\nawk test\nend....\n**2） 获取外部变量**\n格式如： awk ‘{action}’ 变量名=变量值 ，这样传入变量可以在action中获得值。\n示例： \ntest='awk test'\necho | awk  '{print test}' test=\"$test\"\n结果： awk test\necho | awk  test=\"$test\" '{print test}'\n结果： awk: cmd. line:1: fatal: cannot open file '{print test}' for reading (No such file or directory)\n注：变量名与值放到’{action}’后面，即 test=\"$test\" 在 print 后面\n\n**3） BEGIN程序块中变量**\n格式如：awk –v 变量名=变量值 [–v 变量2=值2 …] 'BEGIN{action}’ \n示例：\ntest='awk test'\necho | awk -v test=\"$test\" 'BEGIN{print test}'\n结果： awk test\necho | awk -v test=\"$test\" '{print test}'\n结果： awk test\n注：用-v 传入变量，可以在3中类型的action 中都可以获得到，但顺序在 action前面\n\n**4） 外部环境变量**\nawk  'BEGIN{for (i in ENVIRON) {print i\"=\"ENVIRON[i];}}'\n结果：\nHLVL=1\nPWD=/home/homer\nJAVA_HOME=/home/homer/eclipse/jdk1.7.0_05\nSHELL=/bin/bash\nPATH=/home/homer/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games\n..........\n注：  ENVIRON是子典型数组，可以通过对应键值获得它的值，linux 环境变量还有HOME，*H**O**M**E*，PWD等，可以通过linux 命令 env 查看\n","source":"_posts/awk命令使用介绍.md","raw":"---\ntitle: awk命令使用介绍\ndate: 2021-07-31 11:59:37\ncategories: [linux技术]\ntags: [技术笔记,shell,linux]\n---\n\n\n**[awk](https://www.oschina.net/action/GoToLink?url=http%3A%2F%2Fen.wikipedia.org%2Fwiki%2FAwk)** 是一门非常优秀的文本处理工具，甚至可以上升作为一门程序设计语言。\n它处理文本的速度是快得惊人的，现在很多基于shell 日志分析工具都可以用它完成。特点是设计简单，速度表现很好，本文将介绍awk内置变量。\n格式： awk [ -F re] [parameter...] ['pattern {action}' ] [-f progfile][in_file...]\n\n**一、内置变量**\n\n| **属 性**   | **说 明**                                              |\n| ----------- | ------------------------------------------------------ |\n| $0          | 当前记录行，代表一行记录                               |\n| 1~1 n       | 当前记录的第n个字段，字段间由FS分隔                    |\n| FS          | 输入字段分隔符，默认是空格                             |\n| NF          | 当前记录中的字段个数，就是有多少列，一般取最后一列字段 |\n| NR          | 已经读出的记录数，就是行号，从1开始                    |\n| RS          | 输入的记录分隔符，默认为换行符                         |\n| OFS         | 输出字段分隔符，默是空格                               |\n| ORS         | 输出的记录分隔符，默认为换行符                         |\n| ARGC        | 命令行参数个数                                         |\n| ARGV        | 命令行参数数组                                         |\n| FILENAME    | 当前输入文件的名字                                     |\n| IGNORECASE  | 如果为真，则进行忽略大小写的匹配                       |\n| ARGIND      | 当前被处理文件的ARGV标志符                             |\n| CONVFMT     | 数字转换格式 %.6g                                      |\n| ENVIRON     | UNIX环境变量                                           |\n| ERRNO       | UNIX系统错误消息                                       |\n| FIELDWIDTHS | 输入字段宽度的空白分隔字符串                           |\n| FNR         | 当前记录数                                             |\n| OFMT        | 数字的输出格式 %.6g                                    |\n| RSTART      | 被匹配函数匹配的字符串首                               |\n| RLENGTH     | 被匹配函数匹配的字符串长度                             |\n| SUBSEP      | \\034                                                   |\n\n\n### Built-in variables\n\nAwk's built-in variables include the field variables: 1,1,2, 3, and so on (3,*a**n**d**s**o**o**n*(0 represents the entire record). They hold the text or values in the individual text-fields in a record.\n\nOther variables include:\n\n- NR: Keeps a current count of the number of input records.\n- NF: Keeps a count of the number of fields in an input record. The last field in the input record can be designated by $NF.\n- FS: Contains the \"field separator\" character used to divide fields on the input record. The default, \"white space\", includes any space and tab characters. FS can be reassigned to another character to change the field separator.\n- RS: Stores the current \"record separator\" character. Since, by default, an input line is the input record, the default record separator character is a \"newline\".\n- OFS: Stores the \"output field separator\", which separates the fields when Awk prints them. The default is a \"space\" character.\n- ORS: Stores the \"output record separator\", which separates the output records when Awk prints them. The default is a \"newline\" character.\n- OFMT: Stores the format for numeric output. The default format is \"%.6g\".\n- FILENAME: Contains the name of the current input-file.\n\n**二、 变量实例**\n**1） 常用操作**\nawk '/^root/ {print $0}' /etc/passwd\n结果： root:x:0:0:root:/root:/bin/bash            # /^root/ 为正则过滤表达式，$0代表是逐行\n\n**2） FS 分隔符**\nawk 'BEGIN{FS=\":\"} /^root/ {print 1,1,NF}' /etc/passwd\n结果： root /bin/bash       \n注： FS为字段分隔符，默认是空格。因为passwd里是”:”分隔，所以需要修改默认分隔符。NF是字段总数，0代表当前行记录，0代表当前行记录，1-n是当前行各个字段对应值，*n*是当前行各个字段对应值，NF代表最后一列。\n\n**3）** **记录条数**（NR，FNR）\nawk 'BEGIN{FS=\":\"}{print NR, 1,1,NF, \"\\t\", $0}' /etc/passwd\n结果：\n1 root /bin/bash  root:x:0:0:root:/root:/bin/bash\n2 daemon /bin/sh  daemon:x:1:1:daemon:/usr/sbin:/bin/sh\n3 bin /bin/sh  bin:x:2:2:bin:/bin:/bin/sh\n4 sys /bin/sh  sys:x:3:3:sys:/dev:/bin/sh\n5 sync /bin/sync  sync:x:4:65534:sync:/bin:/bin/sync\n\n........\n\nawk 'BEGIN{FS=\":\"}/^s/{print NR, 1,1,NF, \"\\t\", $0}' /etc/passwd          # 过滤以首字符”s“开头的所有行\n结果： \n4 sys /bin/sh  sys:x:3:3:sys:/dev:/bin/sh\n5 sync /bin/sync  sync:x:4:65534:sync:/bin:/bin/sync\n20 syslog /bin/false  syslog:x:101:103::/home/syslog:/bin/false\n........\n注： NR得到当前记录所在行\n\n**4） 字段分隔符**（OFS）\nawk 'BEGIN{FS=\":\"; OFS=\"##\"} /^root/ {print FNR, 1,1,NF}' /etc/passwd\n结果： 1##root##/bin/bash\n注： OFS设置默认字段分隔符， FNR当前记录行\n\n**5） 行记录分隔符**（ORS）\nawk 'BEGIN{FS=\":\"; ORS=\"##\"}{print FNR, 1,1,NF}' /etc/passwd\n结果： 1 root /bin/bash##2 daemon /bin/sh##3 bin /bin/sh##4 sys /bin/sh##5 sync /bin/sync##......\nawk 'BEGIN{FS=\":\"; ORS=\"\\n\"}{print FNR, 1,1,NF}' /etc/passwd          #   \"/n\" 是linux 中换行符\n结果：\n1 root /bin/bash\n2 daemon /bin/sh\n3 bin /bin/sh\n4 sys /bin/sh\n5 sync /bin/sync\n.......\n注： ORS默认是换行符，这里修改为：”##”，所有行之间用”##”分隔了\n\n**6） 参数获取**（ARGC ，ARGV）\nawk 'BEGIN{FS=\":\"; print \"ARGC=\"ARGC; for(k in ARGV) {print k\"=\"ARGV[k];}}' /etc/passwd\n结果： \nARGC=2\n0=awk\n1=/etc/passwd\n注： ARGC得到所有输入参数个数，ARGV获得输入参数内容是一个数组\n\n**7） 获得传入的文件名**（FILENAME）\n```language\nawk 'BEGIN{FS=\":\";}/^r/ {print FILENAME, \"\\t\", $0}' /etc/passwd\n```\n结果：\n/etc/passwd  root:x:0:0:root:/root:/bin/bash\n/etc/passwd  rtkit:x:110:117:RealtimeKit,,,:/proc:/bin/false\n注： FILENAME, 0-0−N,NF 不能使用在BEGIN中，BEGIN中不能获得任何与文件记录操作的变量\n\n**8） 获得linux环境变量**（ENVIRON）\nawk 'BEGIN{print ENVIRON[\"PATH\"];}' /etc/passwd\n结果： `/home/homer/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games`\n注：  ENVIRON是子典型数组，可以通过对应键值获得它的值，linux 环境变量还有HOME，`*H**O**M**E*`，PWD等，可以通过linux 命令 env 查看\n\n**9） 输出数据格式设置**（OFMT）\nawk 'BEGIN{OFMT=\"%.3f\"; print 1, 2.0, 3.1, 2/3, 123.11111111;}' /etc/passwd\n结果： 1   2   3.100   0.667   123.111\n注： OFMT默认输出格式是：%.6g 保留六位小数，这里修改OFMT会修改默认数据输出格式，如保留三位小数\n\n**10） 按宽度指定分隔符**（FIELDWIDTHS）\necho 20130108122448 | awk 'BEGIN{FIELDWIDTHS=\"4 2 2 2 2 3\"}{print 1\"-\"1\"−\"2\"-\"3,3,4\":\"5\":\"5\":\"6}'\n结果： 2013-01-08 12:24:48\n注： FIELDWIDTHS其格式为空格分隔的一串数字，用以对记录进行域的分隔，FIELDWIDTHS=\"4 2 2 2 2 2\"就表示1宽度是4，1宽度是4，2是2，$3是2 .... 这个时候会忽略FS分隔符\n\n**11） RSTART，RLENGTH使用**\nawk 'BEGIN{start=match(\"this is 1 teststr\", /[a-z]+$/); print start, RSTART, RLENGTH }'\n结果： 11 11 7\nawk 'BEGIN{start=match(\"this is a test\",/^[a-z ]+$/); print start, RSTART, RLENGTH }'\n结果： 0 0 -1\nawk 'BEGIN{start=match(\"this is a test\",/^[a-z ]+$/); print start, RSTART, RLENGTH }'\n结果： 1 1 14         # 增加了一个空格“ ”匹配\n注： RSTART 被匹配正则表达式首位置，RLENGTH 匹配字符长度，没有找到为-1\n\n**三、外部变量**\n**1） 基本用法**\nawk 中两个特别的表达式，BEGIN和END\n这两者都可用于pattern中，提供BEGIN和END的作用是给程序赋予 初始状态 和 程序结束 之后执行一些扫尾的工作。\na） 任何在BEGIN之后列出的操作（在{}内），将在awk开始扫描输入之前执行\nb） 任何在END之后列出的操作，将在扫描完全部的输入之后执行\n因此，通常使用BEGIN来显示变量和初始化变量，使用END来输出最终结果。\n示例： echo 'awk test' | awk 'BEGIN{print \"start....\"} {print $0} END{print \"end....\"}'\n结果： \nstart....\nawk test\nend....\n**2） 获取外部变量**\n格式如： awk ‘{action}’ 变量名=变量值 ，这样传入变量可以在action中获得值。\n示例： \ntest='awk test'\necho | awk  '{print test}' test=\"$test\"\n结果： awk test\necho | awk  test=\"$test\" '{print test}'\n结果： awk: cmd. line:1: fatal: cannot open file '{print test}' for reading (No such file or directory)\n注：变量名与值放到’{action}’后面，即 test=\"$test\" 在 print 后面\n\n**3） BEGIN程序块中变量**\n格式如：awk –v 变量名=变量值 [–v 变量2=值2 …] 'BEGIN{action}’ \n示例：\ntest='awk test'\necho | awk -v test=\"$test\" 'BEGIN{print test}'\n结果： awk test\necho | awk -v test=\"$test\" '{print test}'\n结果： awk test\n注：用-v 传入变量，可以在3中类型的action 中都可以获得到，但顺序在 action前面\n\n**4） 外部环境变量**\nawk  'BEGIN{for (i in ENVIRON) {print i\"=\"ENVIRON[i];}}'\n结果：\nHLVL=1\nPWD=/home/homer\nJAVA_HOME=/home/homer/eclipse/jdk1.7.0_05\nSHELL=/bin/bash\nPATH=/home/homer/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games\n..........\n注：  ENVIRON是子典型数组，可以通过对应键值获得它的值，linux 环境变量还有HOME，*H**O**M**E*，PWD等，可以通过linux 命令 env 查看\n","slug":"awk命令使用介绍","published":1,"updated":"2021-07-31T10:10:04.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cks1cgr5b0006fw5i8ecm89p5","content":"<p><strong><a href=\"https://www.oschina.net/action/GoToLink?url=http://en.wikipedia.org/wiki/Awk\">awk</a></strong> 是一门非常优秀的文本处理工具，甚至可以上升作为一门程序设计语言。<br>它处理文本的速度是快得惊人的，现在很多基于shell 日志分析工具都可以用它完成。特点是设计简单，速度表现很好，本文将介绍awk内置变量。<br>格式： awk [ -F re] [parameter…] [‘pattern {action}’ ] [-f progfile][in_file…]</p>\n<p><strong>一、内置变量</strong></p>\n<table>\n<thead>\n<tr>\n<th><strong>属 性</strong></th>\n<th><strong>说 明</strong></th>\n</tr>\n</thead>\n<tbody><tr>\n<td>$0</td>\n<td>当前记录行，代表一行记录</td>\n</tr>\n<tr>\n<td>1~1 n</td>\n<td>当前记录的第n个字段，字段间由FS分隔</td>\n</tr>\n<tr>\n<td>FS</td>\n<td>输入字段分隔符，默认是空格</td>\n</tr>\n<tr>\n<td>NF</td>\n<td>当前记录中的字段个数，就是有多少列，一般取最后一列字段</td>\n</tr>\n<tr>\n<td>NR</td>\n<td>已经读出的记录数，就是行号，从1开始</td>\n</tr>\n<tr>\n<td>RS</td>\n<td>输入的记录分隔符，默认为换行符</td>\n</tr>\n<tr>\n<td>OFS</td>\n<td>输出字段分隔符，默是空格</td>\n</tr>\n<tr>\n<td>ORS</td>\n<td>输出的记录分隔符，默认为换行符</td>\n</tr>\n<tr>\n<td>ARGC</td>\n<td>命令行参数个数</td>\n</tr>\n<tr>\n<td>ARGV</td>\n<td>命令行参数数组</td>\n</tr>\n<tr>\n<td>FILENAME</td>\n<td>当前输入文件的名字</td>\n</tr>\n<tr>\n<td>IGNORECASE</td>\n<td>如果为真，则进行忽略大小写的匹配</td>\n</tr>\n<tr>\n<td>ARGIND</td>\n<td>当前被处理文件的ARGV标志符</td>\n</tr>\n<tr>\n<td>CONVFMT</td>\n<td>数字转换格式 %.6g</td>\n</tr>\n<tr>\n<td>ENVIRON</td>\n<td>UNIX环境变量</td>\n</tr>\n<tr>\n<td>ERRNO</td>\n<td>UNIX系统错误消息</td>\n</tr>\n<tr>\n<td>FIELDWIDTHS</td>\n<td>输入字段宽度的空白分隔字符串</td>\n</tr>\n<tr>\n<td>FNR</td>\n<td>当前记录数</td>\n</tr>\n<tr>\n<td>OFMT</td>\n<td>数字的输出格式 %.6g</td>\n</tr>\n<tr>\n<td>RSTART</td>\n<td>被匹配函数匹配的字符串首</td>\n</tr>\n<tr>\n<td>RLENGTH</td>\n<td>被匹配函数匹配的字符串长度</td>\n</tr>\n<tr>\n<td>SUBSEP</td>\n<td>\\034</td>\n</tr>\n</tbody></table>\n<h3><span id=\"built-in-variables\">Built-in variables</span></h3><p>Awk’s built-in variables include the field variables: 1,1,2, 3, and so on (3,<em>a<strong>n</strong>d<strong>s</strong>o<strong>o</strong>n</em>(0 represents the entire record). They hold the text or values in the individual text-fields in a record.</p>\n<p>Other variables include:</p>\n<ul>\n<li>NR: Keeps a current count of the number of input records.</li>\n<li>NF: Keeps a count of the number of fields in an input record. The last field in the input record can be designated by $NF.</li>\n<li>FS: Contains the “field separator” character used to divide fields on the input record. The default, “white space”, includes any space and tab characters. FS can be reassigned to another character to change the field separator.</li>\n<li>RS: Stores the current “record separator” character. Since, by default, an input line is the input record, the default record separator character is a “newline”.</li>\n<li>OFS: Stores the “output field separator”, which separates the fields when Awk prints them. The default is a “space” character.</li>\n<li>ORS: Stores the “output record separator”, which separates the output records when Awk prints them. The default is a “newline” character.</li>\n<li>OFMT: Stores the format for numeric output. The default format is “%.6g”.</li>\n<li>FILENAME: Contains the name of the current input-file.</li>\n</ul>\n<p><strong>二、 变量实例</strong><br><strong>1） 常用操作</strong><br>awk ‘/^root/ {print $0}’ /etc/passwd<br>结果： root:x:0:0:root:/root:/bin/bash            # /^root/ 为正则过滤表达式，$0代表是逐行</p>\n<p><strong>2） FS 分隔符</strong><br>awk ‘BEGIN{FS=”:”} /^root/ {print 1,1,NF}’ /etc/passwd<br>结果： root /bin/bash<br>注： FS为字段分隔符，默认是空格。因为passwd里是”:”分隔，所以需要修改默认分隔符。NF是字段总数，0代表当前行记录，0代表当前行记录，1-n是当前行各个字段对应值，<em>n</em>是当前行各个字段对应值，NF代表最后一列。</p>\n<p><strong>3）</strong> <strong>记录条数</strong>（NR，FNR）<br>awk ‘BEGIN{FS=”:”}{print NR, 1,1,NF, “\\t”, $0}’ /etc/passwd<br>结果：<br>1 root /bin/bash  root:x:0:0:root:/root:/bin/bash<br>2 daemon /bin/sh  daemon:x:1:1:daemon:/usr/sbin:/bin/sh<br>3 bin /bin/sh  bin:x:2:2:bin:/bin:/bin/sh<br>4 sys /bin/sh  sys:x:3:3:sys:/dev:/bin/sh<br>5 sync /bin/sync  sync:x:4:65534:sync:/bin:/bin/sync</p>\n<p>……..</p>\n<p>awk ‘BEGIN{FS=”:”}/^s/{print NR, 1,1,NF, “\\t”, $0}’ /etc/passwd          # 过滤以首字符”s“开头的所有行<br>结果：<br>4 sys /bin/sh  sys:x:3:3:sys:/dev:/bin/sh<br>5 sync /bin/sync  sync:x:4:65534:sync:/bin:/bin/sync<br>20 syslog /bin/false  syslog:x:101:103::/home/syslog:/bin/false<br>……..<br>注： NR得到当前记录所在行</p>\n<p><strong>4） 字段分隔符</strong>（OFS）<br>awk ‘BEGIN{FS=”:”; OFS=”##”} /^root/ {print FNR, 1,1,NF}’ /etc/passwd<br>结果： 1##root##/bin/bash<br>注： OFS设置默认字段分隔符， FNR当前记录行</p>\n<p><strong>5） 行记录分隔符</strong>（ORS）<br>awk ‘BEGIN{FS=”:”; ORS=”##”}{print FNR, 1,1,NF}’ /etc/passwd<br>结果： 1 root /bin/bash##2 daemon /bin/sh##3 bin /bin/sh##4 sys /bin/sh##5 sync /bin/sync##……<br>awk ‘BEGIN{FS=”:”; ORS=”\\n”}{print FNR, 1,1,NF}’ /etc/passwd          #   “/n” 是linux 中换行符<br>结果：<br>1 root /bin/bash<br>2 daemon /bin/sh<br>3 bin /bin/sh<br>4 sys /bin/sh<br>5 sync /bin/sync<br>…….<br>注： ORS默认是换行符，这里修改为：”##”，所有行之间用”##”分隔了</p>\n<p><strong>6） 参数获取</strong>（ARGC ，ARGV）<br>awk ‘BEGIN{FS=”:”; print “ARGC=”ARGC; for(k in ARGV) {print k”=”ARGV[k];}}’ /etc/passwd<br>结果：<br>ARGC=2<br>0=awk<br>1=/etc/passwd<br>注： ARGC得到所有输入参数个数，ARGV获得输入参数内容是一个数组</p>\n<p><strong>7） 获得传入的文件名</strong>（FILENAME）</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">awk &#x27;BEGIN&#123;FS=&quot;:&quot;;&#125;/^r/ &#123;print FILENAME, &quot;\\t&quot;, $0&#125;&#x27; /etc/passwd</span><br></pre></td></tr></table></figure>\n<p>结果：<br>/etc/passwd  root:x:0:0:root:/root:/bin/bash<br>/etc/passwd  rtkit:x:110:117:RealtimeKit,,,:/proc:/bin/false<br>注： FILENAME, 0-0−N,NF 不能使用在BEGIN中，BEGIN中不能获得任何与文件记录操作的变量</p>\n<p><strong>8） 获得linux环境变量</strong>（ENVIRON）<br>awk ‘BEGIN{print ENVIRON[“PATH”];}’ /etc/passwd<br>结果： <code>/home/homer/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games</code><br>注：  ENVIRON是子典型数组，可以通过对应键值获得它的值，linux 环境变量还有HOME，<code>*H**O**M**E*</code>，PWD等，可以通过linux 命令 env 查看</p>\n<p><strong>9） 输出数据格式设置</strong>（OFMT）<br>awk ‘BEGIN{OFMT=”%.3f”; print 1, 2.0, 3.1, 2/3, 123.11111111;}’ /etc/passwd<br>结果： 1   2   3.100   0.667   123.111<br>注： OFMT默认输出格式是：%.6g 保留六位小数，这里修改OFMT会修改默认数据输出格式，如保留三位小数</p>\n<p><strong>10） 按宽度指定分隔符</strong>（FIELDWIDTHS）<br>echo 20130108122448 | awk ‘BEGIN{FIELDWIDTHS=”4 2 2 2 2 3”}{print 1”-“1”−”2”-“3,3,4”:”5”:”5”:”6}’<br>结果： 2013-01-08 12:24:48<br>注： FIELDWIDTHS其格式为空格分隔的一串数字，用以对记录进行域的分隔，FIELDWIDTHS=”4 2 2 2 2 2”就表示1宽度是4，1宽度是4，2是2，$3是2 …. 这个时候会忽略FS分隔符</p>\n<p><strong>11） RSTART，RLENGTH使用</strong><br>awk ‘BEGIN{start=match(“this is 1 teststr”, /[a-z]+$/); print start, RSTART, RLENGTH }’<br>结果： 11 11 7<br>awk ‘BEGIN{start=match(“this is a test”,/^[a-z ]+$/); print start, RSTART, RLENGTH }’<br>结果： 0 0 -1<br>awk ‘BEGIN{start=match(“this is a test”,/^[a-z ]+$/); print start, RSTART, RLENGTH }’<br>结果： 1 1 14         # 增加了一个空格“ ”匹配<br>注： RSTART 被匹配正则表达式首位置，RLENGTH 匹配字符长度，没有找到为-1</p>\n<p><strong>三、外部变量</strong><br><strong>1） 基本用法</strong><br>awk 中两个特别的表达式，BEGIN和END<br>这两者都可用于pattern中，提供BEGIN和END的作用是给程序赋予 初始状态 和 程序结束 之后执行一些扫尾的工作。<br>a） 任何在BEGIN之后列出的操作（在{}内），将在awk开始扫描输入之前执行<br>b） 任何在END之后列出的操作，将在扫描完全部的输入之后执行<br>因此，通常使用BEGIN来显示变量和初始化变量，使用END来输出最终结果。<br>示例： echo ‘awk test’ | awk ‘BEGIN{print “start….”} {print $0} END{print “end….”}’<br>结果：<br>start….<br>awk test<br>end….<br><strong>2） 获取外部变量</strong><br>格式如： awk ‘{action}’ 变量名=变量值 ，这样传入变量可以在action中获得值。<br>示例：<br>test=’awk test’<br>echo | awk  ‘{print test}’ test=”$test”<br>结果： awk test<br>echo | awk  test=”$test” ‘{print test}’<br>结果： awk: cmd. line:1: fatal: cannot open file ‘{print test}’ for reading (No such file or directory)<br>注：变量名与值放到’{action}’后面，即 test=”$test” 在 print 后面</p>\n<p><strong>3） BEGIN程序块中变量</strong><br>格式如：awk –v 变量名=变量值 [–v 变量2=值2 …] ‘BEGIN{action}’<br>示例：<br>test=’awk test’<br>echo | awk -v test=”$test” ‘BEGIN{print test}’<br>结果： awk test<br>echo | awk -v test=”$test” ‘{print test}’<br>结果： awk test<br>注：用-v 传入变量，可以在3中类型的action 中都可以获得到，但顺序在 action前面</p>\n<p><strong>4） 外部环境变量</strong><br>awk  ‘BEGIN{for (i in ENVIRON) {print i”=”ENVIRON[i];}}’<br>结果：<br>HLVL=1<br>PWD=/home/homer<br>JAVA_HOME=/home/homer/eclipse/jdk1.7.0_05<br>SHELL=/bin/bash<br>PATH=/home/homer/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games<br>……….<br>注：  ENVIRON是子典型数组，可以通过对应键值获得它的值，linux 环境变量还有HOME，<em>H<strong>O</strong>M**E</em>，PWD等，可以通过linux 命令 env 查看</p>\n","site":{"data":{}},"excerpt":"","more":"<p><strong><a href=\"https://www.oschina.net/action/GoToLink?url=http://en.wikipedia.org/wiki/Awk\">awk</a></strong> 是一门非常优秀的文本处理工具，甚至可以上升作为一门程序设计语言。<br>它处理文本的速度是快得惊人的，现在很多基于shell 日志分析工具都可以用它完成。特点是设计简单，速度表现很好，本文将介绍awk内置变量。<br>格式： awk [ -F re] [parameter…] [‘pattern {action}’ ] [-f progfile][in_file…]</p>\n<p><strong>一、内置变量</strong></p>\n<table>\n<thead>\n<tr>\n<th><strong>属 性</strong></th>\n<th><strong>说 明</strong></th>\n</tr>\n</thead>\n<tbody><tr>\n<td>$0</td>\n<td>当前记录行，代表一行记录</td>\n</tr>\n<tr>\n<td>1~1 n</td>\n<td>当前记录的第n个字段，字段间由FS分隔</td>\n</tr>\n<tr>\n<td>FS</td>\n<td>输入字段分隔符，默认是空格</td>\n</tr>\n<tr>\n<td>NF</td>\n<td>当前记录中的字段个数，就是有多少列，一般取最后一列字段</td>\n</tr>\n<tr>\n<td>NR</td>\n<td>已经读出的记录数，就是行号，从1开始</td>\n</tr>\n<tr>\n<td>RS</td>\n<td>输入的记录分隔符，默认为换行符</td>\n</tr>\n<tr>\n<td>OFS</td>\n<td>输出字段分隔符，默是空格</td>\n</tr>\n<tr>\n<td>ORS</td>\n<td>输出的记录分隔符，默认为换行符</td>\n</tr>\n<tr>\n<td>ARGC</td>\n<td>命令行参数个数</td>\n</tr>\n<tr>\n<td>ARGV</td>\n<td>命令行参数数组</td>\n</tr>\n<tr>\n<td>FILENAME</td>\n<td>当前输入文件的名字</td>\n</tr>\n<tr>\n<td>IGNORECASE</td>\n<td>如果为真，则进行忽略大小写的匹配</td>\n</tr>\n<tr>\n<td>ARGIND</td>\n<td>当前被处理文件的ARGV标志符</td>\n</tr>\n<tr>\n<td>CONVFMT</td>\n<td>数字转换格式 %.6g</td>\n</tr>\n<tr>\n<td>ENVIRON</td>\n<td>UNIX环境变量</td>\n</tr>\n<tr>\n<td>ERRNO</td>\n<td>UNIX系统错误消息</td>\n</tr>\n<tr>\n<td>FIELDWIDTHS</td>\n<td>输入字段宽度的空白分隔字符串</td>\n</tr>\n<tr>\n<td>FNR</td>\n<td>当前记录数</td>\n</tr>\n<tr>\n<td>OFMT</td>\n<td>数字的输出格式 %.6g</td>\n</tr>\n<tr>\n<td>RSTART</td>\n<td>被匹配函数匹配的字符串首</td>\n</tr>\n<tr>\n<td>RLENGTH</td>\n<td>被匹配函数匹配的字符串长度</td>\n</tr>\n<tr>\n<td>SUBSEP</td>\n<td>\\034</td>\n</tr>\n</tbody></table>\n<h3 id=\"Built-in-variables\"><a href=\"#Built-in-variables\" class=\"headerlink\" title=\"Built-in variables\"></a>Built-in variables</h3><p>Awk’s built-in variables include the field variables: 1,1,2, 3, and so on (3,<em>a<strong>n</strong>d<strong>s</strong>o<strong>o</strong>n</em>(0 represents the entire record). They hold the text or values in the individual text-fields in a record.</p>\n<p>Other variables include:</p>\n<ul>\n<li>NR: Keeps a current count of the number of input records.</li>\n<li>NF: Keeps a count of the number of fields in an input record. The last field in the input record can be designated by $NF.</li>\n<li>FS: Contains the “field separator” character used to divide fields on the input record. The default, “white space”, includes any space and tab characters. FS can be reassigned to another character to change the field separator.</li>\n<li>RS: Stores the current “record separator” character. Since, by default, an input line is the input record, the default record separator character is a “newline”.</li>\n<li>OFS: Stores the “output field separator”, which separates the fields when Awk prints them. The default is a “space” character.</li>\n<li>ORS: Stores the “output record separator”, which separates the output records when Awk prints them. The default is a “newline” character.</li>\n<li>OFMT: Stores the format for numeric output. The default format is “%.6g”.</li>\n<li>FILENAME: Contains the name of the current input-file.</li>\n</ul>\n<p><strong>二、 变量实例</strong><br><strong>1） 常用操作</strong><br>awk ‘/^root/ {print $0}’ /etc/passwd<br>结果： root:x:0:0:root:/root:/bin/bash            # /^root/ 为正则过滤表达式，$0代表是逐行</p>\n<p><strong>2） FS 分隔符</strong><br>awk ‘BEGIN{FS=”:”} /^root/ {print 1,1,NF}’ /etc/passwd<br>结果： root /bin/bash<br>注： FS为字段分隔符，默认是空格。因为passwd里是”:”分隔，所以需要修改默认分隔符。NF是字段总数，0代表当前行记录，0代表当前行记录，1-n是当前行各个字段对应值，<em>n</em>是当前行各个字段对应值，NF代表最后一列。</p>\n<p><strong>3）</strong> <strong>记录条数</strong>（NR，FNR）<br>awk ‘BEGIN{FS=”:”}{print NR, 1,1,NF, “\\t”, $0}’ /etc/passwd<br>结果：<br>1 root /bin/bash  root:x:0:0:root:/root:/bin/bash<br>2 daemon /bin/sh  daemon:x:1:1:daemon:/usr/sbin:/bin/sh<br>3 bin /bin/sh  bin:x:2:2:bin:/bin:/bin/sh<br>4 sys /bin/sh  sys:x:3:3:sys:/dev:/bin/sh<br>5 sync /bin/sync  sync:x:4:65534:sync:/bin:/bin/sync</p>\n<p>……..</p>\n<p>awk ‘BEGIN{FS=”:”}/^s/{print NR, 1,1,NF, “\\t”, $0}’ /etc/passwd          # 过滤以首字符”s“开头的所有行<br>结果：<br>4 sys /bin/sh  sys:x:3:3:sys:/dev:/bin/sh<br>5 sync /bin/sync  sync:x:4:65534:sync:/bin:/bin/sync<br>20 syslog /bin/false  syslog:x:101:103::/home/syslog:/bin/false<br>……..<br>注： NR得到当前记录所在行</p>\n<p><strong>4） 字段分隔符</strong>（OFS）<br>awk ‘BEGIN{FS=”:”; OFS=”##”} /^root/ {print FNR, 1,1,NF}’ /etc/passwd<br>结果： 1##root##/bin/bash<br>注： OFS设置默认字段分隔符， FNR当前记录行</p>\n<p><strong>5） 行记录分隔符</strong>（ORS）<br>awk ‘BEGIN{FS=”:”; ORS=”##”}{print FNR, 1,1,NF}’ /etc/passwd<br>结果： 1 root /bin/bash##2 daemon /bin/sh##3 bin /bin/sh##4 sys /bin/sh##5 sync /bin/sync##……<br>awk ‘BEGIN{FS=”:”; ORS=”\\n”}{print FNR, 1,1,NF}’ /etc/passwd          #   “/n” 是linux 中换行符<br>结果：<br>1 root /bin/bash<br>2 daemon /bin/sh<br>3 bin /bin/sh<br>4 sys /bin/sh<br>5 sync /bin/sync<br>…….<br>注： ORS默认是换行符，这里修改为：”##”，所有行之间用”##”分隔了</p>\n<p><strong>6） 参数获取</strong>（ARGC ，ARGV）<br>awk ‘BEGIN{FS=”:”; print “ARGC=”ARGC; for(k in ARGV) {print k”=”ARGV[k];}}’ /etc/passwd<br>结果：<br>ARGC=2<br>0=awk<br>1=/etc/passwd<br>注： ARGC得到所有输入参数个数，ARGV获得输入参数内容是一个数组</p>\n<p><strong>7） 获得传入的文件名</strong>（FILENAME）</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">awk &#x27;BEGIN&#123;FS=&quot;:&quot;;&#125;/^r/ &#123;print FILENAME, &quot;\\t&quot;, $0&#125;&#x27; /etc/passwd</span><br></pre></td></tr></table></figure>\n<p>结果：<br>/etc/passwd  root:x:0:0:root:/root:/bin/bash<br>/etc/passwd  rtkit:x:110:117:RealtimeKit,,,:/proc:/bin/false<br>注： FILENAME, 0-0−N,NF 不能使用在BEGIN中，BEGIN中不能获得任何与文件记录操作的变量</p>\n<p><strong>8） 获得linux环境变量</strong>（ENVIRON）<br>awk ‘BEGIN{print ENVIRON[“PATH”];}’ /etc/passwd<br>结果： <code>/home/homer/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games</code><br>注：  ENVIRON是子典型数组，可以通过对应键值获得它的值，linux 环境变量还有HOME，<code>*H**O**M**E*</code>，PWD等，可以通过linux 命令 env 查看</p>\n<p><strong>9） 输出数据格式设置</strong>（OFMT）<br>awk ‘BEGIN{OFMT=”%.3f”; print 1, 2.0, 3.1, 2/3, 123.11111111;}’ /etc/passwd<br>结果： 1   2   3.100   0.667   123.111<br>注： OFMT默认输出格式是：%.6g 保留六位小数，这里修改OFMT会修改默认数据输出格式，如保留三位小数</p>\n<p><strong>10） 按宽度指定分隔符</strong>（FIELDWIDTHS）<br>echo 20130108122448 | awk ‘BEGIN{FIELDWIDTHS=”4 2 2 2 2 3”}{print 1”-“1”−”2”-“3,3,4”:”5”:”5”:”6}’<br>结果： 2013-01-08 12:24:48<br>注： FIELDWIDTHS其格式为空格分隔的一串数字，用以对记录进行域的分隔，FIELDWIDTHS=”4 2 2 2 2 2”就表示1宽度是4，1宽度是4，2是2，$3是2 …. 这个时候会忽略FS分隔符</p>\n<p><strong>11） RSTART，RLENGTH使用</strong><br>awk ‘BEGIN{start=match(“this is 1 teststr”, /[a-z]+$/); print start, RSTART, RLENGTH }’<br>结果： 11 11 7<br>awk ‘BEGIN{start=match(“this is a test”,/^[a-z ]+$/); print start, RSTART, RLENGTH }’<br>结果： 0 0 -1<br>awk ‘BEGIN{start=match(“this is a test”,/^[a-z ]+$/); print start, RSTART, RLENGTH }’<br>结果： 1 1 14         # 增加了一个空格“ ”匹配<br>注： RSTART 被匹配正则表达式首位置，RLENGTH 匹配字符长度，没有找到为-1</p>\n<p><strong>三、外部变量</strong><br><strong>1） 基本用法</strong><br>awk 中两个特别的表达式，BEGIN和END<br>这两者都可用于pattern中，提供BEGIN和END的作用是给程序赋予 初始状态 和 程序结束 之后执行一些扫尾的工作。<br>a） 任何在BEGIN之后列出的操作（在{}内），将在awk开始扫描输入之前执行<br>b） 任何在END之后列出的操作，将在扫描完全部的输入之后执行<br>因此，通常使用BEGIN来显示变量和初始化变量，使用END来输出最终结果。<br>示例： echo ‘awk test’ | awk ‘BEGIN{print “start….”} {print $0} END{print “end….”}’<br>结果：<br>start….<br>awk test<br>end….<br><strong>2） 获取外部变量</strong><br>格式如： awk ‘{action}’ 变量名=变量值 ，这样传入变量可以在action中获得值。<br>示例：<br>test=’awk test’<br>echo | awk  ‘{print test}’ test=”$test”<br>结果： awk test<br>echo | awk  test=”$test” ‘{print test}’<br>结果： awk: cmd. line:1: fatal: cannot open file ‘{print test}’ for reading (No such file or directory)<br>注：变量名与值放到’{action}’后面，即 test=”$test” 在 print 后面</p>\n<p><strong>3） BEGIN程序块中变量</strong><br>格式如：awk –v 变量名=变量值 [–v 变量2=值2 …] ‘BEGIN{action}’<br>示例：<br>test=’awk test’<br>echo | awk -v test=”$test” ‘BEGIN{print test}’<br>结果： awk test<br>echo | awk -v test=”$test” ‘{print test}’<br>结果： awk test<br>注：用-v 传入变量，可以在3中类型的action 中都可以获得到，但顺序在 action前面</p>\n<p><strong>4） 外部环境变量</strong><br>awk  ‘BEGIN{for (i in ENVIRON) {print i”=”ENVIRON[i];}}’<br>结果：<br>HLVL=1<br>PWD=/home/homer<br>JAVA_HOME=/home/homer/eclipse/jdk1.7.0_05<br>SHELL=/bin/bash<br>PATH=/home/homer/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games<br>……….<br>注：  ENVIRON是子典型数组，可以通过对应键值获得它的值，linux 环境变量还有HOME，<em>H<strong>O</strong>M**E</em>，PWD等，可以通过linux 命令 env 查看</p>\n"},{"title":"hexo命令说明","date":"2021-07-28T04:27:05.000Z","description":"hexo 搭建博客命令收集备忘","_content":"\n安装：\n```bash\nsudo npm install -g hexo hexo-cli\n```\n\n创建并初始化\n```bash\nmkdir -p ~/myappWeb && cd ~/myappWeb\nhexo init # 初始化\nnpm install # 安装组件\nnpm install hexo-deployer-git --save #git 部署插件\n```\n\n配置SSH key\n```bash\n$ cd ~/. ssh #检查本机已存在的ssh密钥\nssh-keygen -t rsa -C \"GitHub 邮箱\"\n```\n\n进入部署目录设置git递交信息\n```bash\n$ cd .deploy_git\n$ git config user.name \"liuxianan\"// 你的github⽤户名，⾮昵称\n$ git config user.email \" xxx@qq.com \"// \"// 填写你的github注册邮箱\n```\n\n测试是否成功\n```bash\n$ ssh -T git@github.com # # 注意邮箱地址不⽤改\n```\n\n常见命令：\n```bash\n$ hexo new \"postName\" #新建⽂章\n$ hexo new page \"pageName\" #新建⻚⾯\n$ hexo generate #⽣⽣成成静静态态⻚⾯⻚⾯⾄⾄public public⽬⽬录录\n$ hexo server #开启预览访问端⼝（默认端⼝4000，，'ctrl + c'关闭server）\n$ hexo deploy #部署到GitHub\n$ hexo help # 查看帮助\n$ hexo version #查看Hexo的版本\n$ hexo clean #清楚\n```\n\n缩写：\n```bash\n$ hexo n == hexo new\n$ hexo g == hexo generate\n$ hexo s == hexo server\n$ hexo d == hexo deploy\n```\n\n组合命令：\n```bash\nhexo s -g #⽣成并本地预览\nhexo d -g #⽣成并上传\n```\n\n新建⽂章：\n```bash\nhexo new \"JsonFormatTool\" \nhexo new \"swagger2word\"\nhexo new \"Lockbox\"\nhexo new \"Arthas安装使用\"\nhexo new \"awk命令使用介绍\"\n\n#Java 诊断工具 Arthas 入门教程\n#文章拷贝来源：https://start.aliyun.com/course?spm=a2ck6.17690074.0.0.28bc2e7dHTphXs&id=qDlgqpBT\nhexo new \"Arthas 基础教程\"\nhexo new \"Arthas 进阶\"\n\n#Java 诊断工具 Arthas 最佳实践\n#文章拷贝来源：https://start.aliyun.com/course?spm=a2ck6.17690074.0.0.28bc2e7dHTphXs&id=PaiFAkJM\nhexo new \"Arthas后台异步任务案例\"\nhexo new \"学习Arthasarthas-boot支持的参数案例\"\nhexo new \"学习Arthasclassloader案例\"\nhexo new \"Arthas获取Spring上下文案例\"\nhexo new \"Arthas排查HTTP请求返回401案例\"\nhexo new \"Arthas排查HTTP请求返回404案例\"\nhexo new \"ArthasHttpAPI案例\"\nhexo new \"Arthas热更新代码案例\"\nhexo new \"Arthas排查logger冲突问题案例\"\nhexo new \"Arthas执行结果存日志案例\"\nhexo new \"Arthas查找TopN线程案例\"\nhexo new \"Arthas排查函数调用异常案例\"\nhexo new \"ArthasWebConsole案例\"\nhexo new \"Arthas动态更新应用LoggerLevel案例\"\n\n\n#Java 诊断工具 Arthas 高级命令教程\n#文章拷贝来源：https://start.aliyun.com/course?spm=a2ck6.17690074.0.0.28bc2e7dHTphXs&id=W52ZYGKJ\nhexo new \"Arthasvmoption命令\"\nhexo new \"Arthasthread命令\"\nhexo new \"Arthassysenv命令\"\nhexo new \"Arthassysprop命令\"\nhexo new \"Arthasognl命令\"\nhexo new \"Arthasperfcounter命令\"\nhexo new \"Arthaslogger命令\"\nhexo new \"Arthasmbean命令\"\nhexo new \"Arthasjvm命令\"\nhexo new \"Arthasheapdump命令\"\nhexo new \"Arthasdashboard命令\"\nhexo new \"Arthasgetstatic命令\"\nhexo new \"Arthastt命令\"\nhexo new \"Arthaswatch命令\"\nhexo new \"Arthastrace命令\"\nhexo new \"Arthasstack命令\"\nhexo new \"Arthasprofiler命令\"\nhexo new \"Arthasmonitor命令\"\nhexo new \"Arthasmc-retransform命令\"\nhexo new \"Arthassm命令\"\nhexo new \"Arthassc命令\"\nhexo new \"Arthasmc-redefine命令\"\nhexo new \"Arthasjad命令\"\nhexo new \"Arthasdump命令\"\nhexo new \"Arthasclassloader命令\"\n\n\n```\n\n新建⻚⾯:\n```bash\nhexo new page \"个人作品展示\"\n```\n\n# 文字里面添加图片\n> 在`_config.yml`配置文件中，修改为 `post_asset_folder: true` 网站切割域名路径前缀位置 `post_asset_folder_position_length: 4`\n```bash\nnpm install https://github.com/ai930/hexo-asset-image --save\n```\n> 此时再执行命令 `hexo n article_name` 创建新的文章，在 `source/_posts` 中会生成文章 `post_name.md` 和同名文件夹 post_name,我们将文章中所使用到的将图片资源均放在 post_name 中，这时就可以在文章中使用相对路径引用图片资源了\n`![img_name](img_name.jpg) #文章中的图片资源路径格式`\n\n\n# 给文章添加目录\n安装\n```bash\nnpm install hexo-toc --save\n```\n使用方法跟显示文章摘要类似，在Markdown中需要显示文章目录的地方添加 `<!-- toc -->`\n在博客根目录下的 `_config.yml` 中如下配置：\n```yaml\ntoc:\n  maxDepth: 3\n```\n`maxDepth` 表示目录深度为3，即最多生成三级目录。\n找到主题下的文章模版，我的是`themes\\yilia\\layout\\_partial\\article.ejs`。\n在其末尾增加代码：\n```html\n<% if (!index && theme.toc){ %>\n<script>\n  var tocEx = function(el){\n    var toc = document.querySelector(el), content = toc.innerHTML;\n    content = content.replace('<!-- toc -->', '<div class=\"toc\">').replace('<!-- tocstop -->', '</div>');\n    toc.innerHTML = content;\n  }('.article-entry');\n</script>\n<% } %>\n<style>\n.toc {\n  float: right;\n  margin-left: 40px;\n  padding: 10px 20px;\n  background: #f1f1f1;\n  border-radius: 10px;\n  box-shadow: 0 0 3px #bbb;\n}\n</style>\n```\n","source":"_posts/hexo命令说明.md","raw":"---\ntitle: hexo命令说明 #⽂章⻚⾯上的显示名称，⼀般是中⽂\ndate: 2021-07-28 12:27:05 #⽂章⽣成时间，⼀般不改，当然也可以任意修改\ncategories: [默认分类,技术笔记] #分类\ntags: [技术笔记,hexo,随笔] #⽂章标签，可空，多标签请⽤格式，注意:后⾯有个空格\ndescription: hexo 搭建博客命令收集备忘\n---\n\n安装：\n```bash\nsudo npm install -g hexo hexo-cli\n```\n\n创建并初始化\n```bash\nmkdir -p ~/myappWeb && cd ~/myappWeb\nhexo init # 初始化\nnpm install # 安装组件\nnpm install hexo-deployer-git --save #git 部署插件\n```\n\n配置SSH key\n```bash\n$ cd ~/. ssh #检查本机已存在的ssh密钥\nssh-keygen -t rsa -C \"GitHub 邮箱\"\n```\n\n进入部署目录设置git递交信息\n```bash\n$ cd .deploy_git\n$ git config user.name \"liuxianan\"// 你的github⽤户名，⾮昵称\n$ git config user.email \" xxx@qq.com \"// \"// 填写你的github注册邮箱\n```\n\n测试是否成功\n```bash\n$ ssh -T git@github.com # # 注意邮箱地址不⽤改\n```\n\n常见命令：\n```bash\n$ hexo new \"postName\" #新建⽂章\n$ hexo new page \"pageName\" #新建⻚⾯\n$ hexo generate #⽣⽣成成静静态态⻚⾯⻚⾯⾄⾄public public⽬⽬录录\n$ hexo server #开启预览访问端⼝（默认端⼝4000，，'ctrl + c'关闭server）\n$ hexo deploy #部署到GitHub\n$ hexo help # 查看帮助\n$ hexo version #查看Hexo的版本\n$ hexo clean #清楚\n```\n\n缩写：\n```bash\n$ hexo n == hexo new\n$ hexo g == hexo generate\n$ hexo s == hexo server\n$ hexo d == hexo deploy\n```\n\n组合命令：\n```bash\nhexo s -g #⽣成并本地预览\nhexo d -g #⽣成并上传\n```\n\n新建⽂章：\n```bash\nhexo new \"JsonFormatTool\" \nhexo new \"swagger2word\"\nhexo new \"Lockbox\"\nhexo new \"Arthas安装使用\"\nhexo new \"awk命令使用介绍\"\n\n#Java 诊断工具 Arthas 入门教程\n#文章拷贝来源：https://start.aliyun.com/course?spm=a2ck6.17690074.0.0.28bc2e7dHTphXs&id=qDlgqpBT\nhexo new \"Arthas 基础教程\"\nhexo new \"Arthas 进阶\"\n\n#Java 诊断工具 Arthas 最佳实践\n#文章拷贝来源：https://start.aliyun.com/course?spm=a2ck6.17690074.0.0.28bc2e7dHTphXs&id=PaiFAkJM\nhexo new \"Arthas后台异步任务案例\"\nhexo new \"学习Arthasarthas-boot支持的参数案例\"\nhexo new \"学习Arthasclassloader案例\"\nhexo new \"Arthas获取Spring上下文案例\"\nhexo new \"Arthas排查HTTP请求返回401案例\"\nhexo new \"Arthas排查HTTP请求返回404案例\"\nhexo new \"ArthasHttpAPI案例\"\nhexo new \"Arthas热更新代码案例\"\nhexo new \"Arthas排查logger冲突问题案例\"\nhexo new \"Arthas执行结果存日志案例\"\nhexo new \"Arthas查找TopN线程案例\"\nhexo new \"Arthas排查函数调用异常案例\"\nhexo new \"ArthasWebConsole案例\"\nhexo new \"Arthas动态更新应用LoggerLevel案例\"\n\n\n#Java 诊断工具 Arthas 高级命令教程\n#文章拷贝来源：https://start.aliyun.com/course?spm=a2ck6.17690074.0.0.28bc2e7dHTphXs&id=W52ZYGKJ\nhexo new \"Arthasvmoption命令\"\nhexo new \"Arthasthread命令\"\nhexo new \"Arthassysenv命令\"\nhexo new \"Arthassysprop命令\"\nhexo new \"Arthasognl命令\"\nhexo new \"Arthasperfcounter命令\"\nhexo new \"Arthaslogger命令\"\nhexo new \"Arthasmbean命令\"\nhexo new \"Arthasjvm命令\"\nhexo new \"Arthasheapdump命令\"\nhexo new \"Arthasdashboard命令\"\nhexo new \"Arthasgetstatic命令\"\nhexo new \"Arthastt命令\"\nhexo new \"Arthaswatch命令\"\nhexo new \"Arthastrace命令\"\nhexo new \"Arthasstack命令\"\nhexo new \"Arthasprofiler命令\"\nhexo new \"Arthasmonitor命令\"\nhexo new \"Arthasmc-retransform命令\"\nhexo new \"Arthassm命令\"\nhexo new \"Arthassc命令\"\nhexo new \"Arthasmc-redefine命令\"\nhexo new \"Arthasjad命令\"\nhexo new \"Arthasdump命令\"\nhexo new \"Arthasclassloader命令\"\n\n\n```\n\n新建⻚⾯:\n```bash\nhexo new page \"个人作品展示\"\n```\n\n# 文字里面添加图片\n> 在`_config.yml`配置文件中，修改为 `post_asset_folder: true` 网站切割域名路径前缀位置 `post_asset_folder_position_length: 4`\n```bash\nnpm install https://github.com/ai930/hexo-asset-image --save\n```\n> 此时再执行命令 `hexo n article_name` 创建新的文章，在 `source/_posts` 中会生成文章 `post_name.md` 和同名文件夹 post_name,我们将文章中所使用到的将图片资源均放在 post_name 中，这时就可以在文章中使用相对路径引用图片资源了\n`![img_name](img_name.jpg) #文章中的图片资源路径格式`\n\n\n# 给文章添加目录\n安装\n```bash\nnpm install hexo-toc --save\n```\n使用方法跟显示文章摘要类似，在Markdown中需要显示文章目录的地方添加 `<!-- toc -->`\n在博客根目录下的 `_config.yml` 中如下配置：\n```yaml\ntoc:\n  maxDepth: 3\n```\n`maxDepth` 表示目录深度为3，即最多生成三级目录。\n找到主题下的文章模版，我的是`themes\\yilia\\layout\\_partial\\article.ejs`。\n在其末尾增加代码：\n```html\n<% if (!index && theme.toc){ %>\n<script>\n  var tocEx = function(el){\n    var toc = document.querySelector(el), content = toc.innerHTML;\n    content = content.replace('<!-- toc -->', '<div class=\"toc\">').replace('<!-- tocstop -->', '</div>');\n    toc.innerHTML = content;\n  }('.article-entry');\n</script>\n<% } %>\n<style>\n.toc {\n  float: right;\n  margin-left: 40px;\n  padding: 10px 20px;\n  background: #f1f1f1;\n  border-radius: 10px;\n  box-shadow: 0 0 3px #bbb;\n}\n</style>\n```\n","slug":"hexo命令说明","published":1,"updated":"2021-08-07T05:30:15.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cks1cgr5c0009fw5ihp29dzzj","content":"<p>安装：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo npm install -g hexo hexo-cli</span><br></pre></td></tr></table></figure>\n\n<p>创建并初始化</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mkdir -p ~/myappWeb &amp;&amp; <span class=\"built_in\">cd</span> ~/myappWeb</span><br><span class=\"line\">hexo init <span class=\"comment\"># 初始化</span></span><br><span class=\"line\">npm install <span class=\"comment\"># 安装组件</span></span><br><span class=\"line\">npm install hexo-deployer-git --save <span class=\"comment\">#git 部署插件</span></span><br></pre></td></tr></table></figure>\n\n<p>配置SSH key</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ <span class=\"built_in\">cd</span> ~/. ssh <span class=\"comment\">#检查本机已存在的ssh密钥</span></span><br><span class=\"line\">ssh-keygen -t rsa -C <span class=\"string\">&quot;GitHub 邮箱&quot;</span></span><br></pre></td></tr></table></figure>\n\n<p>进入部署目录设置git递交信息</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ <span class=\"built_in\">cd</span> .deploy_git</span><br><span class=\"line\">$ git config user.name <span class=\"string\">&quot;liuxianan&quot;</span>// 你的github⽤户名，⾮昵称</span><br><span class=\"line\">$ git config user.email <span class=\"string\">&quot; xxx@qq.com &quot;</span>// <span class=\"string\">&quot;// 填写你的github注册邮箱</span></span><br></pre></td></tr></table></figure>\n\n<p>测试是否成功</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ ssh -T git@github.com <span class=\"comment\"># # 注意邮箱地址不⽤改</span></span><br></pre></td></tr></table></figure>\n\n<p>常见命令：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo new <span class=\"string\">&quot;postName&quot;</span> <span class=\"comment\">#新建⽂章</span></span><br><span class=\"line\">$ hexo new page <span class=\"string\">&quot;pageName&quot;</span> <span class=\"comment\">#新建⻚⾯</span></span><br><span class=\"line\">$ hexo generate <span class=\"comment\">#⽣⽣成成静静态态⻚⾯⻚⾯⾄⾄public public⽬⽬录录</span></span><br><span class=\"line\">$ hexo server <span class=\"comment\">#开启预览访问端⼝（默认端⼝4000，，&#x27;ctrl + c&#x27;关闭server）</span></span><br><span class=\"line\">$ hexo deploy <span class=\"comment\">#部署到GitHub</span></span><br><span class=\"line\">$ hexo <span class=\"built_in\">help</span> <span class=\"comment\"># 查看帮助</span></span><br><span class=\"line\">$ hexo version <span class=\"comment\">#查看Hexo的版本</span></span><br><span class=\"line\">$ hexo clean <span class=\"comment\">#清楚</span></span><br></pre></td></tr></table></figure>\n\n<p>缩写：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo n == hexo new</span><br><span class=\"line\">$ hexo g == hexo generate</span><br><span class=\"line\">$ hexo s == hexo server</span><br><span class=\"line\">$ hexo d == hexo deploy</span><br></pre></td></tr></table></figure>\n\n<p>组合命令：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo s -g <span class=\"comment\">#⽣成并本地预览</span></span><br><span class=\"line\">hexo d -g <span class=\"comment\">#⽣成并上传</span></span><br></pre></td></tr></table></figure>\n\n<p>新建⽂章：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo new <span class=\"string\">&quot;JsonFormatTool&quot;</span> </span><br><span class=\"line\">hexo new <span class=\"string\">&quot;swagger2word&quot;</span></span><br><span class=\"line\">hexo new <span class=\"string\">&quot;Lockbox&quot;</span></span><br><span class=\"line\">hexo new <span class=\"string\">&quot;Arthas安装使用&quot;</span></span><br><span class=\"line\">hexo new <span class=\"string\">&quot;awk命令使用介绍&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#Java 诊断工具 Arthas 入门教程</span></span><br><span class=\"line\"><span class=\"comment\">#文章拷贝来源：https://start.aliyun.com/course?spm=a2ck6.17690074.0.0.28bc2e7dHTphXs&amp;id=qDlgqpBT</span></span><br><span class=\"line\">hexo new <span class=\"string\">&quot;Arthas 基础教程&quot;</span></span><br><span class=\"line\">hexo new <span class=\"string\">&quot;Arthas 进阶&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#Java 诊断工具 Arthas 最佳实践</span></span><br><span class=\"line\"><span class=\"comment\">#文章拷贝来源：https://start.aliyun.com/course?spm=a2ck6.17690074.0.0.28bc2e7dHTphXs&amp;id=PaiFAkJM</span></span><br><span class=\"line\">hexo new <span class=\"string\">&quot;Arthas后台异步任务案例&quot;</span></span><br><span class=\"line\">hexo new <span class=\"string\">&quot;学习Arthasarthas-boot支持的参数案例&quot;</span></span><br><span class=\"line\">hexo new <span class=\"string\">&quot;学习Arthasclassloader案例&quot;</span></span><br><span class=\"line\">hexo new <span class=\"string\">&quot;Arthas获取Spring上下文案例&quot;</span></span><br><span class=\"line\">hexo new <span class=\"string\">&quot;Arthas排查HTTP请求返回401案例&quot;</span></span><br><span class=\"line\">hexo new <span class=\"string\">&quot;Arthas排查HTTP请求返回404案例&quot;</span></span><br><span class=\"line\">hexo new <span class=\"string\">&quot;ArthasHttpAPI案例&quot;</span></span><br><span class=\"line\">hexo new <span class=\"string\">&quot;Arthas热更新代码案例&quot;</span></span><br><span class=\"line\">hexo new <span class=\"string\">&quot;Arthas排查logger冲突问题案例&quot;</span></span><br><span class=\"line\">hexo new <span class=\"string\">&quot;Arthas执行结果存日志案例&quot;</span></span><br><span class=\"line\">hexo new <span class=\"string\">&quot;Arthas查找TopN线程案例&quot;</span></span><br><span class=\"line\">hexo new <span class=\"string\">&quot;Arthas排查函数调用异常案例&quot;</span></span><br><span class=\"line\">hexo new <span class=\"string\">&quot;ArthasWebConsole案例&quot;</span></span><br><span class=\"line\">hexo new <span class=\"string\">&quot;Arthas动态更新应用LoggerLevel案例&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#Java 诊断工具 Arthas 高级命令教程</span></span><br><span class=\"line\"><span class=\"comment\">#文章拷贝来源：https://start.aliyun.com/course?spm=a2ck6.17690074.0.0.28bc2e7dHTphXs&amp;id=W52ZYGKJ</span></span><br><span class=\"line\">hexo new <span class=\"string\">&quot;Arthasvmoption命令&quot;</span></span><br><span class=\"line\">hexo new <span class=\"string\">&quot;Arthasthread命令&quot;</span></span><br><span class=\"line\">hexo new <span class=\"string\">&quot;Arthassysenv命令&quot;</span></span><br><span class=\"line\">hexo new <span class=\"string\">&quot;Arthassysprop命令&quot;</span></span><br><span class=\"line\">hexo new <span class=\"string\">&quot;Arthasognl命令&quot;</span></span><br><span class=\"line\">hexo new <span class=\"string\">&quot;Arthasperfcounter命令&quot;</span></span><br><span class=\"line\">hexo new <span class=\"string\">&quot;Arthaslogger命令&quot;</span></span><br><span class=\"line\">hexo new <span class=\"string\">&quot;Arthasmbean命令&quot;</span></span><br><span class=\"line\">hexo new <span class=\"string\">&quot;Arthasjvm命令&quot;</span></span><br><span class=\"line\">hexo new <span class=\"string\">&quot;Arthasheapdump命令&quot;</span></span><br><span class=\"line\">hexo new <span class=\"string\">&quot;Arthasdashboard命令&quot;</span></span><br><span class=\"line\">hexo new <span class=\"string\">&quot;Arthasgetstatic命令&quot;</span></span><br><span class=\"line\">hexo new <span class=\"string\">&quot;Arthastt命令&quot;</span></span><br><span class=\"line\">hexo new <span class=\"string\">&quot;Arthaswatch命令&quot;</span></span><br><span class=\"line\">hexo new <span class=\"string\">&quot;Arthastrace命令&quot;</span></span><br><span class=\"line\">hexo new <span class=\"string\">&quot;Arthasstack命令&quot;</span></span><br><span class=\"line\">hexo new <span class=\"string\">&quot;Arthasprofiler命令&quot;</span></span><br><span class=\"line\">hexo new <span class=\"string\">&quot;Arthasmonitor命令&quot;</span></span><br><span class=\"line\">hexo new <span class=\"string\">&quot;Arthasmc-retransform命令&quot;</span></span><br><span class=\"line\">hexo new <span class=\"string\">&quot;Arthassm命令&quot;</span></span><br><span class=\"line\">hexo new <span class=\"string\">&quot;Arthassc命令&quot;</span></span><br><span class=\"line\">hexo new <span class=\"string\">&quot;Arthasmc-redefine命令&quot;</span></span><br><span class=\"line\">hexo new <span class=\"string\">&quot;Arthasjad命令&quot;</span></span><br><span class=\"line\">hexo new <span class=\"string\">&quot;Arthasdump命令&quot;</span></span><br><span class=\"line\">hexo new <span class=\"string\">&quot;Arthasclassloader命令&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>新建⻚⾯:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo new page <span class=\"string\">&quot;个人作品展示&quot;</span></span><br></pre></td></tr></table></figure>\n\n<h1><span id=\"文字里面添加图片\">文字里面添加图片</span></h1><blockquote>\n<p>在<code>_config.yml</code>配置文件中，修改为 <code>post_asset_folder: true</code> 网站切割域名路径前缀位置 <code>post_asset_folder_position_length: 4</code></p>\n</blockquote>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install https://github.com/ai930/hexo-asset-image --save</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>此时再执行命令 <code>hexo n article_name</code> 创建新的文章，在 <code>source/_posts</code> 中会生成文章 <code>post_name.md</code> 和同名文件夹 post_name,我们将文章中所使用到的将图片资源均放在 post_name 中，这时就可以在文章中使用相对路径引用图片资源了<br><code>![img_name](img_name.jpg) #文章中的图片资源路径格式</code></p>\n</blockquote>\n<h1><span id=\"给文章添加目录\">给文章添加目录</span></h1><p>安装</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install hexo-toc --save</span><br></pre></td></tr></table></figure>\n<p>使用方法跟显示文章摘要类似，在Markdown中需要显示文章目录的地方添加 `</p>\n<!-- toc -->\n\n\n\n<!-- tocstop -->\n\n<p><code>在博客根目录下的</code>_config.yml` 中如下配置：</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">toc:</span></span><br><span class=\"line\">  <span class=\"attr\">maxDepth:</span> <span class=\"number\">3</span></span><br></pre></td></tr></table></figure>\n<p><code>maxDepth</code> 表示目录深度为3，即最多生成三级目录。<br>找到主题下的文章模版，我的是<code>themes\\yilia\\layout\\_partial\\article.ejs</code>。<br>在其末尾增加代码：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;% if (!index &amp;&amp; theme.toc)&#123; %&gt;</span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"handlebars\"><span class=\"xml\"></span></span></span><br><span class=\"line\"><span class=\"xml\"><span class=\"handlebars\">  var tocEx = function(el)&#123;</span></span></span><br><span class=\"line\"><span class=\"xml\"><span class=\"handlebars\">    var toc = document.querySelector(el), content = toc.innerHTML;</span></span></span><br><span class=\"line\"><span class=\"xml\"><span class=\"handlebars\">    content = content.replace(&#x27;<span class=\"comment\">&lt;!-- toc --&gt;</span>&#x27;, &#x27;<span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;toc&quot;</span>&gt;</span>&#x27;).replace(&#x27;<span class=\"comment\">&lt;!-- tocstop --&gt;</span>&#x27;, &#x27;<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span>&#x27;);</span></span></span><br><span class=\"line\"><span class=\"xml\"><span class=\"handlebars\">    toc.innerHTML = content;</span></span></span><br><span class=\"line\"><span class=\"xml\"><span class=\"handlebars\">  &#125;(&#x27;.article-entry&#x27;);</span></span></span><br><span class=\"line\"><span class=\"xml\"><span class=\"handlebars\"></span></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\">&lt;% &#125; %&gt;</span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">style</span>&gt;</span><span class=\"css\"></span></span><br><span class=\"line\"><span class=\"css\"><span class=\"selector-class\">.toc</span> &#123;</span></span><br><span class=\"line\"><span class=\"css\">  <span class=\"attribute\">float</span>: right;</span></span><br><span class=\"line\"><span class=\"css\">  <span class=\"attribute\">margin-left</span>: <span class=\"number\">40px</span>;</span></span><br><span class=\"line\"><span class=\"css\">  <span class=\"attribute\">padding</span>: <span class=\"number\">10px</span> <span class=\"number\">20px</span>;</span></span><br><span class=\"line\"><span class=\"css\">  <span class=\"attribute\">background</span>: <span class=\"number\">#f1f1f1</span>;</span></span><br><span class=\"line\"><span class=\"css\">  <span class=\"attribute\">border-radius</span>: <span class=\"number\">10px</span>;</span></span><br><span class=\"line\"><span class=\"css\">  <span class=\"attribute\">box-shadow</span>: <span class=\"number\">0</span> <span class=\"number\">0</span> <span class=\"number\">3px</span> <span class=\"number\">#bbb</span>;</span></span><br><span class=\"line\"><span class=\"css\">&#125;</span></span><br><span class=\"line\"><span class=\"css\"></span><span class=\"tag\">&lt;/<span class=\"name\">style</span>&gt;</span></span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<p>安装：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo npm install -g hexo hexo-cli</span><br></pre></td></tr></table></figure>\n\n<p>创建并初始化</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mkdir -p ~/myappWeb &amp;&amp; <span class=\"built_in\">cd</span> ~/myappWeb</span><br><span class=\"line\">hexo init <span class=\"comment\"># 初始化</span></span><br><span class=\"line\">npm install <span class=\"comment\"># 安装组件</span></span><br><span class=\"line\">npm install hexo-deployer-git --save <span class=\"comment\">#git 部署插件</span></span><br></pre></td></tr></table></figure>\n\n<p>配置SSH key</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ <span class=\"built_in\">cd</span> ~/. ssh <span class=\"comment\">#检查本机已存在的ssh密钥</span></span><br><span class=\"line\">ssh-keygen -t rsa -C <span class=\"string\">&quot;GitHub 邮箱&quot;</span></span><br></pre></td></tr></table></figure>\n\n<p>进入部署目录设置git递交信息</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ <span class=\"built_in\">cd</span> .deploy_git</span><br><span class=\"line\">$ git config user.name <span class=\"string\">&quot;liuxianan&quot;</span>// 你的github⽤户名，⾮昵称</span><br><span class=\"line\">$ git config user.email <span class=\"string\">&quot; xxx@qq.com &quot;</span>// <span class=\"string\">&quot;// 填写你的github注册邮箱</span></span><br></pre></td></tr></table></figure>\n\n<p>测试是否成功</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ ssh -T git@github.com <span class=\"comment\"># # 注意邮箱地址不⽤改</span></span><br></pre></td></tr></table></figure>\n\n<p>常见命令：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo new <span class=\"string\">&quot;postName&quot;</span> <span class=\"comment\">#新建⽂章</span></span><br><span class=\"line\">$ hexo new page <span class=\"string\">&quot;pageName&quot;</span> <span class=\"comment\">#新建⻚⾯</span></span><br><span class=\"line\">$ hexo generate <span class=\"comment\">#⽣⽣成成静静态态⻚⾯⻚⾯⾄⾄public public⽬⽬录录</span></span><br><span class=\"line\">$ hexo server <span class=\"comment\">#开启预览访问端⼝（默认端⼝4000，，&#x27;ctrl + c&#x27;关闭server）</span></span><br><span class=\"line\">$ hexo deploy <span class=\"comment\">#部署到GitHub</span></span><br><span class=\"line\">$ hexo <span class=\"built_in\">help</span> <span class=\"comment\"># 查看帮助</span></span><br><span class=\"line\">$ hexo version <span class=\"comment\">#查看Hexo的版本</span></span><br><span class=\"line\">$ hexo clean <span class=\"comment\">#清楚</span></span><br></pre></td></tr></table></figure>\n\n<p>缩写：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo n == hexo new</span><br><span class=\"line\">$ hexo g == hexo generate</span><br><span class=\"line\">$ hexo s == hexo server</span><br><span class=\"line\">$ hexo d == hexo deploy</span><br></pre></td></tr></table></figure>\n\n<p>组合命令：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo s -g <span class=\"comment\">#⽣成并本地预览</span></span><br><span class=\"line\">hexo d -g <span class=\"comment\">#⽣成并上传</span></span><br></pre></td></tr></table></figure>\n\n<p>新建⽂章：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo new <span class=\"string\">&quot;JsonFormatTool&quot;</span> </span><br><span class=\"line\">hexo new <span class=\"string\">&quot;swagger2word&quot;</span></span><br><span class=\"line\">hexo new <span class=\"string\">&quot;Lockbox&quot;</span></span><br><span class=\"line\">hexo new <span class=\"string\">&quot;Arthas安装使用&quot;</span></span><br><span class=\"line\">hexo new <span class=\"string\">&quot;awk命令使用介绍&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#Java 诊断工具 Arthas 入门教程</span></span><br><span class=\"line\"><span class=\"comment\">#文章拷贝来源：https://start.aliyun.com/course?spm=a2ck6.17690074.0.0.28bc2e7dHTphXs&amp;id=qDlgqpBT</span></span><br><span class=\"line\">hexo new <span class=\"string\">&quot;Arthas 基础教程&quot;</span></span><br><span class=\"line\">hexo new <span class=\"string\">&quot;Arthas 进阶&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#Java 诊断工具 Arthas 最佳实践</span></span><br><span class=\"line\"><span class=\"comment\">#文章拷贝来源：https://start.aliyun.com/course?spm=a2ck6.17690074.0.0.28bc2e7dHTphXs&amp;id=PaiFAkJM</span></span><br><span class=\"line\">hexo new <span class=\"string\">&quot;Arthas后台异步任务案例&quot;</span></span><br><span class=\"line\">hexo new <span class=\"string\">&quot;学习Arthasarthas-boot支持的参数案例&quot;</span></span><br><span class=\"line\">hexo new <span class=\"string\">&quot;学习Arthasclassloader案例&quot;</span></span><br><span class=\"line\">hexo new <span class=\"string\">&quot;Arthas获取Spring上下文案例&quot;</span></span><br><span class=\"line\">hexo new <span class=\"string\">&quot;Arthas排查HTTP请求返回401案例&quot;</span></span><br><span class=\"line\">hexo new <span class=\"string\">&quot;Arthas排查HTTP请求返回404案例&quot;</span></span><br><span class=\"line\">hexo new <span class=\"string\">&quot;ArthasHttpAPI案例&quot;</span></span><br><span class=\"line\">hexo new <span class=\"string\">&quot;Arthas热更新代码案例&quot;</span></span><br><span class=\"line\">hexo new <span class=\"string\">&quot;Arthas排查logger冲突问题案例&quot;</span></span><br><span class=\"line\">hexo new <span class=\"string\">&quot;Arthas执行结果存日志案例&quot;</span></span><br><span class=\"line\">hexo new <span class=\"string\">&quot;Arthas查找TopN线程案例&quot;</span></span><br><span class=\"line\">hexo new <span class=\"string\">&quot;Arthas排查函数调用异常案例&quot;</span></span><br><span class=\"line\">hexo new <span class=\"string\">&quot;ArthasWebConsole案例&quot;</span></span><br><span class=\"line\">hexo new <span class=\"string\">&quot;Arthas动态更新应用LoggerLevel案例&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#Java 诊断工具 Arthas 高级命令教程</span></span><br><span class=\"line\"><span class=\"comment\">#文章拷贝来源：https://start.aliyun.com/course?spm=a2ck6.17690074.0.0.28bc2e7dHTphXs&amp;id=W52ZYGKJ</span></span><br><span class=\"line\">hexo new <span class=\"string\">&quot;Arthasvmoption命令&quot;</span></span><br><span class=\"line\">hexo new <span class=\"string\">&quot;Arthasthread命令&quot;</span></span><br><span class=\"line\">hexo new <span class=\"string\">&quot;Arthassysenv命令&quot;</span></span><br><span class=\"line\">hexo new <span class=\"string\">&quot;Arthassysprop命令&quot;</span></span><br><span class=\"line\">hexo new <span class=\"string\">&quot;Arthasognl命令&quot;</span></span><br><span class=\"line\">hexo new <span class=\"string\">&quot;Arthasperfcounter命令&quot;</span></span><br><span class=\"line\">hexo new <span class=\"string\">&quot;Arthaslogger命令&quot;</span></span><br><span class=\"line\">hexo new <span class=\"string\">&quot;Arthasmbean命令&quot;</span></span><br><span class=\"line\">hexo new <span class=\"string\">&quot;Arthasjvm命令&quot;</span></span><br><span class=\"line\">hexo new <span class=\"string\">&quot;Arthasheapdump命令&quot;</span></span><br><span class=\"line\">hexo new <span class=\"string\">&quot;Arthasdashboard命令&quot;</span></span><br><span class=\"line\">hexo new <span class=\"string\">&quot;Arthasgetstatic命令&quot;</span></span><br><span class=\"line\">hexo new <span class=\"string\">&quot;Arthastt命令&quot;</span></span><br><span class=\"line\">hexo new <span class=\"string\">&quot;Arthaswatch命令&quot;</span></span><br><span class=\"line\">hexo new <span class=\"string\">&quot;Arthastrace命令&quot;</span></span><br><span class=\"line\">hexo new <span class=\"string\">&quot;Arthasstack命令&quot;</span></span><br><span class=\"line\">hexo new <span class=\"string\">&quot;Arthasprofiler命令&quot;</span></span><br><span class=\"line\">hexo new <span class=\"string\">&quot;Arthasmonitor命令&quot;</span></span><br><span class=\"line\">hexo new <span class=\"string\">&quot;Arthasmc-retransform命令&quot;</span></span><br><span class=\"line\">hexo new <span class=\"string\">&quot;Arthassm命令&quot;</span></span><br><span class=\"line\">hexo new <span class=\"string\">&quot;Arthassc命令&quot;</span></span><br><span class=\"line\">hexo new <span class=\"string\">&quot;Arthasmc-redefine命令&quot;</span></span><br><span class=\"line\">hexo new <span class=\"string\">&quot;Arthasjad命令&quot;</span></span><br><span class=\"line\">hexo new <span class=\"string\">&quot;Arthasdump命令&quot;</span></span><br><span class=\"line\">hexo new <span class=\"string\">&quot;Arthasclassloader命令&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>新建⻚⾯:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo new page <span class=\"string\">&quot;个人作品展示&quot;</span></span><br></pre></td></tr></table></figure>\n\n<h1 id=\"文字里面添加图片\"><a href=\"#文字里面添加图片\" class=\"headerlink\" title=\"文字里面添加图片\"></a>文字里面添加图片</h1><blockquote>\n<p>在<code>_config.yml</code>配置文件中，修改为 <code>post_asset_folder: true</code> 网站切割域名路径前缀位置 <code>post_asset_folder_position_length: 4</code></p>\n</blockquote>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install https://github.com/ai930/hexo-asset-image --save</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>此时再执行命令 <code>hexo n article_name</code> 创建新的文章，在 <code>source/_posts</code> 中会生成文章 <code>post_name.md</code> 和同名文件夹 post_name,我们将文章中所使用到的将图片资源均放在 post_name 中，这时就可以在文章中使用相对路径引用图片资源了<br><code>![img_name](img_name.jpg) #文章中的图片资源路径格式</code></p>\n</blockquote>\n<h1 id=\"给文章添加目录\"><a href=\"#给文章添加目录\" class=\"headerlink\" title=\"给文章添加目录\"></a>给文章添加目录</h1><p>安装</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install hexo-toc --save</span><br></pre></td></tr></table></figure>\n<p>使用方法跟显示文章摘要类似，在Markdown中需要显示文章目录的地方添加 `</p>\n<!-- toc -->\n\n\n\n<!-- tocstop -->\n\n<p><code>在博客根目录下的</code>_config.yml` 中如下配置：</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">toc:</span></span><br><span class=\"line\">  <span class=\"attr\">maxDepth:</span> <span class=\"number\">3</span></span><br></pre></td></tr></table></figure>\n<p><code>maxDepth</code> 表示目录深度为3，即最多生成三级目录。<br>找到主题下的文章模版，我的是<code>themes\\yilia\\layout\\_partial\\article.ejs</code>。<br>在其末尾增加代码：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;% if (!index &amp;&amp; theme.toc)&#123; %&gt;</span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"handlebars\"><span class=\"xml\"></span></span></span><br><span class=\"line\"><span class=\"xml\"><span class=\"handlebars\">  var tocEx = function(el)&#123;</span></span></span><br><span class=\"line\"><span class=\"xml\"><span class=\"handlebars\">    var toc = document.querySelector(el), content = toc.innerHTML;</span></span></span><br><span class=\"line\"><span class=\"xml\"><span class=\"handlebars\">    content = content.replace(&#x27;<span class=\"comment\">&lt;!-- toc --&gt;</span>&#x27;, &#x27;<span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;toc&quot;</span>&gt;</span>&#x27;).replace(&#x27;<span class=\"comment\">&lt;!-- tocstop --&gt;</span>&#x27;, &#x27;<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span>&#x27;);</span></span></span><br><span class=\"line\"><span class=\"xml\"><span class=\"handlebars\">    toc.innerHTML = content;</span></span></span><br><span class=\"line\"><span class=\"xml\"><span class=\"handlebars\">  &#125;(&#x27;.article-entry&#x27;);</span></span></span><br><span class=\"line\"><span class=\"xml\"><span class=\"handlebars\"></span></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\">&lt;% &#125; %&gt;</span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">style</span>&gt;</span><span class=\"css\"></span></span><br><span class=\"line\"><span class=\"css\"><span class=\"selector-class\">.toc</span> &#123;</span></span><br><span class=\"line\"><span class=\"css\">  <span class=\"attribute\">float</span>: right;</span></span><br><span class=\"line\"><span class=\"css\">  <span class=\"attribute\">margin-left</span>: <span class=\"number\">40px</span>;</span></span><br><span class=\"line\"><span class=\"css\">  <span class=\"attribute\">padding</span>: <span class=\"number\">10px</span> <span class=\"number\">20px</span>;</span></span><br><span class=\"line\"><span class=\"css\">  <span class=\"attribute\">background</span>: <span class=\"number\">#f1f1f1</span>;</span></span><br><span class=\"line\"><span class=\"css\">  <span class=\"attribute\">border-radius</span>: <span class=\"number\">10px</span>;</span></span><br><span class=\"line\"><span class=\"css\">  <span class=\"attribute\">box-shadow</span>: <span class=\"number\">0</span> <span class=\"number\">0</span> <span class=\"number\">3px</span> <span class=\"number\">#bbb</span>;</span></span><br><span class=\"line\"><span class=\"css\">&#125;</span></span><br><span class=\"line\"><span class=\"css\"></span><span class=\"tag\">&lt;/<span class=\"name\">style</span>&gt;</span></span><br></pre></td></tr></table></figure>\n"},{"title":"swagger2word 跨平台json 格式化工具","date":"2021-07-28T12:30:03.000Z","description":"基于java 框架开发的 swagger2word，一款跨平台的json格式化工具","_content":"\n> 基于java 框架开发的 swagger2word，一款跨平台的json格式化工具\n\n![树状操作展示模板](swagger2word-01.png)","source":"_posts/swagger2word.md","raw":"---\ntitle: swagger2word 跨平台json 格式化工具\ndate: 2021-07-28 20:30:03\ncategories: [个人作品展示]\ndescription: 基于java 框架开发的 swagger2word，一款跨平台的json格式化工具\ntags:\n---\n\n> 基于java 框架开发的 swagger2word，一款跨平台的json格式化工具\n\n![树状操作展示模板](swagger2word-01.png)","slug":"swagger2word","published":1,"updated":"2021-07-31T10:28:10.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cks1cgr5d000afw5ichxj3qms","content":"<blockquote>\n<p>基于java 框架开发的 swagger2word，一款跨平台的json格式化工具</p>\n</blockquote>\n<p><img src=\"/jlynet.github.io/2021/07/28/swagger2word/swagger2word-01.png\" alt=\"树状操作展示模板\"></p>\n","site":{"data":{}},"excerpt":"","more":"<blockquote>\n<p>基于java 框架开发的 swagger2word，一款跨平台的json格式化工具</p>\n</blockquote>\n<p><img src=\"/jlynet.github.io/2021/07/28/swagger2word/swagger2word-01.png\" alt=\"树状操作展示模板\"></p>\n"},{"title":"Arthas 基础教程","date":"2021-08-07T00:01:39.000Z","_content":"\n<!-- toc -->\n\n![Arthas](arthas.png)\n\n`Arthas` 是Alibaba开源的Java诊断工具，深受开发者喜爱。在线排查问题，无需重启；动态跟踪Java代码；实时监控JVM状态。\n\n`Arthas` 支持JDK 6+，支持Linux/Mac/Windows，采用命令行交互模式，同时提供丰富的 `Tab` 自动补全功能，进一步方便进行问题的定位和诊断。\n\n- Github: https://github.com/alibaba/arthas\n- 文档: https://arthas.aliyun.com/doc/\n\n## 启动arthas-demo\n\n下载`arthas-demo.jar`，再用`java -jar`命令启动：\n\n```bash\nwget https://arthas.aliyun.com/arthas-demo.jar;java -jar arthas-demo.jar\n```\n\n`arthas-demo`是一个很简单的程序，它随机生成整数，再执行因式分解，把结果打印出来。如果生成的随机数是负数，则会打印提示信息。\n\n## 启动arthas-boot\n\n在新的`Terminal 2`里，下载`arthas-boot.jar`，再用`java -jar`命令启动：\n\n```bash\nwget https://arthas.aliyun.com/arthas-boot.jar;java -jar arthas-boot.jar\n```\n\n`arthas-boot`是`Arthas`的启动程序，它启动后，会列出所有的Java进程，用户可以选择需要诊断的目标进程。\n\n选择第一个进程，输入 `1` ，再`Enter/回车`：\n\n```bash\n1\n```\n\nAttach成功之后，会打印Arthas LOGO。输入 `help` 可以获取到更多的帮助信息。\n\n```bash\nhelp\n```\n\n![Arthas Boot](O1CN01HzatXZ1RgccrlT90M_!!6000000002141-2-tps-529-244.png)\n\n## Dashboard\n\n`dashboard` 命令可以查看当前系统的实时数据面板。\n\n```bash\ndashboard\n```\n\n输入 `q` 或者 `Ctrl+C` 可以退出dashboard命令。\n\n```bash\nq\n```\n\n## Thread\n\n`thread 1` 命令会打印线程ID 1的栈。\n\n```bash\nthread 1\n```\n\nCtrl+C Arthas支持管道，可以用 `thread 1 | grep 'main('` 查找到`main class`。\n\n```bash\nthread 1 | grep 'main('\n```\n\n可以看到`main class`是`demo.MathGame`：\n\n```\n$ thread 1 | grep 'main('\n    at demo.MathGame.main(MathGame.java:17)\n```\n\n## Sc\n\n可以通过 `sc` 命令来查找JVM里已加载的类：\n\n```bash\nsc -d *MathGame\n```\n\n## Jad\n\n可以通过 `jad` 命令来反编译代码：\n\n```bash\njad demo.MathGame\n```\n\n## Watch\n\n通过`watch`命令可以查看函数的参数/返回值/异常信息。\n\n```bash\nwatch demo.MathGame primeFactors returnObj\n```\n\n\n\n输入 `q` 或者 `Ctrl+C` 退出watch命令。\n\n```bash\nq\n```\n\n## Exit/Stop\n\n### 退出Arthas\n\n用 `exit` 或者 `quit` 命令可以退出Arthas。\n\n```bash\nexit\n```\n\nCtrl+C\n\n退出Arthas之后，还可以再次用 `java -jar arthas-boot.jar` 来连接。\n\n```bash\njava -jar arthas-boot.jar\n```\n\nCtrl+C\n\n### 彻底退出Arthas\n\n`exit/quit`命令只是退出当前session，arthas server还在目标进程中运行。\n\n想完全退出Arthas，可以执行 `stop` 命令。\n\n```bash\nstop\n```\n\nCtrl+C\n\n## 更多信息\n\n通过本教程基本掌握了Arthas的用法。更多高级特性，可以在下面的进阶指南里继续了解。\n\n- [Arthas进阶](https://arthas.aliyun.com/doc/arthas-tutorials.html?language=cn&id=arthas-advanced)\n- [Arthas Github](https://github.com/alibaba/arthas)\n- [Arthas 文档](https://arthas.aliyun.com/doc/)\n\n文章拷贝来源：https://start.aliyun.com/course?spm=a2ck6.17690074.0.0.28bc2e7dHTphXs&id=qDlgqpBT","source":"_posts/Java诊断工具Arthas入门教程/Arthas-基础教程.md","raw":"---\ntitle: Arthas 基础教程\ndate: 2021-08-07 08:01:39\ntags: ['Java 诊断工具 Arthas 入门教程']\n---\n\n<!-- toc -->\n\n![Arthas](arthas.png)\n\n`Arthas` 是Alibaba开源的Java诊断工具，深受开发者喜爱。在线排查问题，无需重启；动态跟踪Java代码；实时监控JVM状态。\n\n`Arthas` 支持JDK 6+，支持Linux/Mac/Windows，采用命令行交互模式，同时提供丰富的 `Tab` 自动补全功能，进一步方便进行问题的定位和诊断。\n\n- Github: https://github.com/alibaba/arthas\n- 文档: https://arthas.aliyun.com/doc/\n\n## 启动arthas-demo\n\n下载`arthas-demo.jar`，再用`java -jar`命令启动：\n\n```bash\nwget https://arthas.aliyun.com/arthas-demo.jar;java -jar arthas-demo.jar\n```\n\n`arthas-demo`是一个很简单的程序，它随机生成整数，再执行因式分解，把结果打印出来。如果生成的随机数是负数，则会打印提示信息。\n\n## 启动arthas-boot\n\n在新的`Terminal 2`里，下载`arthas-boot.jar`，再用`java -jar`命令启动：\n\n```bash\nwget https://arthas.aliyun.com/arthas-boot.jar;java -jar arthas-boot.jar\n```\n\n`arthas-boot`是`Arthas`的启动程序，它启动后，会列出所有的Java进程，用户可以选择需要诊断的目标进程。\n\n选择第一个进程，输入 `1` ，再`Enter/回车`：\n\n```bash\n1\n```\n\nAttach成功之后，会打印Arthas LOGO。输入 `help` 可以获取到更多的帮助信息。\n\n```bash\nhelp\n```\n\n![Arthas Boot](O1CN01HzatXZ1RgccrlT90M_!!6000000002141-2-tps-529-244.png)\n\n## Dashboard\n\n`dashboard` 命令可以查看当前系统的实时数据面板。\n\n```bash\ndashboard\n```\n\n输入 `q` 或者 `Ctrl+C` 可以退出dashboard命令。\n\n```bash\nq\n```\n\n## Thread\n\n`thread 1` 命令会打印线程ID 1的栈。\n\n```bash\nthread 1\n```\n\nCtrl+C Arthas支持管道，可以用 `thread 1 | grep 'main('` 查找到`main class`。\n\n```bash\nthread 1 | grep 'main('\n```\n\n可以看到`main class`是`demo.MathGame`：\n\n```\n$ thread 1 | grep 'main('\n    at demo.MathGame.main(MathGame.java:17)\n```\n\n## Sc\n\n可以通过 `sc` 命令来查找JVM里已加载的类：\n\n```bash\nsc -d *MathGame\n```\n\n## Jad\n\n可以通过 `jad` 命令来反编译代码：\n\n```bash\njad demo.MathGame\n```\n\n## Watch\n\n通过`watch`命令可以查看函数的参数/返回值/异常信息。\n\n```bash\nwatch demo.MathGame primeFactors returnObj\n```\n\n\n\n输入 `q` 或者 `Ctrl+C` 退出watch命令。\n\n```bash\nq\n```\n\n## Exit/Stop\n\n### 退出Arthas\n\n用 `exit` 或者 `quit` 命令可以退出Arthas。\n\n```bash\nexit\n```\n\nCtrl+C\n\n退出Arthas之后，还可以再次用 `java -jar arthas-boot.jar` 来连接。\n\n```bash\njava -jar arthas-boot.jar\n```\n\nCtrl+C\n\n### 彻底退出Arthas\n\n`exit/quit`命令只是退出当前session，arthas server还在目标进程中运行。\n\n想完全退出Arthas，可以执行 `stop` 命令。\n\n```bash\nstop\n```\n\nCtrl+C\n\n## 更多信息\n\n通过本教程基本掌握了Arthas的用法。更多高级特性，可以在下面的进阶指南里继续了解。\n\n- [Arthas进阶](https://arthas.aliyun.com/doc/arthas-tutorials.html?language=cn&id=arthas-advanced)\n- [Arthas Github](https://github.com/alibaba/arthas)\n- [Arthas 文档](https://arthas.aliyun.com/doc/)\n\n文章拷贝来源：https://start.aliyun.com/course?spm=a2ck6.17690074.0.0.28bc2e7dHTphXs&id=qDlgqpBT","slug":"Java诊断工具Arthas入门教程/Arthas-基础教程","published":1,"updated":"2021-08-07T05:19:53.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cks1cgr5h000efw5ig80oaz9r","content":"<!-- toc -->\n\n<ul>\n<li><a href=\"#%E5%90%AF%E5%8A%A8arthas-demo\">启动arthas-demo</a></li>\n<li><a href=\"#%E5%90%AF%E5%8A%A8arthas-boot\">启动arthas-boot</a></li>\n<li><a href=\"#dashboard\">Dashboard</a></li>\n<li><a href=\"#thread\">Thread</a></li>\n<li><a href=\"#sc\">Sc</a></li>\n<li><a href=\"#jad\">Jad</a></li>\n<li><a href=\"#watch\">Watch</a></li>\n<li><a href=\"#exitstop\">Exit/Stop</a><ul>\n<li><a href=\"#%E9%80%80%E5%87%BAarthas\">退出Arthas</a></li>\n<li><a href=\"#%E5%BD%BB%E5%BA%95%E9%80%80%E5%87%BAarthas\">彻底退出Arthas</a></li>\n</ul>\n</li>\n<li><a href=\"#%E6%9B%B4%E5%A4%9A%E4%BF%A1%E6%81%AF\">更多信息</a></li>\n</ul>\n<!-- tocstop -->\n\n<p><img src=\"/jlynet.github.io/2021/08/07/Java%E8%AF%8A%E6%96%AD%E5%B7%A5%E5%85%B7Arthas%E5%85%A5%E9%97%A8%E6%95%99%E7%A8%8B/Arthas-%E5%9F%BA%E7%A1%80%E6%95%99%E7%A8%8B/arthas.png\" alt=\"Arthas\"></p>\n<p><code>Arthas</code> 是Alibaba开源的Java诊断工具，深受开发者喜爱。在线排查问题，无需重启；动态跟踪Java代码；实时监控JVM状态。</p>\n<p><code>Arthas</code> 支持JDK 6+，支持Linux/Mac/Windows，采用命令行交互模式，同时提供丰富的 <code>Tab</code> 自动补全功能，进一步方便进行问题的定位和诊断。</p>\n<ul>\n<li>Github: <a href=\"https://github.com/alibaba/arthas\">https://github.com/alibaba/arthas</a></li>\n<li>文档: <a href=\"https://arthas.aliyun.com/doc/\">https://arthas.aliyun.com/doc/</a></li>\n</ul>\n<h2><span id=\"启动arthas-demo\">启动arthas-demo</span></h2><p>下载<code>arthas-demo.jar</code>，再用<code>java -jar</code>命令启动：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wget https://arthas.aliyun.com/arthas-demo.jar;java -jar arthas-demo.jar</span><br></pre></td></tr></table></figure>\n\n<p><code>arthas-demo</code>是一个很简单的程序，它随机生成整数，再执行因式分解，把结果打印出来。如果生成的随机数是负数，则会打印提示信息。</p>\n<h2><span id=\"启动arthas-boot\">启动arthas-boot</span></h2><p>在新的<code>Terminal 2</code>里，下载<code>arthas-boot.jar</code>，再用<code>java -jar</code>命令启动：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wget https://arthas.aliyun.com/arthas-boot.jar;java -jar arthas-boot.jar</span><br></pre></td></tr></table></figure>\n\n<p><code>arthas-boot</code>是<code>Arthas</code>的启动程序，它启动后，会列出所有的Java进程，用户可以选择需要诊断的目标进程。</p>\n<p>选择第一个进程，输入 <code>1</code> ，再<code>Enter/回车</code>：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1</span><br></pre></td></tr></table></figure>\n\n<p>Attach成功之后，会打印Arthas LOGO。输入 <code>help</code> 可以获取到更多的帮助信息。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">help</span></span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/jlynet.github.io/2021/08/07/Java%E8%AF%8A%E6%96%AD%E5%B7%A5%E5%85%B7Arthas%E5%85%A5%E9%97%A8%E6%95%99%E7%A8%8B/Arthas-%E5%9F%BA%E7%A1%80%E6%95%99%E7%A8%8B/O1CN01HzatXZ1RgccrlT90M_!!6000000002141-2-tps-529-244.png\" alt=\"Arthas Boot\"></p>\n<h2><span id=\"dashboard\">Dashboard</span></h2><p><code>dashboard</code> 命令可以查看当前系统的实时数据面板。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">dashboard</span><br></pre></td></tr></table></figure>\n\n<p>输入 <code>q</code> 或者 <code>Ctrl+C</code> 可以退出dashboard命令。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">q</span><br></pre></td></tr></table></figure>\n\n<h2><span id=\"thread\">Thread</span></h2><p><code>thread 1</code> 命令会打印线程ID 1的栈。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">thread 1</span><br></pre></td></tr></table></figure>\n\n<p>Ctrl+C Arthas支持管道，可以用 <code>thread 1 | grep &#39;main(&#39;</code> 查找到<code>main class</code>。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">thread 1 | grep <span class=\"string\">&#x27;main(&#x27;</span></span><br></pre></td></tr></table></figure>\n\n<p>可以看到<code>main class</code>是<code>demo.MathGame</code>：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ thread 1 | grep &#x27;main(&#x27;</span><br><span class=\"line\">    at demo.MathGame.main(MathGame.java:17)</span><br></pre></td></tr></table></figure>\n\n<h2><span id=\"sc\">Sc</span></h2><p>可以通过 <code>sc</code> 命令来查找JVM里已加载的类：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sc -d *MathGame</span><br></pre></td></tr></table></figure>\n\n<h2><span id=\"jad\">Jad</span></h2><p>可以通过 <code>jad</code> 命令来反编译代码：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">jad demo.MathGame</span><br></pre></td></tr></table></figure>\n\n<h2><span id=\"watch\">Watch</span></h2><p>通过<code>watch</code>命令可以查看函数的参数/返回值/异常信息。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">watch demo.MathGame primeFactors returnObj</span><br></pre></td></tr></table></figure>\n\n<p></p>\n<p>输入 <code>q</code> 或者 <code>Ctrl+C</code> 退出watch命令。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">q</span><br></pre></td></tr></table></figure>\n\n<h2><span id=\"exitstop\">Exit/Stop</span></h2><h3><span id=\"退出arthas\">退出Arthas</span></h3><p>用 <code>exit</code> 或者 <code>quit</code> 命令可以退出Arthas。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">exit</span></span><br></pre></td></tr></table></figure>\n\n<p>Ctrl+C</p>\n<p>退出Arthas之后，还可以再次用 <code>java -jar arthas-boot.jar</code> 来连接。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">java -jar arthas-boot.jar</span><br></pre></td></tr></table></figure>\n\n<p>Ctrl+C</p>\n<h3><span id=\"彻底退出arthas\">彻底退出Arthas</span></h3><p><code>exit/quit</code>命令只是退出当前session，arthas server还在目标进程中运行。</p>\n<p>想完全退出Arthas，可以执行 <code>stop</code> 命令。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">stop</span><br></pre></td></tr></table></figure>\n\n<p>Ctrl+C</p>\n<h2><span id=\"更多信息\">更多信息</span></h2><p>通过本教程基本掌握了Arthas的用法。更多高级特性，可以在下面的进阶指南里继续了解。</p>\n<ul>\n<li><a href=\"https://arthas.aliyun.com/doc/arthas-tutorials.html?language=cn&id=arthas-advanced\">Arthas进阶</a></li>\n<li><a href=\"https://github.com/alibaba/arthas\">Arthas Github</a></li>\n<li><a href=\"https://arthas.aliyun.com/doc/\">Arthas 文档</a></li>\n</ul>\n<p>文章拷贝来源：<a href=\"https://start.aliyun.com/course?spm=a2ck6.17690074.0.0.28bc2e7dHTphXs&amp;id=qDlgqpBT\">https://start.aliyun.com/course?spm=a2ck6.17690074.0.0.28bc2e7dHTphXs&amp;id=qDlgqpBT</a></p>\n","site":{"data":{}},"excerpt":"","more":"<!-- toc -->\n\n<ul>\n<li><a href=\"#%E5%90%AF%E5%8A%A8arthas-demo\">启动arthas-demo</a></li>\n<li><a href=\"#%E5%90%AF%E5%8A%A8arthas-boot\">启动arthas-boot</a></li>\n<li><a href=\"#dashboard\">Dashboard</a></li>\n<li><a href=\"#thread\">Thread</a></li>\n<li><a href=\"#sc\">Sc</a></li>\n<li><a href=\"#jad\">Jad</a></li>\n<li><a href=\"#watch\">Watch</a></li>\n<li><a href=\"#exitstop\">Exit/Stop</a><ul>\n<li><a href=\"#%E9%80%80%E5%87%BAarthas\">退出Arthas</a></li>\n<li><a href=\"#%E5%BD%BB%E5%BA%95%E9%80%80%E5%87%BAarthas\">彻底退出Arthas</a></li>\n</ul>\n</li>\n<li><a href=\"#%E6%9B%B4%E5%A4%9A%E4%BF%A1%E6%81%AF\">更多信息</a></li>\n</ul>\n<!-- tocstop -->\n\n<p><img src=\"/jlynet.github.io/2021/08/07/Java%E8%AF%8A%E6%96%AD%E5%B7%A5%E5%85%B7Arthas%E5%85%A5%E9%97%A8%E6%95%99%E7%A8%8B/Arthas-%E5%9F%BA%E7%A1%80%E6%95%99%E7%A8%8B/arthas.png\" alt=\"Arthas\"></p>\n<p><code>Arthas</code> 是Alibaba开源的Java诊断工具，深受开发者喜爱。在线排查问题，无需重启；动态跟踪Java代码；实时监控JVM状态。</p>\n<p><code>Arthas</code> 支持JDK 6+，支持Linux/Mac/Windows，采用命令行交互模式，同时提供丰富的 <code>Tab</code> 自动补全功能，进一步方便进行问题的定位和诊断。</p>\n<ul>\n<li>Github: <a href=\"https://github.com/alibaba/arthas\">https://github.com/alibaba/arthas</a></li>\n<li>文档: <a href=\"https://arthas.aliyun.com/doc/\">https://arthas.aliyun.com/doc/</a></li>\n</ul>\n<h2 id=\"启动arthas-demo\"><a href=\"#启动arthas-demo\" class=\"headerlink\" title=\"启动arthas-demo\"></a>启动arthas-demo</h2><p>下载<code>arthas-demo.jar</code>，再用<code>java -jar</code>命令启动：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wget https://arthas.aliyun.com/arthas-demo.jar;java -jar arthas-demo.jar</span><br></pre></td></tr></table></figure>\n\n<p><code>arthas-demo</code>是一个很简单的程序，它随机生成整数，再执行因式分解，把结果打印出来。如果生成的随机数是负数，则会打印提示信息。</p>\n<h2 id=\"启动arthas-boot\"><a href=\"#启动arthas-boot\" class=\"headerlink\" title=\"启动arthas-boot\"></a>启动arthas-boot</h2><p>在新的<code>Terminal 2</code>里，下载<code>arthas-boot.jar</code>，再用<code>java -jar</code>命令启动：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wget https://arthas.aliyun.com/arthas-boot.jar;java -jar arthas-boot.jar</span><br></pre></td></tr></table></figure>\n\n<p><code>arthas-boot</code>是<code>Arthas</code>的启动程序，它启动后，会列出所有的Java进程，用户可以选择需要诊断的目标进程。</p>\n<p>选择第一个进程，输入 <code>1</code> ，再<code>Enter/回车</code>：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1</span><br></pre></td></tr></table></figure>\n\n<p>Attach成功之后，会打印Arthas LOGO。输入 <code>help</code> 可以获取到更多的帮助信息。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">help</span></span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/jlynet.github.io/2021/08/07/Java%E8%AF%8A%E6%96%AD%E5%B7%A5%E5%85%B7Arthas%E5%85%A5%E9%97%A8%E6%95%99%E7%A8%8B/Arthas-%E5%9F%BA%E7%A1%80%E6%95%99%E7%A8%8B/O1CN01HzatXZ1RgccrlT90M_!!6000000002141-2-tps-529-244.png\" alt=\"Arthas Boot\"></p>\n<h2 id=\"Dashboard\"><a href=\"#Dashboard\" class=\"headerlink\" title=\"Dashboard\"></a>Dashboard</h2><p><code>dashboard</code> 命令可以查看当前系统的实时数据面板。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">dashboard</span><br></pre></td></tr></table></figure>\n\n<p>输入 <code>q</code> 或者 <code>Ctrl+C</code> 可以退出dashboard命令。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">q</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Thread\"><a href=\"#Thread\" class=\"headerlink\" title=\"Thread\"></a>Thread</h2><p><code>thread 1</code> 命令会打印线程ID 1的栈。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">thread 1</span><br></pre></td></tr></table></figure>\n\n<p>Ctrl+C Arthas支持管道，可以用 <code>thread 1 | grep &#39;main(&#39;</code> 查找到<code>main class</code>。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">thread 1 | grep <span class=\"string\">&#x27;main(&#x27;</span></span><br></pre></td></tr></table></figure>\n\n<p>可以看到<code>main class</code>是<code>demo.MathGame</code>：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ thread 1 | grep &#x27;main(&#x27;</span><br><span class=\"line\">    at demo.MathGame.main(MathGame.java:17)</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Sc\"><a href=\"#Sc\" class=\"headerlink\" title=\"Sc\"></a>Sc</h2><p>可以通过 <code>sc</code> 命令来查找JVM里已加载的类：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sc -d *MathGame</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Jad\"><a href=\"#Jad\" class=\"headerlink\" title=\"Jad\"></a>Jad</h2><p>可以通过 <code>jad</code> 命令来反编译代码：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">jad demo.MathGame</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Watch\"><a href=\"#Watch\" class=\"headerlink\" title=\"Watch\"></a>Watch</h2><p>通过<code>watch</code>命令可以查看函数的参数/返回值/异常信息。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">watch demo.MathGame primeFactors returnObj</span><br></pre></td></tr></table></figure>\n\n<p></p>\n<p>输入 <code>q</code> 或者 <code>Ctrl+C</code> 退出watch命令。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">q</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Exit-Stop\"><a href=\"#Exit-Stop\" class=\"headerlink\" title=\"Exit/Stop\"></a>Exit/Stop</h2><h3 id=\"退出Arthas\"><a href=\"#退出Arthas\" class=\"headerlink\" title=\"退出Arthas\"></a>退出Arthas</h3><p>用 <code>exit</code> 或者 <code>quit</code> 命令可以退出Arthas。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">exit</span></span><br></pre></td></tr></table></figure>\n\n<p>Ctrl+C</p>\n<p>退出Arthas之后，还可以再次用 <code>java -jar arthas-boot.jar</code> 来连接。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">java -jar arthas-boot.jar</span><br></pre></td></tr></table></figure>\n\n<p>Ctrl+C</p>\n<h3 id=\"彻底退出Arthas\"><a href=\"#彻底退出Arthas\" class=\"headerlink\" title=\"彻底退出Arthas\"></a>彻底退出Arthas</h3><p><code>exit/quit</code>命令只是退出当前session，arthas server还在目标进程中运行。</p>\n<p>想完全退出Arthas，可以执行 <code>stop</code> 命令。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">stop</span><br></pre></td></tr></table></figure>\n\n<p>Ctrl+C</p>\n<h2 id=\"更多信息\"><a href=\"#更多信息\" class=\"headerlink\" title=\"更多信息\"></a>更多信息</h2><p>通过本教程基本掌握了Arthas的用法。更多高级特性，可以在下面的进阶指南里继续了解。</p>\n<ul>\n<li><a href=\"https://arthas.aliyun.com/doc/arthas-tutorials.html?language=cn&id=arthas-advanced\">Arthas进阶</a></li>\n<li><a href=\"https://github.com/alibaba/arthas\">Arthas Github</a></li>\n<li><a href=\"https://arthas.aliyun.com/doc/\">Arthas 文档</a></li>\n</ul>\n<p>文章拷贝来源：<a href=\"https://start.aliyun.com/course?spm=a2ck6.17690074.0.0.28bc2e7dHTphXs&amp;id=qDlgqpBT\">https://start.aliyun.com/course?spm=a2ck6.17690074.0.0.28bc2e7dHTphXs&amp;id=qDlgqpBT</a></p>\n"},{"title":"Arthas Web Console 案例","date":"2021-08-07T00:35:40.000Z","_content":"\n<!-- toc -->\n\n![Arthas](arthas.png)\n\n`Arthas` 是Alibaba开源的Java诊断工具，深受开发者喜爱。在线排查问题，无需重启；动态跟踪Java代码；实时监控JVM状态。\n\n`Arthas` 支持JDK 6+，支持Linux/Mac/Windows，采用命令行交互模式，同时提供丰富的 `Tab` 自动补全功能，进一步方便进行问题的定位和诊断。\n\n当你遇到以下类似问题而束手无策时，Arthas可以帮助你解决：\n\n- 这个类从哪个 jar 包加载的？为什么会报各种类相关的 Exception？\n- 我改的代码为什么没有执行到？难道是我没 commit？分支搞错了？\n- 遇到问题无法在线上 debug，难道只能通过加日志再重新发布吗？\n- 线上遇到某个用户的数据处理有问题，但线上同样无法 debug，线下无法重现！\n- 是否有一个全局视角来查看系统的运行状况？\n- 有什么办法可以监控到JVM的实时运行状态？\n- 怎么快速定位应用的热点，生成火焰图？\n\n本教程会以一个简单的应用为例，演示Web Console。\n\n- Github: https://github.com/alibaba/arthas\n- 文档: https://arthas.aliyun.com/doc/\n\n## 启动arthas demo\n\n下载`arthas-demo.jar`，再用`java -jar`命令启动：\n\n```bash\nwget https://arthas.aliyun.com/arthas-demo.jar;java -jar arthas-demo.jar\n```\n\n\n\n`arthas-demo`是一个很简单的程序，它随机生成整数，再执行因式分解，把结果打印出来。如果生成的随机数是负数，则会打印提示信息。\n\n## 启动arthas-boot\n\n在新的`Terminal 2`里，下载`arthas-boot.jar`，再用`java -jar`命令启动：\n\n```bash\nwget https://arthas.aliyun.com/arthas-boot.jar;java -jar arthas-boot.jar --target-ip 0.0.0.0\n```\n\n\n\n`arthas-boot`是`Arthas`的启动程序，它启动后，会列出所有的Java进程，用户可以选择需要诊断的目标进程。\n\n选择第一个进程，输入 `1` ，再`Enter/回车`：\n\n```bash\n1\n```\n\n\n\nAttach成功之后，会打印Arthas LOGO。输入 `help` 可以获取到更多的帮助信息。\n\n```bash\nhelp\n```\n\n\n\n![Arthas Boot](O1CN01HzatXZ1RgccrlT90M_!!6000000002141-2-tps-529-244.png)\n\n## Web Console\n\nArthas支持通过Web Socket来连接。\n\n### 本地体验\n\n当在本地启动时，可以访问 http://127.0.0.1:8563/ ，通过浏览器来使用Arthas。\n\n![Arthas WebConsole](O1CN01i041kW1lw0FCaSKNn_!!6000000004882-2-tps-1231-284.png)\n\n推荐通过“快速入门”来体验： https://arthas.aliyun.com/doc/quick-start.html\n\n## 更多信息\n\n通过本教程基本掌握了Arthas Web Console。如果有更多的技巧或者使用疑问，欢迎在Issue里提出。\n\n- Issues: https://github.com/alibaba/arthas/issues\n- 文档： https://arthas.aliyun.com/doc\n\n如果您在使用Arthas，请让我们知道。您的使用对我们非常重要：[查看](https://github.com/alibaba/arthas/issues/111)\n\n文章拷贝来源：https://start.aliyun.com/course?spm=a2ck6.17690074.0.0.28bc2e7dHTphXs&id=PaiFAkJM","source":"_posts/Java诊断工具Arthas最佳实践/ArthasWebConsole案例.md","raw":"---\ntitle: Arthas Web Console 案例\ndate: 2021-08-07 08:35:40\ntags: ['Java 诊断工具 Arthas 最佳实践']\n---\n\n<!-- toc -->\n\n![Arthas](arthas.png)\n\n`Arthas` 是Alibaba开源的Java诊断工具，深受开发者喜爱。在线排查问题，无需重启；动态跟踪Java代码；实时监控JVM状态。\n\n`Arthas` 支持JDK 6+，支持Linux/Mac/Windows，采用命令行交互模式，同时提供丰富的 `Tab` 自动补全功能，进一步方便进行问题的定位和诊断。\n\n当你遇到以下类似问题而束手无策时，Arthas可以帮助你解决：\n\n- 这个类从哪个 jar 包加载的？为什么会报各种类相关的 Exception？\n- 我改的代码为什么没有执行到？难道是我没 commit？分支搞错了？\n- 遇到问题无法在线上 debug，难道只能通过加日志再重新发布吗？\n- 线上遇到某个用户的数据处理有问题，但线上同样无法 debug，线下无法重现！\n- 是否有一个全局视角来查看系统的运行状况？\n- 有什么办法可以监控到JVM的实时运行状态？\n- 怎么快速定位应用的热点，生成火焰图？\n\n本教程会以一个简单的应用为例，演示Web Console。\n\n- Github: https://github.com/alibaba/arthas\n- 文档: https://arthas.aliyun.com/doc/\n\n## 启动arthas demo\n\n下载`arthas-demo.jar`，再用`java -jar`命令启动：\n\n```bash\nwget https://arthas.aliyun.com/arthas-demo.jar;java -jar arthas-demo.jar\n```\n\n\n\n`arthas-demo`是一个很简单的程序，它随机生成整数，再执行因式分解，把结果打印出来。如果生成的随机数是负数，则会打印提示信息。\n\n## 启动arthas-boot\n\n在新的`Terminal 2`里，下载`arthas-boot.jar`，再用`java -jar`命令启动：\n\n```bash\nwget https://arthas.aliyun.com/arthas-boot.jar;java -jar arthas-boot.jar --target-ip 0.0.0.0\n```\n\n\n\n`arthas-boot`是`Arthas`的启动程序，它启动后，会列出所有的Java进程，用户可以选择需要诊断的目标进程。\n\n选择第一个进程，输入 `1` ，再`Enter/回车`：\n\n```bash\n1\n```\n\n\n\nAttach成功之后，会打印Arthas LOGO。输入 `help` 可以获取到更多的帮助信息。\n\n```bash\nhelp\n```\n\n\n\n![Arthas Boot](O1CN01HzatXZ1RgccrlT90M_!!6000000002141-2-tps-529-244.png)\n\n## Web Console\n\nArthas支持通过Web Socket来连接。\n\n### 本地体验\n\n当在本地启动时，可以访问 http://127.0.0.1:8563/ ，通过浏览器来使用Arthas。\n\n![Arthas WebConsole](O1CN01i041kW1lw0FCaSKNn_!!6000000004882-2-tps-1231-284.png)\n\n推荐通过“快速入门”来体验： https://arthas.aliyun.com/doc/quick-start.html\n\n## 更多信息\n\n通过本教程基本掌握了Arthas Web Console。如果有更多的技巧或者使用疑问，欢迎在Issue里提出。\n\n- Issues: https://github.com/alibaba/arthas/issues\n- 文档： https://arthas.aliyun.com/doc\n\n如果您在使用Arthas，请让我们知道。您的使用对我们非常重要：[查看](https://github.com/alibaba/arthas/issues/111)\n\n文章拷贝来源：https://start.aliyun.com/course?spm=a2ck6.17690074.0.0.28bc2e7dHTphXs&id=PaiFAkJM","slug":"Java诊断工具Arthas最佳实践/ArthasWebConsole案例","published":1,"updated":"2021-08-07T05:33:02.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cks1cgr5j000gfw5i635951eq","content":"<!-- toc -->\n\n<ul>\n<li><a href=\"#%E5%90%AF%E5%8A%A8arthas-demo\">启动arthas demo</a></li>\n<li><a href=\"#%E5%90%AF%E5%8A%A8arthas-boot\">启动arthas-boot</a></li>\n<li><a href=\"#web-console\">Web Console</a><ul>\n<li><a href=\"#%E6%9C%AC%E5%9C%B0%E4%BD%93%E9%AA%8C\">本地体验</a></li>\n</ul>\n</li>\n<li><a href=\"#%E6%9B%B4%E5%A4%9A%E4%BF%A1%E6%81%AF\">更多信息</a></li>\n</ul>\n<!-- tocstop -->\n\n<p><img src=\"/jlynet.github.io/2021/08/07/Java%E8%AF%8A%E6%96%AD%E5%B7%A5%E5%85%B7Arthas%E6%9C%80%E4%BD%B3%E5%AE%9E%E8%B7%B5/ArthasWebConsole%E6%A1%88%E4%BE%8B/arthas.png\" alt=\"Arthas\"></p>\n<p><code>Arthas</code> 是Alibaba开源的Java诊断工具，深受开发者喜爱。在线排查问题，无需重启；动态跟踪Java代码；实时监控JVM状态。</p>\n<p><code>Arthas</code> 支持JDK 6+，支持Linux/Mac/Windows，采用命令行交互模式，同时提供丰富的 <code>Tab</code> 自动补全功能，进一步方便进行问题的定位和诊断。</p>\n<p>当你遇到以下类似问题而束手无策时，Arthas可以帮助你解决：</p>\n<ul>\n<li>这个类从哪个 jar 包加载的？为什么会报各种类相关的 Exception？</li>\n<li>我改的代码为什么没有执行到？难道是我没 commit？分支搞错了？</li>\n<li>遇到问题无法在线上 debug，难道只能通过加日志再重新发布吗？</li>\n<li>线上遇到某个用户的数据处理有问题，但线上同样无法 debug，线下无法重现！</li>\n<li>是否有一个全局视角来查看系统的运行状况？</li>\n<li>有什么办法可以监控到JVM的实时运行状态？</li>\n<li>怎么快速定位应用的热点，生成火焰图？</li>\n</ul>\n<p>本教程会以一个简单的应用为例，演示Web Console。</p>\n<ul>\n<li>Github: <a href=\"https://github.com/alibaba/arthas\">https://github.com/alibaba/arthas</a></li>\n<li>文档: <a href=\"https://arthas.aliyun.com/doc/\">https://arthas.aliyun.com/doc/</a></li>\n</ul>\n<h2><span id=\"启动arthas-demo\">启动arthas demo</span></h2><p>下载<code>arthas-demo.jar</code>，再用<code>java -jar</code>命令启动：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wget https://arthas.aliyun.com/arthas-demo.jar;java -jar arthas-demo.jar</span><br></pre></td></tr></table></figure>\n\n\n\n<p><code>arthas-demo</code>是一个很简单的程序，它随机生成整数，再执行因式分解，把结果打印出来。如果生成的随机数是负数，则会打印提示信息。</p>\n<h2><span id=\"启动arthas-boot\">启动arthas-boot</span></h2><p>在新的<code>Terminal 2</code>里，下载<code>arthas-boot.jar</code>，再用<code>java -jar</code>命令启动：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wget https://arthas.aliyun.com/arthas-boot.jar;java -jar arthas-boot.jar --target-ip 0.0.0.0</span><br></pre></td></tr></table></figure>\n\n\n\n<p><code>arthas-boot</code>是<code>Arthas</code>的启动程序，它启动后，会列出所有的Java进程，用户可以选择需要诊断的目标进程。</p>\n<p>选择第一个进程，输入 <code>1</code> ，再<code>Enter/回车</code>：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1</span><br></pre></td></tr></table></figure>\n\n\n\n<p>Attach成功之后，会打印Arthas LOGO。输入 <code>help</code> 可以获取到更多的帮助信息。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">help</span></span><br></pre></td></tr></table></figure>\n\n\n\n<p><img src=\"/jlynet.github.io/2021/08/07/Java%E8%AF%8A%E6%96%AD%E5%B7%A5%E5%85%B7Arthas%E6%9C%80%E4%BD%B3%E5%AE%9E%E8%B7%B5/ArthasWebConsole%E6%A1%88%E4%BE%8B/O1CN01HzatXZ1RgccrlT90M_!!6000000002141-2-tps-529-244.png\" alt=\"Arthas Boot\"></p>\n<h2><span id=\"web-console\">Web Console</span></h2><p>Arthas支持通过Web Socket来连接。</p>\n<h3><span id=\"本地体验\">本地体验</span></h3><p>当在本地启动时，可以访问 <a href=\"http://127.0.0.1:8563/\">http://127.0.0.1:8563/</a> ，通过浏览器来使用Arthas。</p>\n<p><img src=\"/jlynet.github.io/2021/08/07/Java%E8%AF%8A%E6%96%AD%E5%B7%A5%E5%85%B7Arthas%E6%9C%80%E4%BD%B3%E5%AE%9E%E8%B7%B5/ArthasWebConsole%E6%A1%88%E4%BE%8B/O1CN01i041kW1lw0FCaSKNn_!!6000000004882-2-tps-1231-284.png\" alt=\"Arthas WebConsole\"></p>\n<p>推荐通过“快速入门”来体验： <a href=\"https://arthas.aliyun.com/doc/quick-start.html\">https://arthas.aliyun.com/doc/quick-start.html</a></p>\n<h2><span id=\"更多信息\">更多信息</span></h2><p>通过本教程基本掌握了Arthas Web Console。如果有更多的技巧或者使用疑问，欢迎在Issue里提出。</p>\n<ul>\n<li>Issues: <a href=\"https://github.com/alibaba/arthas/issues\">https://github.com/alibaba/arthas/issues</a></li>\n<li>文档： <a href=\"https://arthas.aliyun.com/doc\">https://arthas.aliyun.com/doc</a></li>\n</ul>\n<p>如果您在使用Arthas，请让我们知道。您的使用对我们非常重要：<a href=\"https://github.com/alibaba/arthas/issues/111\">查看</a></p>\n<p>文章拷贝来源：<a href=\"https://start.aliyun.com/course?spm=a2ck6.17690074.0.0.28bc2e7dHTphXs&amp;id=PaiFAkJM\">https://start.aliyun.com/course?spm=a2ck6.17690074.0.0.28bc2e7dHTphXs&amp;id=PaiFAkJM</a></p>\n","site":{"data":{}},"excerpt":"","more":"<!-- toc -->\n\n<ul>\n<li><a href=\"#%E5%90%AF%E5%8A%A8arthas-demo\">启动arthas demo</a></li>\n<li><a href=\"#%E5%90%AF%E5%8A%A8arthas-boot\">启动arthas-boot</a></li>\n<li><a href=\"#web-console\">Web Console</a><ul>\n<li><a href=\"#%E6%9C%AC%E5%9C%B0%E4%BD%93%E9%AA%8C\">本地体验</a></li>\n</ul>\n</li>\n<li><a href=\"#%E6%9B%B4%E5%A4%9A%E4%BF%A1%E6%81%AF\">更多信息</a></li>\n</ul>\n<!-- tocstop -->\n\n<p><img src=\"/jlynet.github.io/2021/08/07/Java%E8%AF%8A%E6%96%AD%E5%B7%A5%E5%85%B7Arthas%E6%9C%80%E4%BD%B3%E5%AE%9E%E8%B7%B5/ArthasWebConsole%E6%A1%88%E4%BE%8B/arthas.png\" alt=\"Arthas\"></p>\n<p><code>Arthas</code> 是Alibaba开源的Java诊断工具，深受开发者喜爱。在线排查问题，无需重启；动态跟踪Java代码；实时监控JVM状态。</p>\n<p><code>Arthas</code> 支持JDK 6+，支持Linux/Mac/Windows，采用命令行交互模式，同时提供丰富的 <code>Tab</code> 自动补全功能，进一步方便进行问题的定位和诊断。</p>\n<p>当你遇到以下类似问题而束手无策时，Arthas可以帮助你解决：</p>\n<ul>\n<li>这个类从哪个 jar 包加载的？为什么会报各种类相关的 Exception？</li>\n<li>我改的代码为什么没有执行到？难道是我没 commit？分支搞错了？</li>\n<li>遇到问题无法在线上 debug，难道只能通过加日志再重新发布吗？</li>\n<li>线上遇到某个用户的数据处理有问题，但线上同样无法 debug，线下无法重现！</li>\n<li>是否有一个全局视角来查看系统的运行状况？</li>\n<li>有什么办法可以监控到JVM的实时运行状态？</li>\n<li>怎么快速定位应用的热点，生成火焰图？</li>\n</ul>\n<p>本教程会以一个简单的应用为例，演示Web Console。</p>\n<ul>\n<li>Github: <a href=\"https://github.com/alibaba/arthas\">https://github.com/alibaba/arthas</a></li>\n<li>文档: <a href=\"https://arthas.aliyun.com/doc/\">https://arthas.aliyun.com/doc/</a></li>\n</ul>\n<h2 id=\"启动arthas-demo\"><a href=\"#启动arthas-demo\" class=\"headerlink\" title=\"启动arthas demo\"></a>启动arthas demo</h2><p>下载<code>arthas-demo.jar</code>，再用<code>java -jar</code>命令启动：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wget https://arthas.aliyun.com/arthas-demo.jar;java -jar arthas-demo.jar</span><br></pre></td></tr></table></figure>\n\n\n\n<p><code>arthas-demo</code>是一个很简单的程序，它随机生成整数，再执行因式分解，把结果打印出来。如果生成的随机数是负数，则会打印提示信息。</p>\n<h2 id=\"启动arthas-boot\"><a href=\"#启动arthas-boot\" class=\"headerlink\" title=\"启动arthas-boot\"></a>启动arthas-boot</h2><p>在新的<code>Terminal 2</code>里，下载<code>arthas-boot.jar</code>，再用<code>java -jar</code>命令启动：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wget https://arthas.aliyun.com/arthas-boot.jar;java -jar arthas-boot.jar --target-ip 0.0.0.0</span><br></pre></td></tr></table></figure>\n\n\n\n<p><code>arthas-boot</code>是<code>Arthas</code>的启动程序，它启动后，会列出所有的Java进程，用户可以选择需要诊断的目标进程。</p>\n<p>选择第一个进程，输入 <code>1</code> ，再<code>Enter/回车</code>：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1</span><br></pre></td></tr></table></figure>\n\n\n\n<p>Attach成功之后，会打印Arthas LOGO。输入 <code>help</code> 可以获取到更多的帮助信息。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">help</span></span><br></pre></td></tr></table></figure>\n\n\n\n<p><img src=\"/jlynet.github.io/2021/08/07/Java%E8%AF%8A%E6%96%AD%E5%B7%A5%E5%85%B7Arthas%E6%9C%80%E4%BD%B3%E5%AE%9E%E8%B7%B5/ArthasWebConsole%E6%A1%88%E4%BE%8B/O1CN01HzatXZ1RgccrlT90M_!!6000000002141-2-tps-529-244.png\" alt=\"Arthas Boot\"></p>\n<h2 id=\"Web-Console\"><a href=\"#Web-Console\" class=\"headerlink\" title=\"Web Console\"></a>Web Console</h2><p>Arthas支持通过Web Socket来连接。</p>\n<h3 id=\"本地体验\"><a href=\"#本地体验\" class=\"headerlink\" title=\"本地体验\"></a>本地体验</h3><p>当在本地启动时，可以访问 <a href=\"http://127.0.0.1:8563/\">http://127.0.0.1:8563/</a> ，通过浏览器来使用Arthas。</p>\n<p><img src=\"/jlynet.github.io/2021/08/07/Java%E8%AF%8A%E6%96%AD%E5%B7%A5%E5%85%B7Arthas%E6%9C%80%E4%BD%B3%E5%AE%9E%E8%B7%B5/ArthasWebConsole%E6%A1%88%E4%BE%8B/O1CN01i041kW1lw0FCaSKNn_!!6000000004882-2-tps-1231-284.png\" alt=\"Arthas WebConsole\"></p>\n<p>推荐通过“快速入门”来体验： <a href=\"https://arthas.aliyun.com/doc/quick-start.html\">https://arthas.aliyun.com/doc/quick-start.html</a></p>\n<h2 id=\"更多信息\"><a href=\"#更多信息\" class=\"headerlink\" title=\"更多信息\"></a>更多信息</h2><p>通过本教程基本掌握了Arthas Web Console。如果有更多的技巧或者使用疑问，欢迎在Issue里提出。</p>\n<ul>\n<li>Issues: <a href=\"https://github.com/alibaba/arthas/issues\">https://github.com/alibaba/arthas/issues</a></li>\n<li>文档： <a href=\"https://arthas.aliyun.com/doc\">https://arthas.aliyun.com/doc</a></li>\n</ul>\n<p>如果您在使用Arthas，请让我们知道。您的使用对我们非常重要：<a href=\"https://github.com/alibaba/arthas/issues/111\">查看</a></p>\n<p>文章拷贝来源：<a href=\"https://start.aliyun.com/course?spm=a2ck6.17690074.0.0.28bc2e7dHTphXs&amp;id=PaiFAkJM\">https://start.aliyun.com/course?spm=a2ck6.17690074.0.0.28bc2e7dHTphXs&amp;id=PaiFAkJM</a></p>\n"},{"title":"Arthas Http API案例","date":"2021-08-07T00:35:35.000Z","_content":"\n<!-- toc -->\n\n![Arthas](arthas.png)\n\n`Arthas` 是Alibaba开源的Java诊断工具，深受开发者喜爱。在线排查问题，无需重启；动态跟踪Java代码；实时监控JVM状态。\n\n`Arthas` 支持JDK 6+，支持Linux/Mac/Windows，采用命令行交互模式，同时提供丰富的 `Tab` 自动补全功能，进一步方便进行问题的定位和诊断。\n\n当你遇到以下类似问题而束手无策时，Arthas可以帮助你解决：\n\n- 这个类从哪个 jar 包加载的？为什么会报各种类相关的 Exception？\n- 我改的代码为什么没有执行到？难道是我没 commit？分支搞错了？\n- 遇到问题无法在线上 debug，难道只能通过加日志再重新发布吗？\n- 线上遇到某个用户的数据处理有问题，但线上同样无法 debug，线下无法重现！\n- 是否有一个全局视角来查看系统的运行状况？\n- 有什么办法可以监控到JVM的实时运行状态？\n- 怎么快速定位应用的热点，生成火焰图？\n\n本教程会以一个简单的应用为例，演示http-api案例。\n\n- Github: https://github.com/alibaba/arthas\n- 文档: https://arthas.aliyun.com/doc\n\n## 启动arthas demo\n\n下载`arthas-demo.jar`，再用`java -jar`命令启动：\n\n```bash\nwget https://arthas.aliyun.com/arthas-demo.jar;java -jar arthas-demo.jar\n```\n\n\n`arthas-demo`是一个很简单的程序，它随机生成整数，再执行因式分解，把结果打印出来。如果生成的随机数是负数，则会打印提示信息。\n\n## 启动arthas-boot\n\n在新的`Terminal 2`里，下载`arthas-boot.jar`，再用`java -jar`命令启动：\n\n```bash\nwget https://arthas.aliyun.com/arthas-boot.jar;java -jar arthas-boot.jar\n```\n\n\n`arthas-boot`是`Arthas`的启动程序，它启动后，会列出所有的Java进程，用户可以选择需要诊断的目标进程。\n\n选择第一个进程，输入 `1` ，再`Enter/回车`：\n\n```bash\n1\n```\n\n\nAttach成功之后，会打印Arthas LOGO。输入 `help` 可以获取到更多的帮助信息。\n\n```bash\nhelp\n```\n\n\n![Arthas Boot](O1CN01HzatXZ1RgccrlT90M_!!6000000002141-2-tps-529-244.png)\n\n## Http API\n\n### 此教程暂时无法在Handson环境下运行,同学们可以在本地尝试\n\n#### 概览\n\nHttp API 提供类似RESTful的交互接口，请求和响应均为JSON格式的数据。相对于Telnet/WebConsole的输出非结构化文本数据，Http API可以提供结构化的数据，支持更复杂的交互功能，比如特定应用场景的一系列诊断操作。\n\n##### 访问地址\n\nHttp API接口地址为：`http://ip:port/api`，必须使用POST方式提交请求参数。如POST `http://127.0.0.1:8563/api` 。\n\n注意：telnet服务的3658端口与Chrome浏览器有兼容性问题，建议使用http端口8563来访问http接口。\n\n##### 请求数据格式\n\n```json\n{\n  \"action\": \"exec\",\n  \"requestId\": \"req112\",\n  \"sessionId\": \"94766d3c-8b39-42d3-8596-98aee3ccbefb\",\n  \"consumerId\": \"955dbd1325334a84972b0f3ac19de4f7_2\",\n  \"command\": \"version\",\n  \"execTimeout\": \"10000\"\n}\n```\n\n\n请求数据格式说明：\n\n- `action` : 请求的动作/行为，可选值请参考\"请求Action\"小节。\n- `requestId` : 可选请求ID，由客户端生成。\n- `sessionId` : Arthas会话ID，一次性命令不需要设置会话ID。\n- `consumerId` : Arthas消费者ID，用于多人共享会话。\n- `command` : Arthas command line 。\n- `execTimeout` : 命令同步执行的超时时间(ms)，默认为30000。\n\n注意: 不同的action使用到参数不同，根据具体的action来设置参数。\n\n##### 请求Action\n\n目前支持的请求Action如下：\n\n- `exec` : 同步执行命令，命令正常结束或者超时后中断命令执行后返回命令的执行结果。\n- `async_exec` : 异步执行命令，立即返回命令的调度结果，命令执行结果通过`pull_results`获取。\n- `interrupt_job` : 中断会话当前的命令，类似Telnet `Ctrl + c`的功能。\n- `pull_results` : 获取异步执行的命令的结果，以http 长轮询（long-polling）方式重复执行\n- `init_session` : 创建会话\n- `join_session` : 加入会话，用于支持多人共享同一个Arthas会话\n- `close_session` : 关闭会话\n\n##### 响应状态\n\n响应中的state属性表示请求处理状态，取值如下：\n\n- `SCHEDULED`：异步执行命令时表示已经创建job并已提交到命令执行队列，命令可能还没开始执行或者执行中；\n- `SUCCEEDED`：请求处理成功（完成状态）；\n- `FAILED`：请求处理失败（完成状态），通常附带message说明原因；\n- `REFUSED`：请求被拒绝（完成状态），通常附带message说明原因；\n\n## 一次性命令\n\n与执行批处理命令类似，一次性命令以同步方式执行。不需要创建会话，不需要设置`sessionId`选项。\n\n```json\n{\n  \"action\": \"exec\",\n  \"command\": \"<Arthas command line>\"\n}\n```\n\n\n比如获取Arthas版本号：\n\n`curl -Ss -XPOST http://localhost:8563/api -d ';{ \"action\":\"exec\", \"command\":\"version\" }`\n\n```bash\n' | json_pp\n```\n\n\n响应内容如下：\n\n```json\n{\n   \"state\" : \"SUCCEEDED\",\n   \"sessionId\" : \"ee3bc004-4586-43de-bac0-b69d6db7a869\",\n   \"body\" : {\n      \"results\" : [\n         {\n            \"type\" : \"version\",\n            \"version\" : \"3.3.7\",\n            \"jobId\" : 5\n         },\n         {\n            \"jobId\" : 5,\n            \"statusCode\" : 0,\n            \"type\" : \"status\"\n         }\n      ],\n      \"timeExpired\" : false,\n      \"command\" : \"version\",\n      \"jobStatus\" : \"TERMINATED\",\n      \"jobId\" : 5\n   }\n}\n```\n\n\n响应数据解析：\n\n- `state`: 请求处理状态，参考“接口响应状态”说明\n- `sessionId`: Arthas会话ID，一次性命令自动创建及销毁临时会话\n- `body.jobId`: 命令的任务ID，同一任务输出的所有Result都是相同的jobId\n- `body.jobStatus`: 任务状态，同步执行正常结束为`TERMINATED`\n- `body.timeExpired`: 任务执行是否超时\n- `body/results`: 命令执行的结果列表\n\n**命令结果格式说明**\n\n```json\n [{\n    \"type\" : \"version\",\n    \"version\" : \"3.3.7\",\n    \"jobId\" : 5\n },\n {\n    \"jobId\" : 5,\n    \"statusCode\" : 0,\n    \"type\" : \"status\"\n }]\n```\n\n\n- `type` : 命令结果类型，除了`status`等特殊的几个外，其它的保持与Arthas命令名称一致。请参考\"特殊命令结果\"小节。\n- `jobId` : 处理命令的任务ID。\n- 其它字段为每个不同命令的数据。\n\n注意：也可以使用一次性命令的方式执行watch/trace等连续输出的命令，但不能中断命令执行，可能出现长时间没有结束的问题。请参考\"watch命令输出map对象\"小节的示例。\n\n请尽量按照以下方式处理：\n\n- 设置合理的`execTimeout`，到达超时时间后强制中断命令执行，避免长时间挂起。\n- 通过`-n`参数指定较少的执行次数。\n- 保证命令匹配的方法可以成功命中和condition-express编写正确，如果watch/trace没有命中就算指定`-n 1`也会挂起等待到执行超时。\n\n## 会话交互\n\n由用户创建及管理Arthas会话，适用于复杂的交互过程。访问流程如下：\n\n- 创建会话\n- 加入会话(可选）\n- 拉取命令结果\n- 执行一系列命令\n- 中断命令执行\n- 关闭会话\n\n##### 创建会话\n\n创建会话, 保存输出到bash环境变量\n\n`session*data=$(curl -Ss -XPOST http://localhost:8563/api -d ';{ \"action\":\"init*session\" } ')`\n\n```bash\necho $session_data | json_pp\n```\n\n\n注： `json_pp` 工具将输出内容格式化为pretty json。\n\n响应结果：\n\n```json\n{\n   \"sessionId\" : \"b09f1353-202c-407b-af24-701b744f971e\",\n   \"consumerId\" : \"5ae4e5fbab8b4e529ac404f260d4e2d1_1\",\n   \"state\" : \"SUCCEEDED\"\n}\n```\n\n\n提取会话ID和消费者ID。\n\n当前会话ID为：\n\n```bash\nsession_id=$(echo $session_data | sed 's/.*\"sessionId\":\"\\([^\"]*\\)\".*/\\1/g');echo $session_id\n```\n\n\n`b09f1353-202c-407b-af24-701b744f971e`;\n\n请记下这里的会话ID，在Terminal 4中需要手动输入。\n\n当前消费者ID为：\n\n```bash\nconsumer_id=$(echo $session_data | sed 's/.*\"consumerId\":\"\\([^\"]*\\)\".*/\\1/g');echo $consumer_id\n```\n\n`5ae4e5fbab8b4e529ac404f260d4e2d1_1`。\n\n##### 加入会话\n\n指定要加入的会话ID，服务端将分配一个新的消费者ID。多个消费者可以接收到同一个会话的命令结果。本接口用于支持多人共享同一个会话或刷新页面后重新拉取会话历史记录。\n\n加入会话，保存输出到bash环境变量\n\n`session*data=$(curl -Ss -XPOST http://localhost:8563/api -d ';{ \"action\":\"join*session\", \"sessionId\" : \"'\"$session_id\"'\" } ')`\n\n```bash\necho $session_data | json_pp\n```\n\n\n响应结果：\n\n```json\n{\n   \"consumerId\" : \"8f7f6ad7bc2d4cb5aa57a530927a95cc_2\",\n   \"sessionId\" : \"b09f1353-202c-407b-af24-701b744f971e\",\n   \"state\" : \"SUCCEEDED\"\n}\n```\n\n\n提取消费者ID。\n\n新的消费者ID为\n\n```bash\nconsumer_id=$(echo $session_data | sed 's/.*\"consumerId\":\"\\([^\"]*\\)\".*/\\1/g');echo $consumer_id\n```\n\n`8f7f6ad7bc2d4cb5aa57a530927a95cc_2` 。\n\n请记下这里的消费者ID，在Terminal 4中需要手动输入。\n\n##### 拉取命令结果\n\n拉取命令结果消息的action为`pull_results`。请使用Http long-polling方式，定时循环拉取结果消息。 消费者的超时时间为5分钟，超时后需要调用`join_session`分配新的消费者。每个消费者单独分配一个缓存队列，按顺序拉取命令结果，不会影响到其它消费者。\n\n请求参数需要指定会话ID及消费者ID:\n\n`curl -Ss -XPOST http://localhost:8563/api -d ';{ \"action\":\"pull*results\", \"sessionId\" : \"'\"$session*id\"'\", \"consumerId\" : \"'\"$consumer_id\"'\" }`\n\n```bash\n' | json_pp\n```\n\n用Bash脚本定时拉取结果消息:\n\n请在Terminal 4中输入Terminal 3中的会话ID，这里的例子如下：\n\n```\nb09f1353-202c-407b-af24-701b744f971e\necho -n \"Enter your sessionId in T3:\";read  session_id\n```\n\n\n同样，接着输入Terminal 3中的消费者ID，这里的例子如下：\n\n```\n8f7f6ad7bc2d4cb5aa57a530927a95cc_2\necho -n \"Enter your consumerId in T3:\";read  consumer_id\n```\n\n`while true; do curl -Ss -XPOST http://localhost:8563/api -d ';{ \"action\":\"pull*results\", \"sessionId\" : \"'\"$session*id\"'\", \"consumerId\" : \"'\"$consumer_id\"'\" }`\n\n```bash\n' | json_pp; sleep 2; done\n```\n\n响应内容如下：\n\n```json\n{\n   \"body\" : {\n      \"results\" : [\n         {\n            \"inputStatus\" : \"DISABLED\",\n            \"jobId\" : 0,\n            \"type\" : \"input_status\"\n         },\n         {\n            \"type\" : \"message\",\n            \"jobId\" : 0,\n            \"message\" : \"Welcome to arthas!\"\n         },\n         {\n            \"tutorials\" : \"https://arthas.aliyun.com/doc/arthas-tutorials.html\",\n            \"time\" : \"2020-08-06 15:56:43\",\n            \"type\" : \"welcome\",\n            \"jobId\" : 0,\n            \"pid\" : \"7909\",\n            \"wiki\" : \"https://arthas.aliyun.com/doc\",\n            \"version\" : \"3.3.7\"\n         },\n         {\n            \"inputStatus\" : \"ALLOW_INPUT\",\n            \"type\" : \"input_status\",\n            \"jobId\" : 0\n         }\n      ]\n   },\n   \"sessionId\" : \"b09f1353-202c-407b-af24-701b744f971e\",\n   \"consumerId\" : \"8f7f6ad7bc2d4cb5aa57a530927a95cc_2\",\n   \"state\" : \"SUCCEEDED\"\n}\n```\n\n##### 异步执行命令\n\n`curl -Ss -XPOST http://localhost:8563/api -d ''';{ \"action\":\"async*exec\", \"command\":\"watch demo.MathGame primeFactors \\\"{params, returnObj, throwExp}\\\" \", \"sessionId\" : \"'\"$session*id\"'\" }`\n\n```bash\n''' | json_pp\n```\n\n\n`async_exec` 的结果：\n\n```json\n{\n   \"sessionId\" : \"2b085b5d-883b-4914-ab35-b2c5c1d5aa2a\",\n   \"state\" : \"SCHEDULED\",\n   \"body\" : {\n      \"jobStatus\" : \"READY\",\n      \"jobId\" : 3,\n      \"command\" : \"watch demo.MathGame primeFactors \\\"{params, returnObj, throwExp}\\\" \"\n   }\n}\n```\n\n\n- `state` : `SCHEDULED` 状态表示已经解析命令生成任务，但未开始执行。\n- `body.jobId` : 异步执行命令的任务ID，可以根据此任务ID来过滤在`pull_results`输出的命令结果。\n- `body.jobStatus` : 任务状态`READY`表示未开始执行。 切换到上面自动拉取结果消息脚本的shell（Terminal 4），查看输出：\n\n```json\n{\n   \"body\" : {\n      \"results\" : [\n         {\n            \"type\" : \"command\",\n            \"jobId\" : 3,\n            \"state\" : \"SCHEDULED\",\n            \"command\" : \"watch demo.MathGame primeFactors \\\"{params, returnObj, throwExp}\\\" \"\n         },\n         {\n            \"inputStatus\" : \"ALLOW_INTERRUPT\",\n            \"jobId\" : 0,\n            \"type\" : \"input_status\"\n         },\n         {\n            \"success\" : true,\n            \"jobId\" : 3,\n            \"effect\" : {\n               \"listenerId\" : 3,\n               \"cost\" : 24,\n               \"classCount\" : 1,\n               \"methodCount\" : 1\n            },\n            \"type\" : \"enhancer\"\n         },\n         {\n            \"sizeLimit\" : 10485760,\n            \"expand\" : 1,\n            \"jobId\" : 3,\n            \"type\" : \"watch\",\n            \"cost\" : 0.071499,\n            \"ts\" : 1596703453237,\n            \"value\" : [\n               [\n                  -170365\n               ],\n               null,\n               {\n                  \"stackTrace\" : [\n                     {\n                        \"className\" : \"demo.MathGame\",\n                        \"classLoaderName\" : \"app\",\n                        \"methodName\" : \"primeFactors\",\n                        \"nativeMethod\" : false,\n                        \"lineNumber\" : 46,\n                        \"fileName\" : \"MathGame.java\"\n                     },\n                     ...\n                  ],\n                  \"localizedMessage\" : \"number is: -170365, need >= 2\",\n                  \"@type\" : \"java.lang.IllegalArgumentException\",\n                  \"message\" : \"number is: -170365, need >= 2\"\n               }\n            ]\n         },\n         {\n            \"type\" : \"watch\",\n            \"cost\" : 0.033375,\n            \"jobId\" : 3,\n            \"ts\" : 1596703454241,\n            \"value\" : [\n               [\n                  1\n               ],\n               [\n                  2,\n                  2,\n                  2,\n                  2,\n                  13,\n                  491\n               ],\n               null\n            ],\n            \"sizeLimit\" : 10485760,\n            \"expand\" : 1\n         }\n      ]\n   },\n   \"consumerId\" : \"8ecb9cb7c7804d5d92e258b23d5245cc_1\",\n   \"sessionId\" : \"2b085b5d-883b-4914-ab35-b2c5c1d5aa2a\",\n   \"state\" : \"SUCCEEDED\"\n}\n```\n\n\nwatch命令结果的`value`为watch-experss的值，上面命令中为`{params, returnObj, throwExp}`，所以watch结果的value为一个长度为3的数组，每个元素分别对应相应顺序的表达式。 请参考\"watch命令输出map对象\"小节。\n\n##### 中断命令执行\n\n中断会话正在运行的前台Job（前台任务）：\n\n`curl -Ss -XPOST http://localhost:8563/api -d ''';{ \"action\":\"interrupt*job\", \"sessionId\" : \"'\"$session*id\"'\" }`\n\n```bash\n''' | json_pp\n```\n\n\n```json\n{\n   \"state\" : \"SUCCEEDED\",\n   \"body\" : {\n      \"jobStatus\" : \"TERMINATED\",\n      \"jobId\" : 3\n   }\n}\n```\n\n\n##### 关闭会话\n\n指定会话ID，关闭会话。\n\n`curl -Ss -XPOST http://localhost:8563/api -d ''';{ \"action\":\"close*session\", \"sessionId\" : \"'\"$session*id\"'\" }`\n\n```bash\n''' | json_pp\n```\n\n\n```json\n{\n   \"state\" : \"SUCCEEDED\"\n}\n```\n\n\n## Web UI\n\n![arthas web ui](arthas-web-ui.png)\n\n一个基于Http API接口实现的Web UI，访问地址为： 。\n\n已实现功能：\n\n- 创建会话\n- 复制并打开url加入会话，多人共享会话\n- 周期性拉取会话命令结果消息\n- 刷新页面或者加入会话拉取会话历史命令消息\n- 输入命令/中断命令状态控制\n\n待开发功能：\n\n- 改进将命令结果消息可读性\n- 命令输入支持自动完成及命令模板\n- 提供命令帮助\n- 支持个人选项设置\n\n## watch命令输出map对象\n\nwatch的结果值由计算`watch-express` ognl表达式产生，可以通过改变ognl表达式来生成想要的值，请参考[OGNL文档](https://commons.apache.org/proper/commons-ognl/language-guide.html)。\n\n> Maps can also be created using a special syntax.\n>\n> # { \"foo\" : \"foo value\", \"bar\" : \"bar value\" }\n\n文章拷贝来源：https://start.aliyun.com/course?spm=a2ck6.17690074.0.0.28bc2e7dHTphXs&id=PaiFAkJM","source":"_posts/Java诊断工具Arthas最佳实践/ArthasHttpAPI案例.md","raw":"---\ntitle: Arthas Http API案例\ndate: 2021-08-07 08:35:35\ntags: ['Java 诊断工具 Arthas 最佳实践']\n---\n\n<!-- toc -->\n\n![Arthas](arthas.png)\n\n`Arthas` 是Alibaba开源的Java诊断工具，深受开发者喜爱。在线排查问题，无需重启；动态跟踪Java代码；实时监控JVM状态。\n\n`Arthas` 支持JDK 6+，支持Linux/Mac/Windows，采用命令行交互模式，同时提供丰富的 `Tab` 自动补全功能，进一步方便进行问题的定位和诊断。\n\n当你遇到以下类似问题而束手无策时，Arthas可以帮助你解决：\n\n- 这个类从哪个 jar 包加载的？为什么会报各种类相关的 Exception？\n- 我改的代码为什么没有执行到？难道是我没 commit？分支搞错了？\n- 遇到问题无法在线上 debug，难道只能通过加日志再重新发布吗？\n- 线上遇到某个用户的数据处理有问题，但线上同样无法 debug，线下无法重现！\n- 是否有一个全局视角来查看系统的运行状况？\n- 有什么办法可以监控到JVM的实时运行状态？\n- 怎么快速定位应用的热点，生成火焰图？\n\n本教程会以一个简单的应用为例，演示http-api案例。\n\n- Github: https://github.com/alibaba/arthas\n- 文档: https://arthas.aliyun.com/doc\n\n## 启动arthas demo\n\n下载`arthas-demo.jar`，再用`java -jar`命令启动：\n\n```bash\nwget https://arthas.aliyun.com/arthas-demo.jar;java -jar arthas-demo.jar\n```\n\n\n`arthas-demo`是一个很简单的程序，它随机生成整数，再执行因式分解，把结果打印出来。如果生成的随机数是负数，则会打印提示信息。\n\n## 启动arthas-boot\n\n在新的`Terminal 2`里，下载`arthas-boot.jar`，再用`java -jar`命令启动：\n\n```bash\nwget https://arthas.aliyun.com/arthas-boot.jar;java -jar arthas-boot.jar\n```\n\n\n`arthas-boot`是`Arthas`的启动程序，它启动后，会列出所有的Java进程，用户可以选择需要诊断的目标进程。\n\n选择第一个进程，输入 `1` ，再`Enter/回车`：\n\n```bash\n1\n```\n\n\nAttach成功之后，会打印Arthas LOGO。输入 `help` 可以获取到更多的帮助信息。\n\n```bash\nhelp\n```\n\n\n![Arthas Boot](O1CN01HzatXZ1RgccrlT90M_!!6000000002141-2-tps-529-244.png)\n\n## Http API\n\n### 此教程暂时无法在Handson环境下运行,同学们可以在本地尝试\n\n#### 概览\n\nHttp API 提供类似RESTful的交互接口，请求和响应均为JSON格式的数据。相对于Telnet/WebConsole的输出非结构化文本数据，Http API可以提供结构化的数据，支持更复杂的交互功能，比如特定应用场景的一系列诊断操作。\n\n##### 访问地址\n\nHttp API接口地址为：`http://ip:port/api`，必须使用POST方式提交请求参数。如POST `http://127.0.0.1:8563/api` 。\n\n注意：telnet服务的3658端口与Chrome浏览器有兼容性问题，建议使用http端口8563来访问http接口。\n\n##### 请求数据格式\n\n```json\n{\n  \"action\": \"exec\",\n  \"requestId\": \"req112\",\n  \"sessionId\": \"94766d3c-8b39-42d3-8596-98aee3ccbefb\",\n  \"consumerId\": \"955dbd1325334a84972b0f3ac19de4f7_2\",\n  \"command\": \"version\",\n  \"execTimeout\": \"10000\"\n}\n```\n\n\n请求数据格式说明：\n\n- `action` : 请求的动作/行为，可选值请参考\"请求Action\"小节。\n- `requestId` : 可选请求ID，由客户端生成。\n- `sessionId` : Arthas会话ID，一次性命令不需要设置会话ID。\n- `consumerId` : Arthas消费者ID，用于多人共享会话。\n- `command` : Arthas command line 。\n- `execTimeout` : 命令同步执行的超时时间(ms)，默认为30000。\n\n注意: 不同的action使用到参数不同，根据具体的action来设置参数。\n\n##### 请求Action\n\n目前支持的请求Action如下：\n\n- `exec` : 同步执行命令，命令正常结束或者超时后中断命令执行后返回命令的执行结果。\n- `async_exec` : 异步执行命令，立即返回命令的调度结果，命令执行结果通过`pull_results`获取。\n- `interrupt_job` : 中断会话当前的命令，类似Telnet `Ctrl + c`的功能。\n- `pull_results` : 获取异步执行的命令的结果，以http 长轮询（long-polling）方式重复执行\n- `init_session` : 创建会话\n- `join_session` : 加入会话，用于支持多人共享同一个Arthas会话\n- `close_session` : 关闭会话\n\n##### 响应状态\n\n响应中的state属性表示请求处理状态，取值如下：\n\n- `SCHEDULED`：异步执行命令时表示已经创建job并已提交到命令执行队列，命令可能还没开始执行或者执行中；\n- `SUCCEEDED`：请求处理成功（完成状态）；\n- `FAILED`：请求处理失败（完成状态），通常附带message说明原因；\n- `REFUSED`：请求被拒绝（完成状态），通常附带message说明原因；\n\n## 一次性命令\n\n与执行批处理命令类似，一次性命令以同步方式执行。不需要创建会话，不需要设置`sessionId`选项。\n\n```json\n{\n  \"action\": \"exec\",\n  \"command\": \"<Arthas command line>\"\n}\n```\n\n\n比如获取Arthas版本号：\n\n`curl -Ss -XPOST http://localhost:8563/api -d ';{ \"action\":\"exec\", \"command\":\"version\" }`\n\n```bash\n' | json_pp\n```\n\n\n响应内容如下：\n\n```json\n{\n   \"state\" : \"SUCCEEDED\",\n   \"sessionId\" : \"ee3bc004-4586-43de-bac0-b69d6db7a869\",\n   \"body\" : {\n      \"results\" : [\n         {\n            \"type\" : \"version\",\n            \"version\" : \"3.3.7\",\n            \"jobId\" : 5\n         },\n         {\n            \"jobId\" : 5,\n            \"statusCode\" : 0,\n            \"type\" : \"status\"\n         }\n      ],\n      \"timeExpired\" : false,\n      \"command\" : \"version\",\n      \"jobStatus\" : \"TERMINATED\",\n      \"jobId\" : 5\n   }\n}\n```\n\n\n响应数据解析：\n\n- `state`: 请求处理状态，参考“接口响应状态”说明\n- `sessionId`: Arthas会话ID，一次性命令自动创建及销毁临时会话\n- `body.jobId`: 命令的任务ID，同一任务输出的所有Result都是相同的jobId\n- `body.jobStatus`: 任务状态，同步执行正常结束为`TERMINATED`\n- `body.timeExpired`: 任务执行是否超时\n- `body/results`: 命令执行的结果列表\n\n**命令结果格式说明**\n\n```json\n [{\n    \"type\" : \"version\",\n    \"version\" : \"3.3.7\",\n    \"jobId\" : 5\n },\n {\n    \"jobId\" : 5,\n    \"statusCode\" : 0,\n    \"type\" : \"status\"\n }]\n```\n\n\n- `type` : 命令结果类型，除了`status`等特殊的几个外，其它的保持与Arthas命令名称一致。请参考\"特殊命令结果\"小节。\n- `jobId` : 处理命令的任务ID。\n- 其它字段为每个不同命令的数据。\n\n注意：也可以使用一次性命令的方式执行watch/trace等连续输出的命令，但不能中断命令执行，可能出现长时间没有结束的问题。请参考\"watch命令输出map对象\"小节的示例。\n\n请尽量按照以下方式处理：\n\n- 设置合理的`execTimeout`，到达超时时间后强制中断命令执行，避免长时间挂起。\n- 通过`-n`参数指定较少的执行次数。\n- 保证命令匹配的方法可以成功命中和condition-express编写正确，如果watch/trace没有命中就算指定`-n 1`也会挂起等待到执行超时。\n\n## 会话交互\n\n由用户创建及管理Arthas会话，适用于复杂的交互过程。访问流程如下：\n\n- 创建会话\n- 加入会话(可选）\n- 拉取命令结果\n- 执行一系列命令\n- 中断命令执行\n- 关闭会话\n\n##### 创建会话\n\n创建会话, 保存输出到bash环境变量\n\n`session*data=$(curl -Ss -XPOST http://localhost:8563/api -d ';{ \"action\":\"init*session\" } ')`\n\n```bash\necho $session_data | json_pp\n```\n\n\n注： `json_pp` 工具将输出内容格式化为pretty json。\n\n响应结果：\n\n```json\n{\n   \"sessionId\" : \"b09f1353-202c-407b-af24-701b744f971e\",\n   \"consumerId\" : \"5ae4e5fbab8b4e529ac404f260d4e2d1_1\",\n   \"state\" : \"SUCCEEDED\"\n}\n```\n\n\n提取会话ID和消费者ID。\n\n当前会话ID为：\n\n```bash\nsession_id=$(echo $session_data | sed 's/.*\"sessionId\":\"\\([^\"]*\\)\".*/\\1/g');echo $session_id\n```\n\n\n`b09f1353-202c-407b-af24-701b744f971e`;\n\n请记下这里的会话ID，在Terminal 4中需要手动输入。\n\n当前消费者ID为：\n\n```bash\nconsumer_id=$(echo $session_data | sed 's/.*\"consumerId\":\"\\([^\"]*\\)\".*/\\1/g');echo $consumer_id\n```\n\n`5ae4e5fbab8b4e529ac404f260d4e2d1_1`。\n\n##### 加入会话\n\n指定要加入的会话ID，服务端将分配一个新的消费者ID。多个消费者可以接收到同一个会话的命令结果。本接口用于支持多人共享同一个会话或刷新页面后重新拉取会话历史记录。\n\n加入会话，保存输出到bash环境变量\n\n`session*data=$(curl -Ss -XPOST http://localhost:8563/api -d ';{ \"action\":\"join*session\", \"sessionId\" : \"'\"$session_id\"'\" } ')`\n\n```bash\necho $session_data | json_pp\n```\n\n\n响应结果：\n\n```json\n{\n   \"consumerId\" : \"8f7f6ad7bc2d4cb5aa57a530927a95cc_2\",\n   \"sessionId\" : \"b09f1353-202c-407b-af24-701b744f971e\",\n   \"state\" : \"SUCCEEDED\"\n}\n```\n\n\n提取消费者ID。\n\n新的消费者ID为\n\n```bash\nconsumer_id=$(echo $session_data | sed 's/.*\"consumerId\":\"\\([^\"]*\\)\".*/\\1/g');echo $consumer_id\n```\n\n`8f7f6ad7bc2d4cb5aa57a530927a95cc_2` 。\n\n请记下这里的消费者ID，在Terminal 4中需要手动输入。\n\n##### 拉取命令结果\n\n拉取命令结果消息的action为`pull_results`。请使用Http long-polling方式，定时循环拉取结果消息。 消费者的超时时间为5分钟，超时后需要调用`join_session`分配新的消费者。每个消费者单独分配一个缓存队列，按顺序拉取命令结果，不会影响到其它消费者。\n\n请求参数需要指定会话ID及消费者ID:\n\n`curl -Ss -XPOST http://localhost:8563/api -d ';{ \"action\":\"pull*results\", \"sessionId\" : \"'\"$session*id\"'\", \"consumerId\" : \"'\"$consumer_id\"'\" }`\n\n```bash\n' | json_pp\n```\n\n用Bash脚本定时拉取结果消息:\n\n请在Terminal 4中输入Terminal 3中的会话ID，这里的例子如下：\n\n```\nb09f1353-202c-407b-af24-701b744f971e\necho -n \"Enter your sessionId in T3:\";read  session_id\n```\n\n\n同样，接着输入Terminal 3中的消费者ID，这里的例子如下：\n\n```\n8f7f6ad7bc2d4cb5aa57a530927a95cc_2\necho -n \"Enter your consumerId in T3:\";read  consumer_id\n```\n\n`while true; do curl -Ss -XPOST http://localhost:8563/api -d ';{ \"action\":\"pull*results\", \"sessionId\" : \"'\"$session*id\"'\", \"consumerId\" : \"'\"$consumer_id\"'\" }`\n\n```bash\n' | json_pp; sleep 2; done\n```\n\n响应内容如下：\n\n```json\n{\n   \"body\" : {\n      \"results\" : [\n         {\n            \"inputStatus\" : \"DISABLED\",\n            \"jobId\" : 0,\n            \"type\" : \"input_status\"\n         },\n         {\n            \"type\" : \"message\",\n            \"jobId\" : 0,\n            \"message\" : \"Welcome to arthas!\"\n         },\n         {\n            \"tutorials\" : \"https://arthas.aliyun.com/doc/arthas-tutorials.html\",\n            \"time\" : \"2020-08-06 15:56:43\",\n            \"type\" : \"welcome\",\n            \"jobId\" : 0,\n            \"pid\" : \"7909\",\n            \"wiki\" : \"https://arthas.aliyun.com/doc\",\n            \"version\" : \"3.3.7\"\n         },\n         {\n            \"inputStatus\" : \"ALLOW_INPUT\",\n            \"type\" : \"input_status\",\n            \"jobId\" : 0\n         }\n      ]\n   },\n   \"sessionId\" : \"b09f1353-202c-407b-af24-701b744f971e\",\n   \"consumerId\" : \"8f7f6ad7bc2d4cb5aa57a530927a95cc_2\",\n   \"state\" : \"SUCCEEDED\"\n}\n```\n\n##### 异步执行命令\n\n`curl -Ss -XPOST http://localhost:8563/api -d ''';{ \"action\":\"async*exec\", \"command\":\"watch demo.MathGame primeFactors \\\"{params, returnObj, throwExp}\\\" \", \"sessionId\" : \"'\"$session*id\"'\" }`\n\n```bash\n''' | json_pp\n```\n\n\n`async_exec` 的结果：\n\n```json\n{\n   \"sessionId\" : \"2b085b5d-883b-4914-ab35-b2c5c1d5aa2a\",\n   \"state\" : \"SCHEDULED\",\n   \"body\" : {\n      \"jobStatus\" : \"READY\",\n      \"jobId\" : 3,\n      \"command\" : \"watch demo.MathGame primeFactors \\\"{params, returnObj, throwExp}\\\" \"\n   }\n}\n```\n\n\n- `state` : `SCHEDULED` 状态表示已经解析命令生成任务，但未开始执行。\n- `body.jobId` : 异步执行命令的任务ID，可以根据此任务ID来过滤在`pull_results`输出的命令结果。\n- `body.jobStatus` : 任务状态`READY`表示未开始执行。 切换到上面自动拉取结果消息脚本的shell（Terminal 4），查看输出：\n\n```json\n{\n   \"body\" : {\n      \"results\" : [\n         {\n            \"type\" : \"command\",\n            \"jobId\" : 3,\n            \"state\" : \"SCHEDULED\",\n            \"command\" : \"watch demo.MathGame primeFactors \\\"{params, returnObj, throwExp}\\\" \"\n         },\n         {\n            \"inputStatus\" : \"ALLOW_INTERRUPT\",\n            \"jobId\" : 0,\n            \"type\" : \"input_status\"\n         },\n         {\n            \"success\" : true,\n            \"jobId\" : 3,\n            \"effect\" : {\n               \"listenerId\" : 3,\n               \"cost\" : 24,\n               \"classCount\" : 1,\n               \"methodCount\" : 1\n            },\n            \"type\" : \"enhancer\"\n         },\n         {\n            \"sizeLimit\" : 10485760,\n            \"expand\" : 1,\n            \"jobId\" : 3,\n            \"type\" : \"watch\",\n            \"cost\" : 0.071499,\n            \"ts\" : 1596703453237,\n            \"value\" : [\n               [\n                  -170365\n               ],\n               null,\n               {\n                  \"stackTrace\" : [\n                     {\n                        \"className\" : \"demo.MathGame\",\n                        \"classLoaderName\" : \"app\",\n                        \"methodName\" : \"primeFactors\",\n                        \"nativeMethod\" : false,\n                        \"lineNumber\" : 46,\n                        \"fileName\" : \"MathGame.java\"\n                     },\n                     ...\n                  ],\n                  \"localizedMessage\" : \"number is: -170365, need >= 2\",\n                  \"@type\" : \"java.lang.IllegalArgumentException\",\n                  \"message\" : \"number is: -170365, need >= 2\"\n               }\n            ]\n         },\n         {\n            \"type\" : \"watch\",\n            \"cost\" : 0.033375,\n            \"jobId\" : 3,\n            \"ts\" : 1596703454241,\n            \"value\" : [\n               [\n                  1\n               ],\n               [\n                  2,\n                  2,\n                  2,\n                  2,\n                  13,\n                  491\n               ],\n               null\n            ],\n            \"sizeLimit\" : 10485760,\n            \"expand\" : 1\n         }\n      ]\n   },\n   \"consumerId\" : \"8ecb9cb7c7804d5d92e258b23d5245cc_1\",\n   \"sessionId\" : \"2b085b5d-883b-4914-ab35-b2c5c1d5aa2a\",\n   \"state\" : \"SUCCEEDED\"\n}\n```\n\n\nwatch命令结果的`value`为watch-experss的值，上面命令中为`{params, returnObj, throwExp}`，所以watch结果的value为一个长度为3的数组，每个元素分别对应相应顺序的表达式。 请参考\"watch命令输出map对象\"小节。\n\n##### 中断命令执行\n\n中断会话正在运行的前台Job（前台任务）：\n\n`curl -Ss -XPOST http://localhost:8563/api -d ''';{ \"action\":\"interrupt*job\", \"sessionId\" : \"'\"$session*id\"'\" }`\n\n```bash\n''' | json_pp\n```\n\n\n```json\n{\n   \"state\" : \"SUCCEEDED\",\n   \"body\" : {\n      \"jobStatus\" : \"TERMINATED\",\n      \"jobId\" : 3\n   }\n}\n```\n\n\n##### 关闭会话\n\n指定会话ID，关闭会话。\n\n`curl -Ss -XPOST http://localhost:8563/api -d ''';{ \"action\":\"close*session\", \"sessionId\" : \"'\"$session*id\"'\" }`\n\n```bash\n''' | json_pp\n```\n\n\n```json\n{\n   \"state\" : \"SUCCEEDED\"\n}\n```\n\n\n## Web UI\n\n![arthas web ui](arthas-web-ui.png)\n\n一个基于Http API接口实现的Web UI，访问地址为： 。\n\n已实现功能：\n\n- 创建会话\n- 复制并打开url加入会话，多人共享会话\n- 周期性拉取会话命令结果消息\n- 刷新页面或者加入会话拉取会话历史命令消息\n- 输入命令/中断命令状态控制\n\n待开发功能：\n\n- 改进将命令结果消息可读性\n- 命令输入支持自动完成及命令模板\n- 提供命令帮助\n- 支持个人选项设置\n\n## watch命令输出map对象\n\nwatch的结果值由计算`watch-express` ognl表达式产生，可以通过改变ognl表达式来生成想要的值，请参考[OGNL文档](https://commons.apache.org/proper/commons-ognl/language-guide.html)。\n\n> Maps can also be created using a special syntax.\n>\n> # { \"foo\" : \"foo value\", \"bar\" : \"bar value\" }\n\n文章拷贝来源：https://start.aliyun.com/course?spm=a2ck6.17690074.0.0.28bc2e7dHTphXs&id=PaiFAkJM","slug":"Java诊断工具Arthas最佳实践/ArthasHttpAPI案例","published":1,"updated":"2021-08-07T05:32:58.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cks1cgr5m000lfw5i9tidc0fv","content":"<!-- toc -->\n\n<ul>\n<li><a href=\"#%E5%90%AF%E5%8A%A8arthas-demo\">启动arthas demo</a></li>\n<li><a href=\"#%E5%90%AF%E5%8A%A8arthas-boot\">启动arthas-boot</a></li>\n<li><a href=\"#http-api\">Http API</a><ul>\n<li><a href=\"#%E6%AD%A4%E6%95%99%E7%A8%8B%E6%9A%82%E6%97%B6%E6%97%A0%E6%B3%95%E5%9C%A8handson%E7%8E%AF%E5%A2%83%E4%B8%8B%E8%BF%90%E8%A1%8C%E5%90%8C%E5%AD%A6%E4%BB%AC%E5%8F%AF%E4%BB%A5%E5%9C%A8%E6%9C%AC%E5%9C%B0%E5%B0%9D%E8%AF%95\">此教程暂时无法在Handson环境下运行,同学们可以在本地尝试</a><ul>\n<li><a href=\"#%E6%A6%82%E8%A7%88\">概览</a><ul>\n<li><a href=\"#%E8%AE%BF%E9%97%AE%E5%9C%B0%E5%9D%80\">访问地址</a></li>\n<li><a href=\"#%E8%AF%B7%E6%B1%82%E6%95%B0%E6%8D%AE%E6%A0%BC%E5%BC%8F\">请求数据格式</a></li>\n<li><a href=\"#%E8%AF%B7%E6%B1%82action\">请求Action</a></li>\n<li><a href=\"#%E5%93%8D%E5%BA%94%E7%8A%B6%E6%80%81\">响应状态</a></li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><a href=\"#%E4%B8%80%E6%AC%A1%E6%80%A7%E5%91%BD%E4%BB%A4\">一次性命令</a></li>\n<li><a href=\"#%E4%BC%9A%E8%AF%9D%E4%BA%A4%E4%BA%92\">会话交互</a><pre><code>* [创建会话](#创建会话)\n* [加入会话](#加入会话)\n* [拉取命令结果](#拉取命令结果)\n* [异步执行命令](#异步执行命令)\n* [中断命令执行](#中断命令执行)\n* [关闭会话](#关闭会话)\n</code></pre>\n</li>\n<li><a href=\"#web-ui\">Web UI</a></li>\n<li><a href=\"#watch%E5%91%BD%E4%BB%A4%E8%BE%93%E5%87%BAmap%E5%AF%B9%E8%B1%A1\">watch命令输出map对象</a></li>\n</ul>\n<ul>\n<li><a href=\"#foo-foo-value-bar-bar-value\">{ “foo” : “foo value”, “bar” : “bar value” }</a></li>\n</ul>\n<!-- tocstop -->\n\n<p><img src=\"/jlynet.github.io/2021/08/07/Java%E8%AF%8A%E6%96%AD%E5%B7%A5%E5%85%B7Arthas%E6%9C%80%E4%BD%B3%E5%AE%9E%E8%B7%B5/ArthasHttpAPI%E6%A1%88%E4%BE%8B/arthas.png\" alt=\"Arthas\"></p>\n<p><code>Arthas</code> 是Alibaba开源的Java诊断工具，深受开发者喜爱。在线排查问题，无需重启；动态跟踪Java代码；实时监控JVM状态。</p>\n<p><code>Arthas</code> 支持JDK 6+，支持Linux/Mac/Windows，采用命令行交互模式，同时提供丰富的 <code>Tab</code> 自动补全功能，进一步方便进行问题的定位和诊断。</p>\n<p>当你遇到以下类似问题而束手无策时，Arthas可以帮助你解决：</p>\n<ul>\n<li>这个类从哪个 jar 包加载的？为什么会报各种类相关的 Exception？</li>\n<li>我改的代码为什么没有执行到？难道是我没 commit？分支搞错了？</li>\n<li>遇到问题无法在线上 debug，难道只能通过加日志再重新发布吗？</li>\n<li>线上遇到某个用户的数据处理有问题，但线上同样无法 debug，线下无法重现！</li>\n<li>是否有一个全局视角来查看系统的运行状况？</li>\n<li>有什么办法可以监控到JVM的实时运行状态？</li>\n<li>怎么快速定位应用的热点，生成火焰图？</li>\n</ul>\n<p>本教程会以一个简单的应用为例，演示http-api案例。</p>\n<ul>\n<li>Github: <a href=\"https://github.com/alibaba/arthas\">https://github.com/alibaba/arthas</a></li>\n<li>文档: <a href=\"https://arthas.aliyun.com/doc\">https://arthas.aliyun.com/doc</a></li>\n</ul>\n<h2><span id=\"启动arthas-demo\">启动arthas demo</span></h2><p>下载<code>arthas-demo.jar</code>，再用<code>java -jar</code>命令启动：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wget https://arthas.aliyun.com/arthas-demo.jar;java -jar arthas-demo.jar</span><br></pre></td></tr></table></figure>\n\n\n<p><code>arthas-demo</code>是一个很简单的程序，它随机生成整数，再执行因式分解，把结果打印出来。如果生成的随机数是负数，则会打印提示信息。</p>\n<h2><span id=\"启动arthas-boot\">启动arthas-boot</span></h2><p>在新的<code>Terminal 2</code>里，下载<code>arthas-boot.jar</code>，再用<code>java -jar</code>命令启动：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wget https://arthas.aliyun.com/arthas-boot.jar;java -jar arthas-boot.jar</span><br></pre></td></tr></table></figure>\n\n\n<p><code>arthas-boot</code>是<code>Arthas</code>的启动程序，它启动后，会列出所有的Java进程，用户可以选择需要诊断的目标进程。</p>\n<p>选择第一个进程，输入 <code>1</code> ，再<code>Enter/回车</code>：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1</span><br></pre></td></tr></table></figure>\n\n\n<p>Attach成功之后，会打印Arthas LOGO。输入 <code>help</code> 可以获取到更多的帮助信息。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">help</span></span><br></pre></td></tr></table></figure>\n\n\n<p><img src=\"/jlynet.github.io/2021/08/07/Java%E8%AF%8A%E6%96%AD%E5%B7%A5%E5%85%B7Arthas%E6%9C%80%E4%BD%B3%E5%AE%9E%E8%B7%B5/ArthasHttpAPI%E6%A1%88%E4%BE%8B/O1CN01HzatXZ1RgccrlT90M_!!6000000002141-2-tps-529-244.png\" alt=\"Arthas Boot\"></p>\n<h2><span id=\"http-api\">Http API</span></h2><h3><span id=\"此教程暂时无法在handson环境下运行同学们可以在本地尝试\">此教程暂时无法在Handson环境下运行,同学们可以在本地尝试</span></h3><h4><span id=\"概览\">概览</span></h4><p>Http API 提供类似RESTful的交互接口，请求和响应均为JSON格式的数据。相对于Telnet/WebConsole的输出非结构化文本数据，Http API可以提供结构化的数据，支持更复杂的交互功能，比如特定应用场景的一系列诊断操作。</p>\n<h5><span id=\"访问地址\">访问地址</span></h5><p>Http API接口地址为：<code>http://ip:port/api</code>，必须使用POST方式提交请求参数。如POST <code>http://127.0.0.1:8563/api</code> 。</p>\n<p>注意：telnet服务的3658端口与Chrome浏览器有兼容性问题，建议使用http端口8563来访问http接口。</p>\n<h5><span id=\"请求数据格式\">请求数据格式</span></h5><figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"attr\">&quot;action&quot;</span>: <span class=\"string\">&quot;exec&quot;</span>,</span><br><span class=\"line\">  <span class=\"attr\">&quot;requestId&quot;</span>: <span class=\"string\">&quot;req112&quot;</span>,</span><br><span class=\"line\">  <span class=\"attr\">&quot;sessionId&quot;</span>: <span class=\"string\">&quot;94766d3c-8b39-42d3-8596-98aee3ccbefb&quot;</span>,</span><br><span class=\"line\">  <span class=\"attr\">&quot;consumerId&quot;</span>: <span class=\"string\">&quot;955dbd1325334a84972b0f3ac19de4f7_2&quot;</span>,</span><br><span class=\"line\">  <span class=\"attr\">&quot;command&quot;</span>: <span class=\"string\">&quot;version&quot;</span>,</span><br><span class=\"line\">  <span class=\"attr\">&quot;execTimeout&quot;</span>: <span class=\"string\">&quot;10000&quot;</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n<p>请求数据格式说明：</p>\n<ul>\n<li><code>action</code> : 请求的动作/行为，可选值请参考”请求Action”小节。</li>\n<li><code>requestId</code> : 可选请求ID，由客户端生成。</li>\n<li><code>sessionId</code> : Arthas会话ID，一次性命令不需要设置会话ID。</li>\n<li><code>consumerId</code> : Arthas消费者ID，用于多人共享会话。</li>\n<li><code>command</code> : Arthas command line 。</li>\n<li><code>execTimeout</code> : 命令同步执行的超时时间(ms)，默认为30000。</li>\n</ul>\n<p>注意: 不同的action使用到参数不同，根据具体的action来设置参数。</p>\n<h5><span id=\"请求action\">请求Action</span></h5><p>目前支持的请求Action如下：</p>\n<ul>\n<li><code>exec</code> : 同步执行命令，命令正常结束或者超时后中断命令执行后返回命令的执行结果。</li>\n<li><code>async_exec</code> : 异步执行命令，立即返回命令的调度结果，命令执行结果通过<code>pull_results</code>获取。</li>\n<li><code>interrupt_job</code> : 中断会话当前的命令，类似Telnet <code>Ctrl + c</code>的功能。</li>\n<li><code>pull_results</code> : 获取异步执行的命令的结果，以http 长轮询（long-polling）方式重复执行</li>\n<li><code>init_session</code> : 创建会话</li>\n<li><code>join_session</code> : 加入会话，用于支持多人共享同一个Arthas会话</li>\n<li><code>close_session</code> : 关闭会话</li>\n</ul>\n<h5><span id=\"响应状态\">响应状态</span></h5><p>响应中的state属性表示请求处理状态，取值如下：</p>\n<ul>\n<li><code>SCHEDULED</code>：异步执行命令时表示已经创建job并已提交到命令执行队列，命令可能还没开始执行或者执行中；</li>\n<li><code>SUCCEEDED</code>：请求处理成功（完成状态）；</li>\n<li><code>FAILED</code>：请求处理失败（完成状态），通常附带message说明原因；</li>\n<li><code>REFUSED</code>：请求被拒绝（完成状态），通常附带message说明原因；</li>\n</ul>\n<h2><span id=\"一次性命令\">一次性命令</span></h2><p>与执行批处理命令类似，一次性命令以同步方式执行。不需要创建会话，不需要设置<code>sessionId</code>选项。</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"attr\">&quot;action&quot;</span>: <span class=\"string\">&quot;exec&quot;</span>,</span><br><span class=\"line\">  <span class=\"attr\">&quot;command&quot;</span>: <span class=\"string\">&quot;&lt;Arthas command line&gt;&quot;</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n<p>比如获取Arthas版本号：</p>\n<p><code>curl -Ss -XPOST http://localhost:8563/api -d &#39;;&#123; &quot;action&quot;:&quot;exec&quot;, &quot;command&quot;:&quot;version&quot; &#125;</code></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">&#x27; | json_pp</span></span><br></pre></td></tr></table></figure>\n\n\n<p>响应内容如下：</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">   <span class=\"attr\">&quot;state&quot;</span> : <span class=\"string\">&quot;SUCCEEDED&quot;</span>,</span><br><span class=\"line\">   <span class=\"attr\">&quot;sessionId&quot;</span> : <span class=\"string\">&quot;ee3bc004-4586-43de-bac0-b69d6db7a869&quot;</span>,</span><br><span class=\"line\">   <span class=\"attr\">&quot;body&quot;</span> : &#123;</span><br><span class=\"line\">      <span class=\"attr\">&quot;results&quot;</span> : [</span><br><span class=\"line\">         &#123;</span><br><span class=\"line\">            <span class=\"attr\">&quot;type&quot;</span> : <span class=\"string\">&quot;version&quot;</span>,</span><br><span class=\"line\">            <span class=\"attr\">&quot;version&quot;</span> : <span class=\"string\">&quot;3.3.7&quot;</span>,</span><br><span class=\"line\">            <span class=\"attr\">&quot;jobId&quot;</span> : <span class=\"number\">5</span></span><br><span class=\"line\">         &#125;,</span><br><span class=\"line\">         &#123;</span><br><span class=\"line\">            <span class=\"attr\">&quot;jobId&quot;</span> : <span class=\"number\">5</span>,</span><br><span class=\"line\">            <span class=\"attr\">&quot;statusCode&quot;</span> : <span class=\"number\">0</span>,</span><br><span class=\"line\">            <span class=\"attr\">&quot;type&quot;</span> : <span class=\"string\">&quot;status&quot;</span></span><br><span class=\"line\">         &#125;</span><br><span class=\"line\">      ],</span><br><span class=\"line\">      <span class=\"attr\">&quot;timeExpired&quot;</span> : <span class=\"literal\">false</span>,</span><br><span class=\"line\">      <span class=\"attr\">&quot;command&quot;</span> : <span class=\"string\">&quot;version&quot;</span>,</span><br><span class=\"line\">      <span class=\"attr\">&quot;jobStatus&quot;</span> : <span class=\"string\">&quot;TERMINATED&quot;</span>,</span><br><span class=\"line\">      <span class=\"attr\">&quot;jobId&quot;</span> : <span class=\"number\">5</span></span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n<p>响应数据解析：</p>\n<ul>\n<li><code>state</code>: 请求处理状态，参考“接口响应状态”说明</li>\n<li><code>sessionId</code>: Arthas会话ID，一次性命令自动创建及销毁临时会话</li>\n<li><code>body.jobId</code>: 命令的任务ID，同一任务输出的所有Result都是相同的jobId</li>\n<li><code>body.jobStatus</code>: 任务状态，同步执行正常结束为<code>TERMINATED</code></li>\n<li><code>body.timeExpired</code>: 任务执行是否超时</li>\n<li><code>body/results</code>: 命令执行的结果列表</li>\n</ul>\n<p><strong>命令结果格式说明</strong></p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[&#123;</span><br><span class=\"line\">   <span class=\"attr\">&quot;type&quot;</span> : <span class=\"string\">&quot;version&quot;</span>,</span><br><span class=\"line\">   <span class=\"attr\">&quot;version&quot;</span> : <span class=\"string\">&quot;3.3.7&quot;</span>,</span><br><span class=\"line\">   <span class=\"attr\">&quot;jobId&quot;</span> : <span class=\"number\">5</span></span><br><span class=\"line\">&#125;,</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">   <span class=\"attr\">&quot;jobId&quot;</span> : <span class=\"number\">5</span>,</span><br><span class=\"line\">   <span class=\"attr\">&quot;statusCode&quot;</span> : <span class=\"number\">0</span>,</span><br><span class=\"line\">   <span class=\"attr\">&quot;type&quot;</span> : <span class=\"string\">&quot;status&quot;</span></span><br><span class=\"line\">&#125;]</span><br></pre></td></tr></table></figure>\n\n\n<ul>\n<li><code>type</code> : 命令结果类型，除了<code>status</code>等特殊的几个外，其它的保持与Arthas命令名称一致。请参考”特殊命令结果”小节。</li>\n<li><code>jobId</code> : 处理命令的任务ID。</li>\n<li>其它字段为每个不同命令的数据。</li>\n</ul>\n<p>注意：也可以使用一次性命令的方式执行watch/trace等连续输出的命令，但不能中断命令执行，可能出现长时间没有结束的问题。请参考”watch命令输出map对象”小节的示例。</p>\n<p>请尽量按照以下方式处理：</p>\n<ul>\n<li>设置合理的<code>execTimeout</code>，到达超时时间后强制中断命令执行，避免长时间挂起。</li>\n<li>通过<code>-n</code>参数指定较少的执行次数。</li>\n<li>保证命令匹配的方法可以成功命中和condition-express编写正确，如果watch/trace没有命中就算指定<code>-n 1</code>也会挂起等待到执行超时。</li>\n</ul>\n<h2><span id=\"会话交互\">会话交互</span></h2><p>由用户创建及管理Arthas会话，适用于复杂的交互过程。访问流程如下：</p>\n<ul>\n<li>创建会话</li>\n<li>加入会话(可选）</li>\n<li>拉取命令结果</li>\n<li>执行一系列命令</li>\n<li>中断命令执行</li>\n<li>关闭会话</li>\n</ul>\n<h5><span id=\"创建会话\">创建会话</span></h5><p>创建会话, 保存输出到bash环境变量</p>\n<p><code>session*data=$(curl -Ss -XPOST http://localhost:8563/api -d &#39;;&#123; &quot;action&quot;:&quot;init*session&quot; &#125; &#39;)</code></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"variable\">$session_data</span> | json_pp</span><br></pre></td></tr></table></figure>\n\n\n<p>注： <code>json_pp</code> 工具将输出内容格式化为pretty json。</p>\n<p>响应结果：</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">   <span class=\"attr\">&quot;sessionId&quot;</span> : <span class=\"string\">&quot;b09f1353-202c-407b-af24-701b744f971e&quot;</span>,</span><br><span class=\"line\">   <span class=\"attr\">&quot;consumerId&quot;</span> : <span class=\"string\">&quot;5ae4e5fbab8b4e529ac404f260d4e2d1_1&quot;</span>,</span><br><span class=\"line\">   <span class=\"attr\">&quot;state&quot;</span> : <span class=\"string\">&quot;SUCCEEDED&quot;</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n<p>提取会话ID和消费者ID。</p>\n<p>当前会话ID为：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">session_id=$(<span class=\"built_in\">echo</span> <span class=\"variable\">$session_data</span> | sed <span class=\"string\">&#x27;s/.*&quot;sessionId&quot;:&quot;\\([^&quot;]*\\)&quot;.*/\\1/g&#x27;</span>);<span class=\"built_in\">echo</span> <span class=\"variable\">$session_id</span></span><br></pre></td></tr></table></figure>\n\n\n<p><code>b09f1353-202c-407b-af24-701b744f971e</code>;</p>\n<p>请记下这里的会话ID，在Terminal 4中需要手动输入。</p>\n<p>当前消费者ID为：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">consumer_id=$(<span class=\"built_in\">echo</span> <span class=\"variable\">$session_data</span> | sed <span class=\"string\">&#x27;s/.*&quot;consumerId&quot;:&quot;\\([^&quot;]*\\)&quot;.*/\\1/g&#x27;</span>);<span class=\"built_in\">echo</span> <span class=\"variable\">$consumer_id</span></span><br></pre></td></tr></table></figure>\n\n<p><code>5ae4e5fbab8b4e529ac404f260d4e2d1_1</code>。</p>\n<h5><span id=\"加入会话\">加入会话</span></h5><p>指定要加入的会话ID，服务端将分配一个新的消费者ID。多个消费者可以接收到同一个会话的命令结果。本接口用于支持多人共享同一个会话或刷新页面后重新拉取会话历史记录。</p>\n<p>加入会话，保存输出到bash环境变量</p>\n<p><code>session*data=$(curl -Ss -XPOST http://localhost:8563/api -d &#39;;&#123; &quot;action&quot;:&quot;join*session&quot;, &quot;sessionId&quot; : &quot;&#39;&quot;$session_id&quot;&#39;&quot; &#125; &#39;)</code></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"variable\">$session_data</span> | json_pp</span><br></pre></td></tr></table></figure>\n\n\n<p>响应结果：</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">   <span class=\"attr\">&quot;consumerId&quot;</span> : <span class=\"string\">&quot;8f7f6ad7bc2d4cb5aa57a530927a95cc_2&quot;</span>,</span><br><span class=\"line\">   <span class=\"attr\">&quot;sessionId&quot;</span> : <span class=\"string\">&quot;b09f1353-202c-407b-af24-701b744f971e&quot;</span>,</span><br><span class=\"line\">   <span class=\"attr\">&quot;state&quot;</span> : <span class=\"string\">&quot;SUCCEEDED&quot;</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n<p>提取消费者ID。</p>\n<p>新的消费者ID为</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">consumer_id=$(<span class=\"built_in\">echo</span> <span class=\"variable\">$session_data</span> | sed <span class=\"string\">&#x27;s/.*&quot;consumerId&quot;:&quot;\\([^&quot;]*\\)&quot;.*/\\1/g&#x27;</span>);<span class=\"built_in\">echo</span> <span class=\"variable\">$consumer_id</span></span><br></pre></td></tr></table></figure>\n\n<p><code>8f7f6ad7bc2d4cb5aa57a530927a95cc_2</code> 。</p>\n<p>请记下这里的消费者ID，在Terminal 4中需要手动输入。</p>\n<h5><span id=\"拉取命令结果\">拉取命令结果</span></h5><p>拉取命令结果消息的action为<code>pull_results</code>。请使用Http long-polling方式，定时循环拉取结果消息。 消费者的超时时间为5分钟，超时后需要调用<code>join_session</code>分配新的消费者。每个消费者单独分配一个缓存队列，按顺序拉取命令结果，不会影响到其它消费者。</p>\n<p>请求参数需要指定会话ID及消费者ID:</p>\n<p><code>curl -Ss -XPOST http://localhost:8563/api -d &#39;;&#123; &quot;action&quot;:&quot;pull*results&quot;, &quot;sessionId&quot; : &quot;&#39;&quot;$session*id&quot;&#39;&quot;, &quot;consumerId&quot; : &quot;&#39;&quot;$consumer_id&quot;&#39;&quot; &#125;</code></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">&#x27; | json_pp</span></span><br></pre></td></tr></table></figure>\n\n<p>用Bash脚本定时拉取结果消息:</p>\n<p>请在Terminal 4中输入Terminal 3中的会话ID，这里的例子如下：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">b09f1353-202c-407b-af24-701b744f971e</span><br><span class=\"line\">echo -n &quot;Enter your sessionId in T3:&quot;;read  session_id</span><br></pre></td></tr></table></figure>\n\n\n<p>同样，接着输入Terminal 3中的消费者ID，这里的例子如下：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">8f7f6ad7bc2d4cb5aa57a530927a95cc_2</span><br><span class=\"line\">echo -n &quot;Enter your consumerId in T3:&quot;;read  consumer_id</span><br></pre></td></tr></table></figure>\n\n<p><code>while true; do curl -Ss -XPOST http://localhost:8563/api -d &#39;;&#123; &quot;action&quot;:&quot;pull*results&quot;, &quot;sessionId&quot; : &quot;&#39;&quot;$session*id&quot;&#39;&quot;, &quot;consumerId&quot; : &quot;&#39;&quot;$consumer_id&quot;&#39;&quot; &#125;</code></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">&#x27; | json_pp; sleep 2; done</span></span><br></pre></td></tr></table></figure>\n\n<p>响应内容如下：</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">   <span class=\"attr\">&quot;body&quot;</span> : &#123;</span><br><span class=\"line\">      <span class=\"attr\">&quot;results&quot;</span> : [</span><br><span class=\"line\">         &#123;</span><br><span class=\"line\">            <span class=\"attr\">&quot;inputStatus&quot;</span> : <span class=\"string\">&quot;DISABLED&quot;</span>,</span><br><span class=\"line\">            <span class=\"attr\">&quot;jobId&quot;</span> : <span class=\"number\">0</span>,</span><br><span class=\"line\">            <span class=\"attr\">&quot;type&quot;</span> : <span class=\"string\">&quot;input_status&quot;</span></span><br><span class=\"line\">         &#125;,</span><br><span class=\"line\">         &#123;</span><br><span class=\"line\">            <span class=\"attr\">&quot;type&quot;</span> : <span class=\"string\">&quot;message&quot;</span>,</span><br><span class=\"line\">            <span class=\"attr\">&quot;jobId&quot;</span> : <span class=\"number\">0</span>,</span><br><span class=\"line\">            <span class=\"attr\">&quot;message&quot;</span> : <span class=\"string\">&quot;Welcome to arthas!&quot;</span></span><br><span class=\"line\">         &#125;,</span><br><span class=\"line\">         &#123;</span><br><span class=\"line\">            <span class=\"attr\">&quot;tutorials&quot;</span> : <span class=\"string\">&quot;https://arthas.aliyun.com/doc/arthas-tutorials.html&quot;</span>,</span><br><span class=\"line\">            <span class=\"attr\">&quot;time&quot;</span> : <span class=\"string\">&quot;2020-08-06 15:56:43&quot;</span>,</span><br><span class=\"line\">            <span class=\"attr\">&quot;type&quot;</span> : <span class=\"string\">&quot;welcome&quot;</span>,</span><br><span class=\"line\">            <span class=\"attr\">&quot;jobId&quot;</span> : <span class=\"number\">0</span>,</span><br><span class=\"line\">            <span class=\"attr\">&quot;pid&quot;</span> : <span class=\"string\">&quot;7909&quot;</span>,</span><br><span class=\"line\">            <span class=\"attr\">&quot;wiki&quot;</span> : <span class=\"string\">&quot;https://arthas.aliyun.com/doc&quot;</span>,</span><br><span class=\"line\">            <span class=\"attr\">&quot;version&quot;</span> : <span class=\"string\">&quot;3.3.7&quot;</span></span><br><span class=\"line\">         &#125;,</span><br><span class=\"line\">         &#123;</span><br><span class=\"line\">            <span class=\"attr\">&quot;inputStatus&quot;</span> : <span class=\"string\">&quot;ALLOW_INPUT&quot;</span>,</span><br><span class=\"line\">            <span class=\"attr\">&quot;type&quot;</span> : <span class=\"string\">&quot;input_status&quot;</span>,</span><br><span class=\"line\">            <span class=\"attr\">&quot;jobId&quot;</span> : <span class=\"number\">0</span></span><br><span class=\"line\">         &#125;</span><br><span class=\"line\">      ]</span><br><span class=\"line\">   &#125;,</span><br><span class=\"line\">   <span class=\"attr\">&quot;sessionId&quot;</span> : <span class=\"string\">&quot;b09f1353-202c-407b-af24-701b744f971e&quot;</span>,</span><br><span class=\"line\">   <span class=\"attr\">&quot;consumerId&quot;</span> : <span class=\"string\">&quot;8f7f6ad7bc2d4cb5aa57a530927a95cc_2&quot;</span>,</span><br><span class=\"line\">   <span class=\"attr\">&quot;state&quot;</span> : <span class=\"string\">&quot;SUCCEEDED&quot;</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h5><span id=\"异步执行命令\">异步执行命令</span></h5><p><code>curl -Ss -XPOST http://localhost:8563/api -d &#39;&#39;&#39;;&#123; &quot;action&quot;:&quot;async*exec&quot;, &quot;command&quot;:&quot;watch demo.MathGame primeFactors \\&quot;&#123;params, returnObj, throwExp&#125;\\&quot; &quot;, &quot;sessionId&quot; : &quot;&#39;&quot;$session*id&quot;&#39;&quot; &#125;</code></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">&#x27;&#x27;</span><span class=\"string\">&#x27; | json_pp</span></span><br></pre></td></tr></table></figure>\n\n\n<p><code>async_exec</code> 的结果：</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">   <span class=\"attr\">&quot;sessionId&quot;</span> : <span class=\"string\">&quot;2b085b5d-883b-4914-ab35-b2c5c1d5aa2a&quot;</span>,</span><br><span class=\"line\">   <span class=\"attr\">&quot;state&quot;</span> : <span class=\"string\">&quot;SCHEDULED&quot;</span>,</span><br><span class=\"line\">   <span class=\"attr\">&quot;body&quot;</span> : &#123;</span><br><span class=\"line\">      <span class=\"attr\">&quot;jobStatus&quot;</span> : <span class=\"string\">&quot;READY&quot;</span>,</span><br><span class=\"line\">      <span class=\"attr\">&quot;jobId&quot;</span> : <span class=\"number\">3</span>,</span><br><span class=\"line\">      <span class=\"attr\">&quot;command&quot;</span> : <span class=\"string\">&quot;watch demo.MathGame primeFactors \\&quot;&#123;params, returnObj, throwExp&#125;\\&quot; &quot;</span></span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n<ul>\n<li><code>state</code> : <code>SCHEDULED</code> 状态表示已经解析命令生成任务，但未开始执行。</li>\n<li><code>body.jobId</code> : 异步执行命令的任务ID，可以根据此任务ID来过滤在<code>pull_results</code>输出的命令结果。</li>\n<li><code>body.jobStatus</code> : 任务状态<code>READY</code>表示未开始执行。 切换到上面自动拉取结果消息脚本的shell（Terminal 4），查看输出：</li>\n</ul>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">   <span class=\"attr\">&quot;body&quot;</span> : &#123;</span><br><span class=\"line\">      <span class=\"attr\">&quot;results&quot;</span> : [</span><br><span class=\"line\">         &#123;</span><br><span class=\"line\">            <span class=\"attr\">&quot;type&quot;</span> : <span class=\"string\">&quot;command&quot;</span>,</span><br><span class=\"line\">            <span class=\"attr\">&quot;jobId&quot;</span> : <span class=\"number\">3</span>,</span><br><span class=\"line\">            <span class=\"attr\">&quot;state&quot;</span> : <span class=\"string\">&quot;SCHEDULED&quot;</span>,</span><br><span class=\"line\">            <span class=\"attr\">&quot;command&quot;</span> : <span class=\"string\">&quot;watch demo.MathGame primeFactors \\&quot;&#123;params, returnObj, throwExp&#125;\\&quot; &quot;</span></span><br><span class=\"line\">         &#125;,</span><br><span class=\"line\">         &#123;</span><br><span class=\"line\">            <span class=\"attr\">&quot;inputStatus&quot;</span> : <span class=\"string\">&quot;ALLOW_INTERRUPT&quot;</span>,</span><br><span class=\"line\">            <span class=\"attr\">&quot;jobId&quot;</span> : <span class=\"number\">0</span>,</span><br><span class=\"line\">            <span class=\"attr\">&quot;type&quot;</span> : <span class=\"string\">&quot;input_status&quot;</span></span><br><span class=\"line\">         &#125;,</span><br><span class=\"line\">         &#123;</span><br><span class=\"line\">            <span class=\"attr\">&quot;success&quot;</span> : <span class=\"literal\">true</span>,</span><br><span class=\"line\">            <span class=\"attr\">&quot;jobId&quot;</span> : <span class=\"number\">3</span>,</span><br><span class=\"line\">            <span class=\"attr\">&quot;effect&quot;</span> : &#123;</span><br><span class=\"line\">               <span class=\"attr\">&quot;listenerId&quot;</span> : <span class=\"number\">3</span>,</span><br><span class=\"line\">               <span class=\"attr\">&quot;cost&quot;</span> : <span class=\"number\">24</span>,</span><br><span class=\"line\">               <span class=\"attr\">&quot;classCount&quot;</span> : <span class=\"number\">1</span>,</span><br><span class=\"line\">               <span class=\"attr\">&quot;methodCount&quot;</span> : <span class=\"number\">1</span></span><br><span class=\"line\">            &#125;,</span><br><span class=\"line\">            <span class=\"attr\">&quot;type&quot;</span> : <span class=\"string\">&quot;enhancer&quot;</span></span><br><span class=\"line\">         &#125;,</span><br><span class=\"line\">         &#123;</span><br><span class=\"line\">            <span class=\"attr\">&quot;sizeLimit&quot;</span> : <span class=\"number\">10485760</span>,</span><br><span class=\"line\">            <span class=\"attr\">&quot;expand&quot;</span> : <span class=\"number\">1</span>,</span><br><span class=\"line\">            <span class=\"attr\">&quot;jobId&quot;</span> : <span class=\"number\">3</span>,</span><br><span class=\"line\">            <span class=\"attr\">&quot;type&quot;</span> : <span class=\"string\">&quot;watch&quot;</span>,</span><br><span class=\"line\">            <span class=\"attr\">&quot;cost&quot;</span> : <span class=\"number\">0.071499</span>,</span><br><span class=\"line\">            <span class=\"attr\">&quot;ts&quot;</span> : <span class=\"number\">1596703453237</span>,</span><br><span class=\"line\">            <span class=\"attr\">&quot;value&quot;</span> : [</span><br><span class=\"line\">               [</span><br><span class=\"line\">                  <span class=\"number\">-170365</span></span><br><span class=\"line\">               ],</span><br><span class=\"line\">               <span class=\"literal\">null</span>,</span><br><span class=\"line\">               &#123;</span><br><span class=\"line\">                  <span class=\"attr\">&quot;stackTrace&quot;</span> : [</span><br><span class=\"line\">                     &#123;</span><br><span class=\"line\">                        <span class=\"attr\">&quot;className&quot;</span> : <span class=\"string\">&quot;demo.MathGame&quot;</span>,</span><br><span class=\"line\">                        <span class=\"attr\">&quot;classLoaderName&quot;</span> : <span class=\"string\">&quot;app&quot;</span>,</span><br><span class=\"line\">                        <span class=\"attr\">&quot;methodName&quot;</span> : <span class=\"string\">&quot;primeFactors&quot;</span>,</span><br><span class=\"line\">                        <span class=\"attr\">&quot;nativeMethod&quot;</span> : <span class=\"literal\">false</span>,</span><br><span class=\"line\">                        <span class=\"attr\">&quot;lineNumber&quot;</span> : <span class=\"number\">46</span>,</span><br><span class=\"line\">                        <span class=\"attr\">&quot;fileName&quot;</span> : <span class=\"string\">&quot;MathGame.java&quot;</span></span><br><span class=\"line\">                     &#125;,</span><br><span class=\"line\">                     ...</span><br><span class=\"line\">                  ],</span><br><span class=\"line\">                  <span class=\"attr\">&quot;localizedMessage&quot;</span> : <span class=\"string\">&quot;number is: -170365, need &gt;= 2&quot;</span>,</span><br><span class=\"line\">                  <span class=\"attr\">&quot;@type&quot;</span> : <span class=\"string\">&quot;java.lang.IllegalArgumentException&quot;</span>,</span><br><span class=\"line\">                  <span class=\"attr\">&quot;message&quot;</span> : <span class=\"string\">&quot;number is: -170365, need &gt;= 2&quot;</span></span><br><span class=\"line\">               &#125;</span><br><span class=\"line\">            ]</span><br><span class=\"line\">         &#125;,</span><br><span class=\"line\">         &#123;</span><br><span class=\"line\">            <span class=\"attr\">&quot;type&quot;</span> : <span class=\"string\">&quot;watch&quot;</span>,</span><br><span class=\"line\">            <span class=\"attr\">&quot;cost&quot;</span> : <span class=\"number\">0.033375</span>,</span><br><span class=\"line\">            <span class=\"attr\">&quot;jobId&quot;</span> : <span class=\"number\">3</span>,</span><br><span class=\"line\">            <span class=\"attr\">&quot;ts&quot;</span> : <span class=\"number\">1596703454241</span>,</span><br><span class=\"line\">            <span class=\"attr\">&quot;value&quot;</span> : [</span><br><span class=\"line\">               [</span><br><span class=\"line\">                  <span class=\"number\">1</span></span><br><span class=\"line\">               ],</span><br><span class=\"line\">               [</span><br><span class=\"line\">                  <span class=\"number\">2</span>,</span><br><span class=\"line\">                  <span class=\"number\">2</span>,</span><br><span class=\"line\">                  <span class=\"number\">2</span>,</span><br><span class=\"line\">                  <span class=\"number\">2</span>,</span><br><span class=\"line\">                  <span class=\"number\">13</span>,</span><br><span class=\"line\">                  <span class=\"number\">491</span></span><br><span class=\"line\">               ],</span><br><span class=\"line\">               <span class=\"literal\">null</span></span><br><span class=\"line\">            ],</span><br><span class=\"line\">            <span class=\"attr\">&quot;sizeLimit&quot;</span> : <span class=\"number\">10485760</span>,</span><br><span class=\"line\">            <span class=\"attr\">&quot;expand&quot;</span> : <span class=\"number\">1</span></span><br><span class=\"line\">         &#125;</span><br><span class=\"line\">      ]</span><br><span class=\"line\">   &#125;,</span><br><span class=\"line\">   <span class=\"attr\">&quot;consumerId&quot;</span> : <span class=\"string\">&quot;8ecb9cb7c7804d5d92e258b23d5245cc_1&quot;</span>,</span><br><span class=\"line\">   <span class=\"attr\">&quot;sessionId&quot;</span> : <span class=\"string\">&quot;2b085b5d-883b-4914-ab35-b2c5c1d5aa2a&quot;</span>,</span><br><span class=\"line\">   <span class=\"attr\">&quot;state&quot;</span> : <span class=\"string\">&quot;SUCCEEDED&quot;</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n<p>watch命令结果的<code>value</code>为watch-experss的值，上面命令中为<code>&#123;params, returnObj, throwExp&#125;</code>，所以watch结果的value为一个长度为3的数组，每个元素分别对应相应顺序的表达式。 请参考”watch命令输出map对象”小节。</p>\n<h5><span id=\"中断命令执行\">中断命令执行</span></h5><p>中断会话正在运行的前台Job（前台任务）：</p>\n<p><code>curl -Ss -XPOST http://localhost:8563/api -d &#39;&#39;&#39;;&#123; &quot;action&quot;:&quot;interrupt*job&quot;, &quot;sessionId&quot; : &quot;&#39;&quot;$session*id&quot;&#39;&quot; &#125;</code></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">&#x27;&#x27;</span><span class=\"string\">&#x27; | json_pp</span></span><br></pre></td></tr></table></figure>\n\n\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">   <span class=\"attr\">&quot;state&quot;</span> : <span class=\"string\">&quot;SUCCEEDED&quot;</span>,</span><br><span class=\"line\">   <span class=\"attr\">&quot;body&quot;</span> : &#123;</span><br><span class=\"line\">      <span class=\"attr\">&quot;jobStatus&quot;</span> : <span class=\"string\">&quot;TERMINATED&quot;</span>,</span><br><span class=\"line\">      <span class=\"attr\">&quot;jobId&quot;</span> : <span class=\"number\">3</span></span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n<h5><span id=\"关闭会话\">关闭会话</span></h5><p>指定会话ID，关闭会话。</p>\n<p><code>curl -Ss -XPOST http://localhost:8563/api -d &#39;&#39;&#39;;&#123; &quot;action&quot;:&quot;close*session&quot;, &quot;sessionId&quot; : &quot;&#39;&quot;$session*id&quot;&#39;&quot; &#125;</code></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">&#x27;&#x27;</span><span class=\"string\">&#x27; | json_pp</span></span><br></pre></td></tr></table></figure>\n\n\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">   <span class=\"attr\">&quot;state&quot;</span> : <span class=\"string\">&quot;SUCCEEDED&quot;</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n<h2><span id=\"web-ui\">Web UI</span></h2><p><img src=\"/jlynet.github.io/2021/08/07/Java%E8%AF%8A%E6%96%AD%E5%B7%A5%E5%85%B7Arthas%E6%9C%80%E4%BD%B3%E5%AE%9E%E8%B7%B5/ArthasHttpAPI%E6%A1%88%E4%BE%8B/arthas-web-ui.png\" alt=\"arthas web ui\"></p>\n<p>一个基于Http API接口实现的Web UI，访问地址为： 。</p>\n<p>已实现功能：</p>\n<ul>\n<li>创建会话</li>\n<li>复制并打开url加入会话，多人共享会话</li>\n<li>周期性拉取会话命令结果消息</li>\n<li>刷新页面或者加入会话拉取会话历史命令消息</li>\n<li>输入命令/中断命令状态控制</li>\n</ul>\n<p>待开发功能：</p>\n<ul>\n<li>改进将命令结果消息可读性</li>\n<li>命令输入支持自动完成及命令模板</li>\n<li>提供命令帮助</li>\n<li>支持个人选项设置</li>\n</ul>\n<h2><span id=\"watch命令输出map对象\">watch命令输出map对象</span></h2><p>watch的结果值由计算<code>watch-express</code> ognl表达式产生，可以通过改变ognl表达式来生成想要的值，请参考<a href=\"https://commons.apache.org/proper/commons-ognl/language-guide.html\">OGNL文档</a>。</p>\n<blockquote>\n<p>Maps can also be created using a special syntax.</p>\n<h1><span id=\"foo-foo-value-bar-bar-value\">{ “foo” : “foo value”, “bar” : “bar value” }</span></h1></blockquote>\n<p>文章拷贝来源：<a href=\"https://start.aliyun.com/course?spm=a2ck6.17690074.0.0.28bc2e7dHTphXs&amp;id=PaiFAkJM\">https://start.aliyun.com/course?spm=a2ck6.17690074.0.0.28bc2e7dHTphXs&amp;id=PaiFAkJM</a></p>\n","site":{"data":{}},"excerpt":"","more":"<!-- toc -->\n\n<ul>\n<li><a href=\"#%E5%90%AF%E5%8A%A8arthas-demo\">启动arthas demo</a></li>\n<li><a href=\"#%E5%90%AF%E5%8A%A8arthas-boot\">启动arthas-boot</a></li>\n<li><a href=\"#http-api\">Http API</a><ul>\n<li><a href=\"#%E6%AD%A4%E6%95%99%E7%A8%8B%E6%9A%82%E6%97%B6%E6%97%A0%E6%B3%95%E5%9C%A8handson%E7%8E%AF%E5%A2%83%E4%B8%8B%E8%BF%90%E8%A1%8C%E5%90%8C%E5%AD%A6%E4%BB%AC%E5%8F%AF%E4%BB%A5%E5%9C%A8%E6%9C%AC%E5%9C%B0%E5%B0%9D%E8%AF%95\">此教程暂时无法在Handson环境下运行,同学们可以在本地尝试</a><ul>\n<li><a href=\"#%E6%A6%82%E8%A7%88\">概览</a><ul>\n<li><a href=\"#%E8%AE%BF%E9%97%AE%E5%9C%B0%E5%9D%80\">访问地址</a></li>\n<li><a href=\"#%E8%AF%B7%E6%B1%82%E6%95%B0%E6%8D%AE%E6%A0%BC%E5%BC%8F\">请求数据格式</a></li>\n<li><a href=\"#%E8%AF%B7%E6%B1%82action\">请求Action</a></li>\n<li><a href=\"#%E5%93%8D%E5%BA%94%E7%8A%B6%E6%80%81\">响应状态</a></li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><a href=\"#%E4%B8%80%E6%AC%A1%E6%80%A7%E5%91%BD%E4%BB%A4\">一次性命令</a></li>\n<li><a href=\"#%E4%BC%9A%E8%AF%9D%E4%BA%A4%E4%BA%92\">会话交互</a><pre><code>* [创建会话](#创建会话)\n* [加入会话](#加入会话)\n* [拉取命令结果](#拉取命令结果)\n* [异步执行命令](#异步执行命令)\n* [中断命令执行](#中断命令执行)\n* [关闭会话](#关闭会话)\n</code></pre>\n</li>\n<li><a href=\"#web-ui\">Web UI</a></li>\n<li><a href=\"#watch%E5%91%BD%E4%BB%A4%E8%BE%93%E5%87%BAmap%E5%AF%B9%E8%B1%A1\">watch命令输出map对象</a></li>\n</ul>\n<ul>\n<li><a href=\"#foo-foo-value-bar-bar-value\">{ “foo” : “foo value”, “bar” : “bar value” }</a></li>\n</ul>\n<!-- tocstop -->\n\n<p><img src=\"/jlynet.github.io/2021/08/07/Java%E8%AF%8A%E6%96%AD%E5%B7%A5%E5%85%B7Arthas%E6%9C%80%E4%BD%B3%E5%AE%9E%E8%B7%B5/ArthasHttpAPI%E6%A1%88%E4%BE%8B/arthas.png\" alt=\"Arthas\"></p>\n<p><code>Arthas</code> 是Alibaba开源的Java诊断工具，深受开发者喜爱。在线排查问题，无需重启；动态跟踪Java代码；实时监控JVM状态。</p>\n<p><code>Arthas</code> 支持JDK 6+，支持Linux/Mac/Windows，采用命令行交互模式，同时提供丰富的 <code>Tab</code> 自动补全功能，进一步方便进行问题的定位和诊断。</p>\n<p>当你遇到以下类似问题而束手无策时，Arthas可以帮助你解决：</p>\n<ul>\n<li>这个类从哪个 jar 包加载的？为什么会报各种类相关的 Exception？</li>\n<li>我改的代码为什么没有执行到？难道是我没 commit？分支搞错了？</li>\n<li>遇到问题无法在线上 debug，难道只能通过加日志再重新发布吗？</li>\n<li>线上遇到某个用户的数据处理有问题，但线上同样无法 debug，线下无法重现！</li>\n<li>是否有一个全局视角来查看系统的运行状况？</li>\n<li>有什么办法可以监控到JVM的实时运行状态？</li>\n<li>怎么快速定位应用的热点，生成火焰图？</li>\n</ul>\n<p>本教程会以一个简单的应用为例，演示http-api案例。</p>\n<ul>\n<li>Github: <a href=\"https://github.com/alibaba/arthas\">https://github.com/alibaba/arthas</a></li>\n<li>文档: <a href=\"https://arthas.aliyun.com/doc\">https://arthas.aliyun.com/doc</a></li>\n</ul>\n<h2 id=\"启动arthas-demo\"><a href=\"#启动arthas-demo\" class=\"headerlink\" title=\"启动arthas demo\"></a>启动arthas demo</h2><p>下载<code>arthas-demo.jar</code>，再用<code>java -jar</code>命令启动：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wget https://arthas.aliyun.com/arthas-demo.jar;java -jar arthas-demo.jar</span><br></pre></td></tr></table></figure>\n\n\n<p><code>arthas-demo</code>是一个很简单的程序，它随机生成整数，再执行因式分解，把结果打印出来。如果生成的随机数是负数，则会打印提示信息。</p>\n<h2 id=\"启动arthas-boot\"><a href=\"#启动arthas-boot\" class=\"headerlink\" title=\"启动arthas-boot\"></a>启动arthas-boot</h2><p>在新的<code>Terminal 2</code>里，下载<code>arthas-boot.jar</code>，再用<code>java -jar</code>命令启动：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wget https://arthas.aliyun.com/arthas-boot.jar;java -jar arthas-boot.jar</span><br></pre></td></tr></table></figure>\n\n\n<p><code>arthas-boot</code>是<code>Arthas</code>的启动程序，它启动后，会列出所有的Java进程，用户可以选择需要诊断的目标进程。</p>\n<p>选择第一个进程，输入 <code>1</code> ，再<code>Enter/回车</code>：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1</span><br></pre></td></tr></table></figure>\n\n\n<p>Attach成功之后，会打印Arthas LOGO。输入 <code>help</code> 可以获取到更多的帮助信息。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">help</span></span><br></pre></td></tr></table></figure>\n\n\n<p><img src=\"/jlynet.github.io/2021/08/07/Java%E8%AF%8A%E6%96%AD%E5%B7%A5%E5%85%B7Arthas%E6%9C%80%E4%BD%B3%E5%AE%9E%E8%B7%B5/ArthasHttpAPI%E6%A1%88%E4%BE%8B/O1CN01HzatXZ1RgccrlT90M_!!6000000002141-2-tps-529-244.png\" alt=\"Arthas Boot\"></p>\n<h2 id=\"Http-API\"><a href=\"#Http-API\" class=\"headerlink\" title=\"Http API\"></a>Http API</h2><h3 id=\"此教程暂时无法在Handson环境下运行-同学们可以在本地尝试\"><a href=\"#此教程暂时无法在Handson环境下运行-同学们可以在本地尝试\" class=\"headerlink\" title=\"此教程暂时无法在Handson环境下运行,同学们可以在本地尝试\"></a>此教程暂时无法在Handson环境下运行,同学们可以在本地尝试</h3><h4 id=\"概览\"><a href=\"#概览\" class=\"headerlink\" title=\"概览\"></a>概览</h4><p>Http API 提供类似RESTful的交互接口，请求和响应均为JSON格式的数据。相对于Telnet/WebConsole的输出非结构化文本数据，Http API可以提供结构化的数据，支持更复杂的交互功能，比如特定应用场景的一系列诊断操作。</p>\n<h5 id=\"访问地址\"><a href=\"#访问地址\" class=\"headerlink\" title=\"访问地址\"></a>访问地址</h5><p>Http API接口地址为：<code>http://ip:port/api</code>，必须使用POST方式提交请求参数。如POST <code>http://127.0.0.1:8563/api</code> 。</p>\n<p>注意：telnet服务的3658端口与Chrome浏览器有兼容性问题，建议使用http端口8563来访问http接口。</p>\n<h5 id=\"请求数据格式\"><a href=\"#请求数据格式\" class=\"headerlink\" title=\"请求数据格式\"></a>请求数据格式</h5><figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"attr\">&quot;action&quot;</span>: <span class=\"string\">&quot;exec&quot;</span>,</span><br><span class=\"line\">  <span class=\"attr\">&quot;requestId&quot;</span>: <span class=\"string\">&quot;req112&quot;</span>,</span><br><span class=\"line\">  <span class=\"attr\">&quot;sessionId&quot;</span>: <span class=\"string\">&quot;94766d3c-8b39-42d3-8596-98aee3ccbefb&quot;</span>,</span><br><span class=\"line\">  <span class=\"attr\">&quot;consumerId&quot;</span>: <span class=\"string\">&quot;955dbd1325334a84972b0f3ac19de4f7_2&quot;</span>,</span><br><span class=\"line\">  <span class=\"attr\">&quot;command&quot;</span>: <span class=\"string\">&quot;version&quot;</span>,</span><br><span class=\"line\">  <span class=\"attr\">&quot;execTimeout&quot;</span>: <span class=\"string\">&quot;10000&quot;</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n<p>请求数据格式说明：</p>\n<ul>\n<li><code>action</code> : 请求的动作/行为，可选值请参考”请求Action”小节。</li>\n<li><code>requestId</code> : 可选请求ID，由客户端生成。</li>\n<li><code>sessionId</code> : Arthas会话ID，一次性命令不需要设置会话ID。</li>\n<li><code>consumerId</code> : Arthas消费者ID，用于多人共享会话。</li>\n<li><code>command</code> : Arthas command line 。</li>\n<li><code>execTimeout</code> : 命令同步执行的超时时间(ms)，默认为30000。</li>\n</ul>\n<p>注意: 不同的action使用到参数不同，根据具体的action来设置参数。</p>\n<h5 id=\"请求Action\"><a href=\"#请求Action\" class=\"headerlink\" title=\"请求Action\"></a>请求Action</h5><p>目前支持的请求Action如下：</p>\n<ul>\n<li><code>exec</code> : 同步执行命令，命令正常结束或者超时后中断命令执行后返回命令的执行结果。</li>\n<li><code>async_exec</code> : 异步执行命令，立即返回命令的调度结果，命令执行结果通过<code>pull_results</code>获取。</li>\n<li><code>interrupt_job</code> : 中断会话当前的命令，类似Telnet <code>Ctrl + c</code>的功能。</li>\n<li><code>pull_results</code> : 获取异步执行的命令的结果，以http 长轮询（long-polling）方式重复执行</li>\n<li><code>init_session</code> : 创建会话</li>\n<li><code>join_session</code> : 加入会话，用于支持多人共享同一个Arthas会话</li>\n<li><code>close_session</code> : 关闭会话</li>\n</ul>\n<h5 id=\"响应状态\"><a href=\"#响应状态\" class=\"headerlink\" title=\"响应状态\"></a>响应状态</h5><p>响应中的state属性表示请求处理状态，取值如下：</p>\n<ul>\n<li><code>SCHEDULED</code>：异步执行命令时表示已经创建job并已提交到命令执行队列，命令可能还没开始执行或者执行中；</li>\n<li><code>SUCCEEDED</code>：请求处理成功（完成状态）；</li>\n<li><code>FAILED</code>：请求处理失败（完成状态），通常附带message说明原因；</li>\n<li><code>REFUSED</code>：请求被拒绝（完成状态），通常附带message说明原因；</li>\n</ul>\n<h2 id=\"一次性命令\"><a href=\"#一次性命令\" class=\"headerlink\" title=\"一次性命令\"></a>一次性命令</h2><p>与执行批处理命令类似，一次性命令以同步方式执行。不需要创建会话，不需要设置<code>sessionId</code>选项。</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"attr\">&quot;action&quot;</span>: <span class=\"string\">&quot;exec&quot;</span>,</span><br><span class=\"line\">  <span class=\"attr\">&quot;command&quot;</span>: <span class=\"string\">&quot;&lt;Arthas command line&gt;&quot;</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n<p>比如获取Arthas版本号：</p>\n<p><code>curl -Ss -XPOST http://localhost:8563/api -d &#39;;&#123; &quot;action&quot;:&quot;exec&quot;, &quot;command&quot;:&quot;version&quot; &#125;</code></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">&#x27; | json_pp</span></span><br></pre></td></tr></table></figure>\n\n\n<p>响应内容如下：</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">   <span class=\"attr\">&quot;state&quot;</span> : <span class=\"string\">&quot;SUCCEEDED&quot;</span>,</span><br><span class=\"line\">   <span class=\"attr\">&quot;sessionId&quot;</span> : <span class=\"string\">&quot;ee3bc004-4586-43de-bac0-b69d6db7a869&quot;</span>,</span><br><span class=\"line\">   <span class=\"attr\">&quot;body&quot;</span> : &#123;</span><br><span class=\"line\">      <span class=\"attr\">&quot;results&quot;</span> : [</span><br><span class=\"line\">         &#123;</span><br><span class=\"line\">            <span class=\"attr\">&quot;type&quot;</span> : <span class=\"string\">&quot;version&quot;</span>,</span><br><span class=\"line\">            <span class=\"attr\">&quot;version&quot;</span> : <span class=\"string\">&quot;3.3.7&quot;</span>,</span><br><span class=\"line\">            <span class=\"attr\">&quot;jobId&quot;</span> : <span class=\"number\">5</span></span><br><span class=\"line\">         &#125;,</span><br><span class=\"line\">         &#123;</span><br><span class=\"line\">            <span class=\"attr\">&quot;jobId&quot;</span> : <span class=\"number\">5</span>,</span><br><span class=\"line\">            <span class=\"attr\">&quot;statusCode&quot;</span> : <span class=\"number\">0</span>,</span><br><span class=\"line\">            <span class=\"attr\">&quot;type&quot;</span> : <span class=\"string\">&quot;status&quot;</span></span><br><span class=\"line\">         &#125;</span><br><span class=\"line\">      ],</span><br><span class=\"line\">      <span class=\"attr\">&quot;timeExpired&quot;</span> : <span class=\"literal\">false</span>,</span><br><span class=\"line\">      <span class=\"attr\">&quot;command&quot;</span> : <span class=\"string\">&quot;version&quot;</span>,</span><br><span class=\"line\">      <span class=\"attr\">&quot;jobStatus&quot;</span> : <span class=\"string\">&quot;TERMINATED&quot;</span>,</span><br><span class=\"line\">      <span class=\"attr\">&quot;jobId&quot;</span> : <span class=\"number\">5</span></span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n<p>响应数据解析：</p>\n<ul>\n<li><code>state</code>: 请求处理状态，参考“接口响应状态”说明</li>\n<li><code>sessionId</code>: Arthas会话ID，一次性命令自动创建及销毁临时会话</li>\n<li><code>body.jobId</code>: 命令的任务ID，同一任务输出的所有Result都是相同的jobId</li>\n<li><code>body.jobStatus</code>: 任务状态，同步执行正常结束为<code>TERMINATED</code></li>\n<li><code>body.timeExpired</code>: 任务执行是否超时</li>\n<li><code>body/results</code>: 命令执行的结果列表</li>\n</ul>\n<p><strong>命令结果格式说明</strong></p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[&#123;</span><br><span class=\"line\">   <span class=\"attr\">&quot;type&quot;</span> : <span class=\"string\">&quot;version&quot;</span>,</span><br><span class=\"line\">   <span class=\"attr\">&quot;version&quot;</span> : <span class=\"string\">&quot;3.3.7&quot;</span>,</span><br><span class=\"line\">   <span class=\"attr\">&quot;jobId&quot;</span> : <span class=\"number\">5</span></span><br><span class=\"line\">&#125;,</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">   <span class=\"attr\">&quot;jobId&quot;</span> : <span class=\"number\">5</span>,</span><br><span class=\"line\">   <span class=\"attr\">&quot;statusCode&quot;</span> : <span class=\"number\">0</span>,</span><br><span class=\"line\">   <span class=\"attr\">&quot;type&quot;</span> : <span class=\"string\">&quot;status&quot;</span></span><br><span class=\"line\">&#125;]</span><br></pre></td></tr></table></figure>\n\n\n<ul>\n<li><code>type</code> : 命令结果类型，除了<code>status</code>等特殊的几个外，其它的保持与Arthas命令名称一致。请参考”特殊命令结果”小节。</li>\n<li><code>jobId</code> : 处理命令的任务ID。</li>\n<li>其它字段为每个不同命令的数据。</li>\n</ul>\n<p>注意：也可以使用一次性命令的方式执行watch/trace等连续输出的命令，但不能中断命令执行，可能出现长时间没有结束的问题。请参考”watch命令输出map对象”小节的示例。</p>\n<p>请尽量按照以下方式处理：</p>\n<ul>\n<li>设置合理的<code>execTimeout</code>，到达超时时间后强制中断命令执行，避免长时间挂起。</li>\n<li>通过<code>-n</code>参数指定较少的执行次数。</li>\n<li>保证命令匹配的方法可以成功命中和condition-express编写正确，如果watch/trace没有命中就算指定<code>-n 1</code>也会挂起等待到执行超时。</li>\n</ul>\n<h2 id=\"会话交互\"><a href=\"#会话交互\" class=\"headerlink\" title=\"会话交互\"></a>会话交互</h2><p>由用户创建及管理Arthas会话，适用于复杂的交互过程。访问流程如下：</p>\n<ul>\n<li>创建会话</li>\n<li>加入会话(可选）</li>\n<li>拉取命令结果</li>\n<li>执行一系列命令</li>\n<li>中断命令执行</li>\n<li>关闭会话</li>\n</ul>\n<h5 id=\"创建会话\"><a href=\"#创建会话\" class=\"headerlink\" title=\"创建会话\"></a>创建会话</h5><p>创建会话, 保存输出到bash环境变量</p>\n<p><code>session*data=$(curl -Ss -XPOST http://localhost:8563/api -d &#39;;&#123; &quot;action&quot;:&quot;init*session&quot; &#125; &#39;)</code></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"variable\">$session_data</span> | json_pp</span><br></pre></td></tr></table></figure>\n\n\n<p>注： <code>json_pp</code> 工具将输出内容格式化为pretty json。</p>\n<p>响应结果：</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">   <span class=\"attr\">&quot;sessionId&quot;</span> : <span class=\"string\">&quot;b09f1353-202c-407b-af24-701b744f971e&quot;</span>,</span><br><span class=\"line\">   <span class=\"attr\">&quot;consumerId&quot;</span> : <span class=\"string\">&quot;5ae4e5fbab8b4e529ac404f260d4e2d1_1&quot;</span>,</span><br><span class=\"line\">   <span class=\"attr\">&quot;state&quot;</span> : <span class=\"string\">&quot;SUCCEEDED&quot;</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n<p>提取会话ID和消费者ID。</p>\n<p>当前会话ID为：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">session_id=$(<span class=\"built_in\">echo</span> <span class=\"variable\">$session_data</span> | sed <span class=\"string\">&#x27;s/.*&quot;sessionId&quot;:&quot;\\([^&quot;]*\\)&quot;.*/\\1/g&#x27;</span>);<span class=\"built_in\">echo</span> <span class=\"variable\">$session_id</span></span><br></pre></td></tr></table></figure>\n\n\n<p><code>b09f1353-202c-407b-af24-701b744f971e</code>;</p>\n<p>请记下这里的会话ID，在Terminal 4中需要手动输入。</p>\n<p>当前消费者ID为：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">consumer_id=$(<span class=\"built_in\">echo</span> <span class=\"variable\">$session_data</span> | sed <span class=\"string\">&#x27;s/.*&quot;consumerId&quot;:&quot;\\([^&quot;]*\\)&quot;.*/\\1/g&#x27;</span>);<span class=\"built_in\">echo</span> <span class=\"variable\">$consumer_id</span></span><br></pre></td></tr></table></figure>\n\n<p><code>5ae4e5fbab8b4e529ac404f260d4e2d1_1</code>。</p>\n<h5 id=\"加入会话\"><a href=\"#加入会话\" class=\"headerlink\" title=\"加入会话\"></a>加入会话</h5><p>指定要加入的会话ID，服务端将分配一个新的消费者ID。多个消费者可以接收到同一个会话的命令结果。本接口用于支持多人共享同一个会话或刷新页面后重新拉取会话历史记录。</p>\n<p>加入会话，保存输出到bash环境变量</p>\n<p><code>session*data=$(curl -Ss -XPOST http://localhost:8563/api -d &#39;;&#123; &quot;action&quot;:&quot;join*session&quot;, &quot;sessionId&quot; : &quot;&#39;&quot;$session_id&quot;&#39;&quot; &#125; &#39;)</code></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"variable\">$session_data</span> | json_pp</span><br></pre></td></tr></table></figure>\n\n\n<p>响应结果：</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">   <span class=\"attr\">&quot;consumerId&quot;</span> : <span class=\"string\">&quot;8f7f6ad7bc2d4cb5aa57a530927a95cc_2&quot;</span>,</span><br><span class=\"line\">   <span class=\"attr\">&quot;sessionId&quot;</span> : <span class=\"string\">&quot;b09f1353-202c-407b-af24-701b744f971e&quot;</span>,</span><br><span class=\"line\">   <span class=\"attr\">&quot;state&quot;</span> : <span class=\"string\">&quot;SUCCEEDED&quot;</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n<p>提取消费者ID。</p>\n<p>新的消费者ID为</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">consumer_id=$(<span class=\"built_in\">echo</span> <span class=\"variable\">$session_data</span> | sed <span class=\"string\">&#x27;s/.*&quot;consumerId&quot;:&quot;\\([^&quot;]*\\)&quot;.*/\\1/g&#x27;</span>);<span class=\"built_in\">echo</span> <span class=\"variable\">$consumer_id</span></span><br></pre></td></tr></table></figure>\n\n<p><code>8f7f6ad7bc2d4cb5aa57a530927a95cc_2</code> 。</p>\n<p>请记下这里的消费者ID，在Terminal 4中需要手动输入。</p>\n<h5 id=\"拉取命令结果\"><a href=\"#拉取命令结果\" class=\"headerlink\" title=\"拉取命令结果\"></a>拉取命令结果</h5><p>拉取命令结果消息的action为<code>pull_results</code>。请使用Http long-polling方式，定时循环拉取结果消息。 消费者的超时时间为5分钟，超时后需要调用<code>join_session</code>分配新的消费者。每个消费者单独分配一个缓存队列，按顺序拉取命令结果，不会影响到其它消费者。</p>\n<p>请求参数需要指定会话ID及消费者ID:</p>\n<p><code>curl -Ss -XPOST http://localhost:8563/api -d &#39;;&#123; &quot;action&quot;:&quot;pull*results&quot;, &quot;sessionId&quot; : &quot;&#39;&quot;$session*id&quot;&#39;&quot;, &quot;consumerId&quot; : &quot;&#39;&quot;$consumer_id&quot;&#39;&quot; &#125;</code></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">&#x27; | json_pp</span></span><br></pre></td></tr></table></figure>\n\n<p>用Bash脚本定时拉取结果消息:</p>\n<p>请在Terminal 4中输入Terminal 3中的会话ID，这里的例子如下：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">b09f1353-202c-407b-af24-701b744f971e</span><br><span class=\"line\">echo -n &quot;Enter your sessionId in T3:&quot;;read  session_id</span><br></pre></td></tr></table></figure>\n\n\n<p>同样，接着输入Terminal 3中的消费者ID，这里的例子如下：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">8f7f6ad7bc2d4cb5aa57a530927a95cc_2</span><br><span class=\"line\">echo -n &quot;Enter your consumerId in T3:&quot;;read  consumer_id</span><br></pre></td></tr></table></figure>\n\n<p><code>while true; do curl -Ss -XPOST http://localhost:8563/api -d &#39;;&#123; &quot;action&quot;:&quot;pull*results&quot;, &quot;sessionId&quot; : &quot;&#39;&quot;$session*id&quot;&#39;&quot;, &quot;consumerId&quot; : &quot;&#39;&quot;$consumer_id&quot;&#39;&quot; &#125;</code></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">&#x27; | json_pp; sleep 2; done</span></span><br></pre></td></tr></table></figure>\n\n<p>响应内容如下：</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">   <span class=\"attr\">&quot;body&quot;</span> : &#123;</span><br><span class=\"line\">      <span class=\"attr\">&quot;results&quot;</span> : [</span><br><span class=\"line\">         &#123;</span><br><span class=\"line\">            <span class=\"attr\">&quot;inputStatus&quot;</span> : <span class=\"string\">&quot;DISABLED&quot;</span>,</span><br><span class=\"line\">            <span class=\"attr\">&quot;jobId&quot;</span> : <span class=\"number\">0</span>,</span><br><span class=\"line\">            <span class=\"attr\">&quot;type&quot;</span> : <span class=\"string\">&quot;input_status&quot;</span></span><br><span class=\"line\">         &#125;,</span><br><span class=\"line\">         &#123;</span><br><span class=\"line\">            <span class=\"attr\">&quot;type&quot;</span> : <span class=\"string\">&quot;message&quot;</span>,</span><br><span class=\"line\">            <span class=\"attr\">&quot;jobId&quot;</span> : <span class=\"number\">0</span>,</span><br><span class=\"line\">            <span class=\"attr\">&quot;message&quot;</span> : <span class=\"string\">&quot;Welcome to arthas!&quot;</span></span><br><span class=\"line\">         &#125;,</span><br><span class=\"line\">         &#123;</span><br><span class=\"line\">            <span class=\"attr\">&quot;tutorials&quot;</span> : <span class=\"string\">&quot;https://arthas.aliyun.com/doc/arthas-tutorials.html&quot;</span>,</span><br><span class=\"line\">            <span class=\"attr\">&quot;time&quot;</span> : <span class=\"string\">&quot;2020-08-06 15:56:43&quot;</span>,</span><br><span class=\"line\">            <span class=\"attr\">&quot;type&quot;</span> : <span class=\"string\">&quot;welcome&quot;</span>,</span><br><span class=\"line\">            <span class=\"attr\">&quot;jobId&quot;</span> : <span class=\"number\">0</span>,</span><br><span class=\"line\">            <span class=\"attr\">&quot;pid&quot;</span> : <span class=\"string\">&quot;7909&quot;</span>,</span><br><span class=\"line\">            <span class=\"attr\">&quot;wiki&quot;</span> : <span class=\"string\">&quot;https://arthas.aliyun.com/doc&quot;</span>,</span><br><span class=\"line\">            <span class=\"attr\">&quot;version&quot;</span> : <span class=\"string\">&quot;3.3.7&quot;</span></span><br><span class=\"line\">         &#125;,</span><br><span class=\"line\">         &#123;</span><br><span class=\"line\">            <span class=\"attr\">&quot;inputStatus&quot;</span> : <span class=\"string\">&quot;ALLOW_INPUT&quot;</span>,</span><br><span class=\"line\">            <span class=\"attr\">&quot;type&quot;</span> : <span class=\"string\">&quot;input_status&quot;</span>,</span><br><span class=\"line\">            <span class=\"attr\">&quot;jobId&quot;</span> : <span class=\"number\">0</span></span><br><span class=\"line\">         &#125;</span><br><span class=\"line\">      ]</span><br><span class=\"line\">   &#125;,</span><br><span class=\"line\">   <span class=\"attr\">&quot;sessionId&quot;</span> : <span class=\"string\">&quot;b09f1353-202c-407b-af24-701b744f971e&quot;</span>,</span><br><span class=\"line\">   <span class=\"attr\">&quot;consumerId&quot;</span> : <span class=\"string\">&quot;8f7f6ad7bc2d4cb5aa57a530927a95cc_2&quot;</span>,</span><br><span class=\"line\">   <span class=\"attr\">&quot;state&quot;</span> : <span class=\"string\">&quot;SUCCEEDED&quot;</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"异步执行命令\"><a href=\"#异步执行命令\" class=\"headerlink\" title=\"异步执行命令\"></a>异步执行命令</h5><p><code>curl -Ss -XPOST http://localhost:8563/api -d &#39;&#39;&#39;;&#123; &quot;action&quot;:&quot;async*exec&quot;, &quot;command&quot;:&quot;watch demo.MathGame primeFactors \\&quot;&#123;params, returnObj, throwExp&#125;\\&quot; &quot;, &quot;sessionId&quot; : &quot;&#39;&quot;$session*id&quot;&#39;&quot; &#125;</code></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">&#x27;&#x27;</span><span class=\"string\">&#x27; | json_pp</span></span><br></pre></td></tr></table></figure>\n\n\n<p><code>async_exec</code> 的结果：</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">   <span class=\"attr\">&quot;sessionId&quot;</span> : <span class=\"string\">&quot;2b085b5d-883b-4914-ab35-b2c5c1d5aa2a&quot;</span>,</span><br><span class=\"line\">   <span class=\"attr\">&quot;state&quot;</span> : <span class=\"string\">&quot;SCHEDULED&quot;</span>,</span><br><span class=\"line\">   <span class=\"attr\">&quot;body&quot;</span> : &#123;</span><br><span class=\"line\">      <span class=\"attr\">&quot;jobStatus&quot;</span> : <span class=\"string\">&quot;READY&quot;</span>,</span><br><span class=\"line\">      <span class=\"attr\">&quot;jobId&quot;</span> : <span class=\"number\">3</span>,</span><br><span class=\"line\">      <span class=\"attr\">&quot;command&quot;</span> : <span class=\"string\">&quot;watch demo.MathGame primeFactors \\&quot;&#123;params, returnObj, throwExp&#125;\\&quot; &quot;</span></span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n<ul>\n<li><code>state</code> : <code>SCHEDULED</code> 状态表示已经解析命令生成任务，但未开始执行。</li>\n<li><code>body.jobId</code> : 异步执行命令的任务ID，可以根据此任务ID来过滤在<code>pull_results</code>输出的命令结果。</li>\n<li><code>body.jobStatus</code> : 任务状态<code>READY</code>表示未开始执行。 切换到上面自动拉取结果消息脚本的shell（Terminal 4），查看输出：</li>\n</ul>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">   <span class=\"attr\">&quot;body&quot;</span> : &#123;</span><br><span class=\"line\">      <span class=\"attr\">&quot;results&quot;</span> : [</span><br><span class=\"line\">         &#123;</span><br><span class=\"line\">            <span class=\"attr\">&quot;type&quot;</span> : <span class=\"string\">&quot;command&quot;</span>,</span><br><span class=\"line\">            <span class=\"attr\">&quot;jobId&quot;</span> : <span class=\"number\">3</span>,</span><br><span class=\"line\">            <span class=\"attr\">&quot;state&quot;</span> : <span class=\"string\">&quot;SCHEDULED&quot;</span>,</span><br><span class=\"line\">            <span class=\"attr\">&quot;command&quot;</span> : <span class=\"string\">&quot;watch demo.MathGame primeFactors \\&quot;&#123;params, returnObj, throwExp&#125;\\&quot; &quot;</span></span><br><span class=\"line\">         &#125;,</span><br><span class=\"line\">         &#123;</span><br><span class=\"line\">            <span class=\"attr\">&quot;inputStatus&quot;</span> : <span class=\"string\">&quot;ALLOW_INTERRUPT&quot;</span>,</span><br><span class=\"line\">            <span class=\"attr\">&quot;jobId&quot;</span> : <span class=\"number\">0</span>,</span><br><span class=\"line\">            <span class=\"attr\">&quot;type&quot;</span> : <span class=\"string\">&quot;input_status&quot;</span></span><br><span class=\"line\">         &#125;,</span><br><span class=\"line\">         &#123;</span><br><span class=\"line\">            <span class=\"attr\">&quot;success&quot;</span> : <span class=\"literal\">true</span>,</span><br><span class=\"line\">            <span class=\"attr\">&quot;jobId&quot;</span> : <span class=\"number\">3</span>,</span><br><span class=\"line\">            <span class=\"attr\">&quot;effect&quot;</span> : &#123;</span><br><span class=\"line\">               <span class=\"attr\">&quot;listenerId&quot;</span> : <span class=\"number\">3</span>,</span><br><span class=\"line\">               <span class=\"attr\">&quot;cost&quot;</span> : <span class=\"number\">24</span>,</span><br><span class=\"line\">               <span class=\"attr\">&quot;classCount&quot;</span> : <span class=\"number\">1</span>,</span><br><span class=\"line\">               <span class=\"attr\">&quot;methodCount&quot;</span> : <span class=\"number\">1</span></span><br><span class=\"line\">            &#125;,</span><br><span class=\"line\">            <span class=\"attr\">&quot;type&quot;</span> : <span class=\"string\">&quot;enhancer&quot;</span></span><br><span class=\"line\">         &#125;,</span><br><span class=\"line\">         &#123;</span><br><span class=\"line\">            <span class=\"attr\">&quot;sizeLimit&quot;</span> : <span class=\"number\">10485760</span>,</span><br><span class=\"line\">            <span class=\"attr\">&quot;expand&quot;</span> : <span class=\"number\">1</span>,</span><br><span class=\"line\">            <span class=\"attr\">&quot;jobId&quot;</span> : <span class=\"number\">3</span>,</span><br><span class=\"line\">            <span class=\"attr\">&quot;type&quot;</span> : <span class=\"string\">&quot;watch&quot;</span>,</span><br><span class=\"line\">            <span class=\"attr\">&quot;cost&quot;</span> : <span class=\"number\">0.071499</span>,</span><br><span class=\"line\">            <span class=\"attr\">&quot;ts&quot;</span> : <span class=\"number\">1596703453237</span>,</span><br><span class=\"line\">            <span class=\"attr\">&quot;value&quot;</span> : [</span><br><span class=\"line\">               [</span><br><span class=\"line\">                  <span class=\"number\">-170365</span></span><br><span class=\"line\">               ],</span><br><span class=\"line\">               <span class=\"literal\">null</span>,</span><br><span class=\"line\">               &#123;</span><br><span class=\"line\">                  <span class=\"attr\">&quot;stackTrace&quot;</span> : [</span><br><span class=\"line\">                     &#123;</span><br><span class=\"line\">                        <span class=\"attr\">&quot;className&quot;</span> : <span class=\"string\">&quot;demo.MathGame&quot;</span>,</span><br><span class=\"line\">                        <span class=\"attr\">&quot;classLoaderName&quot;</span> : <span class=\"string\">&quot;app&quot;</span>,</span><br><span class=\"line\">                        <span class=\"attr\">&quot;methodName&quot;</span> : <span class=\"string\">&quot;primeFactors&quot;</span>,</span><br><span class=\"line\">                        <span class=\"attr\">&quot;nativeMethod&quot;</span> : <span class=\"literal\">false</span>,</span><br><span class=\"line\">                        <span class=\"attr\">&quot;lineNumber&quot;</span> : <span class=\"number\">46</span>,</span><br><span class=\"line\">                        <span class=\"attr\">&quot;fileName&quot;</span> : <span class=\"string\">&quot;MathGame.java&quot;</span></span><br><span class=\"line\">                     &#125;,</span><br><span class=\"line\">                     ...</span><br><span class=\"line\">                  ],</span><br><span class=\"line\">                  <span class=\"attr\">&quot;localizedMessage&quot;</span> : <span class=\"string\">&quot;number is: -170365, need &gt;= 2&quot;</span>,</span><br><span class=\"line\">                  <span class=\"attr\">&quot;@type&quot;</span> : <span class=\"string\">&quot;java.lang.IllegalArgumentException&quot;</span>,</span><br><span class=\"line\">                  <span class=\"attr\">&quot;message&quot;</span> : <span class=\"string\">&quot;number is: -170365, need &gt;= 2&quot;</span></span><br><span class=\"line\">               &#125;</span><br><span class=\"line\">            ]</span><br><span class=\"line\">         &#125;,</span><br><span class=\"line\">         &#123;</span><br><span class=\"line\">            <span class=\"attr\">&quot;type&quot;</span> : <span class=\"string\">&quot;watch&quot;</span>,</span><br><span class=\"line\">            <span class=\"attr\">&quot;cost&quot;</span> : <span class=\"number\">0.033375</span>,</span><br><span class=\"line\">            <span class=\"attr\">&quot;jobId&quot;</span> : <span class=\"number\">3</span>,</span><br><span class=\"line\">            <span class=\"attr\">&quot;ts&quot;</span> : <span class=\"number\">1596703454241</span>,</span><br><span class=\"line\">            <span class=\"attr\">&quot;value&quot;</span> : [</span><br><span class=\"line\">               [</span><br><span class=\"line\">                  <span class=\"number\">1</span></span><br><span class=\"line\">               ],</span><br><span class=\"line\">               [</span><br><span class=\"line\">                  <span class=\"number\">2</span>,</span><br><span class=\"line\">                  <span class=\"number\">2</span>,</span><br><span class=\"line\">                  <span class=\"number\">2</span>,</span><br><span class=\"line\">                  <span class=\"number\">2</span>,</span><br><span class=\"line\">                  <span class=\"number\">13</span>,</span><br><span class=\"line\">                  <span class=\"number\">491</span></span><br><span class=\"line\">               ],</span><br><span class=\"line\">               <span class=\"literal\">null</span></span><br><span class=\"line\">            ],</span><br><span class=\"line\">            <span class=\"attr\">&quot;sizeLimit&quot;</span> : <span class=\"number\">10485760</span>,</span><br><span class=\"line\">            <span class=\"attr\">&quot;expand&quot;</span> : <span class=\"number\">1</span></span><br><span class=\"line\">         &#125;</span><br><span class=\"line\">      ]</span><br><span class=\"line\">   &#125;,</span><br><span class=\"line\">   <span class=\"attr\">&quot;consumerId&quot;</span> : <span class=\"string\">&quot;8ecb9cb7c7804d5d92e258b23d5245cc_1&quot;</span>,</span><br><span class=\"line\">   <span class=\"attr\">&quot;sessionId&quot;</span> : <span class=\"string\">&quot;2b085b5d-883b-4914-ab35-b2c5c1d5aa2a&quot;</span>,</span><br><span class=\"line\">   <span class=\"attr\">&quot;state&quot;</span> : <span class=\"string\">&quot;SUCCEEDED&quot;</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n<p>watch命令结果的<code>value</code>为watch-experss的值，上面命令中为<code>&#123;params, returnObj, throwExp&#125;</code>，所以watch结果的value为一个长度为3的数组，每个元素分别对应相应顺序的表达式。 请参考”watch命令输出map对象”小节。</p>\n<h5 id=\"中断命令执行\"><a href=\"#中断命令执行\" class=\"headerlink\" title=\"中断命令执行\"></a>中断命令执行</h5><p>中断会话正在运行的前台Job（前台任务）：</p>\n<p><code>curl -Ss -XPOST http://localhost:8563/api -d &#39;&#39;&#39;;&#123; &quot;action&quot;:&quot;interrupt*job&quot;, &quot;sessionId&quot; : &quot;&#39;&quot;$session*id&quot;&#39;&quot; &#125;</code></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">&#x27;&#x27;</span><span class=\"string\">&#x27; | json_pp</span></span><br></pre></td></tr></table></figure>\n\n\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">   <span class=\"attr\">&quot;state&quot;</span> : <span class=\"string\">&quot;SUCCEEDED&quot;</span>,</span><br><span class=\"line\">   <span class=\"attr\">&quot;body&quot;</span> : &#123;</span><br><span class=\"line\">      <span class=\"attr\">&quot;jobStatus&quot;</span> : <span class=\"string\">&quot;TERMINATED&quot;</span>,</span><br><span class=\"line\">      <span class=\"attr\">&quot;jobId&quot;</span> : <span class=\"number\">3</span></span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n<h5 id=\"关闭会话\"><a href=\"#关闭会话\" class=\"headerlink\" title=\"关闭会话\"></a>关闭会话</h5><p>指定会话ID，关闭会话。</p>\n<p><code>curl -Ss -XPOST http://localhost:8563/api -d &#39;&#39;&#39;;&#123; &quot;action&quot;:&quot;close*session&quot;, &quot;sessionId&quot; : &quot;&#39;&quot;$session*id&quot;&#39;&quot; &#125;</code></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">&#x27;&#x27;</span><span class=\"string\">&#x27; | json_pp</span></span><br></pre></td></tr></table></figure>\n\n\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">   <span class=\"attr\">&quot;state&quot;</span> : <span class=\"string\">&quot;SUCCEEDED&quot;</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n<h2 id=\"Web-UI\"><a href=\"#Web-UI\" class=\"headerlink\" title=\"Web UI\"></a>Web UI</h2><p><img src=\"/jlynet.github.io/2021/08/07/Java%E8%AF%8A%E6%96%AD%E5%B7%A5%E5%85%B7Arthas%E6%9C%80%E4%BD%B3%E5%AE%9E%E8%B7%B5/ArthasHttpAPI%E6%A1%88%E4%BE%8B/arthas-web-ui.png\" alt=\"arthas web ui\"></p>\n<p>一个基于Http API接口实现的Web UI，访问地址为： 。</p>\n<p>已实现功能：</p>\n<ul>\n<li>创建会话</li>\n<li>复制并打开url加入会话，多人共享会话</li>\n<li>周期性拉取会话命令结果消息</li>\n<li>刷新页面或者加入会话拉取会话历史命令消息</li>\n<li>输入命令/中断命令状态控制</li>\n</ul>\n<p>待开发功能：</p>\n<ul>\n<li>改进将命令结果消息可读性</li>\n<li>命令输入支持自动完成及命令模板</li>\n<li>提供命令帮助</li>\n<li>支持个人选项设置</li>\n</ul>\n<h2 id=\"watch命令输出map对象\"><a href=\"#watch命令输出map对象\" class=\"headerlink\" title=\"watch命令输出map对象\"></a>watch命令输出map对象</h2><p>watch的结果值由计算<code>watch-express</code> ognl表达式产生，可以通过改变ognl表达式来生成想要的值，请参考<a href=\"https://commons.apache.org/proper/commons-ognl/language-guide.html\">OGNL文档</a>。</p>\n<blockquote>\n<p>Maps can also be created using a special syntax.</p>\n<h1 id=\"“foo”-“foo-value”-“bar”-“bar-value”\"><a href=\"#“foo”-“foo-value”-“bar”-“bar-value”\" class=\"headerlink\" title=\"{ “foo” : “foo value”, “bar” : “bar value” }\"></a>{ “foo” : “foo value”, “bar” : “bar value” }</h1></blockquote>\n<p>文章拷贝来源：<a href=\"https://start.aliyun.com/course?spm=a2ck6.17690074.0.0.28bc2e7dHTphXs&amp;id=PaiFAkJM\">https://start.aliyun.com/course?spm=a2ck6.17690074.0.0.28bc2e7dHTphXs&amp;id=PaiFAkJM</a></p>\n"},{"title":"Arthas 动态更新应用Logger Level 案例","date":"2021-08-07T00:35:41.000Z","_content":"\n<!-- toc -->\n\n![Arthas](arthas.png)\n\n`Arthas` 是Alibaba开源的Java诊断工具，深受开发者喜爱。在线排查问题，无需重启；动态跟踪Java代码；实时监控JVM状态。\n\n`Arthas` 支持JDK 6+，支持Linux/Mac/Windows，采用命令行交互模式，同时提供丰富的 `Tab` 自动补全功能，进一步方便进行问题的定位和诊断。\n\n当你遇到以下类似问题而束手无策时，Arthas可以帮助你解决：\n\n- 这个类从哪个 jar 包加载的？为什么会报各种类相关的 Exception？\n- 我改的代码为什么没有执行到？难道是我没 commit？分支搞错了？\n- 遇到问题无法在线上 debug，难道只能通过加日志再重新发布吗？\n- 线上遇到某个用户的数据处理有问题，但线上同样无法 debug，线下无法重现！\n- 是否有一个全局视角来查看系统的运行状况？\n- 有什么办法可以监控到JVM的实时运行状态？\n- 怎么快速定位应用的热点，生成火焰图？\n\n本教程会以一个普通的Spring Boot应用为例，演示动态更新应用Logger Level。\n\n- Github: https://github.com/alibaba/arthas\n- 文档: https://arthas.aliyun.com/doc/\n\n## Start demo\n\n下载`demo-arthas-spring-boot.jar`，再用`java -jar`命令启动：\n\n```bash\nwget https://code.aliyun.com/middleware-container/handsonLabExternedFiles/raw/master/demo-arthas-spring-boot.jar;java -jar demo-arthas-spring-boot.jar\n```\n\n\n\n`demo-arthas-spring-boot`是一个很简单的spring boot应用，源代码：[查看](https://github.com/hengyunabc/spring-boot-inside/tree/master/demo-arthas-spring-boot)\n\n启动之后，可以访问61000端口： 点击查看\n\n![Demo Web](O1CN010Qbzcz1ctPSWSZI6L_!!6000000003658-2-tps-333-182.png)\n\n## Start arthas-boot\n\n在新的`Terminal 2`里，下载`arthas-boot.jar`，再用`java -jar`命令启动：\n\n```bash\nwget https://arthas.aliyun.com/arthas-boot.jar;java -jar arthas-boot.jar\n```\n\n\n\n`arthas-boot`是`Arthas`的启动程序，它启动后，会列出所有的Java进程，用户可以选择需要诊断的目标进程。\n\n选择第一个进程，输入 `1` ，再`Enter/回车`：\n\n```bash\n1\n```\n\n\n\nAttach成功之后，会打印Arthas LOGO。输入 `help` 可以获取到更多的帮助信息。\n\n```bash\nhelp\n```\n\n\n\n![Arthas Boot](O1CN01HzatXZ1RgccrlT90M_!!6000000002141-2-tps-529-244.png)\n\n## 动态更新应用Logger Level\n\n在这个案例里，动态修改应用的Logger Level。\n\n#### 查找UserController的ClassLoader\n\n```bash\nsc -d com.example.demo.arthas.user.UserController | grep classLoaderHash\n```\n\n\n\n```console\n$ sc -d com.example.demo.arthas.user.UserController | grep classLoaderHash\n classLoaderHash   1be6f5c3\n```\n\n注意hashcode是变化的，需要先查看当前的ClassLoader信息，提取对应ClassLoader的hashcode。\n\n如果你使用`-c`，你需要手动输入hashcode：`-c <hashcode>`\n\n```console\n$ ognl -c 1be6f5c3 @com.example.demo.arthas.user.UserController@logger\n```\n\n对于只有唯一实例的ClassLoader可以通过`--classLoaderClass`指定class name，使用起来更加方便：\n\n```console\n$ ognl --classLoaderClass org.springframework.boot.loader.LaunchedURLClassLoader  @org.springframework.boot.SpringApplication@logger\n@Slf4jLocationAwareLog[\n    FQCN=@String[org.apache.commons.logging.LogAdapter$Slf4jLocationAwareLog],\n    name=@String[org.springframework.boot.SpringApplication],\n    logger=@Logger[Logger[org.springframework.boot.SpringApplication]],\n]\n```\n\n`--classLoaderClass` 的值是ClassLoader的类名，只有匹配到唯一的ClassLoader实例时才能工作，目的是方便输入通用命令，而`-c <hashcode>`是动态变化的。\n\n#### 用ognl获取logger\n\n```bash\nognl --classLoaderClass org.springframework.boot.loader.LaunchedURLClassLoader '@com.example.demo.arthas.user.UserController@logger'\n```\n\n\n\n```console\n$ ognl --classLoaderClass org.springframework.boot.loader.LaunchedURLClassLoader '@com.example.demo.arthas.user.UserController@logger'\n@Logger[\n    serialVersionUID=@Long[5454405123156820674],\n    FQCN=@String[ch.qos.logback.classic.Logger],\n    name=@String[com.example.demo.arthas.user.UserController],\n    level=null,\n    effectiveLevelInt=@Integer[20000],\n    parent=@Logger[Logger[com.example.demo.arthas.user]],\n    childrenList=null,\n    aai=null,\n    additive=@Boolean[true],\n    loggerContext=@LoggerContext[ch.qos.logback.classic.LoggerContext[default]],\n]\n```\n\n可以知道`UserController@logger`实际使用的是logback。可以看到`level=null`，则说明实际最终的level是从`root` logger里来的。\n\n#### 单独设置UserController的logger level\n\n```bash\nognl --classLoaderClass org.springframework.boot.loader.LaunchedURLClassLoader '@com.example.demo.arthas.user.UserController@logger.setLevel(@ch.qos.logback.classic.Level@DEBUG)'\n```\n\n\n\n再次获取`UserController@logger`，可以发现已经是`DEBUG`了：\n\n```bash\nognl --classLoaderClass org.springframework.boot.loader.LaunchedURLClassLoader '@com.example.demo.arthas.user.UserController@logger'\n```\n\n\n\n```console\n$ ognl --classLoaderClass org.springframework.boot.loader.LaunchedURLClassLoader '@com.example.demo.arthas.user.UserController@logger'\n@Logger[\n    serialVersionUID=@Long[5454405123156820674],\n    FQCN=@String[ch.qos.logback.classic.Logger],\n    name=@String[com.example.demo.arthas.user.UserController],\n    level=@Level[DEBUG],\n    effectiveLevelInt=@Integer[10000],\n    parent=@Logger[Logger[com.example.demo.arthas.user]],\n    childrenList=null,\n    aai=null,\n    additive=@Boolean[true],\n    loggerContext=@LoggerContext[ch.qos.logback.classic.LoggerContext[default]],\n]\n```\n\n#### 修改logback的全局logger level\n\n通过获取`root` logger，可以修改全局的logger level：\n\n```bash\nognl --classLoaderClass org.springframework.boot.loader.LaunchedURLClassLoader '@org.slf4j.LoggerFactory@getLogger(\"root\").setLevel(@ch.qos.logback.classic.Level@DEBUG)'\n```\n\n\n\n## 更多信息\n\n通过本教程基本掌握了Arthas动态更新应用Logger Level。如果有更多的技巧或者使用疑问，欢迎在Issue里提出。\n\n- Issues: https://github.com/alibaba/arthas/issues\n- 文档： https://arthas.aliyun.com/doc\n\n如果您在使用Arthas，请让我们知道。您的使用对我们非常重要：[查看](https://github.com/alibaba/arthas/issues/111)\n\n文章拷贝来源：https://start.aliyun.com/course?spm=a2ck6.17690074.0.0.28bc2e7dHTphXs&id=PaiFAkJM","source":"_posts/Java诊断工具Arthas最佳实践/Arthas动态更新应用LoggerLevel案例.md","raw":"---\ntitle: Arthas 动态更新应用Logger Level 案例\ndate: 2021-08-07 08:35:41\ntags: ['Java 诊断工具 Arthas 最佳实践']\n---\n\n<!-- toc -->\n\n![Arthas](arthas.png)\n\n`Arthas` 是Alibaba开源的Java诊断工具，深受开发者喜爱。在线排查问题，无需重启；动态跟踪Java代码；实时监控JVM状态。\n\n`Arthas` 支持JDK 6+，支持Linux/Mac/Windows，采用命令行交互模式，同时提供丰富的 `Tab` 自动补全功能，进一步方便进行问题的定位和诊断。\n\n当你遇到以下类似问题而束手无策时，Arthas可以帮助你解决：\n\n- 这个类从哪个 jar 包加载的？为什么会报各种类相关的 Exception？\n- 我改的代码为什么没有执行到？难道是我没 commit？分支搞错了？\n- 遇到问题无法在线上 debug，难道只能通过加日志再重新发布吗？\n- 线上遇到某个用户的数据处理有问题，但线上同样无法 debug，线下无法重现！\n- 是否有一个全局视角来查看系统的运行状况？\n- 有什么办法可以监控到JVM的实时运行状态？\n- 怎么快速定位应用的热点，生成火焰图？\n\n本教程会以一个普通的Spring Boot应用为例，演示动态更新应用Logger Level。\n\n- Github: https://github.com/alibaba/arthas\n- 文档: https://arthas.aliyun.com/doc/\n\n## Start demo\n\n下载`demo-arthas-spring-boot.jar`，再用`java -jar`命令启动：\n\n```bash\nwget https://code.aliyun.com/middleware-container/handsonLabExternedFiles/raw/master/demo-arthas-spring-boot.jar;java -jar demo-arthas-spring-boot.jar\n```\n\n\n\n`demo-arthas-spring-boot`是一个很简单的spring boot应用，源代码：[查看](https://github.com/hengyunabc/spring-boot-inside/tree/master/demo-arthas-spring-boot)\n\n启动之后，可以访问61000端口： 点击查看\n\n![Demo Web](O1CN010Qbzcz1ctPSWSZI6L_!!6000000003658-2-tps-333-182.png)\n\n## Start arthas-boot\n\n在新的`Terminal 2`里，下载`arthas-boot.jar`，再用`java -jar`命令启动：\n\n```bash\nwget https://arthas.aliyun.com/arthas-boot.jar;java -jar arthas-boot.jar\n```\n\n\n\n`arthas-boot`是`Arthas`的启动程序，它启动后，会列出所有的Java进程，用户可以选择需要诊断的目标进程。\n\n选择第一个进程，输入 `1` ，再`Enter/回车`：\n\n```bash\n1\n```\n\n\n\nAttach成功之后，会打印Arthas LOGO。输入 `help` 可以获取到更多的帮助信息。\n\n```bash\nhelp\n```\n\n\n\n![Arthas Boot](O1CN01HzatXZ1RgccrlT90M_!!6000000002141-2-tps-529-244.png)\n\n## 动态更新应用Logger Level\n\n在这个案例里，动态修改应用的Logger Level。\n\n#### 查找UserController的ClassLoader\n\n```bash\nsc -d com.example.demo.arthas.user.UserController | grep classLoaderHash\n```\n\n\n\n```console\n$ sc -d com.example.demo.arthas.user.UserController | grep classLoaderHash\n classLoaderHash   1be6f5c3\n```\n\n注意hashcode是变化的，需要先查看当前的ClassLoader信息，提取对应ClassLoader的hashcode。\n\n如果你使用`-c`，你需要手动输入hashcode：`-c <hashcode>`\n\n```console\n$ ognl -c 1be6f5c3 @com.example.demo.arthas.user.UserController@logger\n```\n\n对于只有唯一实例的ClassLoader可以通过`--classLoaderClass`指定class name，使用起来更加方便：\n\n```console\n$ ognl --classLoaderClass org.springframework.boot.loader.LaunchedURLClassLoader  @org.springframework.boot.SpringApplication@logger\n@Slf4jLocationAwareLog[\n    FQCN=@String[org.apache.commons.logging.LogAdapter$Slf4jLocationAwareLog],\n    name=@String[org.springframework.boot.SpringApplication],\n    logger=@Logger[Logger[org.springframework.boot.SpringApplication]],\n]\n```\n\n`--classLoaderClass` 的值是ClassLoader的类名，只有匹配到唯一的ClassLoader实例时才能工作，目的是方便输入通用命令，而`-c <hashcode>`是动态变化的。\n\n#### 用ognl获取logger\n\n```bash\nognl --classLoaderClass org.springframework.boot.loader.LaunchedURLClassLoader '@com.example.demo.arthas.user.UserController@logger'\n```\n\n\n\n```console\n$ ognl --classLoaderClass org.springframework.boot.loader.LaunchedURLClassLoader '@com.example.demo.arthas.user.UserController@logger'\n@Logger[\n    serialVersionUID=@Long[5454405123156820674],\n    FQCN=@String[ch.qos.logback.classic.Logger],\n    name=@String[com.example.demo.arthas.user.UserController],\n    level=null,\n    effectiveLevelInt=@Integer[20000],\n    parent=@Logger[Logger[com.example.demo.arthas.user]],\n    childrenList=null,\n    aai=null,\n    additive=@Boolean[true],\n    loggerContext=@LoggerContext[ch.qos.logback.classic.LoggerContext[default]],\n]\n```\n\n可以知道`UserController@logger`实际使用的是logback。可以看到`level=null`，则说明实际最终的level是从`root` logger里来的。\n\n#### 单独设置UserController的logger level\n\n```bash\nognl --classLoaderClass org.springframework.boot.loader.LaunchedURLClassLoader '@com.example.demo.arthas.user.UserController@logger.setLevel(@ch.qos.logback.classic.Level@DEBUG)'\n```\n\n\n\n再次获取`UserController@logger`，可以发现已经是`DEBUG`了：\n\n```bash\nognl --classLoaderClass org.springframework.boot.loader.LaunchedURLClassLoader '@com.example.demo.arthas.user.UserController@logger'\n```\n\n\n\n```console\n$ ognl --classLoaderClass org.springframework.boot.loader.LaunchedURLClassLoader '@com.example.demo.arthas.user.UserController@logger'\n@Logger[\n    serialVersionUID=@Long[5454405123156820674],\n    FQCN=@String[ch.qos.logback.classic.Logger],\n    name=@String[com.example.demo.arthas.user.UserController],\n    level=@Level[DEBUG],\n    effectiveLevelInt=@Integer[10000],\n    parent=@Logger[Logger[com.example.demo.arthas.user]],\n    childrenList=null,\n    aai=null,\n    additive=@Boolean[true],\n    loggerContext=@LoggerContext[ch.qos.logback.classic.LoggerContext[default]],\n]\n```\n\n#### 修改logback的全局logger level\n\n通过获取`root` logger，可以修改全局的logger level：\n\n```bash\nognl --classLoaderClass org.springframework.boot.loader.LaunchedURLClassLoader '@org.slf4j.LoggerFactory@getLogger(\"root\").setLevel(@ch.qos.logback.classic.Level@DEBUG)'\n```\n\n\n\n## 更多信息\n\n通过本教程基本掌握了Arthas动态更新应用Logger Level。如果有更多的技巧或者使用疑问，欢迎在Issue里提出。\n\n- Issues: https://github.com/alibaba/arthas/issues\n- 文档： https://arthas.aliyun.com/doc\n\n如果您在使用Arthas，请让我们知道。您的使用对我们非常重要：[查看](https://github.com/alibaba/arthas/issues/111)\n\n文章拷贝来源：https://start.aliyun.com/course?spm=a2ck6.17690074.0.0.28bc2e7dHTphXs&id=PaiFAkJM","slug":"Java诊断工具Arthas最佳实践/Arthas动态更新应用LoggerLevel案例","published":1,"updated":"2021-08-07T05:33:10.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cks1cgr5n000nfw5ib6zp7d3g","content":"<!-- toc -->\n\n<ul>\n<li><a href=\"#start-demo\">Start demo</a></li>\n<li><a href=\"#start-arthas-boot\">Start arthas-boot</a></li>\n<li><a href=\"#%E5%8A%A8%E6%80%81%E6%9B%B4%E6%96%B0%E5%BA%94%E7%94%A8logger-level\">动态更新应用Logger Level</a><ul>\n<li><a href=\"#%E6%9F%A5%E6%89%BEusercontroller%E7%9A%84classloader\">查找UserController的ClassLoader</a></li>\n<li><a href=\"#%E7%94%A8ognl%E8%8E%B7%E5%8F%96logger\">用ognl获取logger</a></li>\n<li><a href=\"#%E5%8D%95%E7%8B%AC%E8%AE%BE%E7%BD%AEusercontroller%E7%9A%84logger-level\">单独设置UserController的logger level</a></li>\n<li><a href=\"#%E4%BF%AE%E6%94%B9logback%E7%9A%84%E5%85%A8%E5%B1%80logger-level\">修改logback的全局logger level</a></li>\n</ul>\n</li>\n<li><a href=\"#%E6%9B%B4%E5%A4%9A%E4%BF%A1%E6%81%AF\">更多信息</a></li>\n</ul>\n<!-- tocstop -->\n\n<p><img src=\"/jlynet.github.io/2021/08/07/Java%E8%AF%8A%E6%96%AD%E5%B7%A5%E5%85%B7Arthas%E6%9C%80%E4%BD%B3%E5%AE%9E%E8%B7%B5/Arthas%E5%8A%A8%E6%80%81%E6%9B%B4%E6%96%B0%E5%BA%94%E7%94%A8LoggerLevel%E6%A1%88%E4%BE%8B/arthas.png\" alt=\"Arthas\"></p>\n<p><code>Arthas</code> 是Alibaba开源的Java诊断工具，深受开发者喜爱。在线排查问题，无需重启；动态跟踪Java代码；实时监控JVM状态。</p>\n<p><code>Arthas</code> 支持JDK 6+，支持Linux/Mac/Windows，采用命令行交互模式，同时提供丰富的 <code>Tab</code> 自动补全功能，进一步方便进行问题的定位和诊断。</p>\n<p>当你遇到以下类似问题而束手无策时，Arthas可以帮助你解决：</p>\n<ul>\n<li>这个类从哪个 jar 包加载的？为什么会报各种类相关的 Exception？</li>\n<li>我改的代码为什么没有执行到？难道是我没 commit？分支搞错了？</li>\n<li>遇到问题无法在线上 debug，难道只能通过加日志再重新发布吗？</li>\n<li>线上遇到某个用户的数据处理有问题，但线上同样无法 debug，线下无法重现！</li>\n<li>是否有一个全局视角来查看系统的运行状况？</li>\n<li>有什么办法可以监控到JVM的实时运行状态？</li>\n<li>怎么快速定位应用的热点，生成火焰图？</li>\n</ul>\n<p>本教程会以一个普通的Spring Boot应用为例，演示动态更新应用Logger Level。</p>\n<ul>\n<li>Github: <a href=\"https://github.com/alibaba/arthas\">https://github.com/alibaba/arthas</a></li>\n<li>文档: <a href=\"https://arthas.aliyun.com/doc/\">https://arthas.aliyun.com/doc/</a></li>\n</ul>\n<h2><span id=\"start-demo\">Start demo</span></h2><p>下载<code>demo-arthas-spring-boot.jar</code>，再用<code>java -jar</code>命令启动：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wget https://code.aliyun.com/middleware-container/handsonLabExternedFiles/raw/master/demo-arthas-spring-boot.jar;java -jar demo-arthas-spring-boot.jar</span><br></pre></td></tr></table></figure>\n\n\n\n<p><code>demo-arthas-spring-boot</code>是一个很简单的spring boot应用，源代码：<a href=\"https://github.com/hengyunabc/spring-boot-inside/tree/master/demo-arthas-spring-boot\">查看</a></p>\n<p>启动之后，可以访问61000端口： 点击查看</p>\n<p><img src=\"/jlynet.github.io/2021/08/07/Java%E8%AF%8A%E6%96%AD%E5%B7%A5%E5%85%B7Arthas%E6%9C%80%E4%BD%B3%E5%AE%9E%E8%B7%B5/Arthas%E5%8A%A8%E6%80%81%E6%9B%B4%E6%96%B0%E5%BA%94%E7%94%A8LoggerLevel%E6%A1%88%E4%BE%8B/O1CN010Qbzcz1ctPSWSZI6L_!!6000000003658-2-tps-333-182.png\" alt=\"Demo Web\"></p>\n<h2><span id=\"start-arthas-boot\">Start arthas-boot</span></h2><p>在新的<code>Terminal 2</code>里，下载<code>arthas-boot.jar</code>，再用<code>java -jar</code>命令启动：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wget https://arthas.aliyun.com/arthas-boot.jar;java -jar arthas-boot.jar</span><br></pre></td></tr></table></figure>\n\n\n\n<p><code>arthas-boot</code>是<code>Arthas</code>的启动程序，它启动后，会列出所有的Java进程，用户可以选择需要诊断的目标进程。</p>\n<p>选择第一个进程，输入 <code>1</code> ，再<code>Enter/回车</code>：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1</span><br></pre></td></tr></table></figure>\n\n\n\n<p>Attach成功之后，会打印Arthas LOGO。输入 <code>help</code> 可以获取到更多的帮助信息。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">help</span></span><br></pre></td></tr></table></figure>\n\n\n\n<p><img src=\"/jlynet.github.io/2021/08/07/Java%E8%AF%8A%E6%96%AD%E5%B7%A5%E5%85%B7Arthas%E6%9C%80%E4%BD%B3%E5%AE%9E%E8%B7%B5/Arthas%E5%8A%A8%E6%80%81%E6%9B%B4%E6%96%B0%E5%BA%94%E7%94%A8LoggerLevel%E6%A1%88%E4%BE%8B/O1CN01HzatXZ1RgccrlT90M_!!6000000002141-2-tps-529-244.png\" alt=\"Arthas Boot\"></p>\n<h2><span id=\"动态更新应用logger-level\">动态更新应用Logger Level</span></h2><p>在这个案例里，动态修改应用的Logger Level。</p>\n<h4><span id=\"查找usercontroller的classloader\">查找UserController的ClassLoader</span></h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sc -d com.example.demo.arthas.user.UserController | grep classLoaderHash</span><br></pre></td></tr></table></figure>\n\n<p></p>\n<figure class=\"highlight console\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> sc -d com.example.demo.arthas.user.UserController | grep classLoaderHash</span></span><br><span class=\"line\"> classLoaderHash   1be6f5c3</span><br></pre></td></tr></table></figure>\n\n<p>注意hashcode是变化的，需要先查看当前的ClassLoader信息，提取对应ClassLoader的hashcode。</p>\n<p>如果你使用<code>-c</code>，你需要手动输入hashcode：<code>-c &lt;hashcode&gt;</code></p>\n<figure class=\"highlight console\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> ognl -c 1be6f5c3 @com.example.demo.arthas.user.UserController@logger</span></span><br></pre></td></tr></table></figure>\n\n<p>对于只有唯一实例的ClassLoader可以通过<code>--classLoaderClass</code>指定class name，使用起来更加方便：</p>\n<figure class=\"highlight console\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> ognl --classLoaderClass org.springframework.boot.loader.LaunchedURLClassLoader  @org.springframework.boot.SpringApplication@logger</span></span><br><span class=\"line\">@Slf4jLocationAwareLog[</span><br><span class=\"line\">    FQCN=@String[org.apache.commons.logging.LogAdapter$Slf4jLocationAwareLog],</span><br><span class=\"line\">    name=@String[org.springframework.boot.SpringApplication],</span><br><span class=\"line\">    logger=@Logger[Logger[org.springframework.boot.SpringApplication]],</span><br><span class=\"line\">]</span><br></pre></td></tr></table></figure>\n\n<p><code>--classLoaderClass</code> 的值是ClassLoader的类名，只有匹配到唯一的ClassLoader实例时才能工作，目的是方便输入通用命令，而<code>-c &lt;hashcode&gt;</code>是动态变化的。</p>\n<h4><span id=\"用ognl获取logger\">用ognl获取logger</span></h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ognl --classLoaderClass org.springframework.boot.loader.LaunchedURLClassLoader <span class=\"string\">&#x27;@com.example.demo.arthas.user.UserController@logger&#x27;</span></span><br></pre></td></tr></table></figure>\n\n\n\n<figure class=\"highlight console\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> ognl --classLoaderClass org.springframework.boot.loader.LaunchedURLClassLoader <span class=\"string\">&#x27;@com.example.demo.arthas.user.UserController@logger&#x27;</span></span></span><br><span class=\"line\">@Logger[</span><br><span class=\"line\">    serialVersionUID=@Long[5454405123156820674],</span><br><span class=\"line\">    FQCN=@String[ch.qos.logback.classic.Logger],</span><br><span class=\"line\">    name=@String[com.example.demo.arthas.user.UserController],</span><br><span class=\"line\">    level=null,</span><br><span class=\"line\">    effectiveLevelInt=@Integer[20000],</span><br><span class=\"line\">    parent=@Logger[Logger[com.example.demo.arthas.user]],</span><br><span class=\"line\">    childrenList=null,</span><br><span class=\"line\">    aai=null,</span><br><span class=\"line\">    additive=@Boolean[true],</span><br><span class=\"line\">    loggerContext=@LoggerContext[ch.qos.logback.classic.LoggerContext[default]],</span><br><span class=\"line\">]</span><br></pre></td></tr></table></figure>\n\n<p>可以知道<code>UserController@logger</code>实际使用的是logback。可以看到<code>level=null</code>，则说明实际最终的level是从<code>root</code> logger里来的。</p>\n<h4><span id=\"单独设置usercontroller的logger-level\">单独设置UserController的logger level</span></h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ognl --classLoaderClass org.springframework.boot.loader.LaunchedURLClassLoader <span class=\"string\">&#x27;@com.example.demo.arthas.user.UserController@logger.setLevel(@ch.qos.logback.classic.Level@DEBUG)&#x27;</span></span><br></pre></td></tr></table></figure>\n\n\n\n<p>再次获取<code>UserController@logger</code>，可以发现已经是<code>DEBUG</code>了：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ognl --classLoaderClass org.springframework.boot.loader.LaunchedURLClassLoader <span class=\"string\">&#x27;@com.example.demo.arthas.user.UserController@logger&#x27;</span></span><br></pre></td></tr></table></figure>\n\n\n\n<figure class=\"highlight console\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> ognl --classLoaderClass org.springframework.boot.loader.LaunchedURLClassLoader <span class=\"string\">&#x27;@com.example.demo.arthas.user.UserController@logger&#x27;</span></span></span><br><span class=\"line\">@Logger[</span><br><span class=\"line\">    serialVersionUID=@Long[5454405123156820674],</span><br><span class=\"line\">    FQCN=@String[ch.qos.logback.classic.Logger],</span><br><span class=\"line\">    name=@String[com.example.demo.arthas.user.UserController],</span><br><span class=\"line\">    level=@Level[DEBUG],</span><br><span class=\"line\">    effectiveLevelInt=@Integer[10000],</span><br><span class=\"line\">    parent=@Logger[Logger[com.example.demo.arthas.user]],</span><br><span class=\"line\">    childrenList=null,</span><br><span class=\"line\">    aai=null,</span><br><span class=\"line\">    additive=@Boolean[true],</span><br><span class=\"line\">    loggerContext=@LoggerContext[ch.qos.logback.classic.LoggerContext[default]],</span><br><span class=\"line\">]</span><br></pre></td></tr></table></figure>\n\n<h4><span id=\"修改logback的全局logger-level\">修改logback的全局logger level</span></h4><p>通过获取<code>root</code> logger，可以修改全局的logger level：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ognl --classLoaderClass org.springframework.boot.loader.LaunchedURLClassLoader <span class=\"string\">&#x27;@org.slf4j.LoggerFactory@getLogger(&quot;root&quot;).setLevel(@ch.qos.logback.classic.Level@DEBUG)&#x27;</span></span><br></pre></td></tr></table></figure>\n\n\n\n<h2><span id=\"更多信息\">更多信息</span></h2><p>通过本教程基本掌握了Arthas动态更新应用Logger Level。如果有更多的技巧或者使用疑问，欢迎在Issue里提出。</p>\n<ul>\n<li>Issues: <a href=\"https://github.com/alibaba/arthas/issues\">https://github.com/alibaba/arthas/issues</a></li>\n<li>文档： <a href=\"https://arthas.aliyun.com/doc\">https://arthas.aliyun.com/doc</a></li>\n</ul>\n<p>如果您在使用Arthas，请让我们知道。您的使用对我们非常重要：<a href=\"https://github.com/alibaba/arthas/issues/111\">查看</a></p>\n<p>文章拷贝来源：<a href=\"https://start.aliyun.com/course?spm=a2ck6.17690074.0.0.28bc2e7dHTphXs&amp;id=PaiFAkJM\">https://start.aliyun.com/course?spm=a2ck6.17690074.0.0.28bc2e7dHTphXs&amp;id=PaiFAkJM</a></p>\n","site":{"data":{}},"excerpt":"","more":"<!-- toc -->\n\n<ul>\n<li><a href=\"#start-demo\">Start demo</a></li>\n<li><a href=\"#start-arthas-boot\">Start arthas-boot</a></li>\n<li><a href=\"#%E5%8A%A8%E6%80%81%E6%9B%B4%E6%96%B0%E5%BA%94%E7%94%A8logger-level\">动态更新应用Logger Level</a><ul>\n<li><a href=\"#%E6%9F%A5%E6%89%BEusercontroller%E7%9A%84classloader\">查找UserController的ClassLoader</a></li>\n<li><a href=\"#%E7%94%A8ognl%E8%8E%B7%E5%8F%96logger\">用ognl获取logger</a></li>\n<li><a href=\"#%E5%8D%95%E7%8B%AC%E8%AE%BE%E7%BD%AEusercontroller%E7%9A%84logger-level\">单独设置UserController的logger level</a></li>\n<li><a href=\"#%E4%BF%AE%E6%94%B9logback%E7%9A%84%E5%85%A8%E5%B1%80logger-level\">修改logback的全局logger level</a></li>\n</ul>\n</li>\n<li><a href=\"#%E6%9B%B4%E5%A4%9A%E4%BF%A1%E6%81%AF\">更多信息</a></li>\n</ul>\n<!-- tocstop -->\n\n<p><img src=\"/jlynet.github.io/2021/08/07/Java%E8%AF%8A%E6%96%AD%E5%B7%A5%E5%85%B7Arthas%E6%9C%80%E4%BD%B3%E5%AE%9E%E8%B7%B5/Arthas%E5%8A%A8%E6%80%81%E6%9B%B4%E6%96%B0%E5%BA%94%E7%94%A8LoggerLevel%E6%A1%88%E4%BE%8B/arthas.png\" alt=\"Arthas\"></p>\n<p><code>Arthas</code> 是Alibaba开源的Java诊断工具，深受开发者喜爱。在线排查问题，无需重启；动态跟踪Java代码；实时监控JVM状态。</p>\n<p><code>Arthas</code> 支持JDK 6+，支持Linux/Mac/Windows，采用命令行交互模式，同时提供丰富的 <code>Tab</code> 自动补全功能，进一步方便进行问题的定位和诊断。</p>\n<p>当你遇到以下类似问题而束手无策时，Arthas可以帮助你解决：</p>\n<ul>\n<li>这个类从哪个 jar 包加载的？为什么会报各种类相关的 Exception？</li>\n<li>我改的代码为什么没有执行到？难道是我没 commit？分支搞错了？</li>\n<li>遇到问题无法在线上 debug，难道只能通过加日志再重新发布吗？</li>\n<li>线上遇到某个用户的数据处理有问题，但线上同样无法 debug，线下无法重现！</li>\n<li>是否有一个全局视角来查看系统的运行状况？</li>\n<li>有什么办法可以监控到JVM的实时运行状态？</li>\n<li>怎么快速定位应用的热点，生成火焰图？</li>\n</ul>\n<p>本教程会以一个普通的Spring Boot应用为例，演示动态更新应用Logger Level。</p>\n<ul>\n<li>Github: <a href=\"https://github.com/alibaba/arthas\">https://github.com/alibaba/arthas</a></li>\n<li>文档: <a href=\"https://arthas.aliyun.com/doc/\">https://arthas.aliyun.com/doc/</a></li>\n</ul>\n<h2 id=\"Start-demo\"><a href=\"#Start-demo\" class=\"headerlink\" title=\"Start demo\"></a>Start demo</h2><p>下载<code>demo-arthas-spring-boot.jar</code>，再用<code>java -jar</code>命令启动：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wget https://code.aliyun.com/middleware-container/handsonLabExternedFiles/raw/master/demo-arthas-spring-boot.jar;java -jar demo-arthas-spring-boot.jar</span><br></pre></td></tr></table></figure>\n\n\n\n<p><code>demo-arthas-spring-boot</code>是一个很简单的spring boot应用，源代码：<a href=\"https://github.com/hengyunabc/spring-boot-inside/tree/master/demo-arthas-spring-boot\">查看</a></p>\n<p>启动之后，可以访问61000端口： 点击查看</p>\n<p><img src=\"/jlynet.github.io/2021/08/07/Java%E8%AF%8A%E6%96%AD%E5%B7%A5%E5%85%B7Arthas%E6%9C%80%E4%BD%B3%E5%AE%9E%E8%B7%B5/Arthas%E5%8A%A8%E6%80%81%E6%9B%B4%E6%96%B0%E5%BA%94%E7%94%A8LoggerLevel%E6%A1%88%E4%BE%8B/O1CN010Qbzcz1ctPSWSZI6L_!!6000000003658-2-tps-333-182.png\" alt=\"Demo Web\"></p>\n<h2 id=\"Start-arthas-boot\"><a href=\"#Start-arthas-boot\" class=\"headerlink\" title=\"Start arthas-boot\"></a>Start arthas-boot</h2><p>在新的<code>Terminal 2</code>里，下载<code>arthas-boot.jar</code>，再用<code>java -jar</code>命令启动：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wget https://arthas.aliyun.com/arthas-boot.jar;java -jar arthas-boot.jar</span><br></pre></td></tr></table></figure>\n\n\n\n<p><code>arthas-boot</code>是<code>Arthas</code>的启动程序，它启动后，会列出所有的Java进程，用户可以选择需要诊断的目标进程。</p>\n<p>选择第一个进程，输入 <code>1</code> ，再<code>Enter/回车</code>：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1</span><br></pre></td></tr></table></figure>\n\n\n\n<p>Attach成功之后，会打印Arthas LOGO。输入 <code>help</code> 可以获取到更多的帮助信息。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">help</span></span><br></pre></td></tr></table></figure>\n\n\n\n<p><img src=\"/jlynet.github.io/2021/08/07/Java%E8%AF%8A%E6%96%AD%E5%B7%A5%E5%85%B7Arthas%E6%9C%80%E4%BD%B3%E5%AE%9E%E8%B7%B5/Arthas%E5%8A%A8%E6%80%81%E6%9B%B4%E6%96%B0%E5%BA%94%E7%94%A8LoggerLevel%E6%A1%88%E4%BE%8B/O1CN01HzatXZ1RgccrlT90M_!!6000000002141-2-tps-529-244.png\" alt=\"Arthas Boot\"></p>\n<h2 id=\"动态更新应用Logger-Level\"><a href=\"#动态更新应用Logger-Level\" class=\"headerlink\" title=\"动态更新应用Logger Level\"></a>动态更新应用Logger Level</h2><p>在这个案例里，动态修改应用的Logger Level。</p>\n<h4 id=\"查找UserController的ClassLoader\"><a href=\"#查找UserController的ClassLoader\" class=\"headerlink\" title=\"查找UserController的ClassLoader\"></a>查找UserController的ClassLoader</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sc -d com.example.demo.arthas.user.UserController | grep classLoaderHash</span><br></pre></td></tr></table></figure>\n\n<p></p>\n<figure class=\"highlight console\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> sc -d com.example.demo.arthas.user.UserController | grep classLoaderHash</span></span><br><span class=\"line\"> classLoaderHash   1be6f5c3</span><br></pre></td></tr></table></figure>\n\n<p>注意hashcode是变化的，需要先查看当前的ClassLoader信息，提取对应ClassLoader的hashcode。</p>\n<p>如果你使用<code>-c</code>，你需要手动输入hashcode：<code>-c &lt;hashcode&gt;</code></p>\n<figure class=\"highlight console\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> ognl -c 1be6f5c3 @com.example.demo.arthas.user.UserController@logger</span></span><br></pre></td></tr></table></figure>\n\n<p>对于只有唯一实例的ClassLoader可以通过<code>--classLoaderClass</code>指定class name，使用起来更加方便：</p>\n<figure class=\"highlight console\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> ognl --classLoaderClass org.springframework.boot.loader.LaunchedURLClassLoader  @org.springframework.boot.SpringApplication@logger</span></span><br><span class=\"line\">@Slf4jLocationAwareLog[</span><br><span class=\"line\">    FQCN=@String[org.apache.commons.logging.LogAdapter$Slf4jLocationAwareLog],</span><br><span class=\"line\">    name=@String[org.springframework.boot.SpringApplication],</span><br><span class=\"line\">    logger=@Logger[Logger[org.springframework.boot.SpringApplication]],</span><br><span class=\"line\">]</span><br></pre></td></tr></table></figure>\n\n<p><code>--classLoaderClass</code> 的值是ClassLoader的类名，只有匹配到唯一的ClassLoader实例时才能工作，目的是方便输入通用命令，而<code>-c &lt;hashcode&gt;</code>是动态变化的。</p>\n<h4 id=\"用ognl获取logger\"><a href=\"#用ognl获取logger\" class=\"headerlink\" title=\"用ognl获取logger\"></a>用ognl获取logger</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ognl --classLoaderClass org.springframework.boot.loader.LaunchedURLClassLoader <span class=\"string\">&#x27;@com.example.demo.arthas.user.UserController@logger&#x27;</span></span><br></pre></td></tr></table></figure>\n\n\n\n<figure class=\"highlight console\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> ognl --classLoaderClass org.springframework.boot.loader.LaunchedURLClassLoader <span class=\"string\">&#x27;@com.example.demo.arthas.user.UserController@logger&#x27;</span></span></span><br><span class=\"line\">@Logger[</span><br><span class=\"line\">    serialVersionUID=@Long[5454405123156820674],</span><br><span class=\"line\">    FQCN=@String[ch.qos.logback.classic.Logger],</span><br><span class=\"line\">    name=@String[com.example.demo.arthas.user.UserController],</span><br><span class=\"line\">    level=null,</span><br><span class=\"line\">    effectiveLevelInt=@Integer[20000],</span><br><span class=\"line\">    parent=@Logger[Logger[com.example.demo.arthas.user]],</span><br><span class=\"line\">    childrenList=null,</span><br><span class=\"line\">    aai=null,</span><br><span class=\"line\">    additive=@Boolean[true],</span><br><span class=\"line\">    loggerContext=@LoggerContext[ch.qos.logback.classic.LoggerContext[default]],</span><br><span class=\"line\">]</span><br></pre></td></tr></table></figure>\n\n<p>可以知道<code>UserController@logger</code>实际使用的是logback。可以看到<code>level=null</code>，则说明实际最终的level是从<code>root</code> logger里来的。</p>\n<h4 id=\"单独设置UserController的logger-level\"><a href=\"#单独设置UserController的logger-level\" class=\"headerlink\" title=\"单独设置UserController的logger level\"></a>单独设置UserController的logger level</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ognl --classLoaderClass org.springframework.boot.loader.LaunchedURLClassLoader <span class=\"string\">&#x27;@com.example.demo.arthas.user.UserController@logger.setLevel(@ch.qos.logback.classic.Level@DEBUG)&#x27;</span></span><br></pre></td></tr></table></figure>\n\n\n\n<p>再次获取<code>UserController@logger</code>，可以发现已经是<code>DEBUG</code>了：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ognl --classLoaderClass org.springframework.boot.loader.LaunchedURLClassLoader <span class=\"string\">&#x27;@com.example.demo.arthas.user.UserController@logger&#x27;</span></span><br></pre></td></tr></table></figure>\n\n\n\n<figure class=\"highlight console\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> ognl --classLoaderClass org.springframework.boot.loader.LaunchedURLClassLoader <span class=\"string\">&#x27;@com.example.demo.arthas.user.UserController@logger&#x27;</span></span></span><br><span class=\"line\">@Logger[</span><br><span class=\"line\">    serialVersionUID=@Long[5454405123156820674],</span><br><span class=\"line\">    FQCN=@String[ch.qos.logback.classic.Logger],</span><br><span class=\"line\">    name=@String[com.example.demo.arthas.user.UserController],</span><br><span class=\"line\">    level=@Level[DEBUG],</span><br><span class=\"line\">    effectiveLevelInt=@Integer[10000],</span><br><span class=\"line\">    parent=@Logger[Logger[com.example.demo.arthas.user]],</span><br><span class=\"line\">    childrenList=null,</span><br><span class=\"line\">    aai=null,</span><br><span class=\"line\">    additive=@Boolean[true],</span><br><span class=\"line\">    loggerContext=@LoggerContext[ch.qos.logback.classic.LoggerContext[default]],</span><br><span class=\"line\">]</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"修改logback的全局logger-level\"><a href=\"#修改logback的全局logger-level\" class=\"headerlink\" title=\"修改logback的全局logger level\"></a>修改logback的全局logger level</h4><p>通过获取<code>root</code> logger，可以修改全局的logger level：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ognl --classLoaderClass org.springframework.boot.loader.LaunchedURLClassLoader <span class=\"string\">&#x27;@org.slf4j.LoggerFactory@getLogger(&quot;root&quot;).setLevel(@ch.qos.logback.classic.Level@DEBUG)&#x27;</span></span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"更多信息\"><a href=\"#更多信息\" class=\"headerlink\" title=\"更多信息\"></a>更多信息</h2><p>通过本教程基本掌握了Arthas动态更新应用Logger Level。如果有更多的技巧或者使用疑问，欢迎在Issue里提出。</p>\n<ul>\n<li>Issues: <a href=\"https://github.com/alibaba/arthas/issues\">https://github.com/alibaba/arthas/issues</a></li>\n<li>文档： <a href=\"https://arthas.aliyun.com/doc\">https://arthas.aliyun.com/doc</a></li>\n</ul>\n<p>如果您在使用Arthas，请让我们知道。您的使用对我们非常重要：<a href=\"https://github.com/alibaba/arthas/issues/111\">查看</a></p>\n<p>文章拷贝来源：<a href=\"https://start.aliyun.com/course?spm=a2ck6.17690074.0.0.28bc2e7dHTphXs&amp;id=PaiFAkJM\">https://start.aliyun.com/course?spm=a2ck6.17690074.0.0.28bc2e7dHTphXs&amp;id=PaiFAkJM</a></p>\n"},{"title":"Arthas 后台异步任务 案例","date":"2021-08-07T00:35:31.000Z","_content":"\n<!-- toc -->\n\n![Arthas](arthas.png)\n\n`Arthas` 是Alibaba开源的Java诊断工具，深受开发者喜爱。在线排查问题，无需重启；动态跟踪Java代码；实时监控JVM状态。\n\n`Arthas` 支持JDK 6+，支持Linux/Mac/Windows，采用命令行交互模式，同时提供丰富的 `Tab` 自动补全功能，进一步方便进行问题的定位和诊断。\n\n当你遇到以下类似问题而束手无策时，Arthas可以帮助你解决：\n\n- 这个类从哪个 jar 包加载的？为什么会报各种类相关的 Exception？\n- 我改的代码为什么没有执行到？难道是我没 commit？分支搞错了？\n- 遇到问题无法在线上 debug，难道只能通过加日志再重新发布吗？\n- 线上遇到某个用户的数据处理有问题，但线上同样无法 debug，线下无法重现！\n- 是否有一个全局视角来查看系统的运行状况？\n- 有什么办法可以监控到JVM的实时运行状态？\n- 怎么快速定位应用的热点，生成火焰图？\n\n本教程会以一个简单的应用为例，演示后台异步任务。\n\n- Github: https://github.com/alibaba/arthas\n- 文档: https://arthas.aliyun.com/doc/\n\n## Arthas demo\n\n下载`arthas-demo.jar`，再用`java -jar`命令启动：\n\n```bash\nwget https://arthas.aliyun.com/arthas-demo.jar;java -jar arthas-demo.jar\n```\n\n`arthas-demo`是一个很简单的程序，它随机生成整数，再执行因式分解，把结果打印出来。如果生成的随机数是负数，则会打印提示信息。\n\n## Start arthas-boot\n\n在新的`Terminal 2`里，下载`arthas-boot.jar`，再用`java -jar`命令启动：\n\n```bash\nwget https://arthas.aliyun.com/arthas-boot.jar;java -jar arthas-boot.jar\n```\n\n`arthas-boot`是`Arthas`的启动程序，它启动后，会列出所有的Java进程，用户可以选择需要诊断的目标进程。\n\n选择第一个进程，输入 `1` ，再`Enter/回车`：\n\n```bash\n1\n```\n\nAttach成功之后，会打印Arthas LOGO。输入 `help` 可以获取到更多的帮助信息。\n\n```bash\nhelp\n```\n\n![Arthas Boot](O1CN01HzatXZ1RgccrlT90M_!!6000000002141-2-tps-529-244.png)\n\n## 后台异步任务\n\narthas中的后台异步任务，使用了仿linux系统任务相关的命令。[linux任务相关介绍](https://ehlxr.me/2017/01/18/Linux-中-fg、bg、jobs、-指令/)。\n\n## 使用&在后台执行任务\n\n比如希望执行后台执行trace命令，那么调用下面命令\n\n```bash\ntrace demo.MathGame primeFactors &\n```\n\n这时命令在后台执行，可以在console中继续执行其他命令。\n\n## 通过jobs查看任务\n\n如果希望查看当前有哪些arthas任务在执行，可以执行jobs命令，执行结果如下\n\n```bash\njobs\n```\n\n```console\n$ jobs\n[1]*\n       Running           trace demo.MathGame primeFactors &\n       execution count : 49\n       start time      : Wed Jul 22 05:47:52 GMT 2020\n       timeout date    : Thu Jul 23 05:47:52 GMT 2020\n       session         : aa75753d-74f1-4929-a829-7ff965345183 (current)\n```\n\n可以看到目前有一个后台任务在执行。\n\njob id是10, `*` 表示此job是当前session创建\n\n状态是Stopped\n\nexecution count是执行次数，从启动开始已经执行了19次\n\ntimeout date是超时的时间，到这个时间，任务将会自动超时退出\n\n## 任务暂停和取消\n\n当任务正在前台执行，比如直接调用命令`trace Test t`或者调用后台执行命令`trace Test t &`后又通过fg命令将任务转到前台。这时console中无法继续执行命令，但是可以接收并处理以下事件：\n\n`ctrl + z`：将任务暂停。通过jbos查看任务状态将会变为Stopped，通过`bg <job-id>`或者`fg <job-id>`可让任务重新开始执行\n\n`ctrl + c`：停止任务\n\n`ctrl + d`：按照linux语义应当是退出终端，目前arthas中是空实现，不处理\n\n## fg、bg命令，将命令转到前台、后台继续执行\n\n- 任务在后台执行或者暂停状态（`ctrl + z`暂停任务）时，执行`fg <job-id>`将可以把对应的任务转到前台继续执行。在前台执行时，无法在console中执行其他命令\n- 当任务处于暂停状态时（`ctrl + z`暂停任务），执行`bg <job-id>`将可以把对应的任务在后台继续执行\n- 非当前session创建的job，只能由当前session `fg`到前台执行\n\n## 任务输出重定向\n\n可通过>或者>>将任务输出结果输出到指定的文件中，可以和&一起使用，实现arthas命令的后台异步任务。比如：\n\n```bash\ntrace demo.MathGame primeFactors >> test.out &\n```\n\n这时trace命令会在后台执行，并且把结果输出到`~/logs/arthas-cache/test.out`。可继续执行其他命令。并可查看文件中的命令执行结果。\n\n```bash\ncat test.out\n```\n\n当连接到远程的arthas server时，可能无法查看远程机器的文件，arthas同时支持了自动重定向到本地缓存路径。使用方法如下：\n\n```bash\ntrace demo.MathGame primeFactors >> &\n```\n\n```console\n$ trace Test t >>  &\njob id  : 2\ncache location  : /Users/gehui/logs/arthas-cache/28198/2\n```\n\n可以看到并没有指定重定向文件位置，arthas自动重定向到缓存中了，执行命令后会输出`job id`和`cache location`。`cache location`就是重定向文件的路径，在系统logs目录下，路径包括`pid`和`job id`，避免和其他任务冲突。命令输出结果到`/Users/gehui/logs/arthas-cache/28198/2`中，`job id`为2。\n\n## 停止命令\n\n异步执行的命令，如果希望停止，可执行`kill`\n\n## 其他\n\n- 最多同时支持8个命令使用重定向将结果写日志\n- 请勿同时开启过多的后台异步命令，以免对目标JVM性能造成影响\n- 如果不想停止arthas，继续执行后台任务，可以执行 `quit` 退出arthas控制台（`stop` 会停止arthas 服务）\n\n## 更多信息\n\n通过本教程基本掌握了Arthas后台异步任务。如果有更多的技巧或者使用疑问，欢迎在Issue里提出。\n\n- Issues: https://github.com/alibaba/arthas/issues\n- 文档： https://arthas.aliyun.com/doc\n\n如果您在使用Arthas，请让我们知道。您的使用对我们非常重要：[查看](https://github.com/alibaba/arthas/issues/111)\n\n文章拷贝来源：https://start.aliyun.com/course?spm=a2ck6.17690074.0.0.28bc2e7dHTphXs&id=PaiFAkJM","source":"_posts/Java诊断工具Arthas最佳实践/Arthas后台异步任务案例.md","raw":"---\ntitle: Arthas 后台异步任务 案例\ndate: 2021-08-07 08:35:31\ntags: ['Java 诊断工具 Arthas 最佳实践']\n---\n\n<!-- toc -->\n\n![Arthas](arthas.png)\n\n`Arthas` 是Alibaba开源的Java诊断工具，深受开发者喜爱。在线排查问题，无需重启；动态跟踪Java代码；实时监控JVM状态。\n\n`Arthas` 支持JDK 6+，支持Linux/Mac/Windows，采用命令行交互模式，同时提供丰富的 `Tab` 自动补全功能，进一步方便进行问题的定位和诊断。\n\n当你遇到以下类似问题而束手无策时，Arthas可以帮助你解决：\n\n- 这个类从哪个 jar 包加载的？为什么会报各种类相关的 Exception？\n- 我改的代码为什么没有执行到？难道是我没 commit？分支搞错了？\n- 遇到问题无法在线上 debug，难道只能通过加日志再重新发布吗？\n- 线上遇到某个用户的数据处理有问题，但线上同样无法 debug，线下无法重现！\n- 是否有一个全局视角来查看系统的运行状况？\n- 有什么办法可以监控到JVM的实时运行状态？\n- 怎么快速定位应用的热点，生成火焰图？\n\n本教程会以一个简单的应用为例，演示后台异步任务。\n\n- Github: https://github.com/alibaba/arthas\n- 文档: https://arthas.aliyun.com/doc/\n\n## Arthas demo\n\n下载`arthas-demo.jar`，再用`java -jar`命令启动：\n\n```bash\nwget https://arthas.aliyun.com/arthas-demo.jar;java -jar arthas-demo.jar\n```\n\n`arthas-demo`是一个很简单的程序，它随机生成整数，再执行因式分解，把结果打印出来。如果生成的随机数是负数，则会打印提示信息。\n\n## Start arthas-boot\n\n在新的`Terminal 2`里，下载`arthas-boot.jar`，再用`java -jar`命令启动：\n\n```bash\nwget https://arthas.aliyun.com/arthas-boot.jar;java -jar arthas-boot.jar\n```\n\n`arthas-boot`是`Arthas`的启动程序，它启动后，会列出所有的Java进程，用户可以选择需要诊断的目标进程。\n\n选择第一个进程，输入 `1` ，再`Enter/回车`：\n\n```bash\n1\n```\n\nAttach成功之后，会打印Arthas LOGO。输入 `help` 可以获取到更多的帮助信息。\n\n```bash\nhelp\n```\n\n![Arthas Boot](O1CN01HzatXZ1RgccrlT90M_!!6000000002141-2-tps-529-244.png)\n\n## 后台异步任务\n\narthas中的后台异步任务，使用了仿linux系统任务相关的命令。[linux任务相关介绍](https://ehlxr.me/2017/01/18/Linux-中-fg、bg、jobs、-指令/)。\n\n## 使用&在后台执行任务\n\n比如希望执行后台执行trace命令，那么调用下面命令\n\n```bash\ntrace demo.MathGame primeFactors &\n```\n\n这时命令在后台执行，可以在console中继续执行其他命令。\n\n## 通过jobs查看任务\n\n如果希望查看当前有哪些arthas任务在执行，可以执行jobs命令，执行结果如下\n\n```bash\njobs\n```\n\n```console\n$ jobs\n[1]*\n       Running           trace demo.MathGame primeFactors &\n       execution count : 49\n       start time      : Wed Jul 22 05:47:52 GMT 2020\n       timeout date    : Thu Jul 23 05:47:52 GMT 2020\n       session         : aa75753d-74f1-4929-a829-7ff965345183 (current)\n```\n\n可以看到目前有一个后台任务在执行。\n\njob id是10, `*` 表示此job是当前session创建\n\n状态是Stopped\n\nexecution count是执行次数，从启动开始已经执行了19次\n\ntimeout date是超时的时间，到这个时间，任务将会自动超时退出\n\n## 任务暂停和取消\n\n当任务正在前台执行，比如直接调用命令`trace Test t`或者调用后台执行命令`trace Test t &`后又通过fg命令将任务转到前台。这时console中无法继续执行命令，但是可以接收并处理以下事件：\n\n`ctrl + z`：将任务暂停。通过jbos查看任务状态将会变为Stopped，通过`bg <job-id>`或者`fg <job-id>`可让任务重新开始执行\n\n`ctrl + c`：停止任务\n\n`ctrl + d`：按照linux语义应当是退出终端，目前arthas中是空实现，不处理\n\n## fg、bg命令，将命令转到前台、后台继续执行\n\n- 任务在后台执行或者暂停状态（`ctrl + z`暂停任务）时，执行`fg <job-id>`将可以把对应的任务转到前台继续执行。在前台执行时，无法在console中执行其他命令\n- 当任务处于暂停状态时（`ctrl + z`暂停任务），执行`bg <job-id>`将可以把对应的任务在后台继续执行\n- 非当前session创建的job，只能由当前session `fg`到前台执行\n\n## 任务输出重定向\n\n可通过>或者>>将任务输出结果输出到指定的文件中，可以和&一起使用，实现arthas命令的后台异步任务。比如：\n\n```bash\ntrace demo.MathGame primeFactors >> test.out &\n```\n\n这时trace命令会在后台执行，并且把结果输出到`~/logs/arthas-cache/test.out`。可继续执行其他命令。并可查看文件中的命令执行结果。\n\n```bash\ncat test.out\n```\n\n当连接到远程的arthas server时，可能无法查看远程机器的文件，arthas同时支持了自动重定向到本地缓存路径。使用方法如下：\n\n```bash\ntrace demo.MathGame primeFactors >> &\n```\n\n```console\n$ trace Test t >>  &\njob id  : 2\ncache location  : /Users/gehui/logs/arthas-cache/28198/2\n```\n\n可以看到并没有指定重定向文件位置，arthas自动重定向到缓存中了，执行命令后会输出`job id`和`cache location`。`cache location`就是重定向文件的路径，在系统logs目录下，路径包括`pid`和`job id`，避免和其他任务冲突。命令输出结果到`/Users/gehui/logs/arthas-cache/28198/2`中，`job id`为2。\n\n## 停止命令\n\n异步执行的命令，如果希望停止，可执行`kill`\n\n## 其他\n\n- 最多同时支持8个命令使用重定向将结果写日志\n- 请勿同时开启过多的后台异步命令，以免对目标JVM性能造成影响\n- 如果不想停止arthas，继续执行后台任务，可以执行 `quit` 退出arthas控制台（`stop` 会停止arthas 服务）\n\n## 更多信息\n\n通过本教程基本掌握了Arthas后台异步任务。如果有更多的技巧或者使用疑问，欢迎在Issue里提出。\n\n- Issues: https://github.com/alibaba/arthas/issues\n- 文档： https://arthas.aliyun.com/doc\n\n如果您在使用Arthas，请让我们知道。您的使用对我们非常重要：[查看](https://github.com/alibaba/arthas/issues/111)\n\n文章拷贝来源：https://start.aliyun.com/course?spm=a2ck6.17690074.0.0.28bc2e7dHTphXs&id=PaiFAkJM","slug":"Java诊断工具Arthas最佳实践/Arthas后台异步任务案例","published":1,"updated":"2021-08-07T05:33:14.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cks1cgr5p000rfw5i9w1bgu08","content":"<!-- toc -->\n\n<ul>\n<li><a href=\"#arthas-demo\">Arthas demo</a></li>\n<li><a href=\"#start-arthas-boot\">Start arthas-boot</a></li>\n<li><a href=\"#%E5%90%8E%E5%8F%B0%E5%BC%82%E6%AD%A5%E4%BB%BB%E5%8A%A1\">后台异步任务</a></li>\n<li><a href=\"#%E4%BD%BF%E7%94%A8%E5%9C%A8%E5%90%8E%E5%8F%B0%E6%89%A7%E8%A1%8C%E4%BB%BB%E5%8A%A1\">使用&amp;在后台执行任务</a></li>\n<li><a href=\"#%E9%80%9A%E8%BF%87jobs%E6%9F%A5%E7%9C%8B%E4%BB%BB%E5%8A%A1\">通过jobs查看任务</a></li>\n<li><a href=\"#%E4%BB%BB%E5%8A%A1%E6%9A%82%E5%81%9C%E5%92%8C%E5%8F%96%E6%B6%88\">任务暂停和取消</a></li>\n<li><a href=\"#fg-bg%E5%91%BD%E4%BB%A4%E5%B0%86%E5%91%BD%E4%BB%A4%E8%BD%AC%E5%88%B0%E5%89%8D%E5%8F%B0-%E5%90%8E%E5%8F%B0%E7%BB%A7%E7%BB%AD%E6%89%A7%E8%A1%8C\">fg、bg命令，将命令转到前台、后台继续执行</a></li>\n<li><a href=\"#%E4%BB%BB%E5%8A%A1%E8%BE%93%E5%87%BA%E9%87%8D%E5%AE%9A%E5%90%91\">任务输出重定向</a></li>\n<li><a href=\"#%E5%81%9C%E6%AD%A2%E5%91%BD%E4%BB%A4\">停止命令</a></li>\n<li><a href=\"#%E5%85%B6%E4%BB%96\">其他</a></li>\n<li><a href=\"#%E6%9B%B4%E5%A4%9A%E4%BF%A1%E6%81%AF\">更多信息</a></li>\n</ul>\n<!-- tocstop -->\n\n<p><img src=\"/jlynet.github.io/2021/08/07/Java%E8%AF%8A%E6%96%AD%E5%B7%A5%E5%85%B7Arthas%E6%9C%80%E4%BD%B3%E5%AE%9E%E8%B7%B5/Arthas%E5%90%8E%E5%8F%B0%E5%BC%82%E6%AD%A5%E4%BB%BB%E5%8A%A1%E6%A1%88%E4%BE%8B/arthas.png\" alt=\"Arthas\"></p>\n<p><code>Arthas</code> 是Alibaba开源的Java诊断工具，深受开发者喜爱。在线排查问题，无需重启；动态跟踪Java代码；实时监控JVM状态。</p>\n<p><code>Arthas</code> 支持JDK 6+，支持Linux/Mac/Windows，采用命令行交互模式，同时提供丰富的 <code>Tab</code> 自动补全功能，进一步方便进行问题的定位和诊断。</p>\n<p>当你遇到以下类似问题而束手无策时，Arthas可以帮助你解决：</p>\n<ul>\n<li>这个类从哪个 jar 包加载的？为什么会报各种类相关的 Exception？</li>\n<li>我改的代码为什么没有执行到？难道是我没 commit？分支搞错了？</li>\n<li>遇到问题无法在线上 debug，难道只能通过加日志再重新发布吗？</li>\n<li>线上遇到某个用户的数据处理有问题，但线上同样无法 debug，线下无法重现！</li>\n<li>是否有一个全局视角来查看系统的运行状况？</li>\n<li>有什么办法可以监控到JVM的实时运行状态？</li>\n<li>怎么快速定位应用的热点，生成火焰图？</li>\n</ul>\n<p>本教程会以一个简单的应用为例，演示后台异步任务。</p>\n<ul>\n<li>Github: <a href=\"https://github.com/alibaba/arthas\">https://github.com/alibaba/arthas</a></li>\n<li>文档: <a href=\"https://arthas.aliyun.com/doc/\">https://arthas.aliyun.com/doc/</a></li>\n</ul>\n<h2><span id=\"arthas-demo\">Arthas demo</span></h2><p>下载<code>arthas-demo.jar</code>，再用<code>java -jar</code>命令启动：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wget https://arthas.aliyun.com/arthas-demo.jar;java -jar arthas-demo.jar</span><br></pre></td></tr></table></figure>\n\n<p><code>arthas-demo</code>是一个很简单的程序，它随机生成整数，再执行因式分解，把结果打印出来。如果生成的随机数是负数，则会打印提示信息。</p>\n<h2><span id=\"start-arthas-boot\">Start arthas-boot</span></h2><p>在新的<code>Terminal 2</code>里，下载<code>arthas-boot.jar</code>，再用<code>java -jar</code>命令启动：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wget https://arthas.aliyun.com/arthas-boot.jar;java -jar arthas-boot.jar</span><br></pre></td></tr></table></figure>\n\n<p><code>arthas-boot</code>是<code>Arthas</code>的启动程序，它启动后，会列出所有的Java进程，用户可以选择需要诊断的目标进程。</p>\n<p>选择第一个进程，输入 <code>1</code> ，再<code>Enter/回车</code>：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1</span><br></pre></td></tr></table></figure>\n\n<p>Attach成功之后，会打印Arthas LOGO。输入 <code>help</code> 可以获取到更多的帮助信息。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">help</span></span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/jlynet.github.io/2021/08/07/Java%E8%AF%8A%E6%96%AD%E5%B7%A5%E5%85%B7Arthas%E6%9C%80%E4%BD%B3%E5%AE%9E%E8%B7%B5/Arthas%E5%90%8E%E5%8F%B0%E5%BC%82%E6%AD%A5%E4%BB%BB%E5%8A%A1%E6%A1%88%E4%BE%8B/O1CN01HzatXZ1RgccrlT90M_!!6000000002141-2-tps-529-244.png\" alt=\"Arthas Boot\"></p>\n<h2><span id=\"后台异步任务\">后台异步任务</span></h2><p>arthas中的后台异步任务，使用了仿linux系统任务相关的命令。<a href=\"https://ehlxr.me/2017/01/18/Linux-%E4%B8%AD-fg%E3%80%81bg%E3%80%81jobs%E3%80%81-%E6%8C%87%E4%BB%A4/\">linux任务相关介绍</a>。</p>\n<h2><span id=\"使用amp在后台执行任务\">使用&amp;在后台执行任务</span></h2><p>比如希望执行后台执行trace命令，那么调用下面命令</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">trace demo.MathGame primeFactors &amp;</span><br></pre></td></tr></table></figure>\n\n<p>这时命令在后台执行，可以在console中继续执行其他命令。</p>\n<h2><span id=\"通过jobs查看任务\">通过jobs查看任务</span></h2><p>如果希望查看当前有哪些arthas任务在执行，可以执行jobs命令，执行结果如下</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">jobs</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight console\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> <span class=\"built_in\">jobs</span></span></span><br><span class=\"line\">[1]*</span><br><span class=\"line\">       Running           trace demo.MathGame primeFactors &amp;</span><br><span class=\"line\">       execution count : 49</span><br><span class=\"line\">       start time      : Wed Jul 22 05:47:52 GMT 2020</span><br><span class=\"line\">       timeout date    : Thu Jul 23 05:47:52 GMT 2020</span><br><span class=\"line\">       session         : aa75753d-74f1-4929-a829-7ff965345183 (current)</span><br></pre></td></tr></table></figure>\n\n<p>可以看到目前有一个后台任务在执行。</p>\n<p>job id是10, <code>*</code> 表示此job是当前session创建</p>\n<p>状态是Stopped</p>\n<p>execution count是执行次数，从启动开始已经执行了19次</p>\n<p>timeout date是超时的时间，到这个时间，任务将会自动超时退出</p>\n<h2><span id=\"任务暂停和取消\">任务暂停和取消</span></h2><p>当任务正在前台执行，比如直接调用命令<code>trace Test t</code>或者调用后台执行命令<code>trace Test t &amp;</code>后又通过fg命令将任务转到前台。这时console中无法继续执行命令，但是可以接收并处理以下事件：</p>\n<p><code>ctrl + z</code>：将任务暂停。通过jbos查看任务状态将会变为Stopped，通过<code>bg &lt;job-id&gt;</code>或者<code>fg &lt;job-id&gt;</code>可让任务重新开始执行</p>\n<p><code>ctrl + c</code>：停止任务</p>\n<p><code>ctrl + d</code>：按照linux语义应当是退出终端，目前arthas中是空实现，不处理</p>\n<h2><span id=\"fg-bg命令将命令转到前台-后台继续执行\">fg、bg命令，将命令转到前台、后台继续执行</span></h2><ul>\n<li>任务在后台执行或者暂停状态（<code>ctrl + z</code>暂停任务）时，执行<code>fg &lt;job-id&gt;</code>将可以把对应的任务转到前台继续执行。在前台执行时，无法在console中执行其他命令</li>\n<li>当任务处于暂停状态时（<code>ctrl + z</code>暂停任务），执行<code>bg &lt;job-id&gt;</code>将可以把对应的任务在后台继续执行</li>\n<li>非当前session创建的job，只能由当前session <code>fg</code>到前台执行</li>\n</ul>\n<h2><span id=\"任务输出重定向\">任务输出重定向</span></h2><p>可通过&gt;或者&gt;&gt;将任务输出结果输出到指定的文件中，可以和&amp;一起使用，实现arthas命令的后台异步任务。比如：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">trace demo.MathGame primeFactors &gt;&gt; test.out &amp;</span><br></pre></td></tr></table></figure>\n\n<p>这时trace命令会在后台执行，并且把结果输出到<code>~/logs/arthas-cache/test.out</code>。可继续执行其他命令。并可查看文件中的命令执行结果。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cat test.out</span><br></pre></td></tr></table></figure>\n\n<p>当连接到远程的arthas server时，可能无法查看远程机器的文件，arthas同时支持了自动重定向到本地缓存路径。使用方法如下：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">trace demo.MathGame primeFactors &gt;&gt; &amp;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight console\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> trace Test t &gt;&gt;  &amp;</span></span><br><span class=\"line\">job id  : 2</span><br><span class=\"line\">cache location  : /Users/gehui/logs/arthas-cache/28198/2</span><br></pre></td></tr></table></figure>\n\n<p>可以看到并没有指定重定向文件位置，arthas自动重定向到缓存中了，执行命令后会输出<code>job id</code>和<code>cache location</code>。<code>cache location</code>就是重定向文件的路径，在系统logs目录下，路径包括<code>pid</code>和<code>job id</code>，避免和其他任务冲突。命令输出结果到<code>/Users/gehui/logs/arthas-cache/28198/2</code>中，<code>job id</code>为2。</p>\n<h2><span id=\"停止命令\">停止命令</span></h2><p>异步执行的命令，如果希望停止，可执行<code>kill</code></p>\n<h2><span id=\"其他\">其他</span></h2><ul>\n<li>最多同时支持8个命令使用重定向将结果写日志</li>\n<li>请勿同时开启过多的后台异步命令，以免对目标JVM性能造成影响</li>\n<li>如果不想停止arthas，继续执行后台任务，可以执行 <code>quit</code> 退出arthas控制台（<code>stop</code> 会停止arthas 服务）</li>\n</ul>\n<h2><span id=\"更多信息\">更多信息</span></h2><p>通过本教程基本掌握了Arthas后台异步任务。如果有更多的技巧或者使用疑问，欢迎在Issue里提出。</p>\n<ul>\n<li>Issues: <a href=\"https://github.com/alibaba/arthas/issues\">https://github.com/alibaba/arthas/issues</a></li>\n<li>文档： <a href=\"https://arthas.aliyun.com/doc\">https://arthas.aliyun.com/doc</a></li>\n</ul>\n<p>如果您在使用Arthas，请让我们知道。您的使用对我们非常重要：<a href=\"https://github.com/alibaba/arthas/issues/111\">查看</a></p>\n<p>文章拷贝来源：<a href=\"https://start.aliyun.com/course?spm=a2ck6.17690074.0.0.28bc2e7dHTphXs&amp;id=PaiFAkJM\">https://start.aliyun.com/course?spm=a2ck6.17690074.0.0.28bc2e7dHTphXs&amp;id=PaiFAkJM</a></p>\n","site":{"data":{}},"excerpt":"","more":"<!-- toc -->\n\n<ul>\n<li><a href=\"#arthas-demo\">Arthas demo</a></li>\n<li><a href=\"#start-arthas-boot\">Start arthas-boot</a></li>\n<li><a href=\"#%E5%90%8E%E5%8F%B0%E5%BC%82%E6%AD%A5%E4%BB%BB%E5%8A%A1\">后台异步任务</a></li>\n<li><a href=\"#%E4%BD%BF%E7%94%A8%E5%9C%A8%E5%90%8E%E5%8F%B0%E6%89%A7%E8%A1%8C%E4%BB%BB%E5%8A%A1\">使用&amp;在后台执行任务</a></li>\n<li><a href=\"#%E9%80%9A%E8%BF%87jobs%E6%9F%A5%E7%9C%8B%E4%BB%BB%E5%8A%A1\">通过jobs查看任务</a></li>\n<li><a href=\"#%E4%BB%BB%E5%8A%A1%E6%9A%82%E5%81%9C%E5%92%8C%E5%8F%96%E6%B6%88\">任务暂停和取消</a></li>\n<li><a href=\"#fg-bg%E5%91%BD%E4%BB%A4%E5%B0%86%E5%91%BD%E4%BB%A4%E8%BD%AC%E5%88%B0%E5%89%8D%E5%8F%B0-%E5%90%8E%E5%8F%B0%E7%BB%A7%E7%BB%AD%E6%89%A7%E8%A1%8C\">fg、bg命令，将命令转到前台、后台继续执行</a></li>\n<li><a href=\"#%E4%BB%BB%E5%8A%A1%E8%BE%93%E5%87%BA%E9%87%8D%E5%AE%9A%E5%90%91\">任务输出重定向</a></li>\n<li><a href=\"#%E5%81%9C%E6%AD%A2%E5%91%BD%E4%BB%A4\">停止命令</a></li>\n<li><a href=\"#%E5%85%B6%E4%BB%96\">其他</a></li>\n<li><a href=\"#%E6%9B%B4%E5%A4%9A%E4%BF%A1%E6%81%AF\">更多信息</a></li>\n</ul>\n<!-- tocstop -->\n\n<p><img src=\"/jlynet.github.io/2021/08/07/Java%E8%AF%8A%E6%96%AD%E5%B7%A5%E5%85%B7Arthas%E6%9C%80%E4%BD%B3%E5%AE%9E%E8%B7%B5/Arthas%E5%90%8E%E5%8F%B0%E5%BC%82%E6%AD%A5%E4%BB%BB%E5%8A%A1%E6%A1%88%E4%BE%8B/arthas.png\" alt=\"Arthas\"></p>\n<p><code>Arthas</code> 是Alibaba开源的Java诊断工具，深受开发者喜爱。在线排查问题，无需重启；动态跟踪Java代码；实时监控JVM状态。</p>\n<p><code>Arthas</code> 支持JDK 6+，支持Linux/Mac/Windows，采用命令行交互模式，同时提供丰富的 <code>Tab</code> 自动补全功能，进一步方便进行问题的定位和诊断。</p>\n<p>当你遇到以下类似问题而束手无策时，Arthas可以帮助你解决：</p>\n<ul>\n<li>这个类从哪个 jar 包加载的？为什么会报各种类相关的 Exception？</li>\n<li>我改的代码为什么没有执行到？难道是我没 commit？分支搞错了？</li>\n<li>遇到问题无法在线上 debug，难道只能通过加日志再重新发布吗？</li>\n<li>线上遇到某个用户的数据处理有问题，但线上同样无法 debug，线下无法重现！</li>\n<li>是否有一个全局视角来查看系统的运行状况？</li>\n<li>有什么办法可以监控到JVM的实时运行状态？</li>\n<li>怎么快速定位应用的热点，生成火焰图？</li>\n</ul>\n<p>本教程会以一个简单的应用为例，演示后台异步任务。</p>\n<ul>\n<li>Github: <a href=\"https://github.com/alibaba/arthas\">https://github.com/alibaba/arthas</a></li>\n<li>文档: <a href=\"https://arthas.aliyun.com/doc/\">https://arthas.aliyun.com/doc/</a></li>\n</ul>\n<h2 id=\"Arthas-demo\"><a href=\"#Arthas-demo\" class=\"headerlink\" title=\"Arthas demo\"></a>Arthas demo</h2><p>下载<code>arthas-demo.jar</code>，再用<code>java -jar</code>命令启动：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wget https://arthas.aliyun.com/arthas-demo.jar;java -jar arthas-demo.jar</span><br></pre></td></tr></table></figure>\n\n<p><code>arthas-demo</code>是一个很简单的程序，它随机生成整数，再执行因式分解，把结果打印出来。如果生成的随机数是负数，则会打印提示信息。</p>\n<h2 id=\"Start-arthas-boot\"><a href=\"#Start-arthas-boot\" class=\"headerlink\" title=\"Start arthas-boot\"></a>Start arthas-boot</h2><p>在新的<code>Terminal 2</code>里，下载<code>arthas-boot.jar</code>，再用<code>java -jar</code>命令启动：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wget https://arthas.aliyun.com/arthas-boot.jar;java -jar arthas-boot.jar</span><br></pre></td></tr></table></figure>\n\n<p><code>arthas-boot</code>是<code>Arthas</code>的启动程序，它启动后，会列出所有的Java进程，用户可以选择需要诊断的目标进程。</p>\n<p>选择第一个进程，输入 <code>1</code> ，再<code>Enter/回车</code>：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1</span><br></pre></td></tr></table></figure>\n\n<p>Attach成功之后，会打印Arthas LOGO。输入 <code>help</code> 可以获取到更多的帮助信息。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">help</span></span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/jlynet.github.io/2021/08/07/Java%E8%AF%8A%E6%96%AD%E5%B7%A5%E5%85%B7Arthas%E6%9C%80%E4%BD%B3%E5%AE%9E%E8%B7%B5/Arthas%E5%90%8E%E5%8F%B0%E5%BC%82%E6%AD%A5%E4%BB%BB%E5%8A%A1%E6%A1%88%E4%BE%8B/O1CN01HzatXZ1RgccrlT90M_!!6000000002141-2-tps-529-244.png\" alt=\"Arthas Boot\"></p>\n<h2 id=\"后台异步任务\"><a href=\"#后台异步任务\" class=\"headerlink\" title=\"后台异步任务\"></a>后台异步任务</h2><p>arthas中的后台异步任务，使用了仿linux系统任务相关的命令。<a href=\"https://ehlxr.me/2017/01/18/Linux-%E4%B8%AD-fg%E3%80%81bg%E3%80%81jobs%E3%80%81-%E6%8C%87%E4%BB%A4/\">linux任务相关介绍</a>。</p>\n<h2 id=\"使用-amp-在后台执行任务\"><a href=\"#使用-amp-在后台执行任务\" class=\"headerlink\" title=\"使用&amp;在后台执行任务\"></a>使用&amp;在后台执行任务</h2><p>比如希望执行后台执行trace命令，那么调用下面命令</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">trace demo.MathGame primeFactors &amp;</span><br></pre></td></tr></table></figure>\n\n<p>这时命令在后台执行，可以在console中继续执行其他命令。</p>\n<h2 id=\"通过jobs查看任务\"><a href=\"#通过jobs查看任务\" class=\"headerlink\" title=\"通过jobs查看任务\"></a>通过jobs查看任务</h2><p>如果希望查看当前有哪些arthas任务在执行，可以执行jobs命令，执行结果如下</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">jobs</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight console\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> <span class=\"built_in\">jobs</span></span></span><br><span class=\"line\">[1]*</span><br><span class=\"line\">       Running           trace demo.MathGame primeFactors &amp;</span><br><span class=\"line\">       execution count : 49</span><br><span class=\"line\">       start time      : Wed Jul 22 05:47:52 GMT 2020</span><br><span class=\"line\">       timeout date    : Thu Jul 23 05:47:52 GMT 2020</span><br><span class=\"line\">       session         : aa75753d-74f1-4929-a829-7ff965345183 (current)</span><br></pre></td></tr></table></figure>\n\n<p>可以看到目前有一个后台任务在执行。</p>\n<p>job id是10, <code>*</code> 表示此job是当前session创建</p>\n<p>状态是Stopped</p>\n<p>execution count是执行次数，从启动开始已经执行了19次</p>\n<p>timeout date是超时的时间，到这个时间，任务将会自动超时退出</p>\n<h2 id=\"任务暂停和取消\"><a href=\"#任务暂停和取消\" class=\"headerlink\" title=\"任务暂停和取消\"></a>任务暂停和取消</h2><p>当任务正在前台执行，比如直接调用命令<code>trace Test t</code>或者调用后台执行命令<code>trace Test t &amp;</code>后又通过fg命令将任务转到前台。这时console中无法继续执行命令，但是可以接收并处理以下事件：</p>\n<p><code>ctrl + z</code>：将任务暂停。通过jbos查看任务状态将会变为Stopped，通过<code>bg &lt;job-id&gt;</code>或者<code>fg &lt;job-id&gt;</code>可让任务重新开始执行</p>\n<p><code>ctrl + c</code>：停止任务</p>\n<p><code>ctrl + d</code>：按照linux语义应当是退出终端，目前arthas中是空实现，不处理</p>\n<h2 id=\"fg、bg命令，将命令转到前台、后台继续执行\"><a href=\"#fg、bg命令，将命令转到前台、后台继续执行\" class=\"headerlink\" title=\"fg、bg命令，将命令转到前台、后台继续执行\"></a>fg、bg命令，将命令转到前台、后台继续执行</h2><ul>\n<li>任务在后台执行或者暂停状态（<code>ctrl + z</code>暂停任务）时，执行<code>fg &lt;job-id&gt;</code>将可以把对应的任务转到前台继续执行。在前台执行时，无法在console中执行其他命令</li>\n<li>当任务处于暂停状态时（<code>ctrl + z</code>暂停任务），执行<code>bg &lt;job-id&gt;</code>将可以把对应的任务在后台继续执行</li>\n<li>非当前session创建的job，只能由当前session <code>fg</code>到前台执行</li>\n</ul>\n<h2 id=\"任务输出重定向\"><a href=\"#任务输出重定向\" class=\"headerlink\" title=\"任务输出重定向\"></a>任务输出重定向</h2><p>可通过&gt;或者&gt;&gt;将任务输出结果输出到指定的文件中，可以和&amp;一起使用，实现arthas命令的后台异步任务。比如：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">trace demo.MathGame primeFactors &gt;&gt; test.out &amp;</span><br></pre></td></tr></table></figure>\n\n<p>这时trace命令会在后台执行，并且把结果输出到<code>~/logs/arthas-cache/test.out</code>。可继续执行其他命令。并可查看文件中的命令执行结果。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cat test.out</span><br></pre></td></tr></table></figure>\n\n<p>当连接到远程的arthas server时，可能无法查看远程机器的文件，arthas同时支持了自动重定向到本地缓存路径。使用方法如下：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">trace demo.MathGame primeFactors &gt;&gt; &amp;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight console\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> trace Test t &gt;&gt;  &amp;</span></span><br><span class=\"line\">job id  : 2</span><br><span class=\"line\">cache location  : /Users/gehui/logs/arthas-cache/28198/2</span><br></pre></td></tr></table></figure>\n\n<p>可以看到并没有指定重定向文件位置，arthas自动重定向到缓存中了，执行命令后会输出<code>job id</code>和<code>cache location</code>。<code>cache location</code>就是重定向文件的路径，在系统logs目录下，路径包括<code>pid</code>和<code>job id</code>，避免和其他任务冲突。命令输出结果到<code>/Users/gehui/logs/arthas-cache/28198/2</code>中，<code>job id</code>为2。</p>\n<h2 id=\"停止命令\"><a href=\"#停止命令\" class=\"headerlink\" title=\"停止命令\"></a>停止命令</h2><p>异步执行的命令，如果希望停止，可执行<code>kill</code></p>\n<h2 id=\"其他\"><a href=\"#其他\" class=\"headerlink\" title=\"其他\"></a>其他</h2><ul>\n<li>最多同时支持8个命令使用重定向将结果写日志</li>\n<li>请勿同时开启过多的后台异步命令，以免对目标JVM性能造成影响</li>\n<li>如果不想停止arthas，继续执行后台任务，可以执行 <code>quit</code> 退出arthas控制台（<code>stop</code> 会停止arthas 服务）</li>\n</ul>\n<h2 id=\"更多信息\"><a href=\"#更多信息\" class=\"headerlink\" title=\"更多信息\"></a>更多信息</h2><p>通过本教程基本掌握了Arthas后台异步任务。如果有更多的技巧或者使用疑问，欢迎在Issue里提出。</p>\n<ul>\n<li>Issues: <a href=\"https://github.com/alibaba/arthas/issues\">https://github.com/alibaba/arthas/issues</a></li>\n<li>文档： <a href=\"https://arthas.aliyun.com/doc\">https://arthas.aliyun.com/doc</a></li>\n</ul>\n<p>如果您在使用Arthas，请让我们知道。您的使用对我们非常重要：<a href=\"https://github.com/alibaba/arthas/issues/111\">查看</a></p>\n<p>文章拷贝来源：<a href=\"https://start.aliyun.com/course?spm=a2ck6.17690074.0.0.28bc2e7dHTphXs&amp;id=PaiFAkJM\">https://start.aliyun.com/course?spm=a2ck6.17690074.0.0.28bc2e7dHTphXs&amp;id=PaiFAkJM</a></p>\n"},{"title":"Arthas 执行结果存日志 案例","date":"2021-08-07T00:35:38.000Z","_content":"\n<!-- toc -->\n\n![Arthas](arthas.png)\n\n`Arthas` 是Alibaba开源的Java诊断工具，深受开发者喜爱。在线排查问题，无需重启；动态跟踪Java代码；实时监控JVM状态。\n\n`Arthas` 支持JDK 6+，支持Linux/Mac/Windows，采用命令行交互模式，同时提供丰富的 `Tab` 自动补全功能，进一步方便进行问题的定位和诊断。\n\n当你遇到以下类似问题而束手无策时，Arthas可以帮助你解决：\n\n- 这个类从哪个 jar 包加载的？为什么会报各种类相关的 Exception？\n- 我改的代码为什么没有执行到？难道是我没 commit？分支搞错了？\n- 遇到问题无法在线上 debug，难道只能通过加日志再重新发布吗？\n- 线上遇到某个用户的数据处理有问题，但线上同样无法 debug，线下无法重现！\n- 是否有一个全局视角来查看系统的运行状况？\n- 有什么办法可以监控到JVM的实时运行状态？\n- 怎么快速定位应用的热点，生成火焰图？\n\n本教程会以一个简单的应用为例，演示Arthas执行结果存日志。\n\n- Github: https://github.com/alibaba/arthas\n- 文档: https://arthas.aliyun.com/doc/\n\n## Arthas demo\n\n下载`arthas-demo.jar`，再用`java -jar`命令启动：\n\n```bash\nwget https://arthas.aliyun.com/arthas-demo.jar;java -jar arthas-demo.jar\n```\n\n\n\n`arthas-demo`是一个很简单的程序，它随机生成整数，再执行因式分解，把结果打印出来。如果生成的随机数是负数，则会打印提示信息。\n\n## Start arthas-boot\n\n在新的`Terminal 2`里，下载`arthas-boot.jar`，再用`java -jar`命令启动：\n\n```bash\nwget https://arthas.aliyun.com/arthas-boot.jar;java -jar arthas-boot.jar\n```\n\n\n\n`arthas-boot`是`Arthas`的启动程序，它启动后，会列出所有的Java进程，用户可以选择需要诊断的目标进程。\n\n选择第一个进程，输入 `1` ，再`Enter/回车`：\n\n```bash\n1\n```\n\n\n\nAttach成功之后，会打印Arthas LOGO。输入 `help` 可以获取到更多的帮助信息。\n\n```bash\nhelp\n```\n\n\n\n![Arthas Boot](O1CN01HzatXZ1RgccrlT90M_!!6000000002141-2-tps-529-244.png)\n\n## 执行结果存日志\n\n将命令的结果完整保存在日志文件中，便于后续进行分析\n\n- 默认情况下，该功能是关闭的，如果需要开启，请执行以下命令：\n\n```bash\noptions save-result true\n```\n\n\n\n```console\n$ options save-result true\n NAME         BEFORE-VALUE  AFTER-VALUE\n----------------------------------------\n save-result  false         true\nAffect(row-cnt:1) cost in 3 ms.\n```\n\n看到上面的输出，即表示成功开启该功能；\n\n- 日志文件路径\n\n结果会异步保存在：`{user.home}/logs/arthas-cache/result.log`，请定期进行清理，以免占据磁盘空间\n\n### 使用新版本Arthas的异步后台任务将结果存日志文件\n\n```console\n$ trace Test t >>  &\njob id  : 2\ncache location  : /Users/admin/logs/arthas-cache/28198/2\n```\n\n此时命令会在后台异步执行，并将结果异步保存在文件`（~/logs/arthas-cache/${PID}/${JobId}）`中;\n\n- 此时任务的执行不受session断开的影响；任务默认超时时间是1天，可以通过全局 `options` 命令修改默认超时时间；\n- 此命令的结果将异步输出到文件中；此时不管 `save-result` 是否为true，都不会再往`~/logs/arthas-cache/result.log` 中异步写结果\n\n## 更多信息\n\n通过本教程基本掌握了Arthas执行结果存日志。如果有更多的技巧或者使用疑问，欢迎在Issue里提出。\n\n- Issues: https://github.com/alibaba/arthas/issues\n- 文档： https://arthas.aliyun.com/doc\n\n如果您在使用Arthas，请让我们知道。您的使用对我们非常重要：[查看](https://github.com/alibaba/arthas/issues/111)\n\n文章拷贝来源：https://start.aliyun.com/course?spm=a2ck6.17690074.0.0.28bc2e7dHTphXs&id=PaiFAkJM","source":"_posts/Java诊断工具Arthas最佳实践/Arthas执行结果存日志案例.md","raw":"---\ntitle: Arthas 执行结果存日志 案例\ndate: 2021-08-07 08:35:38\ntags: ['Java 诊断工具 Arthas 最佳实践']\n---\n\n<!-- toc -->\n\n![Arthas](arthas.png)\n\n`Arthas` 是Alibaba开源的Java诊断工具，深受开发者喜爱。在线排查问题，无需重启；动态跟踪Java代码；实时监控JVM状态。\n\n`Arthas` 支持JDK 6+，支持Linux/Mac/Windows，采用命令行交互模式，同时提供丰富的 `Tab` 自动补全功能，进一步方便进行问题的定位和诊断。\n\n当你遇到以下类似问题而束手无策时，Arthas可以帮助你解决：\n\n- 这个类从哪个 jar 包加载的？为什么会报各种类相关的 Exception？\n- 我改的代码为什么没有执行到？难道是我没 commit？分支搞错了？\n- 遇到问题无法在线上 debug，难道只能通过加日志再重新发布吗？\n- 线上遇到某个用户的数据处理有问题，但线上同样无法 debug，线下无法重现！\n- 是否有一个全局视角来查看系统的运行状况？\n- 有什么办法可以监控到JVM的实时运行状态？\n- 怎么快速定位应用的热点，生成火焰图？\n\n本教程会以一个简单的应用为例，演示Arthas执行结果存日志。\n\n- Github: https://github.com/alibaba/arthas\n- 文档: https://arthas.aliyun.com/doc/\n\n## Arthas demo\n\n下载`arthas-demo.jar`，再用`java -jar`命令启动：\n\n```bash\nwget https://arthas.aliyun.com/arthas-demo.jar;java -jar arthas-demo.jar\n```\n\n\n\n`arthas-demo`是一个很简单的程序，它随机生成整数，再执行因式分解，把结果打印出来。如果生成的随机数是负数，则会打印提示信息。\n\n## Start arthas-boot\n\n在新的`Terminal 2`里，下载`arthas-boot.jar`，再用`java -jar`命令启动：\n\n```bash\nwget https://arthas.aliyun.com/arthas-boot.jar;java -jar arthas-boot.jar\n```\n\n\n\n`arthas-boot`是`Arthas`的启动程序，它启动后，会列出所有的Java进程，用户可以选择需要诊断的目标进程。\n\n选择第一个进程，输入 `1` ，再`Enter/回车`：\n\n```bash\n1\n```\n\n\n\nAttach成功之后，会打印Arthas LOGO。输入 `help` 可以获取到更多的帮助信息。\n\n```bash\nhelp\n```\n\n\n\n![Arthas Boot](O1CN01HzatXZ1RgccrlT90M_!!6000000002141-2-tps-529-244.png)\n\n## 执行结果存日志\n\n将命令的结果完整保存在日志文件中，便于后续进行分析\n\n- 默认情况下，该功能是关闭的，如果需要开启，请执行以下命令：\n\n```bash\noptions save-result true\n```\n\n\n\n```console\n$ options save-result true\n NAME         BEFORE-VALUE  AFTER-VALUE\n----------------------------------------\n save-result  false         true\nAffect(row-cnt:1) cost in 3 ms.\n```\n\n看到上面的输出，即表示成功开启该功能；\n\n- 日志文件路径\n\n结果会异步保存在：`{user.home}/logs/arthas-cache/result.log`，请定期进行清理，以免占据磁盘空间\n\n### 使用新版本Arthas的异步后台任务将结果存日志文件\n\n```console\n$ trace Test t >>  &\njob id  : 2\ncache location  : /Users/admin/logs/arthas-cache/28198/2\n```\n\n此时命令会在后台异步执行，并将结果异步保存在文件`（~/logs/arthas-cache/${PID}/${JobId}）`中;\n\n- 此时任务的执行不受session断开的影响；任务默认超时时间是1天，可以通过全局 `options` 命令修改默认超时时间；\n- 此命令的结果将异步输出到文件中；此时不管 `save-result` 是否为true，都不会再往`~/logs/arthas-cache/result.log` 中异步写结果\n\n## 更多信息\n\n通过本教程基本掌握了Arthas执行结果存日志。如果有更多的技巧或者使用疑问，欢迎在Issue里提出。\n\n- Issues: https://github.com/alibaba/arthas/issues\n- 文档： https://arthas.aliyun.com/doc\n\n如果您在使用Arthas，请让我们知道。您的使用对我们非常重要：[查看](https://github.com/alibaba/arthas/issues/111)\n\n文章拷贝来源：https://start.aliyun.com/course?spm=a2ck6.17690074.0.0.28bc2e7dHTphXs&id=PaiFAkJM","slug":"Java诊断工具Arthas最佳实践/Arthas执行结果存日志案例","published":1,"updated":"2021-08-07T05:33:18.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cks1cgr5q000tfw5ifl4n87h9","content":"<!-- toc -->\n\n<ul>\n<li><a href=\"#arthas-demo\">Arthas demo</a></li>\n<li><a href=\"#start-arthas-boot\">Start arthas-boot</a></li>\n<li><a href=\"#%E6%89%A7%E8%A1%8C%E7%BB%93%E6%9E%9C%E5%AD%98%E6%97%A5%E5%BF%97\">执行结果存日志</a><ul>\n<li><a href=\"#%E4%BD%BF%E7%94%A8%E6%96%B0%E7%89%88%E6%9C%ACarthas%E7%9A%84%E5%BC%82%E6%AD%A5%E5%90%8E%E5%8F%B0%E4%BB%BB%E5%8A%A1%E5%B0%86%E7%BB%93%E6%9E%9C%E5%AD%98%E6%97%A5%E5%BF%97%E6%96%87%E4%BB%B6\">使用新版本Arthas的异步后台任务将结果存日志文件</a></li>\n</ul>\n</li>\n<li><a href=\"#%E6%9B%B4%E5%A4%9A%E4%BF%A1%E6%81%AF\">更多信息</a></li>\n</ul>\n<!-- tocstop -->\n\n<p><img src=\"/jlynet.github.io/2021/08/07/Java%E8%AF%8A%E6%96%AD%E5%B7%A5%E5%85%B7Arthas%E6%9C%80%E4%BD%B3%E5%AE%9E%E8%B7%B5/Arthas%E6%89%A7%E8%A1%8C%E7%BB%93%E6%9E%9C%E5%AD%98%E6%97%A5%E5%BF%97%E6%A1%88%E4%BE%8B/arthas.png\" alt=\"Arthas\"></p>\n<p><code>Arthas</code> 是Alibaba开源的Java诊断工具，深受开发者喜爱。在线排查问题，无需重启；动态跟踪Java代码；实时监控JVM状态。</p>\n<p><code>Arthas</code> 支持JDK 6+，支持Linux/Mac/Windows，采用命令行交互模式，同时提供丰富的 <code>Tab</code> 自动补全功能，进一步方便进行问题的定位和诊断。</p>\n<p>当你遇到以下类似问题而束手无策时，Arthas可以帮助你解决：</p>\n<ul>\n<li>这个类从哪个 jar 包加载的？为什么会报各种类相关的 Exception？</li>\n<li>我改的代码为什么没有执行到？难道是我没 commit？分支搞错了？</li>\n<li>遇到问题无法在线上 debug，难道只能通过加日志再重新发布吗？</li>\n<li>线上遇到某个用户的数据处理有问题，但线上同样无法 debug，线下无法重现！</li>\n<li>是否有一个全局视角来查看系统的运行状况？</li>\n<li>有什么办法可以监控到JVM的实时运行状态？</li>\n<li>怎么快速定位应用的热点，生成火焰图？</li>\n</ul>\n<p>本教程会以一个简单的应用为例，演示Arthas执行结果存日志。</p>\n<ul>\n<li>Github: <a href=\"https://github.com/alibaba/arthas\">https://github.com/alibaba/arthas</a></li>\n<li>文档: <a href=\"https://arthas.aliyun.com/doc/\">https://arthas.aliyun.com/doc/</a></li>\n</ul>\n<h2><span id=\"arthas-demo\">Arthas demo</span></h2><p>下载<code>arthas-demo.jar</code>，再用<code>java -jar</code>命令启动：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wget https://arthas.aliyun.com/arthas-demo.jar;java -jar arthas-demo.jar</span><br></pre></td></tr></table></figure>\n\n\n\n<p><code>arthas-demo</code>是一个很简单的程序，它随机生成整数，再执行因式分解，把结果打印出来。如果生成的随机数是负数，则会打印提示信息。</p>\n<h2><span id=\"start-arthas-boot\">Start arthas-boot</span></h2><p>在新的<code>Terminal 2</code>里，下载<code>arthas-boot.jar</code>，再用<code>java -jar</code>命令启动：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wget https://arthas.aliyun.com/arthas-boot.jar;java -jar arthas-boot.jar</span><br></pre></td></tr></table></figure>\n\n\n\n<p><code>arthas-boot</code>是<code>Arthas</code>的启动程序，它启动后，会列出所有的Java进程，用户可以选择需要诊断的目标进程。</p>\n<p>选择第一个进程，输入 <code>1</code> ，再<code>Enter/回车</code>：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1</span><br></pre></td></tr></table></figure>\n\n\n\n<p>Attach成功之后，会打印Arthas LOGO。输入 <code>help</code> 可以获取到更多的帮助信息。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">help</span></span><br></pre></td></tr></table></figure>\n\n\n\n<p><img src=\"/jlynet.github.io/2021/08/07/Java%E8%AF%8A%E6%96%AD%E5%B7%A5%E5%85%B7Arthas%E6%9C%80%E4%BD%B3%E5%AE%9E%E8%B7%B5/Arthas%E6%89%A7%E8%A1%8C%E7%BB%93%E6%9E%9C%E5%AD%98%E6%97%A5%E5%BF%97%E6%A1%88%E4%BE%8B/O1CN01HzatXZ1RgccrlT90M_!!6000000002141-2-tps-529-244.png\" alt=\"Arthas Boot\"></p>\n<h2><span id=\"执行结果存日志\">执行结果存日志</span></h2><p>将命令的结果完整保存在日志文件中，便于后续进行分析</p>\n<ul>\n<li>默认情况下，该功能是关闭的，如果需要开启，请执行以下命令：</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">options save-result <span class=\"literal\">true</span></span><br></pre></td></tr></table></figure>\n\n\n\n<figure class=\"highlight console\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> options save-result <span class=\"literal\">true</span></span></span><br><span class=\"line\"> NAME         BEFORE-VALUE  AFTER-VALUE</span><br><span class=\"line\">----------------------------------------</span><br><span class=\"line\"> save-result  false         true</span><br><span class=\"line\">Affect(row-cnt:1) cost in 3 ms.</span><br></pre></td></tr></table></figure>\n\n<p>看到上面的输出，即表示成功开启该功能；</p>\n<ul>\n<li>日志文件路径</li>\n</ul>\n<p>结果会异步保存在：<code>&#123;user.home&#125;/logs/arthas-cache/result.log</code>，请定期进行清理，以免占据磁盘空间</p>\n<h3><span id=\"使用新版本arthas的异步后台任务将结果存日志文件\">使用新版本Arthas的异步后台任务将结果存日志文件</span></h3><figure class=\"highlight console\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> trace Test t &gt;&gt;  &amp;</span></span><br><span class=\"line\">job id  : 2</span><br><span class=\"line\">cache location  : /Users/admin/logs/arthas-cache/28198/2</span><br></pre></td></tr></table></figure>\n\n<p>此时命令会在后台异步执行，并将结果异步保存在文件<code>（~/logs/arthas-cache/$&#123;PID&#125;/$&#123;JobId&#125;）</code>中;</p>\n<ul>\n<li>此时任务的执行不受session断开的影响；任务默认超时时间是1天，可以通过全局 <code>options</code> 命令修改默认超时时间；</li>\n<li>此命令的结果将异步输出到文件中；此时不管 <code>save-result</code> 是否为true，都不会再往<code>~/logs/arthas-cache/result.log</code> 中异步写结果</li>\n</ul>\n<h2><span id=\"更多信息\">更多信息</span></h2><p>通过本教程基本掌握了Arthas执行结果存日志。如果有更多的技巧或者使用疑问，欢迎在Issue里提出。</p>\n<ul>\n<li>Issues: <a href=\"https://github.com/alibaba/arthas/issues\">https://github.com/alibaba/arthas/issues</a></li>\n<li>文档： <a href=\"https://arthas.aliyun.com/doc\">https://arthas.aliyun.com/doc</a></li>\n</ul>\n<p>如果您在使用Arthas，请让我们知道。您的使用对我们非常重要：<a href=\"https://github.com/alibaba/arthas/issues/111\">查看</a></p>\n<p>文章拷贝来源：<a href=\"https://start.aliyun.com/course?spm=a2ck6.17690074.0.0.28bc2e7dHTphXs&amp;id=PaiFAkJM\">https://start.aliyun.com/course?spm=a2ck6.17690074.0.0.28bc2e7dHTphXs&amp;id=PaiFAkJM</a></p>\n","site":{"data":{}},"excerpt":"","more":"<!-- toc -->\n\n<ul>\n<li><a href=\"#arthas-demo\">Arthas demo</a></li>\n<li><a href=\"#start-arthas-boot\">Start arthas-boot</a></li>\n<li><a href=\"#%E6%89%A7%E8%A1%8C%E7%BB%93%E6%9E%9C%E5%AD%98%E6%97%A5%E5%BF%97\">执行结果存日志</a><ul>\n<li><a href=\"#%E4%BD%BF%E7%94%A8%E6%96%B0%E7%89%88%E6%9C%ACarthas%E7%9A%84%E5%BC%82%E6%AD%A5%E5%90%8E%E5%8F%B0%E4%BB%BB%E5%8A%A1%E5%B0%86%E7%BB%93%E6%9E%9C%E5%AD%98%E6%97%A5%E5%BF%97%E6%96%87%E4%BB%B6\">使用新版本Arthas的异步后台任务将结果存日志文件</a></li>\n</ul>\n</li>\n<li><a href=\"#%E6%9B%B4%E5%A4%9A%E4%BF%A1%E6%81%AF\">更多信息</a></li>\n</ul>\n<!-- tocstop -->\n\n<p><img src=\"/jlynet.github.io/2021/08/07/Java%E8%AF%8A%E6%96%AD%E5%B7%A5%E5%85%B7Arthas%E6%9C%80%E4%BD%B3%E5%AE%9E%E8%B7%B5/Arthas%E6%89%A7%E8%A1%8C%E7%BB%93%E6%9E%9C%E5%AD%98%E6%97%A5%E5%BF%97%E6%A1%88%E4%BE%8B/arthas.png\" alt=\"Arthas\"></p>\n<p><code>Arthas</code> 是Alibaba开源的Java诊断工具，深受开发者喜爱。在线排查问题，无需重启；动态跟踪Java代码；实时监控JVM状态。</p>\n<p><code>Arthas</code> 支持JDK 6+，支持Linux/Mac/Windows，采用命令行交互模式，同时提供丰富的 <code>Tab</code> 自动补全功能，进一步方便进行问题的定位和诊断。</p>\n<p>当你遇到以下类似问题而束手无策时，Arthas可以帮助你解决：</p>\n<ul>\n<li>这个类从哪个 jar 包加载的？为什么会报各种类相关的 Exception？</li>\n<li>我改的代码为什么没有执行到？难道是我没 commit？分支搞错了？</li>\n<li>遇到问题无法在线上 debug，难道只能通过加日志再重新发布吗？</li>\n<li>线上遇到某个用户的数据处理有问题，但线上同样无法 debug，线下无法重现！</li>\n<li>是否有一个全局视角来查看系统的运行状况？</li>\n<li>有什么办法可以监控到JVM的实时运行状态？</li>\n<li>怎么快速定位应用的热点，生成火焰图？</li>\n</ul>\n<p>本教程会以一个简单的应用为例，演示Arthas执行结果存日志。</p>\n<ul>\n<li>Github: <a href=\"https://github.com/alibaba/arthas\">https://github.com/alibaba/arthas</a></li>\n<li>文档: <a href=\"https://arthas.aliyun.com/doc/\">https://arthas.aliyun.com/doc/</a></li>\n</ul>\n<h2 id=\"Arthas-demo\"><a href=\"#Arthas-demo\" class=\"headerlink\" title=\"Arthas demo\"></a>Arthas demo</h2><p>下载<code>arthas-demo.jar</code>，再用<code>java -jar</code>命令启动：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wget https://arthas.aliyun.com/arthas-demo.jar;java -jar arthas-demo.jar</span><br></pre></td></tr></table></figure>\n\n\n\n<p><code>arthas-demo</code>是一个很简单的程序，它随机生成整数，再执行因式分解，把结果打印出来。如果生成的随机数是负数，则会打印提示信息。</p>\n<h2 id=\"Start-arthas-boot\"><a href=\"#Start-arthas-boot\" class=\"headerlink\" title=\"Start arthas-boot\"></a>Start arthas-boot</h2><p>在新的<code>Terminal 2</code>里，下载<code>arthas-boot.jar</code>，再用<code>java -jar</code>命令启动：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wget https://arthas.aliyun.com/arthas-boot.jar;java -jar arthas-boot.jar</span><br></pre></td></tr></table></figure>\n\n\n\n<p><code>arthas-boot</code>是<code>Arthas</code>的启动程序，它启动后，会列出所有的Java进程，用户可以选择需要诊断的目标进程。</p>\n<p>选择第一个进程，输入 <code>1</code> ，再<code>Enter/回车</code>：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1</span><br></pre></td></tr></table></figure>\n\n\n\n<p>Attach成功之后，会打印Arthas LOGO。输入 <code>help</code> 可以获取到更多的帮助信息。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">help</span></span><br></pre></td></tr></table></figure>\n\n\n\n<p><img src=\"/jlynet.github.io/2021/08/07/Java%E8%AF%8A%E6%96%AD%E5%B7%A5%E5%85%B7Arthas%E6%9C%80%E4%BD%B3%E5%AE%9E%E8%B7%B5/Arthas%E6%89%A7%E8%A1%8C%E7%BB%93%E6%9E%9C%E5%AD%98%E6%97%A5%E5%BF%97%E6%A1%88%E4%BE%8B/O1CN01HzatXZ1RgccrlT90M_!!6000000002141-2-tps-529-244.png\" alt=\"Arthas Boot\"></p>\n<h2 id=\"执行结果存日志\"><a href=\"#执行结果存日志\" class=\"headerlink\" title=\"执行结果存日志\"></a>执行结果存日志</h2><p>将命令的结果完整保存在日志文件中，便于后续进行分析</p>\n<ul>\n<li>默认情况下，该功能是关闭的，如果需要开启，请执行以下命令：</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">options save-result <span class=\"literal\">true</span></span><br></pre></td></tr></table></figure>\n\n\n\n<figure class=\"highlight console\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> options save-result <span class=\"literal\">true</span></span></span><br><span class=\"line\"> NAME         BEFORE-VALUE  AFTER-VALUE</span><br><span class=\"line\">----------------------------------------</span><br><span class=\"line\"> save-result  false         true</span><br><span class=\"line\">Affect(row-cnt:1) cost in 3 ms.</span><br></pre></td></tr></table></figure>\n\n<p>看到上面的输出，即表示成功开启该功能；</p>\n<ul>\n<li>日志文件路径</li>\n</ul>\n<p>结果会异步保存在：<code>&#123;user.home&#125;/logs/arthas-cache/result.log</code>，请定期进行清理，以免占据磁盘空间</p>\n<h3 id=\"使用新版本Arthas的异步后台任务将结果存日志文件\"><a href=\"#使用新版本Arthas的异步后台任务将结果存日志文件\" class=\"headerlink\" title=\"使用新版本Arthas的异步后台任务将结果存日志文件\"></a>使用新版本Arthas的异步后台任务将结果存日志文件</h3><figure class=\"highlight console\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> trace Test t &gt;&gt;  &amp;</span></span><br><span class=\"line\">job id  : 2</span><br><span class=\"line\">cache location  : /Users/admin/logs/arthas-cache/28198/2</span><br></pre></td></tr></table></figure>\n\n<p>此时命令会在后台异步执行，并将结果异步保存在文件<code>（~/logs/arthas-cache/$&#123;PID&#125;/$&#123;JobId&#125;）</code>中;</p>\n<ul>\n<li>此时任务的执行不受session断开的影响；任务默认超时时间是1天，可以通过全局 <code>options</code> 命令修改默认超时时间；</li>\n<li>此命令的结果将异步输出到文件中；此时不管 <code>save-result</code> 是否为true，都不会再往<code>~/logs/arthas-cache/result.log</code> 中异步写结果</li>\n</ul>\n<h2 id=\"更多信息\"><a href=\"#更多信息\" class=\"headerlink\" title=\"更多信息\"></a>更多信息</h2><p>通过本教程基本掌握了Arthas执行结果存日志。如果有更多的技巧或者使用疑问，欢迎在Issue里提出。</p>\n<ul>\n<li>Issues: <a href=\"https://github.com/alibaba/arthas/issues\">https://github.com/alibaba/arthas/issues</a></li>\n<li>文档： <a href=\"https://arthas.aliyun.com/doc\">https://arthas.aliyun.com/doc</a></li>\n</ul>\n<p>如果您在使用Arthas，请让我们知道。您的使用对我们非常重要：<a href=\"https://github.com/alibaba/arthas/issues/111\">查看</a></p>\n<p>文章拷贝来源：<a href=\"https://start.aliyun.com/course?spm=a2ck6.17690074.0.0.28bc2e7dHTphXs&amp;id=PaiFAkJM\">https://start.aliyun.com/course?spm=a2ck6.17690074.0.0.28bc2e7dHTphXs&amp;id=PaiFAkJM</a></p>\n"},{"title":"Arthas 排查HTTP请求返回401 案例","date":"2021-08-07T00:35:34.000Z","_content":"\n<!-- toc -->\n\n![Arthas](arthas.png)\n\n`Arthas` 是Alibaba开源的Java诊断工具，深受开发者喜爱。在线排查问题，无需重启；动态跟踪Java代码；实时监控JVM状态。\n\n`Arthas` 支持JDK 6+，支持Linux/Mac/Windows，采用命令行交互模式，同时提供丰富的 `Tab` 自动补全功能，进一步方便进行问题的定位和诊断。\n\n当你遇到以下类似问题而束手无策时，Arthas可以帮助你解决：\n\n- 这个类从哪个 jar 包加载的？为什么会报各种类相关的 Exception？\n- 我改的代码为什么没有执行到？难道是我没 commit？分支搞错了？\n- 遇到问题无法在线上 debug，难道只能通过加日志再重新发布吗？\n- 线上遇到某个用户的数据处理有问题，但线上同样无法 debug，线下无法重现！\n- 是否有一个全局视角来查看系统的运行状况？\n- 有什么办法可以监控到JVM的实时运行状态？\n- 怎么快速定位应用的热点，生成火焰图？\n\n本教程会以一个普通的Spring Boot应用为例，演示排查HTTP请求返回401。\n\n- Github: https://github.com/alibaba/arthas\n- 文档: https://arthas.aliyun.com/doc/\n\n## Start demo\n\n下载`demo-arthas-spring-boot.jar`，再用`java -jar`命令启动：\n\n```bash\nwget https://code.aliyun.com/middleware-container/handsonLabExternedFiles/raw/master/demo-arthas-spring-boot.jar;java -jar demo-arthas-spring-boot.jar\n```\n\n\n`demo-arthas-spring-boot`是一个很简单的spring boot应用，源代码：[查看](https://github.com/hengyunabc/spring-boot-inside/tree/master/demo-arthas-spring-boot)\n\n启动之后，可以访问61000端口： 点击查看\n\n![Demo Web](O1CN010Qbzcz1ctPSWSZI6L_!!6000000003658-2-tps-333-182.png)\n\n## Start arthas-boot\n\n在新的`Terminal 2`里，下载`arthas-boot.jar`，再用`java -jar`命令启动：\n\n```bash\nwget https://arthas.aliyun.com/arthas-boot.jar;java -jar arthas-boot.jar\n```\n\n\n`arthas-boot`是`Arthas`的启动程序，它启动后，会列出所有的Java进程，用户可以选择需要诊断的目标进程。\n\n选择第一个进程，输入 `1` ，再`Enter/回车`：\n\n```bash\n1\n```\n\n\nAttach成功之后，会打印Arthas LOGO。输入 `help` 可以获取到更多的帮助信息。\n\n```bash\nhelp\n```\n\n![Arthas Boot](O1CN01HzatXZ1RgccrlT90M_!!6000000002141-2-tps-529-244.png)\n\n## 排查HTTP请求返回401\n\n在这个案例里，展示排查HTTP 401问题的技巧。\n\n访问： admin\n\n结果是：\n\n```\nSomething went wrong: 401 Unauthorized\n```\n\n\n我们知道`401`通常是被权限管理的`Filter`拦截了，那么到底是哪个`Filter`处理了这个请求，返回了401？\n\n#### 跟踪所有的Filter函数\n\n开始trace：\n\n```bash\ntrace javax.servlet.Filter *\n```\n\n\n访问： admin\n\n可以在调用树的最深层，找到`AdminFilterConfig$AdminFilter`返回了`401`：\n\n```\n+---[3.806273ms] javax.servlet.FilterChain:doFilter()\n|   `---[3.447472ms] com.example.demo.arthas.AdminFilterConfig$AdminFilter:doFilter()\n|       `---[0.17259ms] javax.servlet.http.HttpServletResponse:sendError()\n```\n\n\n#### 通过stack获取调用栈\n\n上面是通过`trace`命令来获取信息，从结果里，我们可以知道通过`stack`跟踪`HttpServletResponse:sendError()`，同样可以知道是哪个`Filter`返回了`401`\n\n执行：\n\n```bash\nstack javax.servlet.http.HttpServletResponse sendError 'params[0]==401'\n```\n\n\n访问： admin\n\n```console\n$ stack javax.servlet.http.HttpServletResponse sendError 'params[0]==401'\nPress Q or Ctrl+C to abort.\nAffect(class-cnt:2 , method-cnt:4) cost in 87 ms.\nts=2019-02-15 16:44:06;thread_name=http-nio-8080-exec-6;id=16;is_daemon=true;priority=5;TCCL=org.springframework.boot.context.embedded.tomcat.TomcatEmbeddedWebappClassLoader@8546cd5\n    @org.apache.catalina.connector.ResponseFacade.sendError()\n        at com.example.demo.arthas.AdminFilterConfig$AdminFilter.doFilter(AdminFilterConfig.java:38)\n        at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)\n        at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)\n        at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:99)\n        at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)\n```\n\n## 更多信息\n\n通过本教程基本掌握了Arthas排查HTTP请求返回401。如果有更多的技巧或者使用疑问，欢迎在Issue里提出。\n\n- Issues: https://github.com/alibaba/arthas/issues\n- 文档： https://arthas.aliyun.com/doc\n\n如果您在使用Arthas，请让我们知道。您的使用对我们非常重要：[查看](https://github.com/alibaba/arthas/issues/111)\n\n文章拷贝来源：https://start.aliyun.com/course?spm=a2ck6.17690074.0.0.28bc2e7dHTphXs&id=PaiFAkJM","source":"_posts/Java诊断工具Arthas最佳实践/Arthas排查HTTP请求返回401案例.md","raw":"---\ntitle: Arthas 排查HTTP请求返回401 案例\ndate: 2021-08-07 08:35:34\ntags: ['Java 诊断工具 Arthas 最佳实践']\n---\n\n<!-- toc -->\n\n![Arthas](arthas.png)\n\n`Arthas` 是Alibaba开源的Java诊断工具，深受开发者喜爱。在线排查问题，无需重启；动态跟踪Java代码；实时监控JVM状态。\n\n`Arthas` 支持JDK 6+，支持Linux/Mac/Windows，采用命令行交互模式，同时提供丰富的 `Tab` 自动补全功能，进一步方便进行问题的定位和诊断。\n\n当你遇到以下类似问题而束手无策时，Arthas可以帮助你解决：\n\n- 这个类从哪个 jar 包加载的？为什么会报各种类相关的 Exception？\n- 我改的代码为什么没有执行到？难道是我没 commit？分支搞错了？\n- 遇到问题无法在线上 debug，难道只能通过加日志再重新发布吗？\n- 线上遇到某个用户的数据处理有问题，但线上同样无法 debug，线下无法重现！\n- 是否有一个全局视角来查看系统的运行状况？\n- 有什么办法可以监控到JVM的实时运行状态？\n- 怎么快速定位应用的热点，生成火焰图？\n\n本教程会以一个普通的Spring Boot应用为例，演示排查HTTP请求返回401。\n\n- Github: https://github.com/alibaba/arthas\n- 文档: https://arthas.aliyun.com/doc/\n\n## Start demo\n\n下载`demo-arthas-spring-boot.jar`，再用`java -jar`命令启动：\n\n```bash\nwget https://code.aliyun.com/middleware-container/handsonLabExternedFiles/raw/master/demo-arthas-spring-boot.jar;java -jar demo-arthas-spring-boot.jar\n```\n\n\n`demo-arthas-spring-boot`是一个很简单的spring boot应用，源代码：[查看](https://github.com/hengyunabc/spring-boot-inside/tree/master/demo-arthas-spring-boot)\n\n启动之后，可以访问61000端口： 点击查看\n\n![Demo Web](O1CN010Qbzcz1ctPSWSZI6L_!!6000000003658-2-tps-333-182.png)\n\n## Start arthas-boot\n\n在新的`Terminal 2`里，下载`arthas-boot.jar`，再用`java -jar`命令启动：\n\n```bash\nwget https://arthas.aliyun.com/arthas-boot.jar;java -jar arthas-boot.jar\n```\n\n\n`arthas-boot`是`Arthas`的启动程序，它启动后，会列出所有的Java进程，用户可以选择需要诊断的目标进程。\n\n选择第一个进程，输入 `1` ，再`Enter/回车`：\n\n```bash\n1\n```\n\n\nAttach成功之后，会打印Arthas LOGO。输入 `help` 可以获取到更多的帮助信息。\n\n```bash\nhelp\n```\n\n![Arthas Boot](O1CN01HzatXZ1RgccrlT90M_!!6000000002141-2-tps-529-244.png)\n\n## 排查HTTP请求返回401\n\n在这个案例里，展示排查HTTP 401问题的技巧。\n\n访问： admin\n\n结果是：\n\n```\nSomething went wrong: 401 Unauthorized\n```\n\n\n我们知道`401`通常是被权限管理的`Filter`拦截了，那么到底是哪个`Filter`处理了这个请求，返回了401？\n\n#### 跟踪所有的Filter函数\n\n开始trace：\n\n```bash\ntrace javax.servlet.Filter *\n```\n\n\n访问： admin\n\n可以在调用树的最深层，找到`AdminFilterConfig$AdminFilter`返回了`401`：\n\n```\n+---[3.806273ms] javax.servlet.FilterChain:doFilter()\n|   `---[3.447472ms] com.example.demo.arthas.AdminFilterConfig$AdminFilter:doFilter()\n|       `---[0.17259ms] javax.servlet.http.HttpServletResponse:sendError()\n```\n\n\n#### 通过stack获取调用栈\n\n上面是通过`trace`命令来获取信息，从结果里，我们可以知道通过`stack`跟踪`HttpServletResponse:sendError()`，同样可以知道是哪个`Filter`返回了`401`\n\n执行：\n\n```bash\nstack javax.servlet.http.HttpServletResponse sendError 'params[0]==401'\n```\n\n\n访问： admin\n\n```console\n$ stack javax.servlet.http.HttpServletResponse sendError 'params[0]==401'\nPress Q or Ctrl+C to abort.\nAffect(class-cnt:2 , method-cnt:4) cost in 87 ms.\nts=2019-02-15 16:44:06;thread_name=http-nio-8080-exec-6;id=16;is_daemon=true;priority=5;TCCL=org.springframework.boot.context.embedded.tomcat.TomcatEmbeddedWebappClassLoader@8546cd5\n    @org.apache.catalina.connector.ResponseFacade.sendError()\n        at com.example.demo.arthas.AdminFilterConfig$AdminFilter.doFilter(AdminFilterConfig.java:38)\n        at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)\n        at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)\n        at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:99)\n        at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)\n```\n\n## 更多信息\n\n通过本教程基本掌握了Arthas排查HTTP请求返回401。如果有更多的技巧或者使用疑问，欢迎在Issue里提出。\n\n- Issues: https://github.com/alibaba/arthas/issues\n- 文档： https://arthas.aliyun.com/doc\n\n如果您在使用Arthas，请让我们知道。您的使用对我们非常重要：[查看](https://github.com/alibaba/arthas/issues/111)\n\n文章拷贝来源：https://start.aliyun.com/course?spm=a2ck6.17690074.0.0.28bc2e7dHTphXs&id=PaiFAkJM","slug":"Java诊断工具Arthas最佳实践/Arthas排查HTTP请求返回401案例","published":1,"updated":"2021-08-07T05:33:22.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cks1cgr5t000wfw5ic2ha8qo8","content":"<!-- toc -->\n\n<ul>\n<li><a href=\"#start-demo\">Start demo</a></li>\n<li><a href=\"#start-arthas-boot\">Start arthas-boot</a></li>\n<li><a href=\"#%E6%8E%92%E6%9F%A5http%E8%AF%B7%E6%B1%82%E8%BF%94%E5%9B%9E401\">排查HTTP请求返回401</a><ul>\n<li><a href=\"#%E8%B7%9F%E8%B8%AA%E6%89%80%E6%9C%89%E7%9A%84filter%E5%87%BD%E6%95%B0\">跟踪所有的Filter函数</a></li>\n<li><a href=\"#%E9%80%9A%E8%BF%87stack%E8%8E%B7%E5%8F%96%E8%B0%83%E7%94%A8%E6%A0%88\">通过stack获取调用栈</a></li>\n</ul>\n</li>\n<li><a href=\"#%E6%9B%B4%E5%A4%9A%E4%BF%A1%E6%81%AF\">更多信息</a></li>\n</ul>\n<!-- tocstop -->\n\n<p><img src=\"/jlynet.github.io/2021/08/07/Java%E8%AF%8A%E6%96%AD%E5%B7%A5%E5%85%B7Arthas%E6%9C%80%E4%BD%B3%E5%AE%9E%E8%B7%B5/Arthas%E6%8E%92%E6%9F%A5HTTP%E8%AF%B7%E6%B1%82%E8%BF%94%E5%9B%9E401%E6%A1%88%E4%BE%8B/arthas.png\" alt=\"Arthas\"></p>\n<p><code>Arthas</code> 是Alibaba开源的Java诊断工具，深受开发者喜爱。在线排查问题，无需重启；动态跟踪Java代码；实时监控JVM状态。</p>\n<p><code>Arthas</code> 支持JDK 6+，支持Linux/Mac/Windows，采用命令行交互模式，同时提供丰富的 <code>Tab</code> 自动补全功能，进一步方便进行问题的定位和诊断。</p>\n<p>当你遇到以下类似问题而束手无策时，Arthas可以帮助你解决：</p>\n<ul>\n<li>这个类从哪个 jar 包加载的？为什么会报各种类相关的 Exception？</li>\n<li>我改的代码为什么没有执行到？难道是我没 commit？分支搞错了？</li>\n<li>遇到问题无法在线上 debug，难道只能通过加日志再重新发布吗？</li>\n<li>线上遇到某个用户的数据处理有问题，但线上同样无法 debug，线下无法重现！</li>\n<li>是否有一个全局视角来查看系统的运行状况？</li>\n<li>有什么办法可以监控到JVM的实时运行状态？</li>\n<li>怎么快速定位应用的热点，生成火焰图？</li>\n</ul>\n<p>本教程会以一个普通的Spring Boot应用为例，演示排查HTTP请求返回401。</p>\n<ul>\n<li>Github: <a href=\"https://github.com/alibaba/arthas\">https://github.com/alibaba/arthas</a></li>\n<li>文档: <a href=\"https://arthas.aliyun.com/doc/\">https://arthas.aliyun.com/doc/</a></li>\n</ul>\n<h2><span id=\"start-demo\">Start demo</span></h2><p>下载<code>demo-arthas-spring-boot.jar</code>，再用<code>java -jar</code>命令启动：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wget https://code.aliyun.com/middleware-container/handsonLabExternedFiles/raw/master/demo-arthas-spring-boot.jar;java -jar demo-arthas-spring-boot.jar</span><br></pre></td></tr></table></figure>\n\n\n<p><code>demo-arthas-spring-boot</code>是一个很简单的spring boot应用，源代码：<a href=\"https://github.com/hengyunabc/spring-boot-inside/tree/master/demo-arthas-spring-boot\">查看</a></p>\n<p>启动之后，可以访问61000端口： 点击查看</p>\n<p><img src=\"/jlynet.github.io/2021/08/07/Java%E8%AF%8A%E6%96%AD%E5%B7%A5%E5%85%B7Arthas%E6%9C%80%E4%BD%B3%E5%AE%9E%E8%B7%B5/Arthas%E6%8E%92%E6%9F%A5HTTP%E8%AF%B7%E6%B1%82%E8%BF%94%E5%9B%9E401%E6%A1%88%E4%BE%8B/O1CN010Qbzcz1ctPSWSZI6L_!!6000000003658-2-tps-333-182.png\" alt=\"Demo Web\"></p>\n<h2><span id=\"start-arthas-boot\">Start arthas-boot</span></h2><p>在新的<code>Terminal 2</code>里，下载<code>arthas-boot.jar</code>，再用<code>java -jar</code>命令启动：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wget https://arthas.aliyun.com/arthas-boot.jar;java -jar arthas-boot.jar</span><br></pre></td></tr></table></figure>\n\n\n<p><code>arthas-boot</code>是<code>Arthas</code>的启动程序，它启动后，会列出所有的Java进程，用户可以选择需要诊断的目标进程。</p>\n<p>选择第一个进程，输入 <code>1</code> ，再<code>Enter/回车</code>：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1</span><br></pre></td></tr></table></figure>\n\n\n<p>Attach成功之后，会打印Arthas LOGO。输入 <code>help</code> 可以获取到更多的帮助信息。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">help</span></span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/jlynet.github.io/2021/08/07/Java%E8%AF%8A%E6%96%AD%E5%B7%A5%E5%85%B7Arthas%E6%9C%80%E4%BD%B3%E5%AE%9E%E8%B7%B5/Arthas%E6%8E%92%E6%9F%A5HTTP%E8%AF%B7%E6%B1%82%E8%BF%94%E5%9B%9E401%E6%A1%88%E4%BE%8B/O1CN01HzatXZ1RgccrlT90M_!!6000000002141-2-tps-529-244.png\" alt=\"Arthas Boot\"></p>\n<h2><span id=\"排查http请求返回401\">排查HTTP请求返回401</span></h2><p>在这个案例里，展示排查HTTP 401问题的技巧。</p>\n<p>访问： admin</p>\n<p>结果是：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Something went wrong: 401 Unauthorized</span><br></pre></td></tr></table></figure>\n\n\n<p>我们知道<code>401</code>通常是被权限管理的<code>Filter</code>拦截了，那么到底是哪个<code>Filter</code>处理了这个请求，返回了401？</p>\n<h4><span id=\"跟踪所有的filter函数\">跟踪所有的Filter函数</span></h4><p>开始trace：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">trace javax.servlet.Filter *</span><br></pre></td></tr></table></figure>\n\n\n<p>访问： admin</p>\n<p>可以在调用树的最深层，找到<code>AdminFilterConfig$AdminFilter</code>返回了<code>401</code>：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">+---[3.806273ms] javax.servlet.FilterChain:doFilter()</span><br><span class=\"line\">|   `---[3.447472ms] com.example.demo.arthas.AdminFilterConfig$AdminFilter:doFilter()</span><br><span class=\"line\">|       `---[0.17259ms] javax.servlet.http.HttpServletResponse:sendError()</span><br></pre></td></tr></table></figure>\n\n\n<h4><span id=\"通过stack获取调用栈\">通过stack获取调用栈</span></h4><p>上面是通过<code>trace</code>命令来获取信息，从结果里，我们可以知道通过<code>stack</code>跟踪<code>HttpServletResponse:sendError()</code>，同样可以知道是哪个<code>Filter</code>返回了<code>401</code></p>\n<p>执行：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">stack javax.servlet.http.HttpServletResponse sendError <span class=\"string\">&#x27;params[0]==401&#x27;</span></span><br></pre></td></tr></table></figure>\n\n\n<p>访问： admin</p>\n<figure class=\"highlight console\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> stack javax.servlet.http.HttpServletResponse sendError <span class=\"string\">&#x27;params[0]==401&#x27;</span></span></span><br><span class=\"line\">Press Q or Ctrl+C to abort.</span><br><span class=\"line\">Affect(class-cnt:2 , method-cnt:4) cost in 87 ms.</span><br><span class=\"line\">ts=2019-02-15 16:44:06;thread_name=http-nio-8080-exec-6;id=16;is_daemon=true;priority=5;TCCL=org.springframework.boot.context.embedded.tomcat.TomcatEmbeddedWebappClassLoader@8546cd5</span><br><span class=\"line\">    @org.apache.catalina.connector.ResponseFacade.sendError()</span><br><span class=\"line\">        at com.example.demo.arthas.AdminFilterConfig$AdminFilter.doFilter(AdminFilterConfig.java:38)</span><br><span class=\"line\">        at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)</span><br><span class=\"line\">        at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)</span><br><span class=\"line\">        at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:99)</span><br><span class=\"line\">        at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)</span><br></pre></td></tr></table></figure>\n\n<h2><span id=\"更多信息\">更多信息</span></h2><p>通过本教程基本掌握了Arthas排查HTTP请求返回401。如果有更多的技巧或者使用疑问，欢迎在Issue里提出。</p>\n<ul>\n<li>Issues: <a href=\"https://github.com/alibaba/arthas/issues\">https://github.com/alibaba/arthas/issues</a></li>\n<li>文档： <a href=\"https://arthas.aliyun.com/doc\">https://arthas.aliyun.com/doc</a></li>\n</ul>\n<p>如果您在使用Arthas，请让我们知道。您的使用对我们非常重要：<a href=\"https://github.com/alibaba/arthas/issues/111\">查看</a></p>\n<p>文章拷贝来源：<a href=\"https://start.aliyun.com/course?spm=a2ck6.17690074.0.0.28bc2e7dHTphXs&amp;id=PaiFAkJM\">https://start.aliyun.com/course?spm=a2ck6.17690074.0.0.28bc2e7dHTphXs&amp;id=PaiFAkJM</a></p>\n","site":{"data":{}},"excerpt":"","more":"<!-- toc -->\n\n<ul>\n<li><a href=\"#start-demo\">Start demo</a></li>\n<li><a href=\"#start-arthas-boot\">Start arthas-boot</a></li>\n<li><a href=\"#%E6%8E%92%E6%9F%A5http%E8%AF%B7%E6%B1%82%E8%BF%94%E5%9B%9E401\">排查HTTP请求返回401</a><ul>\n<li><a href=\"#%E8%B7%9F%E8%B8%AA%E6%89%80%E6%9C%89%E7%9A%84filter%E5%87%BD%E6%95%B0\">跟踪所有的Filter函数</a></li>\n<li><a href=\"#%E9%80%9A%E8%BF%87stack%E8%8E%B7%E5%8F%96%E8%B0%83%E7%94%A8%E6%A0%88\">通过stack获取调用栈</a></li>\n</ul>\n</li>\n<li><a href=\"#%E6%9B%B4%E5%A4%9A%E4%BF%A1%E6%81%AF\">更多信息</a></li>\n</ul>\n<!-- tocstop -->\n\n<p><img src=\"/jlynet.github.io/2021/08/07/Java%E8%AF%8A%E6%96%AD%E5%B7%A5%E5%85%B7Arthas%E6%9C%80%E4%BD%B3%E5%AE%9E%E8%B7%B5/Arthas%E6%8E%92%E6%9F%A5HTTP%E8%AF%B7%E6%B1%82%E8%BF%94%E5%9B%9E401%E6%A1%88%E4%BE%8B/arthas.png\" alt=\"Arthas\"></p>\n<p><code>Arthas</code> 是Alibaba开源的Java诊断工具，深受开发者喜爱。在线排查问题，无需重启；动态跟踪Java代码；实时监控JVM状态。</p>\n<p><code>Arthas</code> 支持JDK 6+，支持Linux/Mac/Windows，采用命令行交互模式，同时提供丰富的 <code>Tab</code> 自动补全功能，进一步方便进行问题的定位和诊断。</p>\n<p>当你遇到以下类似问题而束手无策时，Arthas可以帮助你解决：</p>\n<ul>\n<li>这个类从哪个 jar 包加载的？为什么会报各种类相关的 Exception？</li>\n<li>我改的代码为什么没有执行到？难道是我没 commit？分支搞错了？</li>\n<li>遇到问题无法在线上 debug，难道只能通过加日志再重新发布吗？</li>\n<li>线上遇到某个用户的数据处理有问题，但线上同样无法 debug，线下无法重现！</li>\n<li>是否有一个全局视角来查看系统的运行状况？</li>\n<li>有什么办法可以监控到JVM的实时运行状态？</li>\n<li>怎么快速定位应用的热点，生成火焰图？</li>\n</ul>\n<p>本教程会以一个普通的Spring Boot应用为例，演示排查HTTP请求返回401。</p>\n<ul>\n<li>Github: <a href=\"https://github.com/alibaba/arthas\">https://github.com/alibaba/arthas</a></li>\n<li>文档: <a href=\"https://arthas.aliyun.com/doc/\">https://arthas.aliyun.com/doc/</a></li>\n</ul>\n<h2 id=\"Start-demo\"><a href=\"#Start-demo\" class=\"headerlink\" title=\"Start demo\"></a>Start demo</h2><p>下载<code>demo-arthas-spring-boot.jar</code>，再用<code>java -jar</code>命令启动：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wget https://code.aliyun.com/middleware-container/handsonLabExternedFiles/raw/master/demo-arthas-spring-boot.jar;java -jar demo-arthas-spring-boot.jar</span><br></pre></td></tr></table></figure>\n\n\n<p><code>demo-arthas-spring-boot</code>是一个很简单的spring boot应用，源代码：<a href=\"https://github.com/hengyunabc/spring-boot-inside/tree/master/demo-arthas-spring-boot\">查看</a></p>\n<p>启动之后，可以访问61000端口： 点击查看</p>\n<p><img src=\"/jlynet.github.io/2021/08/07/Java%E8%AF%8A%E6%96%AD%E5%B7%A5%E5%85%B7Arthas%E6%9C%80%E4%BD%B3%E5%AE%9E%E8%B7%B5/Arthas%E6%8E%92%E6%9F%A5HTTP%E8%AF%B7%E6%B1%82%E8%BF%94%E5%9B%9E401%E6%A1%88%E4%BE%8B/O1CN010Qbzcz1ctPSWSZI6L_!!6000000003658-2-tps-333-182.png\" alt=\"Demo Web\"></p>\n<h2 id=\"Start-arthas-boot\"><a href=\"#Start-arthas-boot\" class=\"headerlink\" title=\"Start arthas-boot\"></a>Start arthas-boot</h2><p>在新的<code>Terminal 2</code>里，下载<code>arthas-boot.jar</code>，再用<code>java -jar</code>命令启动：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wget https://arthas.aliyun.com/arthas-boot.jar;java -jar arthas-boot.jar</span><br></pre></td></tr></table></figure>\n\n\n<p><code>arthas-boot</code>是<code>Arthas</code>的启动程序，它启动后，会列出所有的Java进程，用户可以选择需要诊断的目标进程。</p>\n<p>选择第一个进程，输入 <code>1</code> ，再<code>Enter/回车</code>：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1</span><br></pre></td></tr></table></figure>\n\n\n<p>Attach成功之后，会打印Arthas LOGO。输入 <code>help</code> 可以获取到更多的帮助信息。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">help</span></span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/jlynet.github.io/2021/08/07/Java%E8%AF%8A%E6%96%AD%E5%B7%A5%E5%85%B7Arthas%E6%9C%80%E4%BD%B3%E5%AE%9E%E8%B7%B5/Arthas%E6%8E%92%E6%9F%A5HTTP%E8%AF%B7%E6%B1%82%E8%BF%94%E5%9B%9E401%E6%A1%88%E4%BE%8B/O1CN01HzatXZ1RgccrlT90M_!!6000000002141-2-tps-529-244.png\" alt=\"Arthas Boot\"></p>\n<h2 id=\"排查HTTP请求返回401\"><a href=\"#排查HTTP请求返回401\" class=\"headerlink\" title=\"排查HTTP请求返回401\"></a>排查HTTP请求返回401</h2><p>在这个案例里，展示排查HTTP 401问题的技巧。</p>\n<p>访问： admin</p>\n<p>结果是：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Something went wrong: 401 Unauthorized</span><br></pre></td></tr></table></figure>\n\n\n<p>我们知道<code>401</code>通常是被权限管理的<code>Filter</code>拦截了，那么到底是哪个<code>Filter</code>处理了这个请求，返回了401？</p>\n<h4 id=\"跟踪所有的Filter函数\"><a href=\"#跟踪所有的Filter函数\" class=\"headerlink\" title=\"跟踪所有的Filter函数\"></a>跟踪所有的Filter函数</h4><p>开始trace：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">trace javax.servlet.Filter *</span><br></pre></td></tr></table></figure>\n\n\n<p>访问： admin</p>\n<p>可以在调用树的最深层，找到<code>AdminFilterConfig$AdminFilter</code>返回了<code>401</code>：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">+---[3.806273ms] javax.servlet.FilterChain:doFilter()</span><br><span class=\"line\">|   `---[3.447472ms] com.example.demo.arthas.AdminFilterConfig$AdminFilter:doFilter()</span><br><span class=\"line\">|       `---[0.17259ms] javax.servlet.http.HttpServletResponse:sendError()</span><br></pre></td></tr></table></figure>\n\n\n<h4 id=\"通过stack获取调用栈\"><a href=\"#通过stack获取调用栈\" class=\"headerlink\" title=\"通过stack获取调用栈\"></a>通过stack获取调用栈</h4><p>上面是通过<code>trace</code>命令来获取信息，从结果里，我们可以知道通过<code>stack</code>跟踪<code>HttpServletResponse:sendError()</code>，同样可以知道是哪个<code>Filter</code>返回了<code>401</code></p>\n<p>执行：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">stack javax.servlet.http.HttpServletResponse sendError <span class=\"string\">&#x27;params[0]==401&#x27;</span></span><br></pre></td></tr></table></figure>\n\n\n<p>访问： admin</p>\n<figure class=\"highlight console\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> stack javax.servlet.http.HttpServletResponse sendError <span class=\"string\">&#x27;params[0]==401&#x27;</span></span></span><br><span class=\"line\">Press Q or Ctrl+C to abort.</span><br><span class=\"line\">Affect(class-cnt:2 , method-cnt:4) cost in 87 ms.</span><br><span class=\"line\">ts=2019-02-15 16:44:06;thread_name=http-nio-8080-exec-6;id=16;is_daemon=true;priority=5;TCCL=org.springframework.boot.context.embedded.tomcat.TomcatEmbeddedWebappClassLoader@8546cd5</span><br><span class=\"line\">    @org.apache.catalina.connector.ResponseFacade.sendError()</span><br><span class=\"line\">        at com.example.demo.arthas.AdminFilterConfig$AdminFilter.doFilter(AdminFilterConfig.java:38)</span><br><span class=\"line\">        at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)</span><br><span class=\"line\">        at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)</span><br><span class=\"line\">        at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:99)</span><br><span class=\"line\">        at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"更多信息\"><a href=\"#更多信息\" class=\"headerlink\" title=\"更多信息\"></a>更多信息</h2><p>通过本教程基本掌握了Arthas排查HTTP请求返回401。如果有更多的技巧或者使用疑问，欢迎在Issue里提出。</p>\n<ul>\n<li>Issues: <a href=\"https://github.com/alibaba/arthas/issues\">https://github.com/alibaba/arthas/issues</a></li>\n<li>文档： <a href=\"https://arthas.aliyun.com/doc\">https://arthas.aliyun.com/doc</a></li>\n</ul>\n<p>如果您在使用Arthas，请让我们知道。您的使用对我们非常重要：<a href=\"https://github.com/alibaba/arthas/issues/111\">查看</a></p>\n<p>文章拷贝来源：<a href=\"https://start.aliyun.com/course?spm=a2ck6.17690074.0.0.28bc2e7dHTphXs&amp;id=PaiFAkJM\">https://start.aliyun.com/course?spm=a2ck6.17690074.0.0.28bc2e7dHTphXs&amp;id=PaiFAkJM</a></p>\n"},{"title":"Arthas 排查HTTP请求返回404 案例","date":"2021-08-07T00:35:35.000Z","_content":"\n<!-- toc -->\n\n![Arthas](arthas.png)\n\n`Arthas` 是Alibaba开源的Java诊断工具，深受开发者喜爱。在线排查问题，无需重启；动态跟踪Java代码；实时监控JVM状态。\n\n`Arthas` 支持JDK 6+，支持Linux/Mac/Windows，采用命令行交互模式，同时提供丰富的 `Tab` 自动补全功能，进一步方便进行问题的定位和诊断。\n\n当你遇到以下类似问题而束手无策时，Arthas可以帮助你解决：\n\n- 这个类从哪个 jar 包加载的？为什么会报各种类相关的 Exception？\n- 我改的代码为什么没有执行到？难道是我没 commit？分支搞错了？\n- 遇到问题无法在线上 debug，难道只能通过加日志再重新发布吗？\n- 线上遇到某个用户的数据处理有问题，但线上同样无法 debug，线下无法重现！\n- 是否有一个全局视角来查看系统的运行状况？\n- 有什么办法可以监控到JVM的实时运行状态？\n- 怎么快速定位应用的热点，生成火焰图？\n\n本教程会以一个普通的Spring Boot应用为例，演示排查HTTP请求返回404。\n\n- Github: https://github.com/alibaba/arthas\n- 文档: https://arthas.aliyun.com/doc/\n\n## Start demo\n\n下载`demo-arthas-spring-boot.jar`，再用`java -jar`命令启动：\n\n```bash\nwget https://code.aliyun.com/middleware-container/handsonLabExternedFiles/raw/master/demo-arthas-spring-boot.jar;java -jar demo-arthas-spring-boot.jar\n```\n\n\n`demo-arthas-spring-boot`是一个很简单的spring boot应用，源代码：[查看](https://github.com/hengyunabc/spring-boot-inside/tree/master/demo-arthas-spring-boot)\n\n启动之后，可以访问61000端口： 点击查看\n\n![Demo Web](O1CN010Qbzcz1ctPSWSZI6L_!!6000000003658-2-tps-333-182.png)\n\n## Start arthas-boot\n\n在新的`Terminal 2`里，下载`arthas-boot.jar`，再用`java -jar`命令启动：\n\n```bash\nwget https://arthas.aliyun.com/arthas-boot.jar;java -jar arthas-boot.jar\n```\n\n\n`arthas-boot`是`Arthas`的启动程序，它启动后，会列出所有的Java进程，用户可以选择需要诊断的目标进程。\n\n选择第一个进程，输入 `1` ，再`Enter/回车`：\n\n```bash\n1\n```\n\n\nAttach成功之后，会打印Arthas LOGO。输入 `help` 可以获取到更多的帮助信息。\n\n```bash\nhelp\n```\n\n\n![Arthas Boot](O1CN01HzatXZ1RgccrlT90M_!!6000000002141-2-tps-529-244.png)\n\n## 排查HTTP请求返回404\n\n在这个案例里，展示排查HTTP 404问题的技巧。\n\n访问： a.txt\n\n结果是：\n\n```\nSomething went wrong: 404 Not Found\n```\n\n\n那么到底是哪个Servlet处理了这个请求，返回了404？\n\n#### 跟踪所有的Servlet函数\n\n开始trace：\n\n```bash\ntrace javax.servlet.Servlet * > /tmp/servlet.txt\n```\n\n\n访问： a.txt\n\n在`Terminal 3`里，查看`/tmp/servlet.txt`的内容：\n\n```bash\nless /tmp/servlet.txt\n```\n\n\n`/tmp/servlet.txt`里的内容会比较多，需要耐心找到调用树里最长的地方。\n\n可以发现请求最终是被`freemarker`处理的：\n\n```\n`---[13.974188ms] org.springframework.web.servlet.ViewResolver:resolveViewName();    +---[0.045561ms] javax.servlet.GenericServlet:<init>()\n    +---[min=0.045545ms,max=0.074342ms,total=0.119887ms,count=2] org.springframework.web.servlet.view.freemarker.FreeMarkerView$GenericServletAdapter:<init>()\n    +---[0.170895ms] javax.servlet.GenericServlet:init()\n    |   `---[0.068578ms] javax.servlet.GenericServlet:init()\n    |       `---[0.021793ms] javax.servlet.GenericServlet:init()\n    `---[0.164035ms] javax.servlet.GenericServlet:getServletContext()\n```\n\n\n## 更多信息\n\n通过本教程基本掌握了Arthas排查HTTP请求返回404。如果有更多的技巧或者使用疑问，欢迎在Issue里提出。\n\n- Issues: https://github.com/alibaba/arthas/issues\n- 文档： https://arthas.aliyun.com/doc\n\n如果您在使用Arthas，请让我们知道。您的使用对我们非常重要：[查看](https://github.com/alibaba/arthas/issues/111)\n\n文章拷贝来源：https://start.aliyun.com/course?spm=a2ck6.17690074.0.0.28bc2e7dHTphXs&id=PaiFAkJM","source":"_posts/Java诊断工具Arthas最佳实践/Arthas排查HTTP请求返回404案例.md","raw":"---\ntitle: Arthas 排查HTTP请求返回404 案例\ndate: 2021-08-07 08:35:35\ntags: ['Java 诊断工具 Arthas 最佳实践']\n---\n\n<!-- toc -->\n\n![Arthas](arthas.png)\n\n`Arthas` 是Alibaba开源的Java诊断工具，深受开发者喜爱。在线排查问题，无需重启；动态跟踪Java代码；实时监控JVM状态。\n\n`Arthas` 支持JDK 6+，支持Linux/Mac/Windows，采用命令行交互模式，同时提供丰富的 `Tab` 自动补全功能，进一步方便进行问题的定位和诊断。\n\n当你遇到以下类似问题而束手无策时，Arthas可以帮助你解决：\n\n- 这个类从哪个 jar 包加载的？为什么会报各种类相关的 Exception？\n- 我改的代码为什么没有执行到？难道是我没 commit？分支搞错了？\n- 遇到问题无法在线上 debug，难道只能通过加日志再重新发布吗？\n- 线上遇到某个用户的数据处理有问题，但线上同样无法 debug，线下无法重现！\n- 是否有一个全局视角来查看系统的运行状况？\n- 有什么办法可以监控到JVM的实时运行状态？\n- 怎么快速定位应用的热点，生成火焰图？\n\n本教程会以一个普通的Spring Boot应用为例，演示排查HTTP请求返回404。\n\n- Github: https://github.com/alibaba/arthas\n- 文档: https://arthas.aliyun.com/doc/\n\n## Start demo\n\n下载`demo-arthas-spring-boot.jar`，再用`java -jar`命令启动：\n\n```bash\nwget https://code.aliyun.com/middleware-container/handsonLabExternedFiles/raw/master/demo-arthas-spring-boot.jar;java -jar demo-arthas-spring-boot.jar\n```\n\n\n`demo-arthas-spring-boot`是一个很简单的spring boot应用，源代码：[查看](https://github.com/hengyunabc/spring-boot-inside/tree/master/demo-arthas-spring-boot)\n\n启动之后，可以访问61000端口： 点击查看\n\n![Demo Web](O1CN010Qbzcz1ctPSWSZI6L_!!6000000003658-2-tps-333-182.png)\n\n## Start arthas-boot\n\n在新的`Terminal 2`里，下载`arthas-boot.jar`，再用`java -jar`命令启动：\n\n```bash\nwget https://arthas.aliyun.com/arthas-boot.jar;java -jar arthas-boot.jar\n```\n\n\n`arthas-boot`是`Arthas`的启动程序，它启动后，会列出所有的Java进程，用户可以选择需要诊断的目标进程。\n\n选择第一个进程，输入 `1` ，再`Enter/回车`：\n\n```bash\n1\n```\n\n\nAttach成功之后，会打印Arthas LOGO。输入 `help` 可以获取到更多的帮助信息。\n\n```bash\nhelp\n```\n\n\n![Arthas Boot](O1CN01HzatXZ1RgccrlT90M_!!6000000002141-2-tps-529-244.png)\n\n## 排查HTTP请求返回404\n\n在这个案例里，展示排查HTTP 404问题的技巧。\n\n访问： a.txt\n\n结果是：\n\n```\nSomething went wrong: 404 Not Found\n```\n\n\n那么到底是哪个Servlet处理了这个请求，返回了404？\n\n#### 跟踪所有的Servlet函数\n\n开始trace：\n\n```bash\ntrace javax.servlet.Servlet * > /tmp/servlet.txt\n```\n\n\n访问： a.txt\n\n在`Terminal 3`里，查看`/tmp/servlet.txt`的内容：\n\n```bash\nless /tmp/servlet.txt\n```\n\n\n`/tmp/servlet.txt`里的内容会比较多，需要耐心找到调用树里最长的地方。\n\n可以发现请求最终是被`freemarker`处理的：\n\n```\n`---[13.974188ms] org.springframework.web.servlet.ViewResolver:resolveViewName();    +---[0.045561ms] javax.servlet.GenericServlet:<init>()\n    +---[min=0.045545ms,max=0.074342ms,total=0.119887ms,count=2] org.springframework.web.servlet.view.freemarker.FreeMarkerView$GenericServletAdapter:<init>()\n    +---[0.170895ms] javax.servlet.GenericServlet:init()\n    |   `---[0.068578ms] javax.servlet.GenericServlet:init()\n    |       `---[0.021793ms] javax.servlet.GenericServlet:init()\n    `---[0.164035ms] javax.servlet.GenericServlet:getServletContext()\n```\n\n\n## 更多信息\n\n通过本教程基本掌握了Arthas排查HTTP请求返回404。如果有更多的技巧或者使用疑问，欢迎在Issue里提出。\n\n- Issues: https://github.com/alibaba/arthas/issues\n- 文档： https://arthas.aliyun.com/doc\n\n如果您在使用Arthas，请让我们知道。您的使用对我们非常重要：[查看](https://github.com/alibaba/arthas/issues/111)\n\n文章拷贝来源：https://start.aliyun.com/course?spm=a2ck6.17690074.0.0.28bc2e7dHTphXs&id=PaiFAkJM","slug":"Java诊断工具Arthas最佳实践/Arthas排查HTTP请求返回404案例","published":1,"updated":"2021-08-07T05:33:25.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cks1cgr5z0010fw5i206bg5s6","content":"<!-- toc -->\n\n<ul>\n<li><a href=\"#start-demo\">Start demo</a></li>\n<li><a href=\"#start-arthas-boot\">Start arthas-boot</a></li>\n<li><a href=\"#%E6%8E%92%E6%9F%A5http%E8%AF%B7%E6%B1%82%E8%BF%94%E5%9B%9E404\">排查HTTP请求返回404</a><ul>\n<li><a href=\"#%E8%B7%9F%E8%B8%AA%E6%89%80%E6%9C%89%E7%9A%84servlet%E5%87%BD%E6%95%B0\">跟踪所有的Servlet函数</a></li>\n</ul>\n</li>\n<li><a href=\"#%E6%9B%B4%E5%A4%9A%E4%BF%A1%E6%81%AF\">更多信息</a></li>\n</ul>\n<!-- tocstop -->\n\n<p><img src=\"/jlynet.github.io/2021/08/07/Java%E8%AF%8A%E6%96%AD%E5%B7%A5%E5%85%B7Arthas%E6%9C%80%E4%BD%B3%E5%AE%9E%E8%B7%B5/Arthas%E6%8E%92%E6%9F%A5HTTP%E8%AF%B7%E6%B1%82%E8%BF%94%E5%9B%9E404%E6%A1%88%E4%BE%8B/arthas.png\" alt=\"Arthas\"></p>\n<p><code>Arthas</code> 是Alibaba开源的Java诊断工具，深受开发者喜爱。在线排查问题，无需重启；动态跟踪Java代码；实时监控JVM状态。</p>\n<p><code>Arthas</code> 支持JDK 6+，支持Linux/Mac/Windows，采用命令行交互模式，同时提供丰富的 <code>Tab</code> 自动补全功能，进一步方便进行问题的定位和诊断。</p>\n<p>当你遇到以下类似问题而束手无策时，Arthas可以帮助你解决：</p>\n<ul>\n<li>这个类从哪个 jar 包加载的？为什么会报各种类相关的 Exception？</li>\n<li>我改的代码为什么没有执行到？难道是我没 commit？分支搞错了？</li>\n<li>遇到问题无法在线上 debug，难道只能通过加日志再重新发布吗？</li>\n<li>线上遇到某个用户的数据处理有问题，但线上同样无法 debug，线下无法重现！</li>\n<li>是否有一个全局视角来查看系统的运行状况？</li>\n<li>有什么办法可以监控到JVM的实时运行状态？</li>\n<li>怎么快速定位应用的热点，生成火焰图？</li>\n</ul>\n<p>本教程会以一个普通的Spring Boot应用为例，演示排查HTTP请求返回404。</p>\n<ul>\n<li>Github: <a href=\"https://github.com/alibaba/arthas\">https://github.com/alibaba/arthas</a></li>\n<li>文档: <a href=\"https://arthas.aliyun.com/doc/\">https://arthas.aliyun.com/doc/</a></li>\n</ul>\n<h2><span id=\"start-demo\">Start demo</span></h2><p>下载<code>demo-arthas-spring-boot.jar</code>，再用<code>java -jar</code>命令启动：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wget https://code.aliyun.com/middleware-container/handsonLabExternedFiles/raw/master/demo-arthas-spring-boot.jar;java -jar demo-arthas-spring-boot.jar</span><br></pre></td></tr></table></figure>\n\n\n<p><code>demo-arthas-spring-boot</code>是一个很简单的spring boot应用，源代码：<a href=\"https://github.com/hengyunabc/spring-boot-inside/tree/master/demo-arthas-spring-boot\">查看</a></p>\n<p>启动之后，可以访问61000端口： 点击查看</p>\n<p><img src=\"/jlynet.github.io/2021/08/07/Java%E8%AF%8A%E6%96%AD%E5%B7%A5%E5%85%B7Arthas%E6%9C%80%E4%BD%B3%E5%AE%9E%E8%B7%B5/Arthas%E6%8E%92%E6%9F%A5HTTP%E8%AF%B7%E6%B1%82%E8%BF%94%E5%9B%9E404%E6%A1%88%E4%BE%8B/O1CN010Qbzcz1ctPSWSZI6L_!!6000000003658-2-tps-333-182.png\" alt=\"Demo Web\"></p>\n<h2><span id=\"start-arthas-boot\">Start arthas-boot</span></h2><p>在新的<code>Terminal 2</code>里，下载<code>arthas-boot.jar</code>，再用<code>java -jar</code>命令启动：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wget https://arthas.aliyun.com/arthas-boot.jar;java -jar arthas-boot.jar</span><br></pre></td></tr></table></figure>\n\n\n<p><code>arthas-boot</code>是<code>Arthas</code>的启动程序，它启动后，会列出所有的Java进程，用户可以选择需要诊断的目标进程。</p>\n<p>选择第一个进程，输入 <code>1</code> ，再<code>Enter/回车</code>：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1</span><br></pre></td></tr></table></figure>\n\n\n<p>Attach成功之后，会打印Arthas LOGO。输入 <code>help</code> 可以获取到更多的帮助信息。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">help</span></span><br></pre></td></tr></table></figure>\n\n\n<p><img src=\"/jlynet.github.io/2021/08/07/Java%E8%AF%8A%E6%96%AD%E5%B7%A5%E5%85%B7Arthas%E6%9C%80%E4%BD%B3%E5%AE%9E%E8%B7%B5/Arthas%E6%8E%92%E6%9F%A5HTTP%E8%AF%B7%E6%B1%82%E8%BF%94%E5%9B%9E404%E6%A1%88%E4%BE%8B/O1CN01HzatXZ1RgccrlT90M_!!6000000002141-2-tps-529-244.png\" alt=\"Arthas Boot\"></p>\n<h2><span id=\"排查http请求返回404\">排查HTTP请求返回404</span></h2><p>在这个案例里，展示排查HTTP 404问题的技巧。</p>\n<p>访问： a.txt</p>\n<p>结果是：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Something went wrong: 404 Not Found</span><br></pre></td></tr></table></figure>\n\n\n<p>那么到底是哪个Servlet处理了这个请求，返回了404？</p>\n<h4><span id=\"跟踪所有的servlet函数\">跟踪所有的Servlet函数</span></h4><p>开始trace：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">trace javax.servlet.Servlet * &gt; /tmp/servlet.txt</span><br></pre></td></tr></table></figure>\n\n\n<p>访问： a.txt</p>\n<p>在<code>Terminal 3</code>里，查看<code>/tmp/servlet.txt</code>的内容：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">less /tmp/servlet.txt</span><br></pre></td></tr></table></figure>\n\n\n<p><code>/tmp/servlet.txt</code>里的内容会比较多，需要耐心找到调用树里最长的地方。</p>\n<p>可以发现请求最终是被<code>freemarker</code>处理的：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">`---[13.974188ms] org.springframework.web.servlet.ViewResolver:resolveViewName();    +---[0.045561ms] javax.servlet.GenericServlet:&lt;init&gt;()</span><br><span class=\"line\">    +---[min=0.045545ms,max=0.074342ms,total=0.119887ms,count=2] org.springframework.web.servlet.view.freemarker.FreeMarkerView$GenericServletAdapter:&lt;init&gt;()</span><br><span class=\"line\">    +---[0.170895ms] javax.servlet.GenericServlet:init()</span><br><span class=\"line\">    |   `---[0.068578ms] javax.servlet.GenericServlet:init()</span><br><span class=\"line\">    |       `---[0.021793ms] javax.servlet.GenericServlet:init()</span><br><span class=\"line\">    `---[0.164035ms] javax.servlet.GenericServlet:getServletContext()</span><br></pre></td></tr></table></figure>\n\n\n<h2><span id=\"更多信息\">更多信息</span></h2><p>通过本教程基本掌握了Arthas排查HTTP请求返回404。如果有更多的技巧或者使用疑问，欢迎在Issue里提出。</p>\n<ul>\n<li>Issues: <a href=\"https://github.com/alibaba/arthas/issues\">https://github.com/alibaba/arthas/issues</a></li>\n<li>文档： <a href=\"https://arthas.aliyun.com/doc\">https://arthas.aliyun.com/doc</a></li>\n</ul>\n<p>如果您在使用Arthas，请让我们知道。您的使用对我们非常重要：<a href=\"https://github.com/alibaba/arthas/issues/111\">查看</a></p>\n<p>文章拷贝来源：<a href=\"https://start.aliyun.com/course?spm=a2ck6.17690074.0.0.28bc2e7dHTphXs&amp;id=PaiFAkJM\">https://start.aliyun.com/course?spm=a2ck6.17690074.0.0.28bc2e7dHTphXs&amp;id=PaiFAkJM</a></p>\n","site":{"data":{}},"excerpt":"","more":"<!-- toc -->\n\n<ul>\n<li><a href=\"#start-demo\">Start demo</a></li>\n<li><a href=\"#start-arthas-boot\">Start arthas-boot</a></li>\n<li><a href=\"#%E6%8E%92%E6%9F%A5http%E8%AF%B7%E6%B1%82%E8%BF%94%E5%9B%9E404\">排查HTTP请求返回404</a><ul>\n<li><a href=\"#%E8%B7%9F%E8%B8%AA%E6%89%80%E6%9C%89%E7%9A%84servlet%E5%87%BD%E6%95%B0\">跟踪所有的Servlet函数</a></li>\n</ul>\n</li>\n<li><a href=\"#%E6%9B%B4%E5%A4%9A%E4%BF%A1%E6%81%AF\">更多信息</a></li>\n</ul>\n<!-- tocstop -->\n\n<p><img src=\"/jlynet.github.io/2021/08/07/Java%E8%AF%8A%E6%96%AD%E5%B7%A5%E5%85%B7Arthas%E6%9C%80%E4%BD%B3%E5%AE%9E%E8%B7%B5/Arthas%E6%8E%92%E6%9F%A5HTTP%E8%AF%B7%E6%B1%82%E8%BF%94%E5%9B%9E404%E6%A1%88%E4%BE%8B/arthas.png\" alt=\"Arthas\"></p>\n<p><code>Arthas</code> 是Alibaba开源的Java诊断工具，深受开发者喜爱。在线排查问题，无需重启；动态跟踪Java代码；实时监控JVM状态。</p>\n<p><code>Arthas</code> 支持JDK 6+，支持Linux/Mac/Windows，采用命令行交互模式，同时提供丰富的 <code>Tab</code> 自动补全功能，进一步方便进行问题的定位和诊断。</p>\n<p>当你遇到以下类似问题而束手无策时，Arthas可以帮助你解决：</p>\n<ul>\n<li>这个类从哪个 jar 包加载的？为什么会报各种类相关的 Exception？</li>\n<li>我改的代码为什么没有执行到？难道是我没 commit？分支搞错了？</li>\n<li>遇到问题无法在线上 debug，难道只能通过加日志再重新发布吗？</li>\n<li>线上遇到某个用户的数据处理有问题，但线上同样无法 debug，线下无法重现！</li>\n<li>是否有一个全局视角来查看系统的运行状况？</li>\n<li>有什么办法可以监控到JVM的实时运行状态？</li>\n<li>怎么快速定位应用的热点，生成火焰图？</li>\n</ul>\n<p>本教程会以一个普通的Spring Boot应用为例，演示排查HTTP请求返回404。</p>\n<ul>\n<li>Github: <a href=\"https://github.com/alibaba/arthas\">https://github.com/alibaba/arthas</a></li>\n<li>文档: <a href=\"https://arthas.aliyun.com/doc/\">https://arthas.aliyun.com/doc/</a></li>\n</ul>\n<h2 id=\"Start-demo\"><a href=\"#Start-demo\" class=\"headerlink\" title=\"Start demo\"></a>Start demo</h2><p>下载<code>demo-arthas-spring-boot.jar</code>，再用<code>java -jar</code>命令启动：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wget https://code.aliyun.com/middleware-container/handsonLabExternedFiles/raw/master/demo-arthas-spring-boot.jar;java -jar demo-arthas-spring-boot.jar</span><br></pre></td></tr></table></figure>\n\n\n<p><code>demo-arthas-spring-boot</code>是一个很简单的spring boot应用，源代码：<a href=\"https://github.com/hengyunabc/spring-boot-inside/tree/master/demo-arthas-spring-boot\">查看</a></p>\n<p>启动之后，可以访问61000端口： 点击查看</p>\n<p><img src=\"/jlynet.github.io/2021/08/07/Java%E8%AF%8A%E6%96%AD%E5%B7%A5%E5%85%B7Arthas%E6%9C%80%E4%BD%B3%E5%AE%9E%E8%B7%B5/Arthas%E6%8E%92%E6%9F%A5HTTP%E8%AF%B7%E6%B1%82%E8%BF%94%E5%9B%9E404%E6%A1%88%E4%BE%8B/O1CN010Qbzcz1ctPSWSZI6L_!!6000000003658-2-tps-333-182.png\" alt=\"Demo Web\"></p>\n<h2 id=\"Start-arthas-boot\"><a href=\"#Start-arthas-boot\" class=\"headerlink\" title=\"Start arthas-boot\"></a>Start arthas-boot</h2><p>在新的<code>Terminal 2</code>里，下载<code>arthas-boot.jar</code>，再用<code>java -jar</code>命令启动：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wget https://arthas.aliyun.com/arthas-boot.jar;java -jar arthas-boot.jar</span><br></pre></td></tr></table></figure>\n\n\n<p><code>arthas-boot</code>是<code>Arthas</code>的启动程序，它启动后，会列出所有的Java进程，用户可以选择需要诊断的目标进程。</p>\n<p>选择第一个进程，输入 <code>1</code> ，再<code>Enter/回车</code>：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1</span><br></pre></td></tr></table></figure>\n\n\n<p>Attach成功之后，会打印Arthas LOGO。输入 <code>help</code> 可以获取到更多的帮助信息。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">help</span></span><br></pre></td></tr></table></figure>\n\n\n<p><img src=\"/jlynet.github.io/2021/08/07/Java%E8%AF%8A%E6%96%AD%E5%B7%A5%E5%85%B7Arthas%E6%9C%80%E4%BD%B3%E5%AE%9E%E8%B7%B5/Arthas%E6%8E%92%E6%9F%A5HTTP%E8%AF%B7%E6%B1%82%E8%BF%94%E5%9B%9E404%E6%A1%88%E4%BE%8B/O1CN01HzatXZ1RgccrlT90M_!!6000000002141-2-tps-529-244.png\" alt=\"Arthas Boot\"></p>\n<h2 id=\"排查HTTP请求返回404\"><a href=\"#排查HTTP请求返回404\" class=\"headerlink\" title=\"排查HTTP请求返回404\"></a>排查HTTP请求返回404</h2><p>在这个案例里，展示排查HTTP 404问题的技巧。</p>\n<p>访问： a.txt</p>\n<p>结果是：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Something went wrong: 404 Not Found</span><br></pre></td></tr></table></figure>\n\n\n<p>那么到底是哪个Servlet处理了这个请求，返回了404？</p>\n<h4 id=\"跟踪所有的Servlet函数\"><a href=\"#跟踪所有的Servlet函数\" class=\"headerlink\" title=\"跟踪所有的Servlet函数\"></a>跟踪所有的Servlet函数</h4><p>开始trace：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">trace javax.servlet.Servlet * &gt; /tmp/servlet.txt</span><br></pre></td></tr></table></figure>\n\n\n<p>访问： a.txt</p>\n<p>在<code>Terminal 3</code>里，查看<code>/tmp/servlet.txt</code>的内容：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">less /tmp/servlet.txt</span><br></pre></td></tr></table></figure>\n\n\n<p><code>/tmp/servlet.txt</code>里的内容会比较多，需要耐心找到调用树里最长的地方。</p>\n<p>可以发现请求最终是被<code>freemarker</code>处理的：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">`---[13.974188ms] org.springframework.web.servlet.ViewResolver:resolveViewName();    +---[0.045561ms] javax.servlet.GenericServlet:&lt;init&gt;()</span><br><span class=\"line\">    +---[min=0.045545ms,max=0.074342ms,total=0.119887ms,count=2] org.springframework.web.servlet.view.freemarker.FreeMarkerView$GenericServletAdapter:&lt;init&gt;()</span><br><span class=\"line\">    +---[0.170895ms] javax.servlet.GenericServlet:init()</span><br><span class=\"line\">    |   `---[0.068578ms] javax.servlet.GenericServlet:init()</span><br><span class=\"line\">    |       `---[0.021793ms] javax.servlet.GenericServlet:init()</span><br><span class=\"line\">    `---[0.164035ms] javax.servlet.GenericServlet:getServletContext()</span><br></pre></td></tr></table></figure>\n\n\n<h2 id=\"更多信息\"><a href=\"#更多信息\" class=\"headerlink\" title=\"更多信息\"></a>更多信息</h2><p>通过本教程基本掌握了Arthas排查HTTP请求返回404。如果有更多的技巧或者使用疑问，欢迎在Issue里提出。</p>\n<ul>\n<li>Issues: <a href=\"https://github.com/alibaba/arthas/issues\">https://github.com/alibaba/arthas/issues</a></li>\n<li>文档： <a href=\"https://arthas.aliyun.com/doc\">https://arthas.aliyun.com/doc</a></li>\n</ul>\n<p>如果您在使用Arthas，请让我们知道。您的使用对我们非常重要：<a href=\"https://github.com/alibaba/arthas/issues/111\">查看</a></p>\n<p>文章拷贝来源：<a href=\"https://start.aliyun.com/course?spm=a2ck6.17690074.0.0.28bc2e7dHTphXs&amp;id=PaiFAkJM\">https://start.aliyun.com/course?spm=a2ck6.17690074.0.0.28bc2e7dHTphXs&amp;id=PaiFAkJM</a></p>\n"},{"title":"Arthas 排查logger冲突问题 案例","date":"2021-08-07T00:35:37.000Z","_content":"\n<!-- toc -->\n\n![Arthas](arthas.png)\n\n`Arthas` 是Alibaba开源的Java诊断工具，深受开发者喜爱。在线排查问题，无需重启；动态跟踪Java代码；实时监控JVM状态。\n\n`Arthas` 支持JDK 6+，支持Linux/Mac/Windows，采用命令行交互模式，同时提供丰富的 `Tab` 自动补全功能，进一步方便进行问题的定位和诊断。\n\n当你遇到以下类似问题而束手无策时，Arthas可以帮助你解决：\n\n- 这个类从哪个 jar 包加载的？为什么会报各种类相关的 Exception？\n- 我改的代码为什么没有执行到？难道是我没 commit？分支搞错了？\n- 遇到问题无法在线上 debug，难道只能通过加日志再重新发布吗？\n- 线上遇到某个用户的数据处理有问题，但线上同样无法 debug，线下无法重现！\n- 是否有一个全局视角来查看系统的运行状况？\n- 有什么办法可以监控到JVM的实时运行状态？\n- 怎么快速定位应用的热点，生成火焰图？\n\n本教程会以一个普通的Spring Boot应用为例，演示排查logger冲突问题。\n\n- Github: https://github.com/alibaba/arthas\n- 文档: https://arthas.aliyun.com/doc/\n\n## Start demo\n\n下载`demo-arthas-spring-boot.jar`，再用`java -jar`命令启动：\n\n```bash\nwget https://code.aliyun.com/middleware-container/handsonLabExternedFiles/raw/master/demo-arthas-spring-boot.jar;java -jar demo-arthas-spring-boot.jar\n```\n\n\n\n`demo-arthas-spring-boot`是一个很简单的spring boot应用，源代码：[查看](https://github.com/hengyunabc/spring-boot-inside/tree/master/demo-arthas-spring-boot)\n\n启动之后，可以访问61000端口： 点击查看\n\n![Demo Web](O1CN010Qbzcz1ctPSWSZI6L_!!6000000003658-2-tps-333-182.png)\n\n## Start arthas-boot\n\n在新的`Terminal 2`里，下载`arthas-boot.jar`，再用`java -jar`命令启动：\n\n```bash\nwget https://arthas.aliyun.com/arthas-boot.jar;java -jar arthas-boot.jar\n```\n\n\n\n`arthas-boot`是`Arthas`的启动程序，它启动后，会列出所有的Java进程，用户可以选择需要诊断的目标进程。\n\n选择第一个进程，输入 `1` ，再`Enter/回车`：\n\n```bash\n1\n```\n\n\n\nAttach成功之后，会打印Arthas LOGO。输入 `help` 可以获取到更多的帮助信息。\n\n```bash\nhelp\n```\n\n\n\n![Arthas Boot](O1CN01HzatXZ1RgccrlT90M_!!6000000002141-2-tps-529-244.png)\n\n## 排查logger冲突问题\n\n在这个案例里，展示排查logger冲突的方法。\n\n#### 查找UserController的ClassLoader\n\n```bash\nsc -d com.example.demo.arthas.user.UserController | grep classLoaderHash\n```\n\n\n\n```console\n$ sc -d com.example.demo.arthas.user.UserController | grep classLoaderHash\n classLoaderHash   1be6f5c3\n```\n\n注意hashcode是变化的，需要先查看当前的ClassLoader信息，提取对应ClassLoader的hashcode。\n\n如果你使用`-c`，你需要手动输入hashcode：`-c <hashcode>`\n\n```console\n$ ognl -c 1be6f5c3 @com.example.demo.arthas.user.UserController@logger\n```\n\n对于只有唯一实例的ClassLoader可以通过`--classLoaderClass`指定class name，使用起来更加方便：\n\n```console\n$ ognl --classLoaderClass org.springframework.boot.loader.LaunchedURLClassLoader  @org.springframework.boot.SpringApplication@logger\n@Slf4jLocationAwareLog[\n    FQCN=@String[org.apache.commons.logging.LogAdapter$Slf4jLocationAwareLog],\n    name=@String[org.springframework.boot.SpringApplication],\n    logger=@Logger[Logger[org.springframework.boot.SpringApplication]],\n]\n```\n\n`--classLoaderClass` 的值是ClassLoader的类名，只有匹配到唯一的ClassLoader实例时才能工作，目的是方便输入通用命令，而`-c <hashcode>`是动态变化的。\n\n#### 确认应用使用的logger系统\n\n以`UserController`为例，它使用的是slf4j api，但实际使用到的logger系统是logback。\n\n```bash\nognl --classLoaderClass org.springframework.boot.loader.LaunchedURLClassLoader '@com.example.demo.arthas.user.UserController@logger'\n```\n\n\n\n```console\n$ ognl --classLoaderClass org.springframework.boot.loader.LaunchedURLClassLoader '@com.example.demo.arthas.user.UserController@logger'\n@Logger[\n    serialVersionUID=@Long[5454405123156820674],\n    FQCN=@String[ch.qos.logback.classic.Logger],\n    name=@String[com.example.demo.arthas.user.UserController],\n    level=null,\n    effectiveLevelInt=@Integer[20000],\n    parent=@Logger[Logger[com.example.demo.arthas.user]],\n    childrenList=null,\n    aai=null,\n    additive=@Boolean[true],\n    loggerContext=@LoggerContext[ch.qos.logback.classic.LoggerContext[default]],\n]\n```\n\n#### 获取logback实际加载的配置文件\n\n```bash\nognl --classLoaderClass org.springframework.boot.loader.LaunchedURLClassLoader '#map1=@org.slf4j.LoggerFactory@getLogger(\"root\").loggerContext.objectMap, #map1.get(\"CONFIGURATION_WATCH_LIST\")'\n```\n\n\n\n#### 使用classloader命令查找可能存在的logger配置文件\n\n```bash\nclassloader --classLoaderClass org.springframework.boot.loader.LaunchedURLClassLoader -r logback-spring.xml\n```\n\n\n\n```\n$ classloader --classLoaderClass org.springframework.boot.loader.LaunchedURLClassLoader -r logback-spring.xml\n jar:file:/Users/hengyunabc/code/java/spring-boot-inside/demo-arthas-spring-boot/target/demo-arthas-spring-boot-0.0.1-SNAPSHOT.jar!/BOOT-INF/classes!/logback-spring.xml\n\nAffect(row-cnt:1) cost in 13 ms.\n```\n\n\n\n可以知道加载的配置的具体来源。\n\n可以尝试加载容易冲突的文件：\n\n```bash\nclassloader --classLoaderClass org.springframework.boot.loader.LaunchedURLClassLoader -r logback.xml\n```\n\n\n\n```bash\nclassloader --classLoaderClass org.springframework.boot.loader.LaunchedURLClassLoader -r log4j.properties\n```\n\n\n\n## 更多信息\n\n通过本教程基本掌握了Arthas排查logger冲突问题。如果有更多的技巧或者使用疑问，欢迎在Issue里提出。\n\n- Issues: https://github.com/alibaba/arthas/issues\n- 文档： https://arthas.aliyun.com/doc\n\n如果您在使用Arthas，请让我们知道。您的使用对我们非常重要：[查看](https://github.com/alibaba/arthas/issues/111)\n\n文章拷贝来源：https://start.aliyun.com/course?spm=a2ck6.17690074.0.0.28bc2e7dHTphXs&id=PaiFAkJM","source":"_posts/Java诊断工具Arthas最佳实践/Arthas排查logger冲突问题案例.md","raw":"---\ntitle: Arthas 排查logger冲突问题 案例\ndate: 2021-08-07 08:35:37\ntags: ['Java 诊断工具 Arthas 最佳实践']\n---\n\n<!-- toc -->\n\n![Arthas](arthas.png)\n\n`Arthas` 是Alibaba开源的Java诊断工具，深受开发者喜爱。在线排查问题，无需重启；动态跟踪Java代码；实时监控JVM状态。\n\n`Arthas` 支持JDK 6+，支持Linux/Mac/Windows，采用命令行交互模式，同时提供丰富的 `Tab` 自动补全功能，进一步方便进行问题的定位和诊断。\n\n当你遇到以下类似问题而束手无策时，Arthas可以帮助你解决：\n\n- 这个类从哪个 jar 包加载的？为什么会报各种类相关的 Exception？\n- 我改的代码为什么没有执行到？难道是我没 commit？分支搞错了？\n- 遇到问题无法在线上 debug，难道只能通过加日志再重新发布吗？\n- 线上遇到某个用户的数据处理有问题，但线上同样无法 debug，线下无法重现！\n- 是否有一个全局视角来查看系统的运行状况？\n- 有什么办法可以监控到JVM的实时运行状态？\n- 怎么快速定位应用的热点，生成火焰图？\n\n本教程会以一个普通的Spring Boot应用为例，演示排查logger冲突问题。\n\n- Github: https://github.com/alibaba/arthas\n- 文档: https://arthas.aliyun.com/doc/\n\n## Start demo\n\n下载`demo-arthas-spring-boot.jar`，再用`java -jar`命令启动：\n\n```bash\nwget https://code.aliyun.com/middleware-container/handsonLabExternedFiles/raw/master/demo-arthas-spring-boot.jar;java -jar demo-arthas-spring-boot.jar\n```\n\n\n\n`demo-arthas-spring-boot`是一个很简单的spring boot应用，源代码：[查看](https://github.com/hengyunabc/spring-boot-inside/tree/master/demo-arthas-spring-boot)\n\n启动之后，可以访问61000端口： 点击查看\n\n![Demo Web](O1CN010Qbzcz1ctPSWSZI6L_!!6000000003658-2-tps-333-182.png)\n\n## Start arthas-boot\n\n在新的`Terminal 2`里，下载`arthas-boot.jar`，再用`java -jar`命令启动：\n\n```bash\nwget https://arthas.aliyun.com/arthas-boot.jar;java -jar arthas-boot.jar\n```\n\n\n\n`arthas-boot`是`Arthas`的启动程序，它启动后，会列出所有的Java进程，用户可以选择需要诊断的目标进程。\n\n选择第一个进程，输入 `1` ，再`Enter/回车`：\n\n```bash\n1\n```\n\n\n\nAttach成功之后，会打印Arthas LOGO。输入 `help` 可以获取到更多的帮助信息。\n\n```bash\nhelp\n```\n\n\n\n![Arthas Boot](O1CN01HzatXZ1RgccrlT90M_!!6000000002141-2-tps-529-244.png)\n\n## 排查logger冲突问题\n\n在这个案例里，展示排查logger冲突的方法。\n\n#### 查找UserController的ClassLoader\n\n```bash\nsc -d com.example.demo.arthas.user.UserController | grep classLoaderHash\n```\n\n\n\n```console\n$ sc -d com.example.demo.arthas.user.UserController | grep classLoaderHash\n classLoaderHash   1be6f5c3\n```\n\n注意hashcode是变化的，需要先查看当前的ClassLoader信息，提取对应ClassLoader的hashcode。\n\n如果你使用`-c`，你需要手动输入hashcode：`-c <hashcode>`\n\n```console\n$ ognl -c 1be6f5c3 @com.example.demo.arthas.user.UserController@logger\n```\n\n对于只有唯一实例的ClassLoader可以通过`--classLoaderClass`指定class name，使用起来更加方便：\n\n```console\n$ ognl --classLoaderClass org.springframework.boot.loader.LaunchedURLClassLoader  @org.springframework.boot.SpringApplication@logger\n@Slf4jLocationAwareLog[\n    FQCN=@String[org.apache.commons.logging.LogAdapter$Slf4jLocationAwareLog],\n    name=@String[org.springframework.boot.SpringApplication],\n    logger=@Logger[Logger[org.springframework.boot.SpringApplication]],\n]\n```\n\n`--classLoaderClass` 的值是ClassLoader的类名，只有匹配到唯一的ClassLoader实例时才能工作，目的是方便输入通用命令，而`-c <hashcode>`是动态变化的。\n\n#### 确认应用使用的logger系统\n\n以`UserController`为例，它使用的是slf4j api，但实际使用到的logger系统是logback。\n\n```bash\nognl --classLoaderClass org.springframework.boot.loader.LaunchedURLClassLoader '@com.example.demo.arthas.user.UserController@logger'\n```\n\n\n\n```console\n$ ognl --classLoaderClass org.springframework.boot.loader.LaunchedURLClassLoader '@com.example.demo.arthas.user.UserController@logger'\n@Logger[\n    serialVersionUID=@Long[5454405123156820674],\n    FQCN=@String[ch.qos.logback.classic.Logger],\n    name=@String[com.example.demo.arthas.user.UserController],\n    level=null,\n    effectiveLevelInt=@Integer[20000],\n    parent=@Logger[Logger[com.example.demo.arthas.user]],\n    childrenList=null,\n    aai=null,\n    additive=@Boolean[true],\n    loggerContext=@LoggerContext[ch.qos.logback.classic.LoggerContext[default]],\n]\n```\n\n#### 获取logback实际加载的配置文件\n\n```bash\nognl --classLoaderClass org.springframework.boot.loader.LaunchedURLClassLoader '#map1=@org.slf4j.LoggerFactory@getLogger(\"root\").loggerContext.objectMap, #map1.get(\"CONFIGURATION_WATCH_LIST\")'\n```\n\n\n\n#### 使用classloader命令查找可能存在的logger配置文件\n\n```bash\nclassloader --classLoaderClass org.springframework.boot.loader.LaunchedURLClassLoader -r logback-spring.xml\n```\n\n\n\n```\n$ classloader --classLoaderClass org.springframework.boot.loader.LaunchedURLClassLoader -r logback-spring.xml\n jar:file:/Users/hengyunabc/code/java/spring-boot-inside/demo-arthas-spring-boot/target/demo-arthas-spring-boot-0.0.1-SNAPSHOT.jar!/BOOT-INF/classes!/logback-spring.xml\n\nAffect(row-cnt:1) cost in 13 ms.\n```\n\n\n\n可以知道加载的配置的具体来源。\n\n可以尝试加载容易冲突的文件：\n\n```bash\nclassloader --classLoaderClass org.springframework.boot.loader.LaunchedURLClassLoader -r logback.xml\n```\n\n\n\n```bash\nclassloader --classLoaderClass org.springframework.boot.loader.LaunchedURLClassLoader -r log4j.properties\n```\n\n\n\n## 更多信息\n\n通过本教程基本掌握了Arthas排查logger冲突问题。如果有更多的技巧或者使用疑问，欢迎在Issue里提出。\n\n- Issues: https://github.com/alibaba/arthas/issues\n- 文档： https://arthas.aliyun.com/doc\n\n如果您在使用Arthas，请让我们知道。您的使用对我们非常重要：[查看](https://github.com/alibaba/arthas/issues/111)\n\n文章拷贝来源：https://start.aliyun.com/course?spm=a2ck6.17690074.0.0.28bc2e7dHTphXs&id=PaiFAkJM","slug":"Java诊断工具Arthas最佳实践/Arthas排查logger冲突问题案例","published":1,"updated":"2021-08-07T05:33:29.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cks1cgr5z0011fw5i7rmg0vnd","content":"<!-- toc -->\n\n<ul>\n<li><a href=\"#start-demo\">Start demo</a></li>\n<li><a href=\"#start-arthas-boot\">Start arthas-boot</a></li>\n<li><a href=\"#%E6%8E%92%E6%9F%A5logger%E5%86%B2%E7%AA%81%E9%97%AE%E9%A2%98\">排查logger冲突问题</a><ul>\n<li><a href=\"#%E6%9F%A5%E6%89%BEusercontroller%E7%9A%84classloader\">查找UserController的ClassLoader</a></li>\n<li><a href=\"#%E7%A1%AE%E8%AE%A4%E5%BA%94%E7%94%A8%E4%BD%BF%E7%94%A8%E7%9A%84logger%E7%B3%BB%E7%BB%9F\">确认应用使用的logger系统</a></li>\n<li><a href=\"#%E8%8E%B7%E5%8F%96logback%E5%AE%9E%E9%99%85%E5%8A%A0%E8%BD%BD%E7%9A%84%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6\">获取logback实际加载的配置文件</a></li>\n<li><a href=\"#%E4%BD%BF%E7%94%A8classloader%E5%91%BD%E4%BB%A4%E6%9F%A5%E6%89%BE%E5%8F%AF%E8%83%BD%E5%AD%98%E5%9C%A8%E7%9A%84logger%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6\">使用classloader命令查找可能存在的logger配置文件</a></li>\n</ul>\n</li>\n<li><a href=\"#%E6%9B%B4%E5%A4%9A%E4%BF%A1%E6%81%AF\">更多信息</a></li>\n</ul>\n<!-- tocstop -->\n\n<p><img src=\"/jlynet.github.io/2021/08/07/Java%E8%AF%8A%E6%96%AD%E5%B7%A5%E5%85%B7Arthas%E6%9C%80%E4%BD%B3%E5%AE%9E%E8%B7%B5/Arthas%E6%8E%92%E6%9F%A5logger%E5%86%B2%E7%AA%81%E9%97%AE%E9%A2%98%E6%A1%88%E4%BE%8B/arthas.png\" alt=\"Arthas\"></p>\n<p><code>Arthas</code> 是Alibaba开源的Java诊断工具，深受开发者喜爱。在线排查问题，无需重启；动态跟踪Java代码；实时监控JVM状态。</p>\n<p><code>Arthas</code> 支持JDK 6+，支持Linux/Mac/Windows，采用命令行交互模式，同时提供丰富的 <code>Tab</code> 自动补全功能，进一步方便进行问题的定位和诊断。</p>\n<p>当你遇到以下类似问题而束手无策时，Arthas可以帮助你解决：</p>\n<ul>\n<li>这个类从哪个 jar 包加载的？为什么会报各种类相关的 Exception？</li>\n<li>我改的代码为什么没有执行到？难道是我没 commit？分支搞错了？</li>\n<li>遇到问题无法在线上 debug，难道只能通过加日志再重新发布吗？</li>\n<li>线上遇到某个用户的数据处理有问题，但线上同样无法 debug，线下无法重现！</li>\n<li>是否有一个全局视角来查看系统的运行状况？</li>\n<li>有什么办法可以监控到JVM的实时运行状态？</li>\n<li>怎么快速定位应用的热点，生成火焰图？</li>\n</ul>\n<p>本教程会以一个普通的Spring Boot应用为例，演示排查logger冲突问题。</p>\n<ul>\n<li>Github: <a href=\"https://github.com/alibaba/arthas\">https://github.com/alibaba/arthas</a></li>\n<li>文档: <a href=\"https://arthas.aliyun.com/doc/\">https://arthas.aliyun.com/doc/</a></li>\n</ul>\n<h2><span id=\"start-demo\">Start demo</span></h2><p>下载<code>demo-arthas-spring-boot.jar</code>，再用<code>java -jar</code>命令启动：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wget https://code.aliyun.com/middleware-container/handsonLabExternedFiles/raw/master/demo-arthas-spring-boot.jar;java -jar demo-arthas-spring-boot.jar</span><br></pre></td></tr></table></figure>\n\n\n\n<p><code>demo-arthas-spring-boot</code>是一个很简单的spring boot应用，源代码：<a href=\"https://github.com/hengyunabc/spring-boot-inside/tree/master/demo-arthas-spring-boot\">查看</a></p>\n<p>启动之后，可以访问61000端口： 点击查看</p>\n<p><img src=\"/jlynet.github.io/2021/08/07/Java%E8%AF%8A%E6%96%AD%E5%B7%A5%E5%85%B7Arthas%E6%9C%80%E4%BD%B3%E5%AE%9E%E8%B7%B5/Arthas%E6%8E%92%E6%9F%A5logger%E5%86%B2%E7%AA%81%E9%97%AE%E9%A2%98%E6%A1%88%E4%BE%8B/O1CN010Qbzcz1ctPSWSZI6L_!!6000000003658-2-tps-333-182.png\" alt=\"Demo Web\"></p>\n<h2><span id=\"start-arthas-boot\">Start arthas-boot</span></h2><p>在新的<code>Terminal 2</code>里，下载<code>arthas-boot.jar</code>，再用<code>java -jar</code>命令启动：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wget https://arthas.aliyun.com/arthas-boot.jar;java -jar arthas-boot.jar</span><br></pre></td></tr></table></figure>\n\n\n\n<p><code>arthas-boot</code>是<code>Arthas</code>的启动程序，它启动后，会列出所有的Java进程，用户可以选择需要诊断的目标进程。</p>\n<p>选择第一个进程，输入 <code>1</code> ，再<code>Enter/回车</code>：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1</span><br></pre></td></tr></table></figure>\n\n\n\n<p>Attach成功之后，会打印Arthas LOGO。输入 <code>help</code> 可以获取到更多的帮助信息。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">help</span></span><br></pre></td></tr></table></figure>\n\n\n\n<p><img src=\"/jlynet.github.io/2021/08/07/Java%E8%AF%8A%E6%96%AD%E5%B7%A5%E5%85%B7Arthas%E6%9C%80%E4%BD%B3%E5%AE%9E%E8%B7%B5/Arthas%E6%8E%92%E6%9F%A5logger%E5%86%B2%E7%AA%81%E9%97%AE%E9%A2%98%E6%A1%88%E4%BE%8B/O1CN01HzatXZ1RgccrlT90M_!!6000000002141-2-tps-529-244.png\" alt=\"Arthas Boot\"></p>\n<h2><span id=\"排查logger冲突问题\">排查logger冲突问题</span></h2><p>在这个案例里，展示排查logger冲突的方法。</p>\n<h4><span id=\"查找usercontroller的classloader\">查找UserController的ClassLoader</span></h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sc -d com.example.demo.arthas.user.UserController | grep classLoaderHash</span><br></pre></td></tr></table></figure>\n\n\n\n<figure class=\"highlight console\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> sc -d com.example.demo.arthas.user.UserController | grep classLoaderHash</span></span><br><span class=\"line\"> classLoaderHash   1be6f5c3</span><br></pre></td></tr></table></figure>\n\n<p>注意hashcode是变化的，需要先查看当前的ClassLoader信息，提取对应ClassLoader的hashcode。</p>\n<p>如果你使用<code>-c</code>，你需要手动输入hashcode：<code>-c &lt;hashcode&gt;</code></p>\n<figure class=\"highlight console\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> ognl -c 1be6f5c3 @com.example.demo.arthas.user.UserController@logger</span></span><br></pre></td></tr></table></figure>\n\n<p>对于只有唯一实例的ClassLoader可以通过<code>--classLoaderClass</code>指定class name，使用起来更加方便：</p>\n<figure class=\"highlight console\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> ognl --classLoaderClass org.springframework.boot.loader.LaunchedURLClassLoader  @org.springframework.boot.SpringApplication@logger</span></span><br><span class=\"line\">@Slf4jLocationAwareLog[</span><br><span class=\"line\">    FQCN=@String[org.apache.commons.logging.LogAdapter$Slf4jLocationAwareLog],</span><br><span class=\"line\">    name=@String[org.springframework.boot.SpringApplication],</span><br><span class=\"line\">    logger=@Logger[Logger[org.springframework.boot.SpringApplication]],</span><br><span class=\"line\">]</span><br></pre></td></tr></table></figure>\n\n<p><code>--classLoaderClass</code> 的值是ClassLoader的类名，只有匹配到唯一的ClassLoader实例时才能工作，目的是方便输入通用命令，而<code>-c &lt;hashcode&gt;</code>是动态变化的。</p>\n<h4><span id=\"确认应用使用的logger系统\">确认应用使用的logger系统</span></h4><p>以<code>UserController</code>为例，它使用的是slf4j api，但实际使用到的logger系统是logback。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ognl --classLoaderClass org.springframework.boot.loader.LaunchedURLClassLoader <span class=\"string\">&#x27;@com.example.demo.arthas.user.UserController@logger&#x27;</span></span><br></pre></td></tr></table></figure>\n\n\n\n<figure class=\"highlight console\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> ognl --classLoaderClass org.springframework.boot.loader.LaunchedURLClassLoader <span class=\"string\">&#x27;@com.example.demo.arthas.user.UserController@logger&#x27;</span></span></span><br><span class=\"line\">@Logger[</span><br><span class=\"line\">    serialVersionUID=@Long[5454405123156820674],</span><br><span class=\"line\">    FQCN=@String[ch.qos.logback.classic.Logger],</span><br><span class=\"line\">    name=@String[com.example.demo.arthas.user.UserController],</span><br><span class=\"line\">    level=null,</span><br><span class=\"line\">    effectiveLevelInt=@Integer[20000],</span><br><span class=\"line\">    parent=@Logger[Logger[com.example.demo.arthas.user]],</span><br><span class=\"line\">    childrenList=null,</span><br><span class=\"line\">    aai=null,</span><br><span class=\"line\">    additive=@Boolean[true],</span><br><span class=\"line\">    loggerContext=@LoggerContext[ch.qos.logback.classic.LoggerContext[default]],</span><br><span class=\"line\">]</span><br></pre></td></tr></table></figure>\n\n<h4><span id=\"获取logback实际加载的配置文件\">获取logback实际加载的配置文件</span></h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ognl --classLoaderClass org.springframework.boot.loader.LaunchedURLClassLoader <span class=\"string\">&#x27;#map1=@org.slf4j.LoggerFactory@getLogger(&quot;root&quot;).loggerContext.objectMap, #map1.get(&quot;CONFIGURATION_WATCH_LIST&quot;)&#x27;</span></span><br></pre></td></tr></table></figure>\n\n\n\n<h4><span id=\"使用classloader命令查找可能存在的logger配置文件\">使用classloader命令查找可能存在的logger配置文件</span></h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">classloader --classLoaderClass org.springframework.boot.loader.LaunchedURLClassLoader -r logback-spring.xml</span><br></pre></td></tr></table></figure>\n\n\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ classloader --classLoaderClass org.springframework.boot.loader.LaunchedURLClassLoader -r logback-spring.xml</span><br><span class=\"line\"> jar:file:/Users/hengyunabc/code/java/spring-boot-inside/demo-arthas-spring-boot/target/demo-arthas-spring-boot-0.0.1-SNAPSHOT.jar!/BOOT-INF/classes!/logback-spring.xml</span><br><span class=\"line\"></span><br><span class=\"line\">Affect(row-cnt:1) cost in 13 ms.</span><br></pre></td></tr></table></figure>\n\n\n\n<p>可以知道加载的配置的具体来源。</p>\n<p>可以尝试加载容易冲突的文件：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">classloader --classLoaderClass org.springframework.boot.loader.LaunchedURLClassLoader -r logback.xml</span><br></pre></td></tr></table></figure>\n\n\n\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">classloader --classLoaderClass org.springframework.boot.loader.LaunchedURLClassLoader -r log4j.properties</span><br></pre></td></tr></table></figure>\n\n\n\n<h2><span id=\"更多信息\">更多信息</span></h2><p>通过本教程基本掌握了Arthas排查logger冲突问题。如果有更多的技巧或者使用疑问，欢迎在Issue里提出。</p>\n<ul>\n<li>Issues: <a href=\"https://github.com/alibaba/arthas/issues\">https://github.com/alibaba/arthas/issues</a></li>\n<li>文档： <a href=\"https://arthas.aliyun.com/doc\">https://arthas.aliyun.com/doc</a></li>\n</ul>\n<p>如果您在使用Arthas，请让我们知道。您的使用对我们非常重要：<a href=\"https://github.com/alibaba/arthas/issues/111\">查看</a></p>\n<p>文章拷贝来源：<a href=\"https://start.aliyun.com/course?spm=a2ck6.17690074.0.0.28bc2e7dHTphXs&amp;id=PaiFAkJM\">https://start.aliyun.com/course?spm=a2ck6.17690074.0.0.28bc2e7dHTphXs&amp;id=PaiFAkJM</a></p>\n","site":{"data":{}},"excerpt":"","more":"<!-- toc -->\n\n<ul>\n<li><a href=\"#start-demo\">Start demo</a></li>\n<li><a href=\"#start-arthas-boot\">Start arthas-boot</a></li>\n<li><a href=\"#%E6%8E%92%E6%9F%A5logger%E5%86%B2%E7%AA%81%E9%97%AE%E9%A2%98\">排查logger冲突问题</a><ul>\n<li><a href=\"#%E6%9F%A5%E6%89%BEusercontroller%E7%9A%84classloader\">查找UserController的ClassLoader</a></li>\n<li><a href=\"#%E7%A1%AE%E8%AE%A4%E5%BA%94%E7%94%A8%E4%BD%BF%E7%94%A8%E7%9A%84logger%E7%B3%BB%E7%BB%9F\">确认应用使用的logger系统</a></li>\n<li><a href=\"#%E8%8E%B7%E5%8F%96logback%E5%AE%9E%E9%99%85%E5%8A%A0%E8%BD%BD%E7%9A%84%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6\">获取logback实际加载的配置文件</a></li>\n<li><a href=\"#%E4%BD%BF%E7%94%A8classloader%E5%91%BD%E4%BB%A4%E6%9F%A5%E6%89%BE%E5%8F%AF%E8%83%BD%E5%AD%98%E5%9C%A8%E7%9A%84logger%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6\">使用classloader命令查找可能存在的logger配置文件</a></li>\n</ul>\n</li>\n<li><a href=\"#%E6%9B%B4%E5%A4%9A%E4%BF%A1%E6%81%AF\">更多信息</a></li>\n</ul>\n<!-- tocstop -->\n\n<p><img src=\"/jlynet.github.io/2021/08/07/Java%E8%AF%8A%E6%96%AD%E5%B7%A5%E5%85%B7Arthas%E6%9C%80%E4%BD%B3%E5%AE%9E%E8%B7%B5/Arthas%E6%8E%92%E6%9F%A5logger%E5%86%B2%E7%AA%81%E9%97%AE%E9%A2%98%E6%A1%88%E4%BE%8B/arthas.png\" alt=\"Arthas\"></p>\n<p><code>Arthas</code> 是Alibaba开源的Java诊断工具，深受开发者喜爱。在线排查问题，无需重启；动态跟踪Java代码；实时监控JVM状态。</p>\n<p><code>Arthas</code> 支持JDK 6+，支持Linux/Mac/Windows，采用命令行交互模式，同时提供丰富的 <code>Tab</code> 自动补全功能，进一步方便进行问题的定位和诊断。</p>\n<p>当你遇到以下类似问题而束手无策时，Arthas可以帮助你解决：</p>\n<ul>\n<li>这个类从哪个 jar 包加载的？为什么会报各种类相关的 Exception？</li>\n<li>我改的代码为什么没有执行到？难道是我没 commit？分支搞错了？</li>\n<li>遇到问题无法在线上 debug，难道只能通过加日志再重新发布吗？</li>\n<li>线上遇到某个用户的数据处理有问题，但线上同样无法 debug，线下无法重现！</li>\n<li>是否有一个全局视角来查看系统的运行状况？</li>\n<li>有什么办法可以监控到JVM的实时运行状态？</li>\n<li>怎么快速定位应用的热点，生成火焰图？</li>\n</ul>\n<p>本教程会以一个普通的Spring Boot应用为例，演示排查logger冲突问题。</p>\n<ul>\n<li>Github: <a href=\"https://github.com/alibaba/arthas\">https://github.com/alibaba/arthas</a></li>\n<li>文档: <a href=\"https://arthas.aliyun.com/doc/\">https://arthas.aliyun.com/doc/</a></li>\n</ul>\n<h2 id=\"Start-demo\"><a href=\"#Start-demo\" class=\"headerlink\" title=\"Start demo\"></a>Start demo</h2><p>下载<code>demo-arthas-spring-boot.jar</code>，再用<code>java -jar</code>命令启动：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wget https://code.aliyun.com/middleware-container/handsonLabExternedFiles/raw/master/demo-arthas-spring-boot.jar;java -jar demo-arthas-spring-boot.jar</span><br></pre></td></tr></table></figure>\n\n\n\n<p><code>demo-arthas-spring-boot</code>是一个很简单的spring boot应用，源代码：<a href=\"https://github.com/hengyunabc/spring-boot-inside/tree/master/demo-arthas-spring-boot\">查看</a></p>\n<p>启动之后，可以访问61000端口： 点击查看</p>\n<p><img src=\"/jlynet.github.io/2021/08/07/Java%E8%AF%8A%E6%96%AD%E5%B7%A5%E5%85%B7Arthas%E6%9C%80%E4%BD%B3%E5%AE%9E%E8%B7%B5/Arthas%E6%8E%92%E6%9F%A5logger%E5%86%B2%E7%AA%81%E9%97%AE%E9%A2%98%E6%A1%88%E4%BE%8B/O1CN010Qbzcz1ctPSWSZI6L_!!6000000003658-2-tps-333-182.png\" alt=\"Demo Web\"></p>\n<h2 id=\"Start-arthas-boot\"><a href=\"#Start-arthas-boot\" class=\"headerlink\" title=\"Start arthas-boot\"></a>Start arthas-boot</h2><p>在新的<code>Terminal 2</code>里，下载<code>arthas-boot.jar</code>，再用<code>java -jar</code>命令启动：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wget https://arthas.aliyun.com/arthas-boot.jar;java -jar arthas-boot.jar</span><br></pre></td></tr></table></figure>\n\n\n\n<p><code>arthas-boot</code>是<code>Arthas</code>的启动程序，它启动后，会列出所有的Java进程，用户可以选择需要诊断的目标进程。</p>\n<p>选择第一个进程，输入 <code>1</code> ，再<code>Enter/回车</code>：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1</span><br></pre></td></tr></table></figure>\n\n\n\n<p>Attach成功之后，会打印Arthas LOGO。输入 <code>help</code> 可以获取到更多的帮助信息。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">help</span></span><br></pre></td></tr></table></figure>\n\n\n\n<p><img src=\"/jlynet.github.io/2021/08/07/Java%E8%AF%8A%E6%96%AD%E5%B7%A5%E5%85%B7Arthas%E6%9C%80%E4%BD%B3%E5%AE%9E%E8%B7%B5/Arthas%E6%8E%92%E6%9F%A5logger%E5%86%B2%E7%AA%81%E9%97%AE%E9%A2%98%E6%A1%88%E4%BE%8B/O1CN01HzatXZ1RgccrlT90M_!!6000000002141-2-tps-529-244.png\" alt=\"Arthas Boot\"></p>\n<h2 id=\"排查logger冲突问题\"><a href=\"#排查logger冲突问题\" class=\"headerlink\" title=\"排查logger冲突问题\"></a>排查logger冲突问题</h2><p>在这个案例里，展示排查logger冲突的方法。</p>\n<h4 id=\"查找UserController的ClassLoader\"><a href=\"#查找UserController的ClassLoader\" class=\"headerlink\" title=\"查找UserController的ClassLoader\"></a>查找UserController的ClassLoader</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sc -d com.example.demo.arthas.user.UserController | grep classLoaderHash</span><br></pre></td></tr></table></figure>\n\n\n\n<figure class=\"highlight console\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> sc -d com.example.demo.arthas.user.UserController | grep classLoaderHash</span></span><br><span class=\"line\"> classLoaderHash   1be6f5c3</span><br></pre></td></tr></table></figure>\n\n<p>注意hashcode是变化的，需要先查看当前的ClassLoader信息，提取对应ClassLoader的hashcode。</p>\n<p>如果你使用<code>-c</code>，你需要手动输入hashcode：<code>-c &lt;hashcode&gt;</code></p>\n<figure class=\"highlight console\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> ognl -c 1be6f5c3 @com.example.demo.arthas.user.UserController@logger</span></span><br></pre></td></tr></table></figure>\n\n<p>对于只有唯一实例的ClassLoader可以通过<code>--classLoaderClass</code>指定class name，使用起来更加方便：</p>\n<figure class=\"highlight console\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> ognl --classLoaderClass org.springframework.boot.loader.LaunchedURLClassLoader  @org.springframework.boot.SpringApplication@logger</span></span><br><span class=\"line\">@Slf4jLocationAwareLog[</span><br><span class=\"line\">    FQCN=@String[org.apache.commons.logging.LogAdapter$Slf4jLocationAwareLog],</span><br><span class=\"line\">    name=@String[org.springframework.boot.SpringApplication],</span><br><span class=\"line\">    logger=@Logger[Logger[org.springframework.boot.SpringApplication]],</span><br><span class=\"line\">]</span><br></pre></td></tr></table></figure>\n\n<p><code>--classLoaderClass</code> 的值是ClassLoader的类名，只有匹配到唯一的ClassLoader实例时才能工作，目的是方便输入通用命令，而<code>-c &lt;hashcode&gt;</code>是动态变化的。</p>\n<h4 id=\"确认应用使用的logger系统\"><a href=\"#确认应用使用的logger系统\" class=\"headerlink\" title=\"确认应用使用的logger系统\"></a>确认应用使用的logger系统</h4><p>以<code>UserController</code>为例，它使用的是slf4j api，但实际使用到的logger系统是logback。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ognl --classLoaderClass org.springframework.boot.loader.LaunchedURLClassLoader <span class=\"string\">&#x27;@com.example.demo.arthas.user.UserController@logger&#x27;</span></span><br></pre></td></tr></table></figure>\n\n\n\n<figure class=\"highlight console\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> ognl --classLoaderClass org.springframework.boot.loader.LaunchedURLClassLoader <span class=\"string\">&#x27;@com.example.demo.arthas.user.UserController@logger&#x27;</span></span></span><br><span class=\"line\">@Logger[</span><br><span class=\"line\">    serialVersionUID=@Long[5454405123156820674],</span><br><span class=\"line\">    FQCN=@String[ch.qos.logback.classic.Logger],</span><br><span class=\"line\">    name=@String[com.example.demo.arthas.user.UserController],</span><br><span class=\"line\">    level=null,</span><br><span class=\"line\">    effectiveLevelInt=@Integer[20000],</span><br><span class=\"line\">    parent=@Logger[Logger[com.example.demo.arthas.user]],</span><br><span class=\"line\">    childrenList=null,</span><br><span class=\"line\">    aai=null,</span><br><span class=\"line\">    additive=@Boolean[true],</span><br><span class=\"line\">    loggerContext=@LoggerContext[ch.qos.logback.classic.LoggerContext[default]],</span><br><span class=\"line\">]</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"获取logback实际加载的配置文件\"><a href=\"#获取logback实际加载的配置文件\" class=\"headerlink\" title=\"获取logback实际加载的配置文件\"></a>获取logback实际加载的配置文件</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ognl --classLoaderClass org.springframework.boot.loader.LaunchedURLClassLoader <span class=\"string\">&#x27;#map1=@org.slf4j.LoggerFactory@getLogger(&quot;root&quot;).loggerContext.objectMap, #map1.get(&quot;CONFIGURATION_WATCH_LIST&quot;)&#x27;</span></span><br></pre></td></tr></table></figure>\n\n\n\n<h4 id=\"使用classloader命令查找可能存在的logger配置文件\"><a href=\"#使用classloader命令查找可能存在的logger配置文件\" class=\"headerlink\" title=\"使用classloader命令查找可能存在的logger配置文件\"></a>使用classloader命令查找可能存在的logger配置文件</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">classloader --classLoaderClass org.springframework.boot.loader.LaunchedURLClassLoader -r logback-spring.xml</span><br></pre></td></tr></table></figure>\n\n\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ classloader --classLoaderClass org.springframework.boot.loader.LaunchedURLClassLoader -r logback-spring.xml</span><br><span class=\"line\"> jar:file:/Users/hengyunabc/code/java/spring-boot-inside/demo-arthas-spring-boot/target/demo-arthas-spring-boot-0.0.1-SNAPSHOT.jar!/BOOT-INF/classes!/logback-spring.xml</span><br><span class=\"line\"></span><br><span class=\"line\">Affect(row-cnt:1) cost in 13 ms.</span><br></pre></td></tr></table></figure>\n\n\n\n<p>可以知道加载的配置的具体来源。</p>\n<p>可以尝试加载容易冲突的文件：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">classloader --classLoaderClass org.springframework.boot.loader.LaunchedURLClassLoader -r logback.xml</span><br></pre></td></tr></table></figure>\n\n\n\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">classloader --classLoaderClass org.springframework.boot.loader.LaunchedURLClassLoader -r log4j.properties</span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"更多信息\"><a href=\"#更多信息\" class=\"headerlink\" title=\"更多信息\"></a>更多信息</h2><p>通过本教程基本掌握了Arthas排查logger冲突问题。如果有更多的技巧或者使用疑问，欢迎在Issue里提出。</p>\n<ul>\n<li>Issues: <a href=\"https://github.com/alibaba/arthas/issues\">https://github.com/alibaba/arthas/issues</a></li>\n<li>文档： <a href=\"https://arthas.aliyun.com/doc\">https://arthas.aliyun.com/doc</a></li>\n</ul>\n<p>如果您在使用Arthas，请让我们知道。您的使用对我们非常重要：<a href=\"https://github.com/alibaba/arthas/issues/111\">查看</a></p>\n<p>文章拷贝来源：<a href=\"https://start.aliyun.com/course?spm=a2ck6.17690074.0.0.28bc2e7dHTphXs&amp;id=PaiFAkJM\">https://start.aliyun.com/course?spm=a2ck6.17690074.0.0.28bc2e7dHTphXs&amp;id=PaiFAkJM</a></p>\n"},{"title":"Arthas 排查函数调用异常 案例","date":"2021-08-07T00:35:39.000Z","_content":"\n<!-- toc -->\n\n![Arthas](arthas.png)\n\n`Arthas` 是Alibaba开源的Java诊断工具，深受开发者喜爱。在线排查问题，无需重启；动态跟踪Java代码；实时监控JVM状态。\n\n`Arthas` 支持JDK 6+，支持Linux/Mac/Windows，采用命令行交互模式，同时提供丰富的 `Tab` 自动补全功能，进一步方便进行问题的定位和诊断。\n\n当你遇到以下类似问题而束手无策时，Arthas可以帮助你解决：\n\n- 这个类从哪个 jar 包加载的？为什么会报各种类相关的 Exception？\n- 我改的代码为什么没有执行到？难道是我没 commit？分支搞错了？\n- 遇到问题无法在线上 debug，难道只能通过加日志再重新发布吗？\n- 线上遇到某个用户的数据处理有问题，但线上同样无法 debug，线下无法重现！\n- 是否有一个全局视角来查看系统的运行状况？\n- 有什么办法可以监控到JVM的实时运行状态？\n- 怎么快速定位应用的热点，生成火焰图？\n\n本教程会以一个普通的Spring Boot应用为例，演示排查函数调用异常。\n\n- Github: https://github.com/alibaba/arthas\n- 文档: https://arthas.aliyun.com/doc/\n\n## Start demo\n\n下载`demo-arthas-spring-boot.jar`，再用`java -jar`命令启动：\n\n```bash\nwget https://code.aliyun.com/middleware-container/handsonLabExternedFiles/raw/master/demo-arthas-spring-boot.jar;java -jar demo-arthas-spring-boot.jar\n```\n\n\n\n`demo-arthas-spring-boot`是一个很简单的spring boot应用，源代码：[查看](https://github.com/hengyunabc/spring-boot-inside/tree/master/demo-arthas-spring-boot)\n\n启动之后，可以访问61000端口： 点击查看\n\n![Demo Web](O1CN010Qbzcz1ctPSWSZI6L_!!6000000003658-2-tps-333-182.png)\n\n## Start arthas-boot\n\n在新的`Terminal 2`里，下载`arthas-boot.jar`，再用`java -jar`命令启动：\n\n```bash\nwget https://arthas.aliyun.com/arthas-boot.jar;java -jar arthas-boot.jar\n```\n\n\n\n`arthas-boot`是`Arthas`的启动程序，它启动后，会列出所有的Java进程，用户可以选择需要诊断的目标进程。\n\n选择第一个进程，输入 `1` ，再`Enter/回车`：\n\n```bash\n1\n```\n\n\n\nAttach成功之后，会打印Arthas LOGO。输入 `help` 可以获取到更多的帮助信息。\n\n```bash\nhelp\n```\n\n\n\n![Arthas Boot](O1CN01HzatXZ1RgccrlT90M_!!6000000002141-2-tps-529-244.png)\n\n## 排查函数调用异常\n\n#### 现象\n\n目前，访问 http://localhost:61000/user/0 ，会返回500异常：\n\n```bash\ncurl http://localhost:61000/user/0\n```\n\n\n\n```\n{\"timestamp\":1550223186170,\"status\":500,\"error\":\"Internal Server Error\",\"exception\":\"java.lang.IllegalArgumentException\",\"message\":\"id < 1\",\"path\":\"/user/0\"}\n```\n\n\n\n但请求的具体参数，异常栈是什么呢？\n\n#### 查看UserController的 参数/异常\n\n在Arthas里执行：\n\n```bash\nwatch com.example.demo.arthas.user.UserController * '{params, throwExp}'\n```\n\n\n\n1. 第一个参数是类名，支持通配\n2. 第二个参数是函数名，支持通配 访问 `curl http://localhost:61000/user/0` ,`watch`命令会打印调用的参数和异常\n\n```bash\ncurl http://localhost:61000/user/0\n```\n\n\n\n```console\n$ watch com.example.demo.arthas.user.UserController * '{params, throwExp}'\nPress Q or Ctrl+C to abort.\nAffect(class-cnt:1 , method-cnt:2) cost in 53 ms.\nts=2019-02-15 01:35:25; [cost=0.996655ms] result=@ArrayList[\n    @Object[][isEmpty=false;size=1],\n    @IllegalArgumentException[java.lang.IllegalArgumentException: id < 1],\n]\n```\n\n可以看到实际抛出的异常是`IllegalArgumentException`。\n\n可以输入 `q` 或者 `Ctrl+C` 退出watch命令。\n\n```bash\nq\n```\n\n\n\n如果想把获取到的结果展开，可以用`-x`参数：\n\n```bash\nwatch com.example.demo.arthas.user.UserController * '{params, throwExp}' -x 2\n```\n\n\n\n```console\n$ watch com.example.demo.arthas.user.UserController * '{params, throwExp}' -x 2\nPress Q or Ctrl+C to abort.\nAffect(class count: 1 , method count: 2) cost in 190 ms, listenerId: 1\nts=2020-08-13 05:22:45; [cost=4.805432ms] result=@ArrayList[\n    @Object[][\n        @Integer[0],\n    ],\n    java.lang.IllegalArgumentException: id < 1\n        at com.example.demo.arthas.user.UserController.findUserById(UserController.java:19)\n        at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n        at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n        at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n    ...\n,\n]\n```\n\n#### 返回值表达式\n\n在上面的例子里，第三个参数是`返回值表达式`，它实际上是一个`ognl`表达式，它支持一些内置对象：\n\n- loader\n- clazz\n- method\n- target\n- params\n- returnObj\n- throwExp\n- isBefore\n- isThrow\n- isReturn\n\n你可以利用这些内置对象来组成不同的表达式。比如返回一个数组：\n\n```bash\nwatch com.example.demo.arthas.user.UserController * '{params[0], target, returnObj}'\n```\n\n\n\n更多参考： https://arthas.aliyun.com/doc/advice-class.html\n\n#### 条件表达式\n\n`watch`命令支持在第4个参数里写条件表达式，比如：\n\n```bash\nwatch com.example.demo.arthas.user.UserController * returnObj 'params[0] > 100'\n```\n\n\n\n当访问 user/1 时，`watch`命令没有输出\n\n当访问 user/101 时，`watch`会打印出结果。\n\n```console\n$ watch com.example.demo.arthas.user.UserController * returnObj 'params[0] > 100'\nPress Q or Ctrl+C to abort.\nAffect(class-cnt:1 , method-cnt:2) cost in 47 ms.\nts=2019-02-13 19:42:12; [cost=0.821443ms] result=@User[\n    id=@Integer[101],\n    name=@String[name101],\n]\n```\n\n#### 当异常时捕获\n\n`watch`命令支持`-e`选项，表示只捕获抛出异常时的请求：\n\n```bash\nwatch com.example.demo.arthas.user.UserController * \"{params[0],throwExp}\" -e\n```\n\n\n\n#### 按照耗时进行过滤\n\nwatch命令支持按请求耗时进行过滤，比如：\n\n```bash\nwatch com.example.demo.arthas.user.UserController * '{params, returnObj}' '#cost>200'\n```\n\n\n\n## 更多信息\n\n通过本教程基本掌握了Arthas排查函数调用异常。如果有更多的技巧或者使用疑问，欢迎在Issue里提出。\n\n- Issues: https://github.com/alibaba/arthas/issues\n- 文档： https://arthas.aliyun.com/doc\n\n如果您在使用Arthas，请让我们知道。您的使用对我们非常重要：[查看](https://github.com/alibaba/arthas/issues/111)\n\n文章拷贝来源：https://start.aliyun.com/course?spm=a2ck6.17690074.0.0.28bc2e7dHTphXs&id=PaiFAkJM","source":"_posts/Java诊断工具Arthas最佳实践/Arthas排查函数调用异常案例.md","raw":"---\ntitle: Arthas 排查函数调用异常 案例\ndate: 2021-08-07 08:35:39\ntags: ['Java 诊断工具 Arthas 最佳实践']\n---\n\n<!-- toc -->\n\n![Arthas](arthas.png)\n\n`Arthas` 是Alibaba开源的Java诊断工具，深受开发者喜爱。在线排查问题，无需重启；动态跟踪Java代码；实时监控JVM状态。\n\n`Arthas` 支持JDK 6+，支持Linux/Mac/Windows，采用命令行交互模式，同时提供丰富的 `Tab` 自动补全功能，进一步方便进行问题的定位和诊断。\n\n当你遇到以下类似问题而束手无策时，Arthas可以帮助你解决：\n\n- 这个类从哪个 jar 包加载的？为什么会报各种类相关的 Exception？\n- 我改的代码为什么没有执行到？难道是我没 commit？分支搞错了？\n- 遇到问题无法在线上 debug，难道只能通过加日志再重新发布吗？\n- 线上遇到某个用户的数据处理有问题，但线上同样无法 debug，线下无法重现！\n- 是否有一个全局视角来查看系统的运行状况？\n- 有什么办法可以监控到JVM的实时运行状态？\n- 怎么快速定位应用的热点，生成火焰图？\n\n本教程会以一个普通的Spring Boot应用为例，演示排查函数调用异常。\n\n- Github: https://github.com/alibaba/arthas\n- 文档: https://arthas.aliyun.com/doc/\n\n## Start demo\n\n下载`demo-arthas-spring-boot.jar`，再用`java -jar`命令启动：\n\n```bash\nwget https://code.aliyun.com/middleware-container/handsonLabExternedFiles/raw/master/demo-arthas-spring-boot.jar;java -jar demo-arthas-spring-boot.jar\n```\n\n\n\n`demo-arthas-spring-boot`是一个很简单的spring boot应用，源代码：[查看](https://github.com/hengyunabc/spring-boot-inside/tree/master/demo-arthas-spring-boot)\n\n启动之后，可以访问61000端口： 点击查看\n\n![Demo Web](O1CN010Qbzcz1ctPSWSZI6L_!!6000000003658-2-tps-333-182.png)\n\n## Start arthas-boot\n\n在新的`Terminal 2`里，下载`arthas-boot.jar`，再用`java -jar`命令启动：\n\n```bash\nwget https://arthas.aliyun.com/arthas-boot.jar;java -jar arthas-boot.jar\n```\n\n\n\n`arthas-boot`是`Arthas`的启动程序，它启动后，会列出所有的Java进程，用户可以选择需要诊断的目标进程。\n\n选择第一个进程，输入 `1` ，再`Enter/回车`：\n\n```bash\n1\n```\n\n\n\nAttach成功之后，会打印Arthas LOGO。输入 `help` 可以获取到更多的帮助信息。\n\n```bash\nhelp\n```\n\n\n\n![Arthas Boot](O1CN01HzatXZ1RgccrlT90M_!!6000000002141-2-tps-529-244.png)\n\n## 排查函数调用异常\n\n#### 现象\n\n目前，访问 http://localhost:61000/user/0 ，会返回500异常：\n\n```bash\ncurl http://localhost:61000/user/0\n```\n\n\n\n```\n{\"timestamp\":1550223186170,\"status\":500,\"error\":\"Internal Server Error\",\"exception\":\"java.lang.IllegalArgumentException\",\"message\":\"id < 1\",\"path\":\"/user/0\"}\n```\n\n\n\n但请求的具体参数，异常栈是什么呢？\n\n#### 查看UserController的 参数/异常\n\n在Arthas里执行：\n\n```bash\nwatch com.example.demo.arthas.user.UserController * '{params, throwExp}'\n```\n\n\n\n1. 第一个参数是类名，支持通配\n2. 第二个参数是函数名，支持通配 访问 `curl http://localhost:61000/user/0` ,`watch`命令会打印调用的参数和异常\n\n```bash\ncurl http://localhost:61000/user/0\n```\n\n\n\n```console\n$ watch com.example.demo.arthas.user.UserController * '{params, throwExp}'\nPress Q or Ctrl+C to abort.\nAffect(class-cnt:1 , method-cnt:2) cost in 53 ms.\nts=2019-02-15 01:35:25; [cost=0.996655ms] result=@ArrayList[\n    @Object[][isEmpty=false;size=1],\n    @IllegalArgumentException[java.lang.IllegalArgumentException: id < 1],\n]\n```\n\n可以看到实际抛出的异常是`IllegalArgumentException`。\n\n可以输入 `q` 或者 `Ctrl+C` 退出watch命令。\n\n```bash\nq\n```\n\n\n\n如果想把获取到的结果展开，可以用`-x`参数：\n\n```bash\nwatch com.example.demo.arthas.user.UserController * '{params, throwExp}' -x 2\n```\n\n\n\n```console\n$ watch com.example.demo.arthas.user.UserController * '{params, throwExp}' -x 2\nPress Q or Ctrl+C to abort.\nAffect(class count: 1 , method count: 2) cost in 190 ms, listenerId: 1\nts=2020-08-13 05:22:45; [cost=4.805432ms] result=@ArrayList[\n    @Object[][\n        @Integer[0],\n    ],\n    java.lang.IllegalArgumentException: id < 1\n        at com.example.demo.arthas.user.UserController.findUserById(UserController.java:19)\n        at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n        at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n        at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n    ...\n,\n]\n```\n\n#### 返回值表达式\n\n在上面的例子里，第三个参数是`返回值表达式`，它实际上是一个`ognl`表达式，它支持一些内置对象：\n\n- loader\n- clazz\n- method\n- target\n- params\n- returnObj\n- throwExp\n- isBefore\n- isThrow\n- isReturn\n\n你可以利用这些内置对象来组成不同的表达式。比如返回一个数组：\n\n```bash\nwatch com.example.demo.arthas.user.UserController * '{params[0], target, returnObj}'\n```\n\n\n\n更多参考： https://arthas.aliyun.com/doc/advice-class.html\n\n#### 条件表达式\n\n`watch`命令支持在第4个参数里写条件表达式，比如：\n\n```bash\nwatch com.example.demo.arthas.user.UserController * returnObj 'params[0] > 100'\n```\n\n\n\n当访问 user/1 时，`watch`命令没有输出\n\n当访问 user/101 时，`watch`会打印出结果。\n\n```console\n$ watch com.example.demo.arthas.user.UserController * returnObj 'params[0] > 100'\nPress Q or Ctrl+C to abort.\nAffect(class-cnt:1 , method-cnt:2) cost in 47 ms.\nts=2019-02-13 19:42:12; [cost=0.821443ms] result=@User[\n    id=@Integer[101],\n    name=@String[name101],\n]\n```\n\n#### 当异常时捕获\n\n`watch`命令支持`-e`选项，表示只捕获抛出异常时的请求：\n\n```bash\nwatch com.example.demo.arthas.user.UserController * \"{params[0],throwExp}\" -e\n```\n\n\n\n#### 按照耗时进行过滤\n\nwatch命令支持按请求耗时进行过滤，比如：\n\n```bash\nwatch com.example.demo.arthas.user.UserController * '{params, returnObj}' '#cost>200'\n```\n\n\n\n## 更多信息\n\n通过本教程基本掌握了Arthas排查函数调用异常。如果有更多的技巧或者使用疑问，欢迎在Issue里提出。\n\n- Issues: https://github.com/alibaba/arthas/issues\n- 文档： https://arthas.aliyun.com/doc\n\n如果您在使用Arthas，请让我们知道。您的使用对我们非常重要：[查看](https://github.com/alibaba/arthas/issues/111)\n\n文章拷贝来源：https://start.aliyun.com/course?spm=a2ck6.17690074.0.0.28bc2e7dHTphXs&id=PaiFAkJM","slug":"Java诊断工具Arthas最佳实践/Arthas排查函数调用异常案例","published":1,"updated":"2021-08-07T05:33:33.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cks1cgr600013fw5i88wn5nxd","content":"<!-- toc -->\n\n<ul>\n<li><a href=\"#start-demo\">Start demo</a></li>\n<li><a href=\"#start-arthas-boot\">Start arthas-boot</a></li>\n<li><a href=\"#%E6%8E%92%E6%9F%A5%E5%87%BD%E6%95%B0%E8%B0%83%E7%94%A8%E5%BC%82%E5%B8%B8\">排查函数调用异常</a><ul>\n<li><a href=\"#%E7%8E%B0%E8%B1%A1\">现象</a></li>\n<li><a href=\"#%E6%9F%A5%E7%9C%8Busercontroller%E7%9A%84-%E5%8F%82%E6%95%B0%E5%BC%82%E5%B8%B8\">查看UserController的 参数/异常</a></li>\n<li><a href=\"#%E8%BF%94%E5%9B%9E%E5%80%BC%E8%A1%A8%E8%BE%BE%E5%BC%8F\">返回值表达式</a></li>\n<li><a href=\"#%E6%9D%A1%E4%BB%B6%E8%A1%A8%E8%BE%BE%E5%BC%8F\">条件表达式</a></li>\n<li><a href=\"#%E5%BD%93%E5%BC%82%E5%B8%B8%E6%97%B6%E6%8D%95%E8%8E%B7\">当异常时捕获</a></li>\n<li><a href=\"#%E6%8C%89%E7%85%A7%E8%80%97%E6%97%B6%E8%BF%9B%E8%A1%8C%E8%BF%87%E6%BB%A4\">按照耗时进行过滤</a></li>\n</ul>\n</li>\n<li><a href=\"#%E6%9B%B4%E5%A4%9A%E4%BF%A1%E6%81%AF\">更多信息</a></li>\n</ul>\n<!-- tocstop -->\n\n<p><img src=\"/jlynet.github.io/2021/08/07/Java%E8%AF%8A%E6%96%AD%E5%B7%A5%E5%85%B7Arthas%E6%9C%80%E4%BD%B3%E5%AE%9E%E8%B7%B5/Arthas%E6%8E%92%E6%9F%A5%E5%87%BD%E6%95%B0%E8%B0%83%E7%94%A8%E5%BC%82%E5%B8%B8%E6%A1%88%E4%BE%8B/arthas.png\" alt=\"Arthas\"></p>\n<p><code>Arthas</code> 是Alibaba开源的Java诊断工具，深受开发者喜爱。在线排查问题，无需重启；动态跟踪Java代码；实时监控JVM状态。</p>\n<p><code>Arthas</code> 支持JDK 6+，支持Linux/Mac/Windows，采用命令行交互模式，同时提供丰富的 <code>Tab</code> 自动补全功能，进一步方便进行问题的定位和诊断。</p>\n<p>当你遇到以下类似问题而束手无策时，Arthas可以帮助你解决：</p>\n<ul>\n<li>这个类从哪个 jar 包加载的？为什么会报各种类相关的 Exception？</li>\n<li>我改的代码为什么没有执行到？难道是我没 commit？分支搞错了？</li>\n<li>遇到问题无法在线上 debug，难道只能通过加日志再重新发布吗？</li>\n<li>线上遇到某个用户的数据处理有问题，但线上同样无法 debug，线下无法重现！</li>\n<li>是否有一个全局视角来查看系统的运行状况？</li>\n<li>有什么办法可以监控到JVM的实时运行状态？</li>\n<li>怎么快速定位应用的热点，生成火焰图？</li>\n</ul>\n<p>本教程会以一个普通的Spring Boot应用为例，演示排查函数调用异常。</p>\n<ul>\n<li>Github: <a href=\"https://github.com/alibaba/arthas\">https://github.com/alibaba/arthas</a></li>\n<li>文档: <a href=\"https://arthas.aliyun.com/doc/\">https://arthas.aliyun.com/doc/</a></li>\n</ul>\n<h2><span id=\"start-demo\">Start demo</span></h2><p>下载<code>demo-arthas-spring-boot.jar</code>，再用<code>java -jar</code>命令启动：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wget https://code.aliyun.com/middleware-container/handsonLabExternedFiles/raw/master/demo-arthas-spring-boot.jar;java -jar demo-arthas-spring-boot.jar</span><br></pre></td></tr></table></figure>\n\n\n\n<p><code>demo-arthas-spring-boot</code>是一个很简单的spring boot应用，源代码：<a href=\"https://github.com/hengyunabc/spring-boot-inside/tree/master/demo-arthas-spring-boot\">查看</a></p>\n<p>启动之后，可以访问61000端口： 点击查看</p>\n<p><img src=\"/jlynet.github.io/2021/08/07/Java%E8%AF%8A%E6%96%AD%E5%B7%A5%E5%85%B7Arthas%E6%9C%80%E4%BD%B3%E5%AE%9E%E8%B7%B5/Arthas%E6%8E%92%E6%9F%A5%E5%87%BD%E6%95%B0%E8%B0%83%E7%94%A8%E5%BC%82%E5%B8%B8%E6%A1%88%E4%BE%8B/O1CN010Qbzcz1ctPSWSZI6L_!!6000000003658-2-tps-333-182.png\" alt=\"Demo Web\"></p>\n<h2><span id=\"start-arthas-boot\">Start arthas-boot</span></h2><p>在新的<code>Terminal 2</code>里，下载<code>arthas-boot.jar</code>，再用<code>java -jar</code>命令启动：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wget https://arthas.aliyun.com/arthas-boot.jar;java -jar arthas-boot.jar</span><br></pre></td></tr></table></figure>\n\n\n\n<p><code>arthas-boot</code>是<code>Arthas</code>的启动程序，它启动后，会列出所有的Java进程，用户可以选择需要诊断的目标进程。</p>\n<p>选择第一个进程，输入 <code>1</code> ，再<code>Enter/回车</code>：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1</span><br></pre></td></tr></table></figure>\n\n\n\n<p>Attach成功之后，会打印Arthas LOGO。输入 <code>help</code> 可以获取到更多的帮助信息。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">help</span></span><br></pre></td></tr></table></figure>\n\n\n\n<p><img src=\"/jlynet.github.io/2021/08/07/Java%E8%AF%8A%E6%96%AD%E5%B7%A5%E5%85%B7Arthas%E6%9C%80%E4%BD%B3%E5%AE%9E%E8%B7%B5/Arthas%E6%8E%92%E6%9F%A5%E5%87%BD%E6%95%B0%E8%B0%83%E7%94%A8%E5%BC%82%E5%B8%B8%E6%A1%88%E4%BE%8B/O1CN01HzatXZ1RgccrlT90M_!!6000000002141-2-tps-529-244.png\" alt=\"Arthas Boot\"></p>\n<h2><span id=\"排查函数调用异常\">排查函数调用异常</span></h2><h4><span id=\"现象\">现象</span></h4><p>目前，访问 <a href=\"http://localhost:61000/user/0\">http://localhost:61000/user/0</a> ，会返回500异常：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">curl http://localhost:61000/user/0</span><br></pre></td></tr></table></figure>\n\n\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;&quot;timestamp&quot;:1550223186170,&quot;status&quot;:500,&quot;error&quot;:&quot;Internal Server Error&quot;,&quot;exception&quot;:&quot;java.lang.IllegalArgumentException&quot;,&quot;message&quot;:&quot;id &lt; 1&quot;,&quot;path&quot;:&quot;/user/0&quot;&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<p>但请求的具体参数，异常栈是什么呢？</p>\n<h4><span id=\"查看usercontroller的-参数异常\">查看UserController的 参数/异常</span></h4><p>在Arthas里执行：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">watch com.example.demo.arthas.user.UserController * <span class=\"string\">&#x27;&#123;params, throwExp&#125;&#x27;</span></span><br></pre></td></tr></table></figure>\n\n\n\n<ol>\n<li>第一个参数是类名，支持通配</li>\n<li>第二个参数是函数名，支持通配 访问 <code>curl http://localhost:61000/user/0</code> ,<code>watch</code>命令会打印调用的参数和异常</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">curl http://localhost:61000/user/0</span><br></pre></td></tr></table></figure>\n\n\n\n<figure class=\"highlight console\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> watch com.example.demo.arthas.user.UserController * <span class=\"string\">&#x27;&#123;params, throwExp&#125;&#x27;</span></span></span><br><span class=\"line\">Press Q or Ctrl+C to abort.</span><br><span class=\"line\">Affect(class-cnt:1 , method-cnt:2) cost in 53 ms.</span><br><span class=\"line\">ts=2019-02-15 01:35:25; [cost=0.996655ms] result=@ArrayList[</span><br><span class=\"line\">    @Object[][isEmpty=false;size=1],</span><br><span class=\"line\">    @IllegalArgumentException[java.lang.IllegalArgumentException: id &lt; 1],</span><br><span class=\"line\">]</span><br></pre></td></tr></table></figure>\n\n<p>可以看到实际抛出的异常是<code>IllegalArgumentException</code>。</p>\n<p>可以输入 <code>q</code> 或者 <code>Ctrl+C</code> 退出watch命令。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">q</span><br></pre></td></tr></table></figure>\n\n\n\n<p>如果想把获取到的结果展开，可以用<code>-x</code>参数：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">watch com.example.demo.arthas.user.UserController * <span class=\"string\">&#x27;&#123;params, throwExp&#125;&#x27;</span> -x 2</span><br></pre></td></tr></table></figure>\n\n\n\n<figure class=\"highlight console\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> watch com.example.demo.arthas.user.UserController * <span class=\"string\">&#x27;&#123;params, throwExp&#125;&#x27;</span> -x 2</span></span><br><span class=\"line\">Press Q or Ctrl+C to abort.</span><br><span class=\"line\">Affect(class count: 1 , method count: 2) cost in 190 ms, listenerId: 1</span><br><span class=\"line\">ts=2020-08-13 05:22:45; [cost=4.805432ms] result=@ArrayList[</span><br><span class=\"line\">    @Object[][</span><br><span class=\"line\">        @Integer[0],</span><br><span class=\"line\">    ],</span><br><span class=\"line\">    java.lang.IllegalArgumentException: id &lt; 1</span><br><span class=\"line\">        at com.example.demo.arthas.user.UserController.findUserById(UserController.java:19)</span><br><span class=\"line\">        at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)</span><br><span class=\"line\">        at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)</span><br><span class=\"line\">        at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)</span><br><span class=\"line\">    ...</span><br><span class=\"line\">,</span><br><span class=\"line\">]</span><br></pre></td></tr></table></figure>\n\n<h4><span id=\"返回值表达式\">返回值表达式</span></h4><p>在上面的例子里，第三个参数是<code>返回值表达式</code>，它实际上是一个<code>ognl</code>表达式，它支持一些内置对象：</p>\n<ul>\n<li>loader</li>\n<li>clazz</li>\n<li>method</li>\n<li>target</li>\n<li>params</li>\n<li>returnObj</li>\n<li>throwExp</li>\n<li>isBefore</li>\n<li>isThrow</li>\n<li>isReturn</li>\n</ul>\n<p>你可以利用这些内置对象来组成不同的表达式。比如返回一个数组：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">watch com.example.demo.arthas.user.UserController * <span class=\"string\">&#x27;&#123;params[0], target, returnObj&#125;&#x27;</span></span><br></pre></td></tr></table></figure>\n\n\n\n<p>更多参考： <a href=\"https://arthas.aliyun.com/doc/advice-class.html\">https://arthas.aliyun.com/doc/advice-class.html</a></p>\n<h4><span id=\"条件表达式\">条件表达式</span></h4><p><code>watch</code>命令支持在第4个参数里写条件表达式，比如：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">watch com.example.demo.arthas.user.UserController * returnObj <span class=\"string\">&#x27;params[0] &gt; 100&#x27;</span></span><br></pre></td></tr></table></figure>\n\n\n\n<p>当访问 user/1 时，<code>watch</code>命令没有输出</p>\n<p>当访问 user/101 时，<code>watch</code>会打印出结果。</p>\n<figure class=\"highlight console\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> watch com.example.demo.arthas.user.UserController * returnObj <span class=\"string\">&#x27;params[0] &gt; 100&#x27;</span></span></span><br><span class=\"line\">Press Q or Ctrl+C to abort.</span><br><span class=\"line\">Affect(class-cnt:1 , method-cnt:2) cost in 47 ms.</span><br><span class=\"line\">ts=2019-02-13 19:42:12; [cost=0.821443ms] result=@User[</span><br><span class=\"line\">    id=@Integer[101],</span><br><span class=\"line\">    name=@String[name101],</span><br><span class=\"line\">]</span><br></pre></td></tr></table></figure>\n\n<h4><span id=\"当异常时捕获\">当异常时捕获</span></h4><p><code>watch</code>命令支持<code>-e</code>选项，表示只捕获抛出异常时的请求：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">watch com.example.demo.arthas.user.UserController * <span class=\"string\">&quot;&#123;params[0],throwExp&#125;&quot;</span> -e</span><br></pre></td></tr></table></figure>\n\n\n\n<h4><span id=\"按照耗时进行过滤\">按照耗时进行过滤</span></h4><p>watch命令支持按请求耗时进行过滤，比如：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">watch com.example.demo.arthas.user.UserController * <span class=\"string\">&#x27;&#123;params, returnObj&#125;&#x27;</span> <span class=\"string\">&#x27;#cost&gt;200&#x27;</span></span><br></pre></td></tr></table></figure>\n\n\n\n<h2><span id=\"更多信息\">更多信息</span></h2><p>通过本教程基本掌握了Arthas排查函数调用异常。如果有更多的技巧或者使用疑问，欢迎在Issue里提出。</p>\n<ul>\n<li>Issues: <a href=\"https://github.com/alibaba/arthas/issues\">https://github.com/alibaba/arthas/issues</a></li>\n<li>文档： <a href=\"https://arthas.aliyun.com/doc\">https://arthas.aliyun.com/doc</a></li>\n</ul>\n<p>如果您在使用Arthas，请让我们知道。您的使用对我们非常重要：<a href=\"https://github.com/alibaba/arthas/issues/111\">查看</a></p>\n<p>文章拷贝来源：<a href=\"https://start.aliyun.com/course?spm=a2ck6.17690074.0.0.28bc2e7dHTphXs&amp;id=PaiFAkJM\">https://start.aliyun.com/course?spm=a2ck6.17690074.0.0.28bc2e7dHTphXs&amp;id=PaiFAkJM</a></p>\n","site":{"data":{}},"excerpt":"","more":"<!-- toc -->\n\n<ul>\n<li><a href=\"#start-demo\">Start demo</a></li>\n<li><a href=\"#start-arthas-boot\">Start arthas-boot</a></li>\n<li><a href=\"#%E6%8E%92%E6%9F%A5%E5%87%BD%E6%95%B0%E8%B0%83%E7%94%A8%E5%BC%82%E5%B8%B8\">排查函数调用异常</a><ul>\n<li><a href=\"#%E7%8E%B0%E8%B1%A1\">现象</a></li>\n<li><a href=\"#%E6%9F%A5%E7%9C%8Busercontroller%E7%9A%84-%E5%8F%82%E6%95%B0%E5%BC%82%E5%B8%B8\">查看UserController的 参数/异常</a></li>\n<li><a href=\"#%E8%BF%94%E5%9B%9E%E5%80%BC%E8%A1%A8%E8%BE%BE%E5%BC%8F\">返回值表达式</a></li>\n<li><a href=\"#%E6%9D%A1%E4%BB%B6%E8%A1%A8%E8%BE%BE%E5%BC%8F\">条件表达式</a></li>\n<li><a href=\"#%E5%BD%93%E5%BC%82%E5%B8%B8%E6%97%B6%E6%8D%95%E8%8E%B7\">当异常时捕获</a></li>\n<li><a href=\"#%E6%8C%89%E7%85%A7%E8%80%97%E6%97%B6%E8%BF%9B%E8%A1%8C%E8%BF%87%E6%BB%A4\">按照耗时进行过滤</a></li>\n</ul>\n</li>\n<li><a href=\"#%E6%9B%B4%E5%A4%9A%E4%BF%A1%E6%81%AF\">更多信息</a></li>\n</ul>\n<!-- tocstop -->\n\n<p><img src=\"/jlynet.github.io/2021/08/07/Java%E8%AF%8A%E6%96%AD%E5%B7%A5%E5%85%B7Arthas%E6%9C%80%E4%BD%B3%E5%AE%9E%E8%B7%B5/Arthas%E6%8E%92%E6%9F%A5%E5%87%BD%E6%95%B0%E8%B0%83%E7%94%A8%E5%BC%82%E5%B8%B8%E6%A1%88%E4%BE%8B/arthas.png\" alt=\"Arthas\"></p>\n<p><code>Arthas</code> 是Alibaba开源的Java诊断工具，深受开发者喜爱。在线排查问题，无需重启；动态跟踪Java代码；实时监控JVM状态。</p>\n<p><code>Arthas</code> 支持JDK 6+，支持Linux/Mac/Windows，采用命令行交互模式，同时提供丰富的 <code>Tab</code> 自动补全功能，进一步方便进行问题的定位和诊断。</p>\n<p>当你遇到以下类似问题而束手无策时，Arthas可以帮助你解决：</p>\n<ul>\n<li>这个类从哪个 jar 包加载的？为什么会报各种类相关的 Exception？</li>\n<li>我改的代码为什么没有执行到？难道是我没 commit？分支搞错了？</li>\n<li>遇到问题无法在线上 debug，难道只能通过加日志再重新发布吗？</li>\n<li>线上遇到某个用户的数据处理有问题，但线上同样无法 debug，线下无法重现！</li>\n<li>是否有一个全局视角来查看系统的运行状况？</li>\n<li>有什么办法可以监控到JVM的实时运行状态？</li>\n<li>怎么快速定位应用的热点，生成火焰图？</li>\n</ul>\n<p>本教程会以一个普通的Spring Boot应用为例，演示排查函数调用异常。</p>\n<ul>\n<li>Github: <a href=\"https://github.com/alibaba/arthas\">https://github.com/alibaba/arthas</a></li>\n<li>文档: <a href=\"https://arthas.aliyun.com/doc/\">https://arthas.aliyun.com/doc/</a></li>\n</ul>\n<h2 id=\"Start-demo\"><a href=\"#Start-demo\" class=\"headerlink\" title=\"Start demo\"></a>Start demo</h2><p>下载<code>demo-arthas-spring-boot.jar</code>，再用<code>java -jar</code>命令启动：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wget https://code.aliyun.com/middleware-container/handsonLabExternedFiles/raw/master/demo-arthas-spring-boot.jar;java -jar demo-arthas-spring-boot.jar</span><br></pre></td></tr></table></figure>\n\n\n\n<p><code>demo-arthas-spring-boot</code>是一个很简单的spring boot应用，源代码：<a href=\"https://github.com/hengyunabc/spring-boot-inside/tree/master/demo-arthas-spring-boot\">查看</a></p>\n<p>启动之后，可以访问61000端口： 点击查看</p>\n<p><img src=\"/jlynet.github.io/2021/08/07/Java%E8%AF%8A%E6%96%AD%E5%B7%A5%E5%85%B7Arthas%E6%9C%80%E4%BD%B3%E5%AE%9E%E8%B7%B5/Arthas%E6%8E%92%E6%9F%A5%E5%87%BD%E6%95%B0%E8%B0%83%E7%94%A8%E5%BC%82%E5%B8%B8%E6%A1%88%E4%BE%8B/O1CN010Qbzcz1ctPSWSZI6L_!!6000000003658-2-tps-333-182.png\" alt=\"Demo Web\"></p>\n<h2 id=\"Start-arthas-boot\"><a href=\"#Start-arthas-boot\" class=\"headerlink\" title=\"Start arthas-boot\"></a>Start arthas-boot</h2><p>在新的<code>Terminal 2</code>里，下载<code>arthas-boot.jar</code>，再用<code>java -jar</code>命令启动：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wget https://arthas.aliyun.com/arthas-boot.jar;java -jar arthas-boot.jar</span><br></pre></td></tr></table></figure>\n\n\n\n<p><code>arthas-boot</code>是<code>Arthas</code>的启动程序，它启动后，会列出所有的Java进程，用户可以选择需要诊断的目标进程。</p>\n<p>选择第一个进程，输入 <code>1</code> ，再<code>Enter/回车</code>：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1</span><br></pre></td></tr></table></figure>\n\n\n\n<p>Attach成功之后，会打印Arthas LOGO。输入 <code>help</code> 可以获取到更多的帮助信息。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">help</span></span><br></pre></td></tr></table></figure>\n\n\n\n<p><img src=\"/jlynet.github.io/2021/08/07/Java%E8%AF%8A%E6%96%AD%E5%B7%A5%E5%85%B7Arthas%E6%9C%80%E4%BD%B3%E5%AE%9E%E8%B7%B5/Arthas%E6%8E%92%E6%9F%A5%E5%87%BD%E6%95%B0%E8%B0%83%E7%94%A8%E5%BC%82%E5%B8%B8%E6%A1%88%E4%BE%8B/O1CN01HzatXZ1RgccrlT90M_!!6000000002141-2-tps-529-244.png\" alt=\"Arthas Boot\"></p>\n<h2 id=\"排查函数调用异常\"><a href=\"#排查函数调用异常\" class=\"headerlink\" title=\"排查函数调用异常\"></a>排查函数调用异常</h2><h4 id=\"现象\"><a href=\"#现象\" class=\"headerlink\" title=\"现象\"></a>现象</h4><p>目前，访问 <a href=\"http://localhost:61000/user/0\">http://localhost:61000/user/0</a> ，会返回500异常：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">curl http://localhost:61000/user/0</span><br></pre></td></tr></table></figure>\n\n\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;&quot;timestamp&quot;:1550223186170,&quot;status&quot;:500,&quot;error&quot;:&quot;Internal Server Error&quot;,&quot;exception&quot;:&quot;java.lang.IllegalArgumentException&quot;,&quot;message&quot;:&quot;id &lt; 1&quot;,&quot;path&quot;:&quot;/user/0&quot;&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<p>但请求的具体参数，异常栈是什么呢？</p>\n<h4 id=\"查看UserController的-参数-异常\"><a href=\"#查看UserController的-参数-异常\" class=\"headerlink\" title=\"查看UserController的 参数/异常\"></a>查看UserController的 参数/异常</h4><p>在Arthas里执行：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">watch com.example.demo.arthas.user.UserController * <span class=\"string\">&#x27;&#123;params, throwExp&#125;&#x27;</span></span><br></pre></td></tr></table></figure>\n\n\n\n<ol>\n<li>第一个参数是类名，支持通配</li>\n<li>第二个参数是函数名，支持通配 访问 <code>curl http://localhost:61000/user/0</code> ,<code>watch</code>命令会打印调用的参数和异常</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">curl http://localhost:61000/user/0</span><br></pre></td></tr></table></figure>\n\n\n\n<figure class=\"highlight console\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> watch com.example.demo.arthas.user.UserController * <span class=\"string\">&#x27;&#123;params, throwExp&#125;&#x27;</span></span></span><br><span class=\"line\">Press Q or Ctrl+C to abort.</span><br><span class=\"line\">Affect(class-cnt:1 , method-cnt:2) cost in 53 ms.</span><br><span class=\"line\">ts=2019-02-15 01:35:25; [cost=0.996655ms] result=@ArrayList[</span><br><span class=\"line\">    @Object[][isEmpty=false;size=1],</span><br><span class=\"line\">    @IllegalArgumentException[java.lang.IllegalArgumentException: id &lt; 1],</span><br><span class=\"line\">]</span><br></pre></td></tr></table></figure>\n\n<p>可以看到实际抛出的异常是<code>IllegalArgumentException</code>。</p>\n<p>可以输入 <code>q</code> 或者 <code>Ctrl+C</code> 退出watch命令。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">q</span><br></pre></td></tr></table></figure>\n\n\n\n<p>如果想把获取到的结果展开，可以用<code>-x</code>参数：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">watch com.example.demo.arthas.user.UserController * <span class=\"string\">&#x27;&#123;params, throwExp&#125;&#x27;</span> -x 2</span><br></pre></td></tr></table></figure>\n\n\n\n<figure class=\"highlight console\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> watch com.example.demo.arthas.user.UserController * <span class=\"string\">&#x27;&#123;params, throwExp&#125;&#x27;</span> -x 2</span></span><br><span class=\"line\">Press Q or Ctrl+C to abort.</span><br><span class=\"line\">Affect(class count: 1 , method count: 2) cost in 190 ms, listenerId: 1</span><br><span class=\"line\">ts=2020-08-13 05:22:45; [cost=4.805432ms] result=@ArrayList[</span><br><span class=\"line\">    @Object[][</span><br><span class=\"line\">        @Integer[0],</span><br><span class=\"line\">    ],</span><br><span class=\"line\">    java.lang.IllegalArgumentException: id &lt; 1</span><br><span class=\"line\">        at com.example.demo.arthas.user.UserController.findUserById(UserController.java:19)</span><br><span class=\"line\">        at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)</span><br><span class=\"line\">        at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)</span><br><span class=\"line\">        at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)</span><br><span class=\"line\">    ...</span><br><span class=\"line\">,</span><br><span class=\"line\">]</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"返回值表达式\"><a href=\"#返回值表达式\" class=\"headerlink\" title=\"返回值表达式\"></a>返回值表达式</h4><p>在上面的例子里，第三个参数是<code>返回值表达式</code>，它实际上是一个<code>ognl</code>表达式，它支持一些内置对象：</p>\n<ul>\n<li>loader</li>\n<li>clazz</li>\n<li>method</li>\n<li>target</li>\n<li>params</li>\n<li>returnObj</li>\n<li>throwExp</li>\n<li>isBefore</li>\n<li>isThrow</li>\n<li>isReturn</li>\n</ul>\n<p>你可以利用这些内置对象来组成不同的表达式。比如返回一个数组：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">watch com.example.demo.arthas.user.UserController * <span class=\"string\">&#x27;&#123;params[0], target, returnObj&#125;&#x27;</span></span><br></pre></td></tr></table></figure>\n\n\n\n<p>更多参考： <a href=\"https://arthas.aliyun.com/doc/advice-class.html\">https://arthas.aliyun.com/doc/advice-class.html</a></p>\n<h4 id=\"条件表达式\"><a href=\"#条件表达式\" class=\"headerlink\" title=\"条件表达式\"></a>条件表达式</h4><p><code>watch</code>命令支持在第4个参数里写条件表达式，比如：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">watch com.example.demo.arthas.user.UserController * returnObj <span class=\"string\">&#x27;params[0] &gt; 100&#x27;</span></span><br></pre></td></tr></table></figure>\n\n\n\n<p>当访问 user/1 时，<code>watch</code>命令没有输出</p>\n<p>当访问 user/101 时，<code>watch</code>会打印出结果。</p>\n<figure class=\"highlight console\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> watch com.example.demo.arthas.user.UserController * returnObj <span class=\"string\">&#x27;params[0] &gt; 100&#x27;</span></span></span><br><span class=\"line\">Press Q or Ctrl+C to abort.</span><br><span class=\"line\">Affect(class-cnt:1 , method-cnt:2) cost in 47 ms.</span><br><span class=\"line\">ts=2019-02-13 19:42:12; [cost=0.821443ms] result=@User[</span><br><span class=\"line\">    id=@Integer[101],</span><br><span class=\"line\">    name=@String[name101],</span><br><span class=\"line\">]</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"当异常时捕获\"><a href=\"#当异常时捕获\" class=\"headerlink\" title=\"当异常时捕获\"></a>当异常时捕获</h4><p><code>watch</code>命令支持<code>-e</code>选项，表示只捕获抛出异常时的请求：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">watch com.example.demo.arthas.user.UserController * <span class=\"string\">&quot;&#123;params[0],throwExp&#125;&quot;</span> -e</span><br></pre></td></tr></table></figure>\n\n\n\n<h4 id=\"按照耗时进行过滤\"><a href=\"#按照耗时进行过滤\" class=\"headerlink\" title=\"按照耗时进行过滤\"></a>按照耗时进行过滤</h4><p>watch命令支持按请求耗时进行过滤，比如：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">watch com.example.demo.arthas.user.UserController * <span class=\"string\">&#x27;&#123;params, returnObj&#125;&#x27;</span> <span class=\"string\">&#x27;#cost&gt;200&#x27;</span></span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"更多信息\"><a href=\"#更多信息\" class=\"headerlink\" title=\"更多信息\"></a>更多信息</h2><p>通过本教程基本掌握了Arthas排查函数调用异常。如果有更多的技巧或者使用疑问，欢迎在Issue里提出。</p>\n<ul>\n<li>Issues: <a href=\"https://github.com/alibaba/arthas/issues\">https://github.com/alibaba/arthas/issues</a></li>\n<li>文档： <a href=\"https://arthas.aliyun.com/doc\">https://arthas.aliyun.com/doc</a></li>\n</ul>\n<p>如果您在使用Arthas，请让我们知道。您的使用对我们非常重要：<a href=\"https://github.com/alibaba/arthas/issues/111\">查看</a></p>\n<p>文章拷贝来源：<a href=\"https://start.aliyun.com/course?spm=a2ck6.17690074.0.0.28bc2e7dHTphXs&amp;id=PaiFAkJM\">https://start.aliyun.com/course?spm=a2ck6.17690074.0.0.28bc2e7dHTphXs&amp;id=PaiFAkJM</a></p>\n"},{"title":"Arthas 查找Top N线程 案例","date":"2021-08-07T00:35:38.000Z","_content":"\n<!-- toc -->\n\n![Arthas](arthas.png)\n\n`Arthas` 是Alibaba开源的Java诊断工具，深受开发者喜爱。在线排查问题，无需重启；动态跟踪Java代码；实时监控JVM状态。\n\n`Arthas` 支持JDK 6+，支持Linux/Mac/Windows，采用命令行交互模式，同时提供丰富的 `Tab` 自动补全功能，进一步方便进行问题的定位和诊断。\n\n当你遇到以下类似问题而束手无策时，Arthas可以帮助你解决：\n\n- 这个类从哪个 jar 包加载的？为什么会报各种类相关的 Exception？\n- 我改的代码为什么没有执行到？难道是我没 commit？分支搞错了？\n- 遇到问题无法在线上 debug，难道只能通过加日志再重新发布吗？\n- 线上遇到某个用户的数据处理有问题，但线上同样无法 debug，线下无法重现！\n- 是否有一个全局视角来查看系统的运行状况？\n- 有什么办法可以监控到JVM的实时运行状态？\n- 怎么快速定位应用的热点，生成火焰图？\n\n本教程会以一个简单的应用为例，演示查找Top N线程。\n\n- Github: https://github.com/alibaba/arthas\n- 文档: https://arthas.aliyun.com/doc/\n\n## Arthas demo\n\n下载`arthas-demo.jar`，再用`java -jar`命令启动：\n\n```bash\nwget https://arthas.aliyun.com/arthas-demo.jar;java -jar arthas-demo.jar\n```\n\n\n\n`arthas-demo`是一个很简单的程序，它随机生成整数，再执行因式分解，把结果打印出来。如果生成的随机数是负数，则会打印提示信息。\n\n## Start arthas-boot\n\n在新的`Terminal 2`里，下载`arthas-boot.jar`，再用`java -jar`命令启动：\n\n```bash\nwget https://arthas.aliyun.com/arthas-boot.jar;java -jar arthas-boot.jar\n```\n\n\n\n`arthas-boot`是`Arthas`的启动程序，它启动后，会列出所有的Java进程，用户可以选择需要诊断的目标进程。\n\n选择第一个进程，输入 `1` ，再`Enter/回车`：\n\n```bash\n1\n```\n\n\n\nAttach成功之后，会打印Arthas LOGO。输入 `help` 可以获取到更多的帮助信息。\n\n```bash\nhelp\n```\n\n\n\n![Arthas Boot](O1CN01HzatXZ1RgccrlT90M_!!6000000002141-2-tps-529-244.png)\n\n## 查找Top N线程\n\n#### 查看所有线程信息\n\n```bash\nthread\n```\n\n\n\n#### 查看具体线程的栈\n\n查看线程ID 16的栈：\n\n```bash\nthread 16\n```\n\n\n\n#### 查看CPU使用率top n线程的栈\n\n参数`n`用来指定最忙的前N个线程并打印堆栈\n\n```bash\nthread -n 3\n```\n\n\n\n参数`i`用来指定cpu占比统计的采样间隔，单位为毫秒\n\n查看5秒内的CPU使用率top n线程栈\n\n```bash\nthread -n 3 -i 5000\n```\n\n\n\n#### 查找线程是否有阻塞\n\n参数`b`用来指定找出当前阻塞其他线程的线程\n\n```bash\nthread -b\n```\n\n\n\n## 更多信息\n\n通过本教程基本掌握了Arthas查找Top N线程。如果有更多的技巧或者使用疑问，欢迎在Issue里提出。\n\n- Issues: https://github.com/alibaba/arthas/issues\n- 文档： https://arthas.aliyun.com/doc\n\n如果您在使用Arthas，请让我们知道。您的使用对我们非常重要：[查看](https://github.com/alibaba/arthas/issues/111)\n\n文章拷贝来源：https://start.aliyun.com/course?spm=a2ck6.17690074.0.0.28bc2e7dHTphXs&id=PaiFAkJM","source":"_posts/Java诊断工具Arthas最佳实践/Arthas查找TopN线程案例.md","raw":"---\ntitle: Arthas 查找Top N线程 案例\ndate: 2021-08-07 08:35:38\ntags: ['Java 诊断工具 Arthas 最佳实践']\n---\n\n<!-- toc -->\n\n![Arthas](arthas.png)\n\n`Arthas` 是Alibaba开源的Java诊断工具，深受开发者喜爱。在线排查问题，无需重启；动态跟踪Java代码；实时监控JVM状态。\n\n`Arthas` 支持JDK 6+，支持Linux/Mac/Windows，采用命令行交互模式，同时提供丰富的 `Tab` 自动补全功能，进一步方便进行问题的定位和诊断。\n\n当你遇到以下类似问题而束手无策时，Arthas可以帮助你解决：\n\n- 这个类从哪个 jar 包加载的？为什么会报各种类相关的 Exception？\n- 我改的代码为什么没有执行到？难道是我没 commit？分支搞错了？\n- 遇到问题无法在线上 debug，难道只能通过加日志再重新发布吗？\n- 线上遇到某个用户的数据处理有问题，但线上同样无法 debug，线下无法重现！\n- 是否有一个全局视角来查看系统的运行状况？\n- 有什么办法可以监控到JVM的实时运行状态？\n- 怎么快速定位应用的热点，生成火焰图？\n\n本教程会以一个简单的应用为例，演示查找Top N线程。\n\n- Github: https://github.com/alibaba/arthas\n- 文档: https://arthas.aliyun.com/doc/\n\n## Arthas demo\n\n下载`arthas-demo.jar`，再用`java -jar`命令启动：\n\n```bash\nwget https://arthas.aliyun.com/arthas-demo.jar;java -jar arthas-demo.jar\n```\n\n\n\n`arthas-demo`是一个很简单的程序，它随机生成整数，再执行因式分解，把结果打印出来。如果生成的随机数是负数，则会打印提示信息。\n\n## Start arthas-boot\n\n在新的`Terminal 2`里，下载`arthas-boot.jar`，再用`java -jar`命令启动：\n\n```bash\nwget https://arthas.aliyun.com/arthas-boot.jar;java -jar arthas-boot.jar\n```\n\n\n\n`arthas-boot`是`Arthas`的启动程序，它启动后，会列出所有的Java进程，用户可以选择需要诊断的目标进程。\n\n选择第一个进程，输入 `1` ，再`Enter/回车`：\n\n```bash\n1\n```\n\n\n\nAttach成功之后，会打印Arthas LOGO。输入 `help` 可以获取到更多的帮助信息。\n\n```bash\nhelp\n```\n\n\n\n![Arthas Boot](O1CN01HzatXZ1RgccrlT90M_!!6000000002141-2-tps-529-244.png)\n\n## 查找Top N线程\n\n#### 查看所有线程信息\n\n```bash\nthread\n```\n\n\n\n#### 查看具体线程的栈\n\n查看线程ID 16的栈：\n\n```bash\nthread 16\n```\n\n\n\n#### 查看CPU使用率top n线程的栈\n\n参数`n`用来指定最忙的前N个线程并打印堆栈\n\n```bash\nthread -n 3\n```\n\n\n\n参数`i`用来指定cpu占比统计的采样间隔，单位为毫秒\n\n查看5秒内的CPU使用率top n线程栈\n\n```bash\nthread -n 3 -i 5000\n```\n\n\n\n#### 查找线程是否有阻塞\n\n参数`b`用来指定找出当前阻塞其他线程的线程\n\n```bash\nthread -b\n```\n\n\n\n## 更多信息\n\n通过本教程基本掌握了Arthas查找Top N线程。如果有更多的技巧或者使用疑问，欢迎在Issue里提出。\n\n- Issues: https://github.com/alibaba/arthas/issues\n- 文档： https://arthas.aliyun.com/doc\n\n如果您在使用Arthas，请让我们知道。您的使用对我们非常重要：[查看](https://github.com/alibaba/arthas/issues/111)\n\n文章拷贝来源：https://start.aliyun.com/course?spm=a2ck6.17690074.0.0.28bc2e7dHTphXs&id=PaiFAkJM","slug":"Java诊断工具Arthas最佳实践/Arthas查找TopN线程案例","published":1,"updated":"2021-08-07T05:33:36.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cks1cgr610015fw5i3mqr9hgq","content":"<!-- toc -->\n\n<ul>\n<li><a href=\"#arthas-demo\">Arthas demo</a></li>\n<li><a href=\"#start-arthas-boot\">Start arthas-boot</a></li>\n<li><a href=\"#%E6%9F%A5%E6%89%BEtop-n%E7%BA%BF%E7%A8%8B\">查找Top N线程</a><ul>\n<li><a href=\"#%E6%9F%A5%E7%9C%8B%E6%89%80%E6%9C%89%E7%BA%BF%E7%A8%8B%E4%BF%A1%E6%81%AF\">查看所有线程信息</a></li>\n<li><a href=\"#%E6%9F%A5%E7%9C%8B%E5%85%B7%E4%BD%93%E7%BA%BF%E7%A8%8B%E7%9A%84%E6%A0%88\">查看具体线程的栈</a></li>\n<li><a href=\"#%E6%9F%A5%E7%9C%8Bcpu%E4%BD%BF%E7%94%A8%E7%8E%87top-n%E7%BA%BF%E7%A8%8B%E7%9A%84%E6%A0%88\">查看CPU使用率top n线程的栈</a></li>\n<li><a href=\"#%E6%9F%A5%E6%89%BE%E7%BA%BF%E7%A8%8B%E6%98%AF%E5%90%A6%E6%9C%89%E9%98%BB%E5%A1%9E\">查找线程是否有阻塞</a></li>\n</ul>\n</li>\n<li><a href=\"#%E6%9B%B4%E5%A4%9A%E4%BF%A1%E6%81%AF\">更多信息</a></li>\n</ul>\n<!-- tocstop -->\n\n<p><img src=\"/jlynet.github.io/2021/08/07/Java%E8%AF%8A%E6%96%AD%E5%B7%A5%E5%85%B7Arthas%E6%9C%80%E4%BD%B3%E5%AE%9E%E8%B7%B5/Arthas%E6%9F%A5%E6%89%BETopN%E7%BA%BF%E7%A8%8B%E6%A1%88%E4%BE%8B/arthas.png\" alt=\"Arthas\"></p>\n<p><code>Arthas</code> 是Alibaba开源的Java诊断工具，深受开发者喜爱。在线排查问题，无需重启；动态跟踪Java代码；实时监控JVM状态。</p>\n<p><code>Arthas</code> 支持JDK 6+，支持Linux/Mac/Windows，采用命令行交互模式，同时提供丰富的 <code>Tab</code> 自动补全功能，进一步方便进行问题的定位和诊断。</p>\n<p>当你遇到以下类似问题而束手无策时，Arthas可以帮助你解决：</p>\n<ul>\n<li>这个类从哪个 jar 包加载的？为什么会报各种类相关的 Exception？</li>\n<li>我改的代码为什么没有执行到？难道是我没 commit？分支搞错了？</li>\n<li>遇到问题无法在线上 debug，难道只能通过加日志再重新发布吗？</li>\n<li>线上遇到某个用户的数据处理有问题，但线上同样无法 debug，线下无法重现！</li>\n<li>是否有一个全局视角来查看系统的运行状况？</li>\n<li>有什么办法可以监控到JVM的实时运行状态？</li>\n<li>怎么快速定位应用的热点，生成火焰图？</li>\n</ul>\n<p>本教程会以一个简单的应用为例，演示查找Top N线程。</p>\n<ul>\n<li>Github: <a href=\"https://github.com/alibaba/arthas\">https://github.com/alibaba/arthas</a></li>\n<li>文档: <a href=\"https://arthas.aliyun.com/doc/\">https://arthas.aliyun.com/doc/</a></li>\n</ul>\n<h2><span id=\"arthas-demo\">Arthas demo</span></h2><p>下载<code>arthas-demo.jar</code>，再用<code>java -jar</code>命令启动：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wget https://arthas.aliyun.com/arthas-demo.jar;java -jar arthas-demo.jar</span><br></pre></td></tr></table></figure>\n\n\n\n<p><code>arthas-demo</code>是一个很简单的程序，它随机生成整数，再执行因式分解，把结果打印出来。如果生成的随机数是负数，则会打印提示信息。</p>\n<h2><span id=\"start-arthas-boot\">Start arthas-boot</span></h2><p>在新的<code>Terminal 2</code>里，下载<code>arthas-boot.jar</code>，再用<code>java -jar</code>命令启动：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wget https://arthas.aliyun.com/arthas-boot.jar;java -jar arthas-boot.jar</span><br></pre></td></tr></table></figure>\n\n\n\n<p><code>arthas-boot</code>是<code>Arthas</code>的启动程序，它启动后，会列出所有的Java进程，用户可以选择需要诊断的目标进程。</p>\n<p>选择第一个进程，输入 <code>1</code> ，再<code>Enter/回车</code>：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1</span><br></pre></td></tr></table></figure>\n\n\n\n<p>Attach成功之后，会打印Arthas LOGO。输入 <code>help</code> 可以获取到更多的帮助信息。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">help</span></span><br></pre></td></tr></table></figure>\n\n\n\n<p><img src=\"/jlynet.github.io/2021/08/07/Java%E8%AF%8A%E6%96%AD%E5%B7%A5%E5%85%B7Arthas%E6%9C%80%E4%BD%B3%E5%AE%9E%E8%B7%B5/Arthas%E6%9F%A5%E6%89%BETopN%E7%BA%BF%E7%A8%8B%E6%A1%88%E4%BE%8B/O1CN01HzatXZ1RgccrlT90M_!!6000000002141-2-tps-529-244.png\" alt=\"Arthas Boot\"></p>\n<h2><span id=\"查找top-n线程\">查找Top N线程</span></h2><h4><span id=\"查看所有线程信息\">查看所有线程信息</span></h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">thread</span><br></pre></td></tr></table></figure>\n\n\n\n<h4><span id=\"查看具体线程的栈\">查看具体线程的栈</span></h4><p>查看线程ID 16的栈：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">thread 16</span><br></pre></td></tr></table></figure>\n\n\n\n<h4><span id=\"查看cpu使用率top-n线程的栈\">查看CPU使用率top n线程的栈</span></h4><p>参数<code>n</code>用来指定最忙的前N个线程并打印堆栈</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">thread -n 3</span><br></pre></td></tr></table></figure>\n\n\n\n<p>参数<code>i</code>用来指定cpu占比统计的采样间隔，单位为毫秒</p>\n<p>查看5秒内的CPU使用率top n线程栈</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">thread -n 3 -i 5000</span><br></pre></td></tr></table></figure>\n\n\n\n<h4><span id=\"查找线程是否有阻塞\">查找线程是否有阻塞</span></h4><p>参数<code>b</code>用来指定找出当前阻塞其他线程的线程</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">thread -b</span><br></pre></td></tr></table></figure>\n\n\n\n<h2><span id=\"更多信息\">更多信息</span></h2><p>通过本教程基本掌握了Arthas查找Top N线程。如果有更多的技巧或者使用疑问，欢迎在Issue里提出。</p>\n<ul>\n<li>Issues: <a href=\"https://github.com/alibaba/arthas/issues\">https://github.com/alibaba/arthas/issues</a></li>\n<li>文档： <a href=\"https://arthas.aliyun.com/doc\">https://arthas.aliyun.com/doc</a></li>\n</ul>\n<p>如果您在使用Arthas，请让我们知道。您的使用对我们非常重要：<a href=\"https://github.com/alibaba/arthas/issues/111\">查看</a></p>\n<p>文章拷贝来源：<a href=\"https://start.aliyun.com/course?spm=a2ck6.17690074.0.0.28bc2e7dHTphXs&amp;id=PaiFAkJM\">https://start.aliyun.com/course?spm=a2ck6.17690074.0.0.28bc2e7dHTphXs&amp;id=PaiFAkJM</a></p>\n","site":{"data":{}},"excerpt":"","more":"<!-- toc -->\n\n<ul>\n<li><a href=\"#arthas-demo\">Arthas demo</a></li>\n<li><a href=\"#start-arthas-boot\">Start arthas-boot</a></li>\n<li><a href=\"#%E6%9F%A5%E6%89%BEtop-n%E7%BA%BF%E7%A8%8B\">查找Top N线程</a><ul>\n<li><a href=\"#%E6%9F%A5%E7%9C%8B%E6%89%80%E6%9C%89%E7%BA%BF%E7%A8%8B%E4%BF%A1%E6%81%AF\">查看所有线程信息</a></li>\n<li><a href=\"#%E6%9F%A5%E7%9C%8B%E5%85%B7%E4%BD%93%E7%BA%BF%E7%A8%8B%E7%9A%84%E6%A0%88\">查看具体线程的栈</a></li>\n<li><a href=\"#%E6%9F%A5%E7%9C%8Bcpu%E4%BD%BF%E7%94%A8%E7%8E%87top-n%E7%BA%BF%E7%A8%8B%E7%9A%84%E6%A0%88\">查看CPU使用率top n线程的栈</a></li>\n<li><a href=\"#%E6%9F%A5%E6%89%BE%E7%BA%BF%E7%A8%8B%E6%98%AF%E5%90%A6%E6%9C%89%E9%98%BB%E5%A1%9E\">查找线程是否有阻塞</a></li>\n</ul>\n</li>\n<li><a href=\"#%E6%9B%B4%E5%A4%9A%E4%BF%A1%E6%81%AF\">更多信息</a></li>\n</ul>\n<!-- tocstop -->\n\n<p><img src=\"/jlynet.github.io/2021/08/07/Java%E8%AF%8A%E6%96%AD%E5%B7%A5%E5%85%B7Arthas%E6%9C%80%E4%BD%B3%E5%AE%9E%E8%B7%B5/Arthas%E6%9F%A5%E6%89%BETopN%E7%BA%BF%E7%A8%8B%E6%A1%88%E4%BE%8B/arthas.png\" alt=\"Arthas\"></p>\n<p><code>Arthas</code> 是Alibaba开源的Java诊断工具，深受开发者喜爱。在线排查问题，无需重启；动态跟踪Java代码；实时监控JVM状态。</p>\n<p><code>Arthas</code> 支持JDK 6+，支持Linux/Mac/Windows，采用命令行交互模式，同时提供丰富的 <code>Tab</code> 自动补全功能，进一步方便进行问题的定位和诊断。</p>\n<p>当你遇到以下类似问题而束手无策时，Arthas可以帮助你解决：</p>\n<ul>\n<li>这个类从哪个 jar 包加载的？为什么会报各种类相关的 Exception？</li>\n<li>我改的代码为什么没有执行到？难道是我没 commit？分支搞错了？</li>\n<li>遇到问题无法在线上 debug，难道只能通过加日志再重新发布吗？</li>\n<li>线上遇到某个用户的数据处理有问题，但线上同样无法 debug，线下无法重现！</li>\n<li>是否有一个全局视角来查看系统的运行状况？</li>\n<li>有什么办法可以监控到JVM的实时运行状态？</li>\n<li>怎么快速定位应用的热点，生成火焰图？</li>\n</ul>\n<p>本教程会以一个简单的应用为例，演示查找Top N线程。</p>\n<ul>\n<li>Github: <a href=\"https://github.com/alibaba/arthas\">https://github.com/alibaba/arthas</a></li>\n<li>文档: <a href=\"https://arthas.aliyun.com/doc/\">https://arthas.aliyun.com/doc/</a></li>\n</ul>\n<h2 id=\"Arthas-demo\"><a href=\"#Arthas-demo\" class=\"headerlink\" title=\"Arthas demo\"></a>Arthas demo</h2><p>下载<code>arthas-demo.jar</code>，再用<code>java -jar</code>命令启动：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wget https://arthas.aliyun.com/arthas-demo.jar;java -jar arthas-demo.jar</span><br></pre></td></tr></table></figure>\n\n\n\n<p><code>arthas-demo</code>是一个很简单的程序，它随机生成整数，再执行因式分解，把结果打印出来。如果生成的随机数是负数，则会打印提示信息。</p>\n<h2 id=\"Start-arthas-boot\"><a href=\"#Start-arthas-boot\" class=\"headerlink\" title=\"Start arthas-boot\"></a>Start arthas-boot</h2><p>在新的<code>Terminal 2</code>里，下载<code>arthas-boot.jar</code>，再用<code>java -jar</code>命令启动：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wget https://arthas.aliyun.com/arthas-boot.jar;java -jar arthas-boot.jar</span><br></pre></td></tr></table></figure>\n\n\n\n<p><code>arthas-boot</code>是<code>Arthas</code>的启动程序，它启动后，会列出所有的Java进程，用户可以选择需要诊断的目标进程。</p>\n<p>选择第一个进程，输入 <code>1</code> ，再<code>Enter/回车</code>：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1</span><br></pre></td></tr></table></figure>\n\n\n\n<p>Attach成功之后，会打印Arthas LOGO。输入 <code>help</code> 可以获取到更多的帮助信息。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">help</span></span><br></pre></td></tr></table></figure>\n\n\n\n<p><img src=\"/jlynet.github.io/2021/08/07/Java%E8%AF%8A%E6%96%AD%E5%B7%A5%E5%85%B7Arthas%E6%9C%80%E4%BD%B3%E5%AE%9E%E8%B7%B5/Arthas%E6%9F%A5%E6%89%BETopN%E7%BA%BF%E7%A8%8B%E6%A1%88%E4%BE%8B/O1CN01HzatXZ1RgccrlT90M_!!6000000002141-2-tps-529-244.png\" alt=\"Arthas Boot\"></p>\n<h2 id=\"查找Top-N线程\"><a href=\"#查找Top-N线程\" class=\"headerlink\" title=\"查找Top N线程\"></a>查找Top N线程</h2><h4 id=\"查看所有线程信息\"><a href=\"#查看所有线程信息\" class=\"headerlink\" title=\"查看所有线程信息\"></a>查看所有线程信息</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">thread</span><br></pre></td></tr></table></figure>\n\n\n\n<h4 id=\"查看具体线程的栈\"><a href=\"#查看具体线程的栈\" class=\"headerlink\" title=\"查看具体线程的栈\"></a>查看具体线程的栈</h4><p>查看线程ID 16的栈：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">thread 16</span><br></pre></td></tr></table></figure>\n\n\n\n<h4 id=\"查看CPU使用率top-n线程的栈\"><a href=\"#查看CPU使用率top-n线程的栈\" class=\"headerlink\" title=\"查看CPU使用率top n线程的栈\"></a>查看CPU使用率top n线程的栈</h4><p>参数<code>n</code>用来指定最忙的前N个线程并打印堆栈</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">thread -n 3</span><br></pre></td></tr></table></figure>\n\n\n\n<p>参数<code>i</code>用来指定cpu占比统计的采样间隔，单位为毫秒</p>\n<p>查看5秒内的CPU使用率top n线程栈</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">thread -n 3 -i 5000</span><br></pre></td></tr></table></figure>\n\n\n\n<h4 id=\"查找线程是否有阻塞\"><a href=\"#查找线程是否有阻塞\" class=\"headerlink\" title=\"查找线程是否有阻塞\"></a>查找线程是否有阻塞</h4><p>参数<code>b</code>用来指定找出当前阻塞其他线程的线程</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">thread -b</span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"更多信息\"><a href=\"#更多信息\" class=\"headerlink\" title=\"更多信息\"></a>更多信息</h2><p>通过本教程基本掌握了Arthas查找Top N线程。如果有更多的技巧或者使用疑问，欢迎在Issue里提出。</p>\n<ul>\n<li>Issues: <a href=\"https://github.com/alibaba/arthas/issues\">https://github.com/alibaba/arthas/issues</a></li>\n<li>文档： <a href=\"https://arthas.aliyun.com/doc\">https://arthas.aliyun.com/doc</a></li>\n</ul>\n<p>如果您在使用Arthas，请让我们知道。您的使用对我们非常重要：<a href=\"https://github.com/alibaba/arthas/issues/111\">查看</a></p>\n<p>文章拷贝来源：<a href=\"https://start.aliyun.com/course?spm=a2ck6.17690074.0.0.28bc2e7dHTphXs&amp;id=PaiFAkJM\">https://start.aliyun.com/course?spm=a2ck6.17690074.0.0.28bc2e7dHTphXs&amp;id=PaiFAkJM</a></p>\n"},{"title":"Arthas 热更新代码 案例","date":"2021-08-07T00:35:36.000Z","_content":"\n<!-- toc -->\n\n![Arthas](arthas.png)\n\n`Arthas` 是Alibaba开源的Java诊断工具，深受开发者喜爱。在线排查问题，无需重启；动态跟踪Java代码；实时监控JVM状态。\n\n`Arthas` 支持JDK 6+，支持Linux/Mac/Windows，采用命令行交互模式，同时提供丰富的 `Tab` 自动补全功能，进一步方便进行问题的定位和诊断。\n\n当你遇到以下类似问题而束手无策时，Arthas可以帮助你解决：\n\n- 这个类从哪个 jar 包加载的？为什么会报各种类相关的 Exception？\n- 我改的代码为什么没有执行到？难道是我没 commit？分支搞错了？\n- 遇到问题无法在线上 debug，难道只能通过加日志再重新发布吗？\n- 线上遇到某个用户的数据处理有问题，但线上同样无法 debug，线下无法重现！\n- 是否有一个全局视角来查看系统的运行状况？\n- 有什么办法可以监控到JVM的实时运行状态？\n- 怎么快速定位应用的热点，生成火焰图？\n\n本教程会以一个普通的Spring Boot应用为例，演示热更新代码。\n\n- Github: https://github.com/alibaba/arthas\n- 文档: https://arthas.aliyun.com/doc/\n\n## Start demo\n\n下载`demo-arthas-spring-boot.jar`，再用`java -jar`命令启动：\n\n```bash\nwget https://code.aliyun.com/middleware-container/handsonLabExternedFiles/raw/master/demo-arthas-spring-boot.jar;java -jar demo-arthas-spring-boot.jar\n```\n\n\n\n`demo-arthas-spring-boot`是一个很简单的spring boot应用，源代码：[查看](https://github.com/hengyunabc/spring-boot-inside/tree/master/demo-arthas-spring-boot)\n\n启动之后，可以访问61000端口： 点击查看\n\n![Demo Web](O1CN010Qbzcz1ctPSWSZI6L_!!6000000003658-2-tps-333-182.png)\n\n## Start arthas-boot\n\n在新的`Terminal 2`里，下载`arthas-boot.jar`，再用`java -jar`命令启动：\n\n```bash\nwget https://arthas.aliyun.com/arthas-boot.jar;java -jar arthas-boot.jar\n```\n\n\n\n`arthas-boot`是`Arthas`的启动程序，它启动后，会列出所有的Java进程，用户可以选择需要诊断的目标进程。\n\n选择第一个进程，输入 `1` ，再`Enter/回车`：\n\n```bash\n1\n```\n\n\n\nAttach成功之后，会打印Arthas LOGO。输入 `help` 可以获取到更多的帮助信息。\n\n```bash\nhelp\n```\n\n\n\n![Arthas Boot](O1CN01HzatXZ1RgccrlT90M_!!6000000002141-2-tps-529-244.png)\n\n## 热更新代码\n\n下面介绍通过`jad`/`mc`/`redefine` 命令实现动态更新代码的功能。\n\n目前，访问 http://localhost:61000/user/0 ，会返回500异常：\n\n```bash\ncurl http://localhost:61000/user/0\n```\n\n\n\n```\n{\"timestamp\":1550223186170,\"status\":500,\"error\":\"Internal Server Error\",\"exception\":\"java.lang.IllegalArgumentException\",\"message\":\"id < 1\",\"path\":\"/user/0\"}\n```\n\n\n\n下面通过热更新代码，修改这个逻辑。\n\n#### jad反编译UserController\n\n```bash\njad --source-only com.example.demo.arthas.user.UserController > /tmp/UserController.java\n```\n\n\n\njad反编译的结果保存在 `/tmp/UserController.java`文件里了。\n\n再打开一个`Terminal 3`，然后用vim来编辑`/tmp/UserController.java`：\n\n```bash\nvim /tmp/UserController.java\n```\n\n\n\n比如当 user id 小于1时，也正常返回，不抛出异常：\n\n```java\n    @GetMapping(value={\"/user/{id}\"})\n    public User findUserById(@PathVariable Integer id) {\n        logger.info(\"id: {}\", (Object)id);\n        if (id != null && id < 1) {\n            return new User(id, \"name\" + id);\n            // throw new IllegalArgumentException(\"id < 1\");\n        }\n        return new User(id.intValue(), \"name\" + id);\n    }\n```\n\n\n\n#### sc查找加载UserController的ClassLoader\n\n```bash\nsc -d *UserController | grep classLoaderHash\n```\n\n\n\n```console\n$ sc -d *UserController | grep classLoaderHash\n classLoaderHash   1be6f5c3\n```\n\n可以发现是 spring boot `LaunchedURLClassLoader@1be6f5c3` 加载的。\n\n注意hashcode是变化的，需要先查看当前的ClassLoader信息，提取对应ClassLoader的hashcode。\n\n如果你使用`-c`，你需要手动输入hashcode：`-c <hashcode>`\n\n对于只有唯一实例的ClassLoader可以通过`--classLoaderClass`指定class name，使用起来更加方便.\n\n`--classLoaderClass` 的值是ClassLoader的类名，只有匹配到唯一的ClassLoader实例时才能工作，目的是方便输入通用命令，而`-c <hashcode>`是动态变化的。\n\n#### mc\n\n保存好`/tmp/UserController.java`之后，使用`mc`(Memory Compiler)命令来编译，并且通过`--classLoaderClass`参数指定ClassLoader：\n\n```bash\nmc --classLoaderClass org.springframework.boot.loader.LaunchedURLClassLoader /tmp/UserController.java -d /tmp\n```\n\n\n\n```console\n$ mc --classLoaderClass org.springframework.boot.loader.LaunchedURLClassLoader /tmp/UserController.java -d /tmp\nMemory compiler output:\n/tmp/com/example/demo/arthas/user/UserController.class\nAffect(row-cnt:1) cost in 346 ms\n```\n\n也可以通过`mc -c <classLoaderHash> /tmp/UserController.java -d /tmp`，使用`-c`参数指定ClassLoaderHash:\n\n```console\n$ mc -c 1be6f5c3 /tmp/UserController.java -d /tmp\n```\n\n#### redefine\n\n再使用`redefine`命令重新加载新编译好的`UserController.class`：\n\n```bash\nredefine /tmp/com/example/demo/arthas/user/UserController.class\n```\n\n\n\n```\n$ redefine /tmp/com/example/demo/arthas/user/UserController.class\nredefine success, size: 1\n```\n\n\n\n#### 热修改代码结果\n\n`redefine`成功之后，再次访问 user/0 ，结果是：\n\n```\n{\n  \"id\": 0,\n  \"name\": \"name0\"\n}\n```\n\n\n\n## 更多信息\n\n通过本教程基本掌握了Arthas热更新代码。如果有更多的技巧或者使用疑问，欢迎在Issue里提出。\n\n- Issues: https://github.com/alibaba/arthas/issues\n- 文档： https://arthas.aliyun.com/doc\n\n如果您在使用Arthas，请让我们知道。您的使用对我们非常重要：[查看](https://github.com/alibaba/arthas/issues/111)\n\n文章拷贝来源：https://start.aliyun.com/course?spm=a2ck6.17690074.0.0.28bc2e7dHTphXs&id=PaiFAkJM","source":"_posts/Java诊断工具Arthas最佳实践/Arthas热更新代码案例.md","raw":"---\ntitle: Arthas 热更新代码 案例\ndate: 2021-08-07 08:35:36\ntags: ['Java 诊断工具 Arthas 最佳实践']\n---\n\n<!-- toc -->\n\n![Arthas](arthas.png)\n\n`Arthas` 是Alibaba开源的Java诊断工具，深受开发者喜爱。在线排查问题，无需重启；动态跟踪Java代码；实时监控JVM状态。\n\n`Arthas` 支持JDK 6+，支持Linux/Mac/Windows，采用命令行交互模式，同时提供丰富的 `Tab` 自动补全功能，进一步方便进行问题的定位和诊断。\n\n当你遇到以下类似问题而束手无策时，Arthas可以帮助你解决：\n\n- 这个类从哪个 jar 包加载的？为什么会报各种类相关的 Exception？\n- 我改的代码为什么没有执行到？难道是我没 commit？分支搞错了？\n- 遇到问题无法在线上 debug，难道只能通过加日志再重新发布吗？\n- 线上遇到某个用户的数据处理有问题，但线上同样无法 debug，线下无法重现！\n- 是否有一个全局视角来查看系统的运行状况？\n- 有什么办法可以监控到JVM的实时运行状态？\n- 怎么快速定位应用的热点，生成火焰图？\n\n本教程会以一个普通的Spring Boot应用为例，演示热更新代码。\n\n- Github: https://github.com/alibaba/arthas\n- 文档: https://arthas.aliyun.com/doc/\n\n## Start demo\n\n下载`demo-arthas-spring-boot.jar`，再用`java -jar`命令启动：\n\n```bash\nwget https://code.aliyun.com/middleware-container/handsonLabExternedFiles/raw/master/demo-arthas-spring-boot.jar;java -jar demo-arthas-spring-boot.jar\n```\n\n\n\n`demo-arthas-spring-boot`是一个很简单的spring boot应用，源代码：[查看](https://github.com/hengyunabc/spring-boot-inside/tree/master/demo-arthas-spring-boot)\n\n启动之后，可以访问61000端口： 点击查看\n\n![Demo Web](O1CN010Qbzcz1ctPSWSZI6L_!!6000000003658-2-tps-333-182.png)\n\n## Start arthas-boot\n\n在新的`Terminal 2`里，下载`arthas-boot.jar`，再用`java -jar`命令启动：\n\n```bash\nwget https://arthas.aliyun.com/arthas-boot.jar;java -jar arthas-boot.jar\n```\n\n\n\n`arthas-boot`是`Arthas`的启动程序，它启动后，会列出所有的Java进程，用户可以选择需要诊断的目标进程。\n\n选择第一个进程，输入 `1` ，再`Enter/回车`：\n\n```bash\n1\n```\n\n\n\nAttach成功之后，会打印Arthas LOGO。输入 `help` 可以获取到更多的帮助信息。\n\n```bash\nhelp\n```\n\n\n\n![Arthas Boot](O1CN01HzatXZ1RgccrlT90M_!!6000000002141-2-tps-529-244.png)\n\n## 热更新代码\n\n下面介绍通过`jad`/`mc`/`redefine` 命令实现动态更新代码的功能。\n\n目前，访问 http://localhost:61000/user/0 ，会返回500异常：\n\n```bash\ncurl http://localhost:61000/user/0\n```\n\n\n\n```\n{\"timestamp\":1550223186170,\"status\":500,\"error\":\"Internal Server Error\",\"exception\":\"java.lang.IllegalArgumentException\",\"message\":\"id < 1\",\"path\":\"/user/0\"}\n```\n\n\n\n下面通过热更新代码，修改这个逻辑。\n\n#### jad反编译UserController\n\n```bash\njad --source-only com.example.demo.arthas.user.UserController > /tmp/UserController.java\n```\n\n\n\njad反编译的结果保存在 `/tmp/UserController.java`文件里了。\n\n再打开一个`Terminal 3`，然后用vim来编辑`/tmp/UserController.java`：\n\n```bash\nvim /tmp/UserController.java\n```\n\n\n\n比如当 user id 小于1时，也正常返回，不抛出异常：\n\n```java\n    @GetMapping(value={\"/user/{id}\"})\n    public User findUserById(@PathVariable Integer id) {\n        logger.info(\"id: {}\", (Object)id);\n        if (id != null && id < 1) {\n            return new User(id, \"name\" + id);\n            // throw new IllegalArgumentException(\"id < 1\");\n        }\n        return new User(id.intValue(), \"name\" + id);\n    }\n```\n\n\n\n#### sc查找加载UserController的ClassLoader\n\n```bash\nsc -d *UserController | grep classLoaderHash\n```\n\n\n\n```console\n$ sc -d *UserController | grep classLoaderHash\n classLoaderHash   1be6f5c3\n```\n\n可以发现是 spring boot `LaunchedURLClassLoader@1be6f5c3` 加载的。\n\n注意hashcode是变化的，需要先查看当前的ClassLoader信息，提取对应ClassLoader的hashcode。\n\n如果你使用`-c`，你需要手动输入hashcode：`-c <hashcode>`\n\n对于只有唯一实例的ClassLoader可以通过`--classLoaderClass`指定class name，使用起来更加方便.\n\n`--classLoaderClass` 的值是ClassLoader的类名，只有匹配到唯一的ClassLoader实例时才能工作，目的是方便输入通用命令，而`-c <hashcode>`是动态变化的。\n\n#### mc\n\n保存好`/tmp/UserController.java`之后，使用`mc`(Memory Compiler)命令来编译，并且通过`--classLoaderClass`参数指定ClassLoader：\n\n```bash\nmc --classLoaderClass org.springframework.boot.loader.LaunchedURLClassLoader /tmp/UserController.java -d /tmp\n```\n\n\n\n```console\n$ mc --classLoaderClass org.springframework.boot.loader.LaunchedURLClassLoader /tmp/UserController.java -d /tmp\nMemory compiler output:\n/tmp/com/example/demo/arthas/user/UserController.class\nAffect(row-cnt:1) cost in 346 ms\n```\n\n也可以通过`mc -c <classLoaderHash> /tmp/UserController.java -d /tmp`，使用`-c`参数指定ClassLoaderHash:\n\n```console\n$ mc -c 1be6f5c3 /tmp/UserController.java -d /tmp\n```\n\n#### redefine\n\n再使用`redefine`命令重新加载新编译好的`UserController.class`：\n\n```bash\nredefine /tmp/com/example/demo/arthas/user/UserController.class\n```\n\n\n\n```\n$ redefine /tmp/com/example/demo/arthas/user/UserController.class\nredefine success, size: 1\n```\n\n\n\n#### 热修改代码结果\n\n`redefine`成功之后，再次访问 user/0 ，结果是：\n\n```\n{\n  \"id\": 0,\n  \"name\": \"name0\"\n}\n```\n\n\n\n## 更多信息\n\n通过本教程基本掌握了Arthas热更新代码。如果有更多的技巧或者使用疑问，欢迎在Issue里提出。\n\n- Issues: https://github.com/alibaba/arthas/issues\n- 文档： https://arthas.aliyun.com/doc\n\n如果您在使用Arthas，请让我们知道。您的使用对我们非常重要：[查看](https://github.com/alibaba/arthas/issues/111)\n\n文章拷贝来源：https://start.aliyun.com/course?spm=a2ck6.17690074.0.0.28bc2e7dHTphXs&id=PaiFAkJM","slug":"Java诊断工具Arthas最佳实践/Arthas热更新代码案例","published":1,"updated":"2021-08-07T05:33:42.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cks1cgr630018fw5i90f96ch6","content":"<!-- toc -->\n\n<ul>\n<li><a href=\"#start-demo\">Start demo</a></li>\n<li><a href=\"#start-arthas-boot\">Start arthas-boot</a></li>\n<li><a href=\"#%E7%83%AD%E6%9B%B4%E6%96%B0%E4%BB%A3%E7%A0%81\">热更新代码</a><ul>\n<li><a href=\"#jad%E5%8F%8D%E7%BC%96%E8%AF%91usercontroller\">jad反编译UserController</a></li>\n<li><a href=\"#sc%E6%9F%A5%E6%89%BE%E5%8A%A0%E8%BD%BDusercontroller%E7%9A%84classloader\">sc查找加载UserController的ClassLoader</a></li>\n<li><a href=\"#mc\">mc</a></li>\n<li><a href=\"#redefine\">redefine</a></li>\n<li><a href=\"#%E7%83%AD%E4%BF%AE%E6%94%B9%E4%BB%A3%E7%A0%81%E7%BB%93%E6%9E%9C\">热修改代码结果</a></li>\n</ul>\n</li>\n<li><a href=\"#%E6%9B%B4%E5%A4%9A%E4%BF%A1%E6%81%AF\">更多信息</a></li>\n</ul>\n<!-- tocstop -->\n\n<p><img src=\"/jlynet.github.io/2021/08/07/Java%E8%AF%8A%E6%96%AD%E5%B7%A5%E5%85%B7Arthas%E6%9C%80%E4%BD%B3%E5%AE%9E%E8%B7%B5/Arthas%E7%83%AD%E6%9B%B4%E6%96%B0%E4%BB%A3%E7%A0%81%E6%A1%88%E4%BE%8B/arthas.png\" alt=\"Arthas\"></p>\n<p><code>Arthas</code> 是Alibaba开源的Java诊断工具，深受开发者喜爱。在线排查问题，无需重启；动态跟踪Java代码；实时监控JVM状态。</p>\n<p><code>Arthas</code> 支持JDK 6+，支持Linux/Mac/Windows，采用命令行交互模式，同时提供丰富的 <code>Tab</code> 自动补全功能，进一步方便进行问题的定位和诊断。</p>\n<p>当你遇到以下类似问题而束手无策时，Arthas可以帮助你解决：</p>\n<ul>\n<li>这个类从哪个 jar 包加载的？为什么会报各种类相关的 Exception？</li>\n<li>我改的代码为什么没有执行到？难道是我没 commit？分支搞错了？</li>\n<li>遇到问题无法在线上 debug，难道只能通过加日志再重新发布吗？</li>\n<li>线上遇到某个用户的数据处理有问题，但线上同样无法 debug，线下无法重现！</li>\n<li>是否有一个全局视角来查看系统的运行状况？</li>\n<li>有什么办法可以监控到JVM的实时运行状态？</li>\n<li>怎么快速定位应用的热点，生成火焰图？</li>\n</ul>\n<p>本教程会以一个普通的Spring Boot应用为例，演示热更新代码。</p>\n<ul>\n<li>Github: <a href=\"https://github.com/alibaba/arthas\">https://github.com/alibaba/arthas</a></li>\n<li>文档: <a href=\"https://arthas.aliyun.com/doc/\">https://arthas.aliyun.com/doc/</a></li>\n</ul>\n<h2><span id=\"start-demo\">Start demo</span></h2><p>下载<code>demo-arthas-spring-boot.jar</code>，再用<code>java -jar</code>命令启动：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wget https://code.aliyun.com/middleware-container/handsonLabExternedFiles/raw/master/demo-arthas-spring-boot.jar;java -jar demo-arthas-spring-boot.jar</span><br></pre></td></tr></table></figure>\n\n\n\n<p><code>demo-arthas-spring-boot</code>是一个很简单的spring boot应用，源代码：<a href=\"https://github.com/hengyunabc/spring-boot-inside/tree/master/demo-arthas-spring-boot\">查看</a></p>\n<p>启动之后，可以访问61000端口： 点击查看</p>\n<p><img src=\"/jlynet.github.io/2021/08/07/Java%E8%AF%8A%E6%96%AD%E5%B7%A5%E5%85%B7Arthas%E6%9C%80%E4%BD%B3%E5%AE%9E%E8%B7%B5/Arthas%E7%83%AD%E6%9B%B4%E6%96%B0%E4%BB%A3%E7%A0%81%E6%A1%88%E4%BE%8B/O1CN010Qbzcz1ctPSWSZI6L_!!6000000003658-2-tps-333-182.png\" alt=\"Demo Web\"></p>\n<h2><span id=\"start-arthas-boot\">Start arthas-boot</span></h2><p>在新的<code>Terminal 2</code>里，下载<code>arthas-boot.jar</code>，再用<code>java -jar</code>命令启动：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wget https://arthas.aliyun.com/arthas-boot.jar;java -jar arthas-boot.jar</span><br></pre></td></tr></table></figure>\n\n\n\n<p><code>arthas-boot</code>是<code>Arthas</code>的启动程序，它启动后，会列出所有的Java进程，用户可以选择需要诊断的目标进程。</p>\n<p>选择第一个进程，输入 <code>1</code> ，再<code>Enter/回车</code>：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1</span><br></pre></td></tr></table></figure>\n\n\n\n<p>Attach成功之后，会打印Arthas LOGO。输入 <code>help</code> 可以获取到更多的帮助信息。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">help</span></span><br></pre></td></tr></table></figure>\n\n\n\n<p><img src=\"/jlynet.github.io/2021/08/07/Java%E8%AF%8A%E6%96%AD%E5%B7%A5%E5%85%B7Arthas%E6%9C%80%E4%BD%B3%E5%AE%9E%E8%B7%B5/Arthas%E7%83%AD%E6%9B%B4%E6%96%B0%E4%BB%A3%E7%A0%81%E6%A1%88%E4%BE%8B/O1CN01HzatXZ1RgccrlT90M_!!6000000002141-2-tps-529-244.png\" alt=\"Arthas Boot\"></p>\n<h2><span id=\"热更新代码\">热更新代码</span></h2><p>下面介绍通过<code>jad</code>/<code>mc</code>/<code>redefine</code> 命令实现动态更新代码的功能。</p>\n<p>目前，访问 <a href=\"http://localhost:61000/user/0\">http://localhost:61000/user/0</a> ，会返回500异常：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">curl http://localhost:61000/user/0</span><br></pre></td></tr></table></figure>\n\n\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;&quot;timestamp&quot;:1550223186170,&quot;status&quot;:500,&quot;error&quot;:&quot;Internal Server Error&quot;,&quot;exception&quot;:&quot;java.lang.IllegalArgumentException&quot;,&quot;message&quot;:&quot;id &lt; 1&quot;,&quot;path&quot;:&quot;/user/0&quot;&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<p>下面通过热更新代码，修改这个逻辑。</p>\n<h4><span id=\"jad反编译usercontroller\">jad反编译UserController</span></h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">jad --source-only com.example.demo.arthas.user.UserController &gt; /tmp/UserController.java</span><br></pre></td></tr></table></figure>\n\n\n\n<p>jad反编译的结果保存在 <code>/tmp/UserController.java</code>文件里了。</p>\n<p>再打开一个<code>Terminal 3</code>，然后用vim来编辑<code>/tmp/UserController.java</code>：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vim /tmp/UserController.java</span><br></pre></td></tr></table></figure>\n\n\n\n<p>比如当 user id 小于1时，也正常返回，不抛出异常：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@GetMapping(value=&#123;&quot;/user/&#123;id&#125;&quot;&#125;)</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> User <span class=\"title\">findUserById</span><span class=\"params\">(<span class=\"meta\">@PathVariable</span> Integer id)</span> </span>&#123;</span><br><span class=\"line\">    logger.info(<span class=\"string\">&quot;id: &#123;&#125;&quot;</span>, (Object)id);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (id != <span class=\"keyword\">null</span> &amp;&amp; id &lt; <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> User(id, <span class=\"string\">&quot;name&quot;</span> + id);</span><br><span class=\"line\">        <span class=\"comment\">// throw new IllegalArgumentException(&quot;id &lt; 1&quot;);</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> User(id.intValue(), <span class=\"string\">&quot;name&quot;</span> + id);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<h4><span id=\"sc查找加载usercontroller的classloader\">sc查找加载UserController的ClassLoader</span></h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sc -d *UserController | grep classLoaderHash</span><br></pre></td></tr></table></figure>\n\n\n\n<figure class=\"highlight console\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> sc -d *UserController | grep classLoaderHash</span></span><br><span class=\"line\"> classLoaderHash   1be6f5c3</span><br></pre></td></tr></table></figure>\n\n<p>可以发现是 spring boot <code>LaunchedURLClassLoader@1be6f5c3</code> 加载的。</p>\n<p>注意hashcode是变化的，需要先查看当前的ClassLoader信息，提取对应ClassLoader的hashcode。</p>\n<p>如果你使用<code>-c</code>，你需要手动输入hashcode：<code>-c &lt;hashcode&gt;</code></p>\n<p>对于只有唯一实例的ClassLoader可以通过<code>--classLoaderClass</code>指定class name，使用起来更加方便.</p>\n<p><code>--classLoaderClass</code> 的值是ClassLoader的类名，只有匹配到唯一的ClassLoader实例时才能工作，目的是方便输入通用命令，而<code>-c &lt;hashcode&gt;</code>是动态变化的。</p>\n<h4><span id=\"mc\">mc</span></h4><p>保存好<code>/tmp/UserController.java</code>之后，使用<code>mc</code>(Memory Compiler)命令来编译，并且通过<code>--classLoaderClass</code>参数指定ClassLoader：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mc --classLoaderClass org.springframework.boot.loader.LaunchedURLClassLoader /tmp/UserController.java -d /tmp</span><br></pre></td></tr></table></figure>\n\n\n\n<figure class=\"highlight console\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> mc --classLoaderClass org.springframework.boot.loader.LaunchedURLClassLoader /tmp/UserController.java -d /tmp</span></span><br><span class=\"line\">Memory compiler output:</span><br><span class=\"line\">/tmp/com/example/demo/arthas/user/UserController.class</span><br><span class=\"line\">Affect(row-cnt:1) cost in 346 ms</span><br></pre></td></tr></table></figure>\n\n<p>也可以通过<code>mc -c &lt;classLoaderHash&gt; /tmp/UserController.java -d /tmp</code>，使用<code>-c</code>参数指定ClassLoaderHash:</p>\n<figure class=\"highlight console\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> mc -c 1be6f5c3 /tmp/UserController.java -d /tmp</span></span><br></pre></td></tr></table></figure>\n\n<h4><span id=\"redefine\">redefine</span></h4><p>再使用<code>redefine</code>命令重新加载新编译好的<code>UserController.class</code>：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">redefine /tmp/com/example/demo/arthas/user/UserController.class</span><br></pre></td></tr></table></figure>\n\n\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ redefine /tmp/com/example/demo/arthas/user/UserController.class</span><br><span class=\"line\">redefine success, size: 1</span><br></pre></td></tr></table></figure>\n\n\n\n<h4><span id=\"热修改代码结果\">热修改代码结果</span></h4><p><code>redefine</code>成功之后，再次访问 user/0 ，结果是：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  &quot;id&quot;: 0,</span><br><span class=\"line\">  &quot;name&quot;: &quot;name0&quot;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<h2><span id=\"更多信息\">更多信息</span></h2><p>通过本教程基本掌握了Arthas热更新代码。如果有更多的技巧或者使用疑问，欢迎在Issue里提出。</p>\n<ul>\n<li>Issues: <a href=\"https://github.com/alibaba/arthas/issues\">https://github.com/alibaba/arthas/issues</a></li>\n<li>文档： <a href=\"https://arthas.aliyun.com/doc\">https://arthas.aliyun.com/doc</a></li>\n</ul>\n<p>如果您在使用Arthas，请让我们知道。您的使用对我们非常重要：<a href=\"https://github.com/alibaba/arthas/issues/111\">查看</a></p>\n<p>文章拷贝来源：<a href=\"https://start.aliyun.com/course?spm=a2ck6.17690074.0.0.28bc2e7dHTphXs&amp;id=PaiFAkJM\">https://start.aliyun.com/course?spm=a2ck6.17690074.0.0.28bc2e7dHTphXs&amp;id=PaiFAkJM</a></p>\n","site":{"data":{}},"excerpt":"","more":"<!-- toc -->\n\n<ul>\n<li><a href=\"#start-demo\">Start demo</a></li>\n<li><a href=\"#start-arthas-boot\">Start arthas-boot</a></li>\n<li><a href=\"#%E7%83%AD%E6%9B%B4%E6%96%B0%E4%BB%A3%E7%A0%81\">热更新代码</a><ul>\n<li><a href=\"#jad%E5%8F%8D%E7%BC%96%E8%AF%91usercontroller\">jad反编译UserController</a></li>\n<li><a href=\"#sc%E6%9F%A5%E6%89%BE%E5%8A%A0%E8%BD%BDusercontroller%E7%9A%84classloader\">sc查找加载UserController的ClassLoader</a></li>\n<li><a href=\"#mc\">mc</a></li>\n<li><a href=\"#redefine\">redefine</a></li>\n<li><a href=\"#%E7%83%AD%E4%BF%AE%E6%94%B9%E4%BB%A3%E7%A0%81%E7%BB%93%E6%9E%9C\">热修改代码结果</a></li>\n</ul>\n</li>\n<li><a href=\"#%E6%9B%B4%E5%A4%9A%E4%BF%A1%E6%81%AF\">更多信息</a></li>\n</ul>\n<!-- tocstop -->\n\n<p><img src=\"/jlynet.github.io/2021/08/07/Java%E8%AF%8A%E6%96%AD%E5%B7%A5%E5%85%B7Arthas%E6%9C%80%E4%BD%B3%E5%AE%9E%E8%B7%B5/Arthas%E7%83%AD%E6%9B%B4%E6%96%B0%E4%BB%A3%E7%A0%81%E6%A1%88%E4%BE%8B/arthas.png\" alt=\"Arthas\"></p>\n<p><code>Arthas</code> 是Alibaba开源的Java诊断工具，深受开发者喜爱。在线排查问题，无需重启；动态跟踪Java代码；实时监控JVM状态。</p>\n<p><code>Arthas</code> 支持JDK 6+，支持Linux/Mac/Windows，采用命令行交互模式，同时提供丰富的 <code>Tab</code> 自动补全功能，进一步方便进行问题的定位和诊断。</p>\n<p>当你遇到以下类似问题而束手无策时，Arthas可以帮助你解决：</p>\n<ul>\n<li>这个类从哪个 jar 包加载的？为什么会报各种类相关的 Exception？</li>\n<li>我改的代码为什么没有执行到？难道是我没 commit？分支搞错了？</li>\n<li>遇到问题无法在线上 debug，难道只能通过加日志再重新发布吗？</li>\n<li>线上遇到某个用户的数据处理有问题，但线上同样无法 debug，线下无法重现！</li>\n<li>是否有一个全局视角来查看系统的运行状况？</li>\n<li>有什么办法可以监控到JVM的实时运行状态？</li>\n<li>怎么快速定位应用的热点，生成火焰图？</li>\n</ul>\n<p>本教程会以一个普通的Spring Boot应用为例，演示热更新代码。</p>\n<ul>\n<li>Github: <a href=\"https://github.com/alibaba/arthas\">https://github.com/alibaba/arthas</a></li>\n<li>文档: <a href=\"https://arthas.aliyun.com/doc/\">https://arthas.aliyun.com/doc/</a></li>\n</ul>\n<h2 id=\"Start-demo\"><a href=\"#Start-demo\" class=\"headerlink\" title=\"Start demo\"></a>Start demo</h2><p>下载<code>demo-arthas-spring-boot.jar</code>，再用<code>java -jar</code>命令启动：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wget https://code.aliyun.com/middleware-container/handsonLabExternedFiles/raw/master/demo-arthas-spring-boot.jar;java -jar demo-arthas-spring-boot.jar</span><br></pre></td></tr></table></figure>\n\n\n\n<p><code>demo-arthas-spring-boot</code>是一个很简单的spring boot应用，源代码：<a href=\"https://github.com/hengyunabc/spring-boot-inside/tree/master/demo-arthas-spring-boot\">查看</a></p>\n<p>启动之后，可以访问61000端口： 点击查看</p>\n<p><img src=\"/jlynet.github.io/2021/08/07/Java%E8%AF%8A%E6%96%AD%E5%B7%A5%E5%85%B7Arthas%E6%9C%80%E4%BD%B3%E5%AE%9E%E8%B7%B5/Arthas%E7%83%AD%E6%9B%B4%E6%96%B0%E4%BB%A3%E7%A0%81%E6%A1%88%E4%BE%8B/O1CN010Qbzcz1ctPSWSZI6L_!!6000000003658-2-tps-333-182.png\" alt=\"Demo Web\"></p>\n<h2 id=\"Start-arthas-boot\"><a href=\"#Start-arthas-boot\" class=\"headerlink\" title=\"Start arthas-boot\"></a>Start arthas-boot</h2><p>在新的<code>Terminal 2</code>里，下载<code>arthas-boot.jar</code>，再用<code>java -jar</code>命令启动：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wget https://arthas.aliyun.com/arthas-boot.jar;java -jar arthas-boot.jar</span><br></pre></td></tr></table></figure>\n\n\n\n<p><code>arthas-boot</code>是<code>Arthas</code>的启动程序，它启动后，会列出所有的Java进程，用户可以选择需要诊断的目标进程。</p>\n<p>选择第一个进程，输入 <code>1</code> ，再<code>Enter/回车</code>：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1</span><br></pre></td></tr></table></figure>\n\n\n\n<p>Attach成功之后，会打印Arthas LOGO。输入 <code>help</code> 可以获取到更多的帮助信息。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">help</span></span><br></pre></td></tr></table></figure>\n\n\n\n<p><img src=\"/jlynet.github.io/2021/08/07/Java%E8%AF%8A%E6%96%AD%E5%B7%A5%E5%85%B7Arthas%E6%9C%80%E4%BD%B3%E5%AE%9E%E8%B7%B5/Arthas%E7%83%AD%E6%9B%B4%E6%96%B0%E4%BB%A3%E7%A0%81%E6%A1%88%E4%BE%8B/O1CN01HzatXZ1RgccrlT90M_!!6000000002141-2-tps-529-244.png\" alt=\"Arthas Boot\"></p>\n<h2 id=\"热更新代码\"><a href=\"#热更新代码\" class=\"headerlink\" title=\"热更新代码\"></a>热更新代码</h2><p>下面介绍通过<code>jad</code>/<code>mc</code>/<code>redefine</code> 命令实现动态更新代码的功能。</p>\n<p>目前，访问 <a href=\"http://localhost:61000/user/0\">http://localhost:61000/user/0</a> ，会返回500异常：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">curl http://localhost:61000/user/0</span><br></pre></td></tr></table></figure>\n\n\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;&quot;timestamp&quot;:1550223186170,&quot;status&quot;:500,&quot;error&quot;:&quot;Internal Server Error&quot;,&quot;exception&quot;:&quot;java.lang.IllegalArgumentException&quot;,&quot;message&quot;:&quot;id &lt; 1&quot;,&quot;path&quot;:&quot;/user/0&quot;&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<p>下面通过热更新代码，修改这个逻辑。</p>\n<h4 id=\"jad反编译UserController\"><a href=\"#jad反编译UserController\" class=\"headerlink\" title=\"jad反编译UserController\"></a>jad反编译UserController</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">jad --source-only com.example.demo.arthas.user.UserController &gt; /tmp/UserController.java</span><br></pre></td></tr></table></figure>\n\n\n\n<p>jad反编译的结果保存在 <code>/tmp/UserController.java</code>文件里了。</p>\n<p>再打开一个<code>Terminal 3</code>，然后用vim来编辑<code>/tmp/UserController.java</code>：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vim /tmp/UserController.java</span><br></pre></td></tr></table></figure>\n\n\n\n<p>比如当 user id 小于1时，也正常返回，不抛出异常：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@GetMapping(value=&#123;&quot;/user/&#123;id&#125;&quot;&#125;)</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> User <span class=\"title\">findUserById</span><span class=\"params\">(<span class=\"meta\">@PathVariable</span> Integer id)</span> </span>&#123;</span><br><span class=\"line\">    logger.info(<span class=\"string\">&quot;id: &#123;&#125;&quot;</span>, (Object)id);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (id != <span class=\"keyword\">null</span> &amp;&amp; id &lt; <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> User(id, <span class=\"string\">&quot;name&quot;</span> + id);</span><br><span class=\"line\">        <span class=\"comment\">// throw new IllegalArgumentException(&quot;id &lt; 1&quot;);</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> User(id.intValue(), <span class=\"string\">&quot;name&quot;</span> + id);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<h4 id=\"sc查找加载UserController的ClassLoader\"><a href=\"#sc查找加载UserController的ClassLoader\" class=\"headerlink\" title=\"sc查找加载UserController的ClassLoader\"></a>sc查找加载UserController的ClassLoader</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sc -d *UserController | grep classLoaderHash</span><br></pre></td></tr></table></figure>\n\n\n\n<figure class=\"highlight console\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> sc -d *UserController | grep classLoaderHash</span></span><br><span class=\"line\"> classLoaderHash   1be6f5c3</span><br></pre></td></tr></table></figure>\n\n<p>可以发现是 spring boot <code>LaunchedURLClassLoader@1be6f5c3</code> 加载的。</p>\n<p>注意hashcode是变化的，需要先查看当前的ClassLoader信息，提取对应ClassLoader的hashcode。</p>\n<p>如果你使用<code>-c</code>，你需要手动输入hashcode：<code>-c &lt;hashcode&gt;</code></p>\n<p>对于只有唯一实例的ClassLoader可以通过<code>--classLoaderClass</code>指定class name，使用起来更加方便.</p>\n<p><code>--classLoaderClass</code> 的值是ClassLoader的类名，只有匹配到唯一的ClassLoader实例时才能工作，目的是方便输入通用命令，而<code>-c &lt;hashcode&gt;</code>是动态变化的。</p>\n<h4 id=\"mc\"><a href=\"#mc\" class=\"headerlink\" title=\"mc\"></a>mc</h4><p>保存好<code>/tmp/UserController.java</code>之后，使用<code>mc</code>(Memory Compiler)命令来编译，并且通过<code>--classLoaderClass</code>参数指定ClassLoader：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mc --classLoaderClass org.springframework.boot.loader.LaunchedURLClassLoader /tmp/UserController.java -d /tmp</span><br></pre></td></tr></table></figure>\n\n\n\n<figure class=\"highlight console\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> mc --classLoaderClass org.springframework.boot.loader.LaunchedURLClassLoader /tmp/UserController.java -d /tmp</span></span><br><span class=\"line\">Memory compiler output:</span><br><span class=\"line\">/tmp/com/example/demo/arthas/user/UserController.class</span><br><span class=\"line\">Affect(row-cnt:1) cost in 346 ms</span><br></pre></td></tr></table></figure>\n\n<p>也可以通过<code>mc -c &lt;classLoaderHash&gt; /tmp/UserController.java -d /tmp</code>，使用<code>-c</code>参数指定ClassLoaderHash:</p>\n<figure class=\"highlight console\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> mc -c 1be6f5c3 /tmp/UserController.java -d /tmp</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"redefine\"><a href=\"#redefine\" class=\"headerlink\" title=\"redefine\"></a>redefine</h4><p>再使用<code>redefine</code>命令重新加载新编译好的<code>UserController.class</code>：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">redefine /tmp/com/example/demo/arthas/user/UserController.class</span><br></pre></td></tr></table></figure>\n\n\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ redefine /tmp/com/example/demo/arthas/user/UserController.class</span><br><span class=\"line\">redefine success, size: 1</span><br></pre></td></tr></table></figure>\n\n\n\n<h4 id=\"热修改代码结果\"><a href=\"#热修改代码结果\" class=\"headerlink\" title=\"热修改代码结果\"></a>热修改代码结果</h4><p><code>redefine</code>成功之后，再次访问 user/0 ，结果是：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  &quot;id&quot;: 0,</span><br><span class=\"line\">  &quot;name&quot;: &quot;name0&quot;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"更多信息\"><a href=\"#更多信息\" class=\"headerlink\" title=\"更多信息\"></a>更多信息</h2><p>通过本教程基本掌握了Arthas热更新代码。如果有更多的技巧或者使用疑问，欢迎在Issue里提出。</p>\n<ul>\n<li>Issues: <a href=\"https://github.com/alibaba/arthas/issues\">https://github.com/alibaba/arthas/issues</a></li>\n<li>文档： <a href=\"https://arthas.aliyun.com/doc\">https://arthas.aliyun.com/doc</a></li>\n</ul>\n<p>如果您在使用Arthas，请让我们知道。您的使用对我们非常重要：<a href=\"https://github.com/alibaba/arthas/issues/111\">查看</a></p>\n<p>文章拷贝来源：<a href=\"https://start.aliyun.com/course?spm=a2ck6.17690074.0.0.28bc2e7dHTphXs&amp;id=PaiFAkJM\">https://start.aliyun.com/course?spm=a2ck6.17690074.0.0.28bc2e7dHTphXs&amp;id=PaiFAkJM</a></p>\n"},{"title":"Arthas 获取Spring Context 案例","date":"2021-08-07T00:35:33.000Z","_content":"\n<!-- toc -->\n\n![Arthas](arthas.png)\n\n`Arthas` 是Alibaba开源的Java诊断工具，深受开发者喜爱。在线排查问题，无需重启；动态跟踪Java代码；实时监控JVM状态。\n\n`Arthas` 支持JDK 6+，支持Linux/Mac/Windows，采用命令行交互模式，同时提供丰富的 `Tab` 自动补全功能，进一步方便进行问题的定位和诊断。\n\n当你遇到以下类似问题而束手无策时，Arthas可以帮助你解决：\n\n- 这个类从哪个 jar 包加载的？为什么会报各种类相关的 Exception？\n- 我改的代码为什么没有执行到？难道是我没 commit？分支搞错了？\n- 遇到问题无法在线上 debug，难道只能通过加日志再重新发布吗？\n- 线上遇到某个用户的数据处理有问题，但线上同样无法 debug，线下无法重现！\n- 是否有一个全局视角来查看系统的运行状况？\n- 有什么办法可以监控到JVM的实时运行状态？\n- 怎么快速定位应用的热点，生成火焰图？\n\n本教程会以一个普通的Spring Boot应用为例，演示获取Spring Context 案例。\n\n- Github: https://github.com/alibaba/arthas\n- 文档: https://arthas.aliyun.com/doc/\n\n## Start demo\n\n下载`demo-arthas-spring-boot.jar`，再用`java -jar`命令启动：\n\n```bash\nwget https://code.aliyun.com/middleware-container/handsonLabExternedFiles/raw/master/demo-arthas-spring-boot.jar;java -jar demo-arthas-spring-boot.jar\n```\n\n`demo-arthas-spring-boot`是一个很简单的spring boot应用，源代码：[查看](https://github.com/hengyunabc/spring-boot-inside/tree/master/demo-arthas-spring-boot)\n\n启动之后，可以访问61000端口： 点击查看\n\n![Demo Web](O1CN010Qbzcz1ctPSWSZI6L_!!6000000003658-2-tps-333-182.png)\n\n## Start arthas-boot\n\n在新的`Terminal 2`里，下载`arthas-boot.jar`，再用`java -jar`命令启动：\n\n```bash\nwget https://arthas.aliyun.com/arthas-boot.jar;java -jar arthas-boot.jar\n```\n\n\n`arthas-boot`是`Arthas`的启动程序，它启动后，会列出所有的Java进程，用户可以选择需要诊断的目标进程。\n\n选择第一个进程，输入 `1` ，再`Enter/回车`：\n\n```bash\n1\n```\n\nAttach成功之后，会打印Arthas LOGO。输入 `help` 可以获取到更多的帮助信息。\n\n```bash\nhelp\n```\n\n\n\n![Arthas Boot](O1CN01HzatXZ1RgccrlT90M_!!6000000002141-2-tps-529-244.png)\n\n## 获取Spring Context\n\n在这个案例里，展示获取spring context，再获取bean，然后调用函数。\n\n#### 使用tt命令获取到spring context\n\n`tt`即 TimeTunnel，它可以记录下指定方法每次调用的入参和返回信息，并能对这些不同的时间下调用进行观测。\n\n- https://arthas.aliyun.com/doc/tt.html\n\n```bash\ntt -t org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter invokeHandlerMethod\n```\n\n\n\n访问：user/1\n\n可以看到`tt`命令捕获到了一个请求：\n\n```console\n$ tt -t org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdaptePress Q or Ctrl+C to abort.\nAffect(class-cnt:1 , method-cnt:1) cost in 252 ms.\n INDE  TIMESTAMP    COST(  IS-R  IS-  OBJECT     CLASS               METHOD\n X                  ms)    ET    EXP\n-----------------------------------------------------------------------------------------\n 1000  2019-02-15   4.583  true  fal  0xc93cf1a  RequestMappingHand  invokeHandlerMethod\n       15:38:32     923          se              lerAdapter\n```\n\n#### 使用tt命令从调用记录里获取到spring context\n\n输入 `q` 或者 `Ctrl + C` 退出上面的 `tt -t`命令。\n\n```bash\nq\n```\n\n\n\n```bash\ntt -i 1000 -w 'target.getApplicationContext()'\n```\n\n\n\n```console\n$ tt -i 1000 -w 'target.getApplicationContext()'@AnnotationConfigEmbeddedWebApplicationContext[    reader=@AnnotatedBeanDefinitionReader[org.springframework.context.annotation.AnnotatedBeanDefinitionReader@2e457641],    scanner=@ClassPathBeanDefinitionScanner[org.springframework.context.annotation.ClassPathBeanDefinitionScanner@6eb38026],    annotatedClasses=null,    basePackages=null,]Affect(row-cnt:1) cost in 439 ms.\n```\n\n### 获取spring bean，并调用函数\n\n```bash\ntt -i 1000 -w 'target.getApplicationContext().getBean(\"helloWorldService\").getHelloMessage()'\n```\n\n结果是：\n\n```console\n$ tt -i 1000 -w 'target.getApplicationContext().getBean(\"helloWorldService\").getHelloMessage()'@String[Hello World]Affect(row-cnt:1) cost in 52 ms.\n```\n\n## 更多信息\n\n通过本教程基本掌握了Arthas获取Spring Context。如果有更多的技巧或者使用疑问，欢迎在Issue里提出。\n\n- Issues: https://github.com/alibaba/arthas/issues\n- 文档： https://arthas.aliyun.com/doc\n\n如果您在使用Arthas，请让我们知道。您的使用对我们非常重要：[查看](https://github.com/alibaba/arthas/issues/111)\n\n文章拷贝来源：https://start.aliyun.com/course?spm=a2ck6.17690074.0.0.28bc2e7dHTphXs&id=PaiFAkJM","source":"_posts/Java诊断工具Arthas最佳实践/Arthas获取Spring上下文案例.md","raw":"---\ntitle: Arthas 获取Spring Context 案例\ndate: 2021-08-07 08:35:33\ntags: ['Java 诊断工具 Arthas 最佳实践']\n---\n\n<!-- toc -->\n\n![Arthas](arthas.png)\n\n`Arthas` 是Alibaba开源的Java诊断工具，深受开发者喜爱。在线排查问题，无需重启；动态跟踪Java代码；实时监控JVM状态。\n\n`Arthas` 支持JDK 6+，支持Linux/Mac/Windows，采用命令行交互模式，同时提供丰富的 `Tab` 自动补全功能，进一步方便进行问题的定位和诊断。\n\n当你遇到以下类似问题而束手无策时，Arthas可以帮助你解决：\n\n- 这个类从哪个 jar 包加载的？为什么会报各种类相关的 Exception？\n- 我改的代码为什么没有执行到？难道是我没 commit？分支搞错了？\n- 遇到问题无法在线上 debug，难道只能通过加日志再重新发布吗？\n- 线上遇到某个用户的数据处理有问题，但线上同样无法 debug，线下无法重现！\n- 是否有一个全局视角来查看系统的运行状况？\n- 有什么办法可以监控到JVM的实时运行状态？\n- 怎么快速定位应用的热点，生成火焰图？\n\n本教程会以一个普通的Spring Boot应用为例，演示获取Spring Context 案例。\n\n- Github: https://github.com/alibaba/arthas\n- 文档: https://arthas.aliyun.com/doc/\n\n## Start demo\n\n下载`demo-arthas-spring-boot.jar`，再用`java -jar`命令启动：\n\n```bash\nwget https://code.aliyun.com/middleware-container/handsonLabExternedFiles/raw/master/demo-arthas-spring-boot.jar;java -jar demo-arthas-spring-boot.jar\n```\n\n`demo-arthas-spring-boot`是一个很简单的spring boot应用，源代码：[查看](https://github.com/hengyunabc/spring-boot-inside/tree/master/demo-arthas-spring-boot)\n\n启动之后，可以访问61000端口： 点击查看\n\n![Demo Web](O1CN010Qbzcz1ctPSWSZI6L_!!6000000003658-2-tps-333-182.png)\n\n## Start arthas-boot\n\n在新的`Terminal 2`里，下载`arthas-boot.jar`，再用`java -jar`命令启动：\n\n```bash\nwget https://arthas.aliyun.com/arthas-boot.jar;java -jar arthas-boot.jar\n```\n\n\n`arthas-boot`是`Arthas`的启动程序，它启动后，会列出所有的Java进程，用户可以选择需要诊断的目标进程。\n\n选择第一个进程，输入 `1` ，再`Enter/回车`：\n\n```bash\n1\n```\n\nAttach成功之后，会打印Arthas LOGO。输入 `help` 可以获取到更多的帮助信息。\n\n```bash\nhelp\n```\n\n\n\n![Arthas Boot](O1CN01HzatXZ1RgccrlT90M_!!6000000002141-2-tps-529-244.png)\n\n## 获取Spring Context\n\n在这个案例里，展示获取spring context，再获取bean，然后调用函数。\n\n#### 使用tt命令获取到spring context\n\n`tt`即 TimeTunnel，它可以记录下指定方法每次调用的入参和返回信息，并能对这些不同的时间下调用进行观测。\n\n- https://arthas.aliyun.com/doc/tt.html\n\n```bash\ntt -t org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter invokeHandlerMethod\n```\n\n\n\n访问：user/1\n\n可以看到`tt`命令捕获到了一个请求：\n\n```console\n$ tt -t org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdaptePress Q or Ctrl+C to abort.\nAffect(class-cnt:1 , method-cnt:1) cost in 252 ms.\n INDE  TIMESTAMP    COST(  IS-R  IS-  OBJECT     CLASS               METHOD\n X                  ms)    ET    EXP\n-----------------------------------------------------------------------------------------\n 1000  2019-02-15   4.583  true  fal  0xc93cf1a  RequestMappingHand  invokeHandlerMethod\n       15:38:32     923          se              lerAdapter\n```\n\n#### 使用tt命令从调用记录里获取到spring context\n\n输入 `q` 或者 `Ctrl + C` 退出上面的 `tt -t`命令。\n\n```bash\nq\n```\n\n\n\n```bash\ntt -i 1000 -w 'target.getApplicationContext()'\n```\n\n\n\n```console\n$ tt -i 1000 -w 'target.getApplicationContext()'@AnnotationConfigEmbeddedWebApplicationContext[    reader=@AnnotatedBeanDefinitionReader[org.springframework.context.annotation.AnnotatedBeanDefinitionReader@2e457641],    scanner=@ClassPathBeanDefinitionScanner[org.springframework.context.annotation.ClassPathBeanDefinitionScanner@6eb38026],    annotatedClasses=null,    basePackages=null,]Affect(row-cnt:1) cost in 439 ms.\n```\n\n### 获取spring bean，并调用函数\n\n```bash\ntt -i 1000 -w 'target.getApplicationContext().getBean(\"helloWorldService\").getHelloMessage()'\n```\n\n结果是：\n\n```console\n$ tt -i 1000 -w 'target.getApplicationContext().getBean(\"helloWorldService\").getHelloMessage()'@String[Hello World]Affect(row-cnt:1) cost in 52 ms.\n```\n\n## 更多信息\n\n通过本教程基本掌握了Arthas获取Spring Context。如果有更多的技巧或者使用疑问，欢迎在Issue里提出。\n\n- Issues: https://github.com/alibaba/arthas/issues\n- 文档： https://arthas.aliyun.com/doc\n\n如果您在使用Arthas，请让我们知道。您的使用对我们非常重要：[查看](https://github.com/alibaba/arthas/issues/111)\n\n文章拷贝来源：https://start.aliyun.com/course?spm=a2ck6.17690074.0.0.28bc2e7dHTphXs&id=PaiFAkJM","slug":"Java诊断工具Arthas最佳实践/Arthas获取Spring上下文案例","published":1,"updated":"2021-08-07T05:33:49.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cks1cgr65001bfw5i50h26e5o","content":"<!-- toc -->\n\n<ul>\n<li><a href=\"#start-demo\">Start demo</a></li>\n<li><a href=\"#start-arthas-boot\">Start arthas-boot</a></li>\n<li><a href=\"#%E8%8E%B7%E5%8F%96spring-context\">获取Spring Context</a><ul>\n<li><a href=\"#%E4%BD%BF%E7%94%A8tt%E5%91%BD%E4%BB%A4%E8%8E%B7%E5%8F%96%E5%88%B0spring-context\">使用tt命令获取到spring context</a></li>\n<li><a href=\"#%E4%BD%BF%E7%94%A8tt%E5%91%BD%E4%BB%A4%E4%BB%8E%E8%B0%83%E7%94%A8%E8%AE%B0%E5%BD%95%E9%87%8C%E8%8E%B7%E5%8F%96%E5%88%B0spring-context\">使用tt命令从调用记录里获取到spring context</a></li>\n</ul>\n<ul>\n<li><a href=\"#%E8%8E%B7%E5%8F%96spring-bean%E5%B9%B6%E8%B0%83%E7%94%A8%E5%87%BD%E6%95%B0\">获取spring bean，并调用函数</a></li>\n</ul>\n</li>\n<li><a href=\"#%E6%9B%B4%E5%A4%9A%E4%BF%A1%E6%81%AF\">更多信息</a></li>\n</ul>\n<!-- tocstop -->\n\n<p><img src=\"/jlynet.github.io/2021/08/07/Java%E8%AF%8A%E6%96%AD%E5%B7%A5%E5%85%B7Arthas%E6%9C%80%E4%BD%B3%E5%AE%9E%E8%B7%B5/Arthas%E8%8E%B7%E5%8F%96Spring%E4%B8%8A%E4%B8%8B%E6%96%87%E6%A1%88%E4%BE%8B/arthas.png\" alt=\"Arthas\"></p>\n<p><code>Arthas</code> 是Alibaba开源的Java诊断工具，深受开发者喜爱。在线排查问题，无需重启；动态跟踪Java代码；实时监控JVM状态。</p>\n<p><code>Arthas</code> 支持JDK 6+，支持Linux/Mac/Windows，采用命令行交互模式，同时提供丰富的 <code>Tab</code> 自动补全功能，进一步方便进行问题的定位和诊断。</p>\n<p>当你遇到以下类似问题而束手无策时，Arthas可以帮助你解决：</p>\n<ul>\n<li>这个类从哪个 jar 包加载的？为什么会报各种类相关的 Exception？</li>\n<li>我改的代码为什么没有执行到？难道是我没 commit？分支搞错了？</li>\n<li>遇到问题无法在线上 debug，难道只能通过加日志再重新发布吗？</li>\n<li>线上遇到某个用户的数据处理有问题，但线上同样无法 debug，线下无法重现！</li>\n<li>是否有一个全局视角来查看系统的运行状况？</li>\n<li>有什么办法可以监控到JVM的实时运行状态？</li>\n<li>怎么快速定位应用的热点，生成火焰图？</li>\n</ul>\n<p>本教程会以一个普通的Spring Boot应用为例，演示获取Spring Context 案例。</p>\n<ul>\n<li>Github: <a href=\"https://github.com/alibaba/arthas\">https://github.com/alibaba/arthas</a></li>\n<li>文档: <a href=\"https://arthas.aliyun.com/doc/\">https://arthas.aliyun.com/doc/</a></li>\n</ul>\n<h2><span id=\"start-demo\">Start demo</span></h2><p>下载<code>demo-arthas-spring-boot.jar</code>，再用<code>java -jar</code>命令启动：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wget https://code.aliyun.com/middleware-container/handsonLabExternedFiles/raw/master/demo-arthas-spring-boot.jar;java -jar demo-arthas-spring-boot.jar</span><br></pre></td></tr></table></figure>\n\n<p><code>demo-arthas-spring-boot</code>是一个很简单的spring boot应用，源代码：<a href=\"https://github.com/hengyunabc/spring-boot-inside/tree/master/demo-arthas-spring-boot\">查看</a></p>\n<p>启动之后，可以访问61000端口： 点击查看</p>\n<p><img src=\"/jlynet.github.io/2021/08/07/Java%E8%AF%8A%E6%96%AD%E5%B7%A5%E5%85%B7Arthas%E6%9C%80%E4%BD%B3%E5%AE%9E%E8%B7%B5/Arthas%E8%8E%B7%E5%8F%96Spring%E4%B8%8A%E4%B8%8B%E6%96%87%E6%A1%88%E4%BE%8B/O1CN010Qbzcz1ctPSWSZI6L_!!6000000003658-2-tps-333-182.png\" alt=\"Demo Web\"></p>\n<h2><span id=\"start-arthas-boot\">Start arthas-boot</span></h2><p>在新的<code>Terminal 2</code>里，下载<code>arthas-boot.jar</code>，再用<code>java -jar</code>命令启动：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wget https://arthas.aliyun.com/arthas-boot.jar;java -jar arthas-boot.jar</span><br></pre></td></tr></table></figure>\n\n\n<p><code>arthas-boot</code>是<code>Arthas</code>的启动程序，它启动后，会列出所有的Java进程，用户可以选择需要诊断的目标进程。</p>\n<p>选择第一个进程，输入 <code>1</code> ，再<code>Enter/回车</code>：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1</span><br></pre></td></tr></table></figure>\n\n<p>Attach成功之后，会打印Arthas LOGO。输入 <code>help</code> 可以获取到更多的帮助信息。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">help</span></span><br></pre></td></tr></table></figure>\n\n\n\n<p><img src=\"/jlynet.github.io/2021/08/07/Java%E8%AF%8A%E6%96%AD%E5%B7%A5%E5%85%B7Arthas%E6%9C%80%E4%BD%B3%E5%AE%9E%E8%B7%B5/Arthas%E8%8E%B7%E5%8F%96Spring%E4%B8%8A%E4%B8%8B%E6%96%87%E6%A1%88%E4%BE%8B/O1CN01HzatXZ1RgccrlT90M_!!6000000002141-2-tps-529-244.png\" alt=\"Arthas Boot\"></p>\n<h2><span id=\"获取spring-context\">获取Spring Context</span></h2><p>在这个案例里，展示获取spring context，再获取bean，然后调用函数。</p>\n<h4><span id=\"使用tt命令获取到spring-context\">使用tt命令获取到spring context</span></h4><p><code>tt</code>即 TimeTunnel，它可以记录下指定方法每次调用的入参和返回信息，并能对这些不同的时间下调用进行观测。</p>\n<ul>\n<li><a href=\"https://arthas.aliyun.com/doc/tt.html\">https://arthas.aliyun.com/doc/tt.html</a></li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">tt -t org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter invokeHandlerMethod</span><br></pre></td></tr></table></figure>\n\n\n\n<p>访问：user/1</p>\n<p>可以看到<code>tt</code>命令捕获到了一个请求：</p>\n<figure class=\"highlight console\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> tt -t org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdaptePress Q or Ctrl+C to abort.</span></span><br><span class=\"line\">Affect(class-cnt:1 , method-cnt:1) cost in 252 ms.</span><br><span class=\"line\"> INDE  TIMESTAMP    COST(  IS-R  IS-  OBJECT     CLASS               METHOD</span><br><span class=\"line\"> X                  ms)    ET    EXP</span><br><span class=\"line\">-----------------------------------------------------------------------------------------</span><br><span class=\"line\"> 1000  2019-02-15   4.583  true  fal  0xc93cf1a  RequestMappingHand  invokeHandlerMethod</span><br><span class=\"line\">       15:38:32     923          se              lerAdapter</span><br></pre></td></tr></table></figure>\n\n<h4><span id=\"使用tt命令从调用记录里获取到spring-context\">使用tt命令从调用记录里获取到spring context</span></h4><p>输入 <code>q</code> 或者 <code>Ctrl + C</code> 退出上面的 <code>tt -t</code>命令。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">q</span><br></pre></td></tr></table></figure>\n\n\n\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">tt -i 1000 -w <span class=\"string\">&#x27;target.getApplicationContext()&#x27;</span></span><br></pre></td></tr></table></figure>\n\n\n\n<figure class=\"highlight console\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> tt -i 1000 -w <span class=\"string\">&#x27;target.getApplicationContext()&#x27;</span>@AnnotationConfigEmbeddedWebApplicationContext[    reader=@AnnotatedBeanDefinitionReader[org.springframework.context.annotation.AnnotatedBeanDefinitionReader@2e457641],    scanner=@ClassPathBeanDefinitionScanner[org.springframework.context.annotation.ClassPathBeanDefinitionScanner@6eb38026],    annotatedClasses=null,    basePackages=null,]Affect(row-cnt:1) cost <span class=\"keyword\">in</span> 439 ms.</span></span><br></pre></td></tr></table></figure>\n\n<h3><span id=\"获取spring-bean并调用函数\">获取spring bean，并调用函数</span></h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">tt -i 1000 -w <span class=\"string\">&#x27;target.getApplicationContext().getBean(&quot;helloWorldService&quot;).getHelloMessage()&#x27;</span></span><br></pre></td></tr></table></figure>\n\n<p>结果是：</p>\n<figure class=\"highlight console\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> tt -i 1000 -w <span class=\"string\">&#x27;target.getApplicationContext().getBean(&quot;helloWorldService&quot;).getHelloMessage()&#x27;</span>@String[Hello World]Affect(row-cnt:1) cost <span class=\"keyword\">in</span> 52 ms.</span></span><br></pre></td></tr></table></figure>\n\n<h2><span id=\"更多信息\">更多信息</span></h2><p>通过本教程基本掌握了Arthas获取Spring Context。如果有更多的技巧或者使用疑问，欢迎在Issue里提出。</p>\n<ul>\n<li>Issues: <a href=\"https://github.com/alibaba/arthas/issues\">https://github.com/alibaba/arthas/issues</a></li>\n<li>文档： <a href=\"https://arthas.aliyun.com/doc\">https://arthas.aliyun.com/doc</a></li>\n</ul>\n<p>如果您在使用Arthas，请让我们知道。您的使用对我们非常重要：<a href=\"https://github.com/alibaba/arthas/issues/111\">查看</a></p>\n<p>文章拷贝来源：<a href=\"https://start.aliyun.com/course?spm=a2ck6.17690074.0.0.28bc2e7dHTphXs&amp;id=PaiFAkJM\">https://start.aliyun.com/course?spm=a2ck6.17690074.0.0.28bc2e7dHTphXs&amp;id=PaiFAkJM</a></p>\n","site":{"data":{}},"excerpt":"","more":"<!-- toc -->\n\n<ul>\n<li><a href=\"#start-demo\">Start demo</a></li>\n<li><a href=\"#start-arthas-boot\">Start arthas-boot</a></li>\n<li><a href=\"#%E8%8E%B7%E5%8F%96spring-context\">获取Spring Context</a><ul>\n<li><a href=\"#%E4%BD%BF%E7%94%A8tt%E5%91%BD%E4%BB%A4%E8%8E%B7%E5%8F%96%E5%88%B0spring-context\">使用tt命令获取到spring context</a></li>\n<li><a href=\"#%E4%BD%BF%E7%94%A8tt%E5%91%BD%E4%BB%A4%E4%BB%8E%E8%B0%83%E7%94%A8%E8%AE%B0%E5%BD%95%E9%87%8C%E8%8E%B7%E5%8F%96%E5%88%B0spring-context\">使用tt命令从调用记录里获取到spring context</a></li>\n</ul>\n<ul>\n<li><a href=\"#%E8%8E%B7%E5%8F%96spring-bean%E5%B9%B6%E8%B0%83%E7%94%A8%E5%87%BD%E6%95%B0\">获取spring bean，并调用函数</a></li>\n</ul>\n</li>\n<li><a href=\"#%E6%9B%B4%E5%A4%9A%E4%BF%A1%E6%81%AF\">更多信息</a></li>\n</ul>\n<!-- tocstop -->\n\n<p><img src=\"/jlynet.github.io/2021/08/07/Java%E8%AF%8A%E6%96%AD%E5%B7%A5%E5%85%B7Arthas%E6%9C%80%E4%BD%B3%E5%AE%9E%E8%B7%B5/Arthas%E8%8E%B7%E5%8F%96Spring%E4%B8%8A%E4%B8%8B%E6%96%87%E6%A1%88%E4%BE%8B/arthas.png\" alt=\"Arthas\"></p>\n<p><code>Arthas</code> 是Alibaba开源的Java诊断工具，深受开发者喜爱。在线排查问题，无需重启；动态跟踪Java代码；实时监控JVM状态。</p>\n<p><code>Arthas</code> 支持JDK 6+，支持Linux/Mac/Windows，采用命令行交互模式，同时提供丰富的 <code>Tab</code> 自动补全功能，进一步方便进行问题的定位和诊断。</p>\n<p>当你遇到以下类似问题而束手无策时，Arthas可以帮助你解决：</p>\n<ul>\n<li>这个类从哪个 jar 包加载的？为什么会报各种类相关的 Exception？</li>\n<li>我改的代码为什么没有执行到？难道是我没 commit？分支搞错了？</li>\n<li>遇到问题无法在线上 debug，难道只能通过加日志再重新发布吗？</li>\n<li>线上遇到某个用户的数据处理有问题，但线上同样无法 debug，线下无法重现！</li>\n<li>是否有一个全局视角来查看系统的运行状况？</li>\n<li>有什么办法可以监控到JVM的实时运行状态？</li>\n<li>怎么快速定位应用的热点，生成火焰图？</li>\n</ul>\n<p>本教程会以一个普通的Spring Boot应用为例，演示获取Spring Context 案例。</p>\n<ul>\n<li>Github: <a href=\"https://github.com/alibaba/arthas\">https://github.com/alibaba/arthas</a></li>\n<li>文档: <a href=\"https://arthas.aliyun.com/doc/\">https://arthas.aliyun.com/doc/</a></li>\n</ul>\n<h2 id=\"Start-demo\"><a href=\"#Start-demo\" class=\"headerlink\" title=\"Start demo\"></a>Start demo</h2><p>下载<code>demo-arthas-spring-boot.jar</code>，再用<code>java -jar</code>命令启动：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wget https://code.aliyun.com/middleware-container/handsonLabExternedFiles/raw/master/demo-arthas-spring-boot.jar;java -jar demo-arthas-spring-boot.jar</span><br></pre></td></tr></table></figure>\n\n<p><code>demo-arthas-spring-boot</code>是一个很简单的spring boot应用，源代码：<a href=\"https://github.com/hengyunabc/spring-boot-inside/tree/master/demo-arthas-spring-boot\">查看</a></p>\n<p>启动之后，可以访问61000端口： 点击查看</p>\n<p><img src=\"/jlynet.github.io/2021/08/07/Java%E8%AF%8A%E6%96%AD%E5%B7%A5%E5%85%B7Arthas%E6%9C%80%E4%BD%B3%E5%AE%9E%E8%B7%B5/Arthas%E8%8E%B7%E5%8F%96Spring%E4%B8%8A%E4%B8%8B%E6%96%87%E6%A1%88%E4%BE%8B/O1CN010Qbzcz1ctPSWSZI6L_!!6000000003658-2-tps-333-182.png\" alt=\"Demo Web\"></p>\n<h2 id=\"Start-arthas-boot\"><a href=\"#Start-arthas-boot\" class=\"headerlink\" title=\"Start arthas-boot\"></a>Start arthas-boot</h2><p>在新的<code>Terminal 2</code>里，下载<code>arthas-boot.jar</code>，再用<code>java -jar</code>命令启动：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wget https://arthas.aliyun.com/arthas-boot.jar;java -jar arthas-boot.jar</span><br></pre></td></tr></table></figure>\n\n\n<p><code>arthas-boot</code>是<code>Arthas</code>的启动程序，它启动后，会列出所有的Java进程，用户可以选择需要诊断的目标进程。</p>\n<p>选择第一个进程，输入 <code>1</code> ，再<code>Enter/回车</code>：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1</span><br></pre></td></tr></table></figure>\n\n<p>Attach成功之后，会打印Arthas LOGO。输入 <code>help</code> 可以获取到更多的帮助信息。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">help</span></span><br></pre></td></tr></table></figure>\n\n\n\n<p><img src=\"/jlynet.github.io/2021/08/07/Java%E8%AF%8A%E6%96%AD%E5%B7%A5%E5%85%B7Arthas%E6%9C%80%E4%BD%B3%E5%AE%9E%E8%B7%B5/Arthas%E8%8E%B7%E5%8F%96Spring%E4%B8%8A%E4%B8%8B%E6%96%87%E6%A1%88%E4%BE%8B/O1CN01HzatXZ1RgccrlT90M_!!6000000002141-2-tps-529-244.png\" alt=\"Arthas Boot\"></p>\n<h2 id=\"获取Spring-Context\"><a href=\"#获取Spring-Context\" class=\"headerlink\" title=\"获取Spring Context\"></a>获取Spring Context</h2><p>在这个案例里，展示获取spring context，再获取bean，然后调用函数。</p>\n<h4 id=\"使用tt命令获取到spring-context\"><a href=\"#使用tt命令获取到spring-context\" class=\"headerlink\" title=\"使用tt命令获取到spring context\"></a>使用tt命令获取到spring context</h4><p><code>tt</code>即 TimeTunnel，它可以记录下指定方法每次调用的入参和返回信息，并能对这些不同的时间下调用进行观测。</p>\n<ul>\n<li><a href=\"https://arthas.aliyun.com/doc/tt.html\">https://arthas.aliyun.com/doc/tt.html</a></li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">tt -t org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter invokeHandlerMethod</span><br></pre></td></tr></table></figure>\n\n\n\n<p>访问：user/1</p>\n<p>可以看到<code>tt</code>命令捕获到了一个请求：</p>\n<figure class=\"highlight console\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> tt -t org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdaptePress Q or Ctrl+C to abort.</span></span><br><span class=\"line\">Affect(class-cnt:1 , method-cnt:1) cost in 252 ms.</span><br><span class=\"line\"> INDE  TIMESTAMP    COST(  IS-R  IS-  OBJECT     CLASS               METHOD</span><br><span class=\"line\"> X                  ms)    ET    EXP</span><br><span class=\"line\">-----------------------------------------------------------------------------------------</span><br><span class=\"line\"> 1000  2019-02-15   4.583  true  fal  0xc93cf1a  RequestMappingHand  invokeHandlerMethod</span><br><span class=\"line\">       15:38:32     923          se              lerAdapter</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"使用tt命令从调用记录里获取到spring-context\"><a href=\"#使用tt命令从调用记录里获取到spring-context\" class=\"headerlink\" title=\"使用tt命令从调用记录里获取到spring context\"></a>使用tt命令从调用记录里获取到spring context</h4><p>输入 <code>q</code> 或者 <code>Ctrl + C</code> 退出上面的 <code>tt -t</code>命令。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">q</span><br></pre></td></tr></table></figure>\n\n\n\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">tt -i 1000 -w <span class=\"string\">&#x27;target.getApplicationContext()&#x27;</span></span><br></pre></td></tr></table></figure>\n\n\n\n<figure class=\"highlight console\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> tt -i 1000 -w <span class=\"string\">&#x27;target.getApplicationContext()&#x27;</span>@AnnotationConfigEmbeddedWebApplicationContext[    reader=@AnnotatedBeanDefinitionReader[org.springframework.context.annotation.AnnotatedBeanDefinitionReader@2e457641],    scanner=@ClassPathBeanDefinitionScanner[org.springframework.context.annotation.ClassPathBeanDefinitionScanner@6eb38026],    annotatedClasses=null,    basePackages=null,]Affect(row-cnt:1) cost <span class=\"keyword\">in</span> 439 ms.</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"获取spring-bean，并调用函数\"><a href=\"#获取spring-bean，并调用函数\" class=\"headerlink\" title=\"获取spring bean，并调用函数\"></a>获取spring bean，并调用函数</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">tt -i 1000 -w <span class=\"string\">&#x27;target.getApplicationContext().getBean(&quot;helloWorldService&quot;).getHelloMessage()&#x27;</span></span><br></pre></td></tr></table></figure>\n\n<p>结果是：</p>\n<figure class=\"highlight console\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> tt -i 1000 -w <span class=\"string\">&#x27;target.getApplicationContext().getBean(&quot;helloWorldService&quot;).getHelloMessage()&#x27;</span>@String[Hello World]Affect(row-cnt:1) cost <span class=\"keyword\">in</span> 52 ms.</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"更多信息\"><a href=\"#更多信息\" class=\"headerlink\" title=\"更多信息\"></a>更多信息</h2><p>通过本教程基本掌握了Arthas获取Spring Context。如果有更多的技巧或者使用疑问，欢迎在Issue里提出。</p>\n<ul>\n<li>Issues: <a href=\"https://github.com/alibaba/arthas/issues\">https://github.com/alibaba/arthas/issues</a></li>\n<li>文档： <a href=\"https://arthas.aliyun.com/doc\">https://arthas.aliyun.com/doc</a></li>\n</ul>\n<p>如果您在使用Arthas，请让我们知道。您的使用对我们非常重要：<a href=\"https://github.com/alibaba/arthas/issues/111\">查看</a></p>\n<p>文章拷贝来源：<a href=\"https://start.aliyun.com/course?spm=a2ck6.17690074.0.0.28bc2e7dHTphXs&amp;id=PaiFAkJM\">https://start.aliyun.com/course?spm=a2ck6.17690074.0.0.28bc2e7dHTphXs&amp;id=PaiFAkJM</a></p>\n"},{"title":"Arthas arthas-boot支持的参数 案例","date":"2021-08-07T00:35:32.000Z","_content":"\n<!-- toc -->\n\n![Arthas](arthas.png)\n\n`Arthas` 是Alibaba开源的Java诊断工具，深受开发者喜爱。在线排查问题，无需重启；动态跟踪Java代码；实时监控JVM状态。\n\n`Arthas` 支持JDK 6+，支持Linux/Mac/Windows，采用命令行交互模式，同时提供丰富的 `Tab` 自动补全功能，进一步方便进行问题的定位和诊断。\n\n当你遇到以下类似问题而束手无策时，Arthas可以帮助你解决：\n\n- 这个类从哪个 jar 包加载的？为什么会报各种类相关的 Exception？\n- 我改的代码为什么没有执行到？难道是我没 commit？分支搞错了？\n- 遇到问题无法在线上 debug，难道只能通过加日志再重新发布吗？\n- 线上遇到某个用户的数据处理有问题，但线上同样无法 debug，线下无法重现！\n- 是否有一个全局视角来查看系统的运行状况？\n- 有什么办法可以监控到JVM的实时运行状态？\n- 怎么快速定位应用的热点，生成火焰图？\n\n本教程会以一个简单的应用为例，演示arthas-boot支持的参数。\n\n- Github: https://github.com/alibaba/arthas\n- 文档: https://arthas.aliyun.com/doc/\n\n## Arthas demo\n\n下载`arthas-demo.jar`，再用`java -jar`命令启动：\n\n```bash\nwget https://arthas.aliyun.com/arthas-demo.jar;java -jar arthas-demo.jar\n```\n\n\n\n`arthas-demo`是一个很简单的程序，它随机生成整数，再执行因式分解，把结果打印出来。如果生成的随机数是负数，则会打印提示信息。\n\n## arthas-boot支持的参数\n\n在新的`Terminal 2`里，下载`arthas-boot.jar`：\n\n```bash\nwget https://arthas.aliyun.com/arthas-boot.jar\n```\n\n`arthas-boot.jar` 支持很多参数，可以执行 `java -jar arthas-boot.jar -h` 来查看。\n\n```bash\njava -jar arthas-boot.jar -h\n```\n\n```console\n$ java -jar arthas-boot.jar -h\n[INFO] arthas-boot version: 3.3.6\nUsage: arthas-boot [-h] [--target-ip <value>] [--telnet-port <value>]\n       [--http-port <value>] [--session-timeout <value>] [--arthas-home <value>]\n       [--use-version <value>] [--repo-mirror <value>] [--versions] [--use-http]\n       [--attach-only] [-c <value>] [-f <value>] [--height <value>] [--width\n       <value>] [-v] [--tunnel-server <value>] [--agent-id <value>] [--stat-url\n       <value>] [--select <value>] [pid]\n\nBootstrap Arthas\n\nEXAMPLES:\n  java -jar arthas-boot.jar <pid>\n  java -jar arthas-boot.jar --target-ip 0.0.0.0\n  java -jar arthas-boot.jar --telnet-port 9999 --http-port -1\n  java -jar arthas-boot.jar --tunnel-server 'ws://192.168.10.11:7777/ws'\n  java -jar arthas-boot.jar --tunnel-server 'ws://192.168.10.11:7777/ws'\n--agent-id bvDOe8XbTM2pQWjF4cfw\n  java -jar arthas-boot.jar --stat-url 'http://192.168.10.11:8080/api/stat'\n  java -jar arthas-boot.jar -c 'sysprop; thread' <pid>\n  java -jar arthas-boot.jar -f batch.as <pid>\n  java -jar arthas-boot.jar --use-version 3.3.6\n  java -jar arthas-boot.jar --versions\n  java -jar arthas-boot.jar --select arthas-demo\n  java -jar arthas-boot.jar --session-timeout 3600\n  java -jar arthas-boot.jar --attach-only\n  java -jar arthas-boot.jar --repo-mirror aliyun --use-http\nWIKI:\n  https://arthas.aliyun.com/doc\n\nOptions and Arguments:\n -h,--help                      Print usage\n    --target-ip <value>         The target jvm listen ip, default 127.0.0.1\n    --telnet-port <value>       The target jvm listen telnet port, default 3658\n    --http-port <value>         The target jvm listen http port, default 8563\n    --session-timeout <value>   The session timeout seconds, default 1800\n                                (30min)\n    --arthas-home <value>       The arthas home\n    --use-version <value>       Use special version arthas\n    --repo-mirror <value>       Use special maven repository mirror, value is\n                                center/aliyun or http repo url.\n    --versions                  List local and remote arthas versions\n    --use-http                  Enforce use http to download, default use https\n    --attach-only               Attach target process only, do not connect\n -c,--command <value>           Command to execute, multiple commands separated\n                                by ;\n -f,--batch-file <value>        The batch file to execute\n    --height <value>            arthas-client terminal height\n    --width <value>             arthas-client terminal width\n -v,--verbose                   Verbose, print debug info.\n    --tunnel-server <value>     The tunnel server url\n    --agent-id <value>          The agent id register to tunnel server\n    --stat-url <value>          The report stat url\n    --select <value>            select target process by classname or\n                                JARfilename\n <pid>                          Target pid\n```\n\n## 参数详解\n\n### 指定目标pid\n\n可以使用`jps`命令查看pid。\n\n```bash\njps\n```\n\n直接在参数中添加pid，可指定目标pid。\n\n```bash\njava -jar arthas-boot.jar 1\n```\n\n### 允许外部访问\n\n默认情况下， arthas server侦听的是 `127.0.0.1` 这个IP，如果希望远程可以访问，可以使用`--target-ip`的参数。\n\n```bash\njava -jar arthas-boot.jar --target-ip 0.0.0.0\n```\n\n### 列出所有的版本\n\n```bash\njava -jar arthas-boot.jar --versions\n```\n\n使用指定版本：\n\n```bash\njava -jar arthas-boot.jar --use-version 3.1.0\n```\n\n### 打印运行的详情\n\n使用`-v`或者`-verbose`。\n\n```bash\njava -jar arthas-boot.jar -v\n```\n\n### 指定需要执行的命令目标pid\n\n可以使用`--command`或者`-c`参数指定，并同时指定pid，多个命令之间用`;`分隔。\n\n```bash\njava -jar arthas-boot.jar -c 'sysprop; thread' 1\n```\n\n### 指定需要执行的批处理文件目标pid\n\n可以使用`--command`或者`-c`参数指定，并同时指定pid。\n\n```bash\njava -jar arthas-boot.jar -f batch.as 1\n```\n\n### 通过类名或者jar文件名指定目标进程\n\n通过`--select`参数类名或者jar文件名指定目标进程\n\n```bash\njava -jar arthas-boot.jar --select arthas-demo\n```\n\n### 指定会话超时秒数\n\n使用`--session-timeout`参数指定，默认为1800(30分钟)\n\n```bash\njava -jar arthas-boot.jar --session-timeout 3600\n```\n\n### 仅附加目标进程，不连接\n\n```bash\njava -jar arthas-boot.jar --attach-only\n```\n\n### 指定镜像仓库，强制使用http\n\n`--repo-mirror`使用特定maven仓库镜像，参数可以为`center/aliyun`或http仓库地址。\n\n`--use-http`强制使用http下载，默认使用https。\n\n```bash\njava -jar arthas-boot.jar --repo-mirror aliyun --use-http\n```\n\n### 指定arthas客户端命令行宽高\n\n```bash\njava -jar arthas-boot.jar --height 25 --width 80\n```\n\n### 指定arthas主目录\n\n```bash\njava -jar arthas-boot.jar --arthas-home .\n```\n\n### 以Java Agent的方式启动\n\n通常Arthas是以动态attach的方式来诊断应用，但从3.2.0版本起，Arthas支持直接以 java agent的方式启动。\n\n比如下载全量的arthas zip包，解压之后以 -javaagent 的参数指定arthas-agent.jar来启动：\n\n```\njava -javaagent:/tmp/test/arthas-agent.jar -jar arthas-demo.jar\n```\n\n默认的配置项在解压目录里的arthas.properties文件里。\n\n参考： https://docs.oracle.com/javase/8/docs/api/java/lang/instrument/package-summary.html\n\n## 使用as.sh\n\nArthas 支持在 Linux/Unix/Mac 等平台上一键安装：\n\n```bash\ncurl -L https://arthas.aliyun.com/install.sh | sh\n```\n\n上述命令会下载启动脚本文件 `as.sh` 到当前目录，你可以放在任何地方或将其加入到 `$PATH` 中。\n\n直接在shell下面执行`./as.sh`，就会进入交互界面。\n\n也可以执行`./as.sh -h`来获取更多参数信息, 具体用法与`java -jar arthas-boot.jar`类似。\n\n## 更多信息\n\n通过本教程基本掌握了Arthas boot支持的参数。如果有更多的技巧或者使用疑问，欢迎在Issue里提出。\n\n- Issues: https://github.com/alibaba/arthas/issues\n- 文档： https://arthas.aliyun.com/doc\n\n如果您在使用Arthas，请让我们知道。您的使用对我们非常重要：[查看](https://github.com/alibaba/arthas/issues/111)\n\n文章拷贝来源：https://start.aliyun.com/course?spm=a2ck6.17690074.0.0.28bc2e7dHTphXs&id=PaiFAkJM","source":"_posts/Java诊断工具Arthas最佳实践/学习Arthasarthas-boot支持的参数案例.md","raw":"---\ntitle: Arthas arthas-boot支持的参数 案例\ndate: 2021-08-07 08:35:32\ntags: ['Java 诊断工具 Arthas 最佳实践']\n---\n\n<!-- toc -->\n\n![Arthas](arthas.png)\n\n`Arthas` 是Alibaba开源的Java诊断工具，深受开发者喜爱。在线排查问题，无需重启；动态跟踪Java代码；实时监控JVM状态。\n\n`Arthas` 支持JDK 6+，支持Linux/Mac/Windows，采用命令行交互模式，同时提供丰富的 `Tab` 自动补全功能，进一步方便进行问题的定位和诊断。\n\n当你遇到以下类似问题而束手无策时，Arthas可以帮助你解决：\n\n- 这个类从哪个 jar 包加载的？为什么会报各种类相关的 Exception？\n- 我改的代码为什么没有执行到？难道是我没 commit？分支搞错了？\n- 遇到问题无法在线上 debug，难道只能通过加日志再重新发布吗？\n- 线上遇到某个用户的数据处理有问题，但线上同样无法 debug，线下无法重现！\n- 是否有一个全局视角来查看系统的运行状况？\n- 有什么办法可以监控到JVM的实时运行状态？\n- 怎么快速定位应用的热点，生成火焰图？\n\n本教程会以一个简单的应用为例，演示arthas-boot支持的参数。\n\n- Github: https://github.com/alibaba/arthas\n- 文档: https://arthas.aliyun.com/doc/\n\n## Arthas demo\n\n下载`arthas-demo.jar`，再用`java -jar`命令启动：\n\n```bash\nwget https://arthas.aliyun.com/arthas-demo.jar;java -jar arthas-demo.jar\n```\n\n\n\n`arthas-demo`是一个很简单的程序，它随机生成整数，再执行因式分解，把结果打印出来。如果生成的随机数是负数，则会打印提示信息。\n\n## arthas-boot支持的参数\n\n在新的`Terminal 2`里，下载`arthas-boot.jar`：\n\n```bash\nwget https://arthas.aliyun.com/arthas-boot.jar\n```\n\n`arthas-boot.jar` 支持很多参数，可以执行 `java -jar arthas-boot.jar -h` 来查看。\n\n```bash\njava -jar arthas-boot.jar -h\n```\n\n```console\n$ java -jar arthas-boot.jar -h\n[INFO] arthas-boot version: 3.3.6\nUsage: arthas-boot [-h] [--target-ip <value>] [--telnet-port <value>]\n       [--http-port <value>] [--session-timeout <value>] [--arthas-home <value>]\n       [--use-version <value>] [--repo-mirror <value>] [--versions] [--use-http]\n       [--attach-only] [-c <value>] [-f <value>] [--height <value>] [--width\n       <value>] [-v] [--tunnel-server <value>] [--agent-id <value>] [--stat-url\n       <value>] [--select <value>] [pid]\n\nBootstrap Arthas\n\nEXAMPLES:\n  java -jar arthas-boot.jar <pid>\n  java -jar arthas-boot.jar --target-ip 0.0.0.0\n  java -jar arthas-boot.jar --telnet-port 9999 --http-port -1\n  java -jar arthas-boot.jar --tunnel-server 'ws://192.168.10.11:7777/ws'\n  java -jar arthas-boot.jar --tunnel-server 'ws://192.168.10.11:7777/ws'\n--agent-id bvDOe8XbTM2pQWjF4cfw\n  java -jar arthas-boot.jar --stat-url 'http://192.168.10.11:8080/api/stat'\n  java -jar arthas-boot.jar -c 'sysprop; thread' <pid>\n  java -jar arthas-boot.jar -f batch.as <pid>\n  java -jar arthas-boot.jar --use-version 3.3.6\n  java -jar arthas-boot.jar --versions\n  java -jar arthas-boot.jar --select arthas-demo\n  java -jar arthas-boot.jar --session-timeout 3600\n  java -jar arthas-boot.jar --attach-only\n  java -jar arthas-boot.jar --repo-mirror aliyun --use-http\nWIKI:\n  https://arthas.aliyun.com/doc\n\nOptions and Arguments:\n -h,--help                      Print usage\n    --target-ip <value>         The target jvm listen ip, default 127.0.0.1\n    --telnet-port <value>       The target jvm listen telnet port, default 3658\n    --http-port <value>         The target jvm listen http port, default 8563\n    --session-timeout <value>   The session timeout seconds, default 1800\n                                (30min)\n    --arthas-home <value>       The arthas home\n    --use-version <value>       Use special version arthas\n    --repo-mirror <value>       Use special maven repository mirror, value is\n                                center/aliyun or http repo url.\n    --versions                  List local and remote arthas versions\n    --use-http                  Enforce use http to download, default use https\n    --attach-only               Attach target process only, do not connect\n -c,--command <value>           Command to execute, multiple commands separated\n                                by ;\n -f,--batch-file <value>        The batch file to execute\n    --height <value>            arthas-client terminal height\n    --width <value>             arthas-client terminal width\n -v,--verbose                   Verbose, print debug info.\n    --tunnel-server <value>     The tunnel server url\n    --agent-id <value>          The agent id register to tunnel server\n    --stat-url <value>          The report stat url\n    --select <value>            select target process by classname or\n                                JARfilename\n <pid>                          Target pid\n```\n\n## 参数详解\n\n### 指定目标pid\n\n可以使用`jps`命令查看pid。\n\n```bash\njps\n```\n\n直接在参数中添加pid，可指定目标pid。\n\n```bash\njava -jar arthas-boot.jar 1\n```\n\n### 允许外部访问\n\n默认情况下， arthas server侦听的是 `127.0.0.1` 这个IP，如果希望远程可以访问，可以使用`--target-ip`的参数。\n\n```bash\njava -jar arthas-boot.jar --target-ip 0.0.0.0\n```\n\n### 列出所有的版本\n\n```bash\njava -jar arthas-boot.jar --versions\n```\n\n使用指定版本：\n\n```bash\njava -jar arthas-boot.jar --use-version 3.1.0\n```\n\n### 打印运行的详情\n\n使用`-v`或者`-verbose`。\n\n```bash\njava -jar arthas-boot.jar -v\n```\n\n### 指定需要执行的命令目标pid\n\n可以使用`--command`或者`-c`参数指定，并同时指定pid，多个命令之间用`;`分隔。\n\n```bash\njava -jar arthas-boot.jar -c 'sysprop; thread' 1\n```\n\n### 指定需要执行的批处理文件目标pid\n\n可以使用`--command`或者`-c`参数指定，并同时指定pid。\n\n```bash\njava -jar arthas-boot.jar -f batch.as 1\n```\n\n### 通过类名或者jar文件名指定目标进程\n\n通过`--select`参数类名或者jar文件名指定目标进程\n\n```bash\njava -jar arthas-boot.jar --select arthas-demo\n```\n\n### 指定会话超时秒数\n\n使用`--session-timeout`参数指定，默认为1800(30分钟)\n\n```bash\njava -jar arthas-boot.jar --session-timeout 3600\n```\n\n### 仅附加目标进程，不连接\n\n```bash\njava -jar arthas-boot.jar --attach-only\n```\n\n### 指定镜像仓库，强制使用http\n\n`--repo-mirror`使用特定maven仓库镜像，参数可以为`center/aliyun`或http仓库地址。\n\n`--use-http`强制使用http下载，默认使用https。\n\n```bash\njava -jar arthas-boot.jar --repo-mirror aliyun --use-http\n```\n\n### 指定arthas客户端命令行宽高\n\n```bash\njava -jar arthas-boot.jar --height 25 --width 80\n```\n\n### 指定arthas主目录\n\n```bash\njava -jar arthas-boot.jar --arthas-home .\n```\n\n### 以Java Agent的方式启动\n\n通常Arthas是以动态attach的方式来诊断应用，但从3.2.0版本起，Arthas支持直接以 java agent的方式启动。\n\n比如下载全量的arthas zip包，解压之后以 -javaagent 的参数指定arthas-agent.jar来启动：\n\n```\njava -javaagent:/tmp/test/arthas-agent.jar -jar arthas-demo.jar\n```\n\n默认的配置项在解压目录里的arthas.properties文件里。\n\n参考： https://docs.oracle.com/javase/8/docs/api/java/lang/instrument/package-summary.html\n\n## 使用as.sh\n\nArthas 支持在 Linux/Unix/Mac 等平台上一键安装：\n\n```bash\ncurl -L https://arthas.aliyun.com/install.sh | sh\n```\n\n上述命令会下载启动脚本文件 `as.sh` 到当前目录，你可以放在任何地方或将其加入到 `$PATH` 中。\n\n直接在shell下面执行`./as.sh`，就会进入交互界面。\n\n也可以执行`./as.sh -h`来获取更多参数信息, 具体用法与`java -jar arthas-boot.jar`类似。\n\n## 更多信息\n\n通过本教程基本掌握了Arthas boot支持的参数。如果有更多的技巧或者使用疑问，欢迎在Issue里提出。\n\n- Issues: https://github.com/alibaba/arthas/issues\n- 文档： https://arthas.aliyun.com/doc\n\n如果您在使用Arthas，请让我们知道。您的使用对我们非常重要：[查看](https://github.com/alibaba/arthas/issues/111)\n\n文章拷贝来源：https://start.aliyun.com/course?spm=a2ck6.17690074.0.0.28bc2e7dHTphXs&id=PaiFAkJM","slug":"Java诊断工具Arthas最佳实践/学习Arthasarthas-boot支持的参数案例","published":1,"updated":"2021-08-07T05:33:55.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cks1cgr66001ffw5i6znyd4bw","content":"<!-- toc -->\n\n<ul>\n<li><a href=\"#arthas-demo\">Arthas demo</a></li>\n<li><a href=\"#arthas-boot%E6%94%AF%E6%8C%81%E7%9A%84%E5%8F%82%E6%95%B0\">arthas-boot支持的参数</a></li>\n<li><a href=\"#%E5%8F%82%E6%95%B0%E8%AF%A6%E8%A7%A3\">参数详解</a><ul>\n<li><a href=\"#%E6%8C%87%E5%AE%9A%E7%9B%AE%E6%A0%87pid\">指定目标pid</a></li>\n<li><a href=\"#%E5%85%81%E8%AE%B8%E5%A4%96%E9%83%A8%E8%AE%BF%E9%97%AE\">允许外部访问</a></li>\n<li><a href=\"#%E5%88%97%E5%87%BA%E6%89%80%E6%9C%89%E7%9A%84%E7%89%88%E6%9C%AC\">列出所有的版本</a></li>\n<li><a href=\"#%E6%89%93%E5%8D%B0%E8%BF%90%E8%A1%8C%E7%9A%84%E8%AF%A6%E6%83%85\">打印运行的详情</a></li>\n<li><a href=\"#%E6%8C%87%E5%AE%9A%E9%9C%80%E8%A6%81%E6%89%A7%E8%A1%8C%E7%9A%84%E5%91%BD%E4%BB%A4%E7%9B%AE%E6%A0%87pid\">指定需要执行的命令目标pid</a></li>\n<li><a href=\"#%E6%8C%87%E5%AE%9A%E9%9C%80%E8%A6%81%E6%89%A7%E8%A1%8C%E7%9A%84%E6%89%B9%E5%A4%84%E7%90%86%E6%96%87%E4%BB%B6%E7%9B%AE%E6%A0%87pid\">指定需要执行的批处理文件目标pid</a></li>\n<li><a href=\"#%E9%80%9A%E8%BF%87%E7%B1%BB%E5%90%8D%E6%88%96%E8%80%85jar%E6%96%87%E4%BB%B6%E5%90%8D%E6%8C%87%E5%AE%9A%E7%9B%AE%E6%A0%87%E8%BF%9B%E7%A8%8B\">通过类名或者jar文件名指定目标进程</a></li>\n<li><a href=\"#%E6%8C%87%E5%AE%9A%E4%BC%9A%E8%AF%9D%E8%B6%85%E6%97%B6%E7%A7%92%E6%95%B0\">指定会话超时秒数</a></li>\n<li><a href=\"#%E4%BB%85%E9%99%84%E5%8A%A0%E7%9B%AE%E6%A0%87%E8%BF%9B%E7%A8%8B%E4%B8%8D%E8%BF%9E%E6%8E%A5\">仅附加目标进程，不连接</a></li>\n<li><a href=\"#%E6%8C%87%E5%AE%9A%E9%95%9C%E5%83%8F%E4%BB%93%E5%BA%93%E5%BC%BA%E5%88%B6%E4%BD%BF%E7%94%A8http\">指定镜像仓库，强制使用http</a></li>\n<li><a href=\"#%E6%8C%87%E5%AE%9Aarthas%E5%AE%A2%E6%88%B7%E7%AB%AF%E5%91%BD%E4%BB%A4%E8%A1%8C%E5%AE%BD%E9%AB%98\">指定arthas客户端命令行宽高</a></li>\n<li><a href=\"#%E6%8C%87%E5%AE%9Aarthas%E4%B8%BB%E7%9B%AE%E5%BD%95\">指定arthas主目录</a></li>\n<li><a href=\"#%E4%BB%A5java-agent%E7%9A%84%E6%96%B9%E5%BC%8F%E5%90%AF%E5%8A%A8\">以Java Agent的方式启动</a></li>\n</ul>\n</li>\n<li><a href=\"#%E4%BD%BF%E7%94%A8assh\">使用as.sh</a></li>\n<li><a href=\"#%E6%9B%B4%E5%A4%9A%E4%BF%A1%E6%81%AF\">更多信息</a></li>\n</ul>\n<!-- tocstop -->\n\n<p><img src=\"/jlynet.github.io/2021/08/07/Java%E8%AF%8A%E6%96%AD%E5%B7%A5%E5%85%B7Arthas%E6%9C%80%E4%BD%B3%E5%AE%9E%E8%B7%B5/%E5%AD%A6%E4%B9%A0Arthasarthas-boot%E6%94%AF%E6%8C%81%E7%9A%84%E5%8F%82%E6%95%B0%E6%A1%88%E4%BE%8B/arthas.png\" alt=\"Arthas\"></p>\n<p><code>Arthas</code> 是Alibaba开源的Java诊断工具，深受开发者喜爱。在线排查问题，无需重启；动态跟踪Java代码；实时监控JVM状态。</p>\n<p><code>Arthas</code> 支持JDK 6+，支持Linux/Mac/Windows，采用命令行交互模式，同时提供丰富的 <code>Tab</code> 自动补全功能，进一步方便进行问题的定位和诊断。</p>\n<p>当你遇到以下类似问题而束手无策时，Arthas可以帮助你解决：</p>\n<ul>\n<li>这个类从哪个 jar 包加载的？为什么会报各种类相关的 Exception？</li>\n<li>我改的代码为什么没有执行到？难道是我没 commit？分支搞错了？</li>\n<li>遇到问题无法在线上 debug，难道只能通过加日志再重新发布吗？</li>\n<li>线上遇到某个用户的数据处理有问题，但线上同样无法 debug，线下无法重现！</li>\n<li>是否有一个全局视角来查看系统的运行状况？</li>\n<li>有什么办法可以监控到JVM的实时运行状态？</li>\n<li>怎么快速定位应用的热点，生成火焰图？</li>\n</ul>\n<p>本教程会以一个简单的应用为例，演示arthas-boot支持的参数。</p>\n<ul>\n<li>Github: <a href=\"https://github.com/alibaba/arthas\">https://github.com/alibaba/arthas</a></li>\n<li>文档: <a href=\"https://arthas.aliyun.com/doc/\">https://arthas.aliyun.com/doc/</a></li>\n</ul>\n<h2><span id=\"arthas-demo\">Arthas demo</span></h2><p>下载<code>arthas-demo.jar</code>，再用<code>java -jar</code>命令启动：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wget https://arthas.aliyun.com/arthas-demo.jar;java -jar arthas-demo.jar</span><br></pre></td></tr></table></figure>\n\n<p></p>\n<p><code>arthas-demo</code>是一个很简单的程序，它随机生成整数，再执行因式分解，把结果打印出来。如果生成的随机数是负数，则会打印提示信息。</p>\n<h2><span id=\"arthas-boot支持的参数\">arthas-boot支持的参数</span></h2><p>在新的<code>Terminal 2</code>里，下载<code>arthas-boot.jar</code>：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wget https://arthas.aliyun.com/arthas-boot.jar</span><br></pre></td></tr></table></figure>\n\n<p><code>arthas-boot.jar</code> 支持很多参数，可以执行 <code>java -jar arthas-boot.jar -h</code> 来查看。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">java -jar arthas-boot.jar -h</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight console\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> java -jar arthas-boot.jar -h</span></span><br><span class=\"line\">[INFO] arthas-boot version: 3.3.6</span><br><span class=\"line\">Usage: arthas-boot [-h] [--target-ip &lt;value&gt;] [--telnet-port &lt;value&gt;]</span><br><span class=\"line\">       [--http-port &lt;value&gt;] [--session-timeout &lt;value&gt;] [--arthas-home &lt;value&gt;]</span><br><span class=\"line\">       [--use-version &lt;value&gt;] [--repo-mirror &lt;value&gt;] [--versions] [--use-http]</span><br><span class=\"line\">       [--attach-only] [-c &lt;value&gt;] [-f &lt;value&gt;] [--height &lt;value&gt;] [--width</span><br><span class=\"line\">       &lt;value&gt;] [-v] [--tunnel-server &lt;value&gt;] [--agent-id &lt;value&gt;] [--stat-url</span><br><span class=\"line\">       &lt;value&gt;] [--select &lt;value&gt;] [pid]</span><br><span class=\"line\"></span><br><span class=\"line\">Bootstrap Arthas</span><br><span class=\"line\"></span><br><span class=\"line\">EXAMPLES:</span><br><span class=\"line\">  java -jar arthas-boot.jar &lt;pid&gt;</span><br><span class=\"line\">  java -jar arthas-boot.jar --target-ip 0.0.0.0</span><br><span class=\"line\">  java -jar arthas-boot.jar --telnet-port 9999 --http-port -1</span><br><span class=\"line\">  java -jar arthas-boot.jar --tunnel-server &#x27;ws://192.168.10.11:7777/ws&#x27;</span><br><span class=\"line\">  java -jar arthas-boot.jar --tunnel-server &#x27;ws://192.168.10.11:7777/ws&#x27;</span><br><span class=\"line\">--agent-id bvDOe8XbTM2pQWjF4cfw</span><br><span class=\"line\">  java -jar arthas-boot.jar --stat-url &#x27;http://192.168.10.11:8080/api/stat&#x27;</span><br><span class=\"line\">  java -jar arthas-boot.jar -c &#x27;sysprop; thread&#x27; &lt;pid&gt;</span><br><span class=\"line\">  java -jar arthas-boot.jar -f batch.as &lt;pid&gt;</span><br><span class=\"line\">  java -jar arthas-boot.jar --use-version 3.3.6</span><br><span class=\"line\">  java -jar arthas-boot.jar --versions</span><br><span class=\"line\">  java -jar arthas-boot.jar --select arthas-demo</span><br><span class=\"line\">  java -jar arthas-boot.jar --session-timeout 3600</span><br><span class=\"line\">  java -jar arthas-boot.jar --attach-only</span><br><span class=\"line\">  java -jar arthas-boot.jar --repo-mirror aliyun --use-http</span><br><span class=\"line\">WIKI:</span><br><span class=\"line\">  https://arthas.aliyun.com/doc</span><br><span class=\"line\"></span><br><span class=\"line\">Options and Arguments:</span><br><span class=\"line\"> -h,--help                      Print usage</span><br><span class=\"line\">    --target-ip &lt;value&gt;         The target jvm listen ip, default 127.0.0.1</span><br><span class=\"line\">    --telnet-port &lt;value&gt;       The target jvm listen telnet port, default 3658</span><br><span class=\"line\">    --http-port &lt;value&gt;         The target jvm listen http port, default 8563</span><br><span class=\"line\">    --session-timeout &lt;value&gt;   The session timeout seconds, default 1800</span><br><span class=\"line\">                                (30min)</span><br><span class=\"line\">    --arthas-home &lt;value&gt;       The arthas home</span><br><span class=\"line\">    --use-version &lt;value&gt;       Use special version arthas</span><br><span class=\"line\">    --repo-mirror &lt;value&gt;       Use special maven repository mirror, value is</span><br><span class=\"line\">                                center/aliyun or http repo url.</span><br><span class=\"line\">    --versions                  List local and remote arthas versions</span><br><span class=\"line\">    --use-http                  Enforce use http to download, default use https</span><br><span class=\"line\">    --attach-only               Attach target process only, do not connect</span><br><span class=\"line\"> -c,--command &lt;value&gt;           Command to execute, multiple commands separated</span><br><span class=\"line\">                                by ;</span><br><span class=\"line\"> -f,--batch-file &lt;value&gt;        The batch file to execute</span><br><span class=\"line\">    --height &lt;value&gt;            arthas-client terminal height</span><br><span class=\"line\">    --width &lt;value&gt;             arthas-client terminal width</span><br><span class=\"line\"> -v,--verbose                   Verbose, print debug info.</span><br><span class=\"line\">    --tunnel-server &lt;value&gt;     The tunnel server url</span><br><span class=\"line\">    --agent-id &lt;value&gt;          The agent id register to tunnel server</span><br><span class=\"line\">    --stat-url &lt;value&gt;          The report stat url</span><br><span class=\"line\">    --select &lt;value&gt;            select target process by classname or</span><br><span class=\"line\">                                JARfilename</span><br><span class=\"line\"> &lt;pid&gt;                          Target pid</span><br></pre></td></tr></table></figure>\n\n<h2><span id=\"参数详解\">参数详解</span></h2><h3><span id=\"指定目标pid\">指定目标pid</span></h3><p>可以使用<code>jps</code>命令查看pid。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">jps</span><br></pre></td></tr></table></figure>\n\n<p>直接在参数中添加pid，可指定目标pid。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">java -jar arthas-boot.jar 1</span><br></pre></td></tr></table></figure>\n\n<h3><span id=\"允许外部访问\">允许外部访问</span></h3><p>默认情况下， arthas server侦听的是 <code>127.0.0.1</code> 这个IP，如果希望远程可以访问，可以使用<code>--target-ip</code>的参数。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">java -jar arthas-boot.jar --target-ip 0.0.0.0</span><br></pre></td></tr></table></figure>\n\n<h3><span id=\"列出所有的版本\">列出所有的版本</span></h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">java -jar arthas-boot.jar --versions</span><br></pre></td></tr></table></figure>\n\n<p>使用指定版本：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">java -jar arthas-boot.jar --use-version 3.1.0</span><br></pre></td></tr></table></figure>\n\n<h3><span id=\"打印运行的详情\">打印运行的详情</span></h3><p>使用<code>-v</code>或者<code>-verbose</code>。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">java -jar arthas-boot.jar -v</span><br></pre></td></tr></table></figure>\n\n<h3><span id=\"指定需要执行的命令目标pid\">指定需要执行的命令目标pid</span></h3><p>可以使用<code>--command</code>或者<code>-c</code>参数指定，并同时指定pid，多个命令之间用<code>;</code>分隔。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">java -jar arthas-boot.jar -c <span class=\"string\">&#x27;sysprop; thread&#x27;</span> 1</span><br></pre></td></tr></table></figure>\n\n<h3><span id=\"指定需要执行的批处理文件目标pid\">指定需要执行的批处理文件目标pid</span></h3><p>可以使用<code>--command</code>或者<code>-c</code>参数指定，并同时指定pid。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">java -jar arthas-boot.jar -f batch.as 1</span><br></pre></td></tr></table></figure>\n\n<h3><span id=\"通过类名或者jar文件名指定目标进程\">通过类名或者jar文件名指定目标进程</span></h3><p>通过<code>--select</code>参数类名或者jar文件名指定目标进程</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">java -jar arthas-boot.jar --select arthas-demo</span><br></pre></td></tr></table></figure>\n\n<h3><span id=\"指定会话超时秒数\">指定会话超时秒数</span></h3><p>使用<code>--session-timeout</code>参数指定，默认为1800(30分钟)</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">java -jar arthas-boot.jar --session-timeout 3600</span><br></pre></td></tr></table></figure>\n\n<h3><span id=\"仅附加目标进程不连接\">仅附加目标进程，不连接</span></h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">java -jar arthas-boot.jar --attach-only</span><br></pre></td></tr></table></figure>\n\n<h3><span id=\"指定镜像仓库强制使用http\">指定镜像仓库，强制使用http</span></h3><p><code>--repo-mirror</code>使用特定maven仓库镜像，参数可以为<code>center/aliyun</code>或http仓库地址。</p>\n<p><code>--use-http</code>强制使用http下载，默认使用https。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">java -jar arthas-boot.jar --repo-mirror aliyun --use-http</span><br></pre></td></tr></table></figure>\n\n<h3><span id=\"指定arthas客户端命令行宽高\">指定arthas客户端命令行宽高</span></h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">java -jar arthas-boot.jar --height 25 --width 80</span><br></pre></td></tr></table></figure>\n\n<h3><span id=\"指定arthas主目录\">指定arthas主目录</span></h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">java -jar arthas-boot.jar --arthas-home .</span><br></pre></td></tr></table></figure>\n\n<h3><span id=\"以java-agent的方式启动\">以Java Agent的方式启动</span></h3><p>通常Arthas是以动态attach的方式来诊断应用，但从3.2.0版本起，Arthas支持直接以 java agent的方式启动。</p>\n<p>比如下载全量的arthas zip包，解压之后以 -javaagent 的参数指定arthas-agent.jar来启动：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">java -javaagent:/tmp/test/arthas-agent.jar -jar arthas-demo.jar</span><br></pre></td></tr></table></figure>\n\n<p>默认的配置项在解压目录里的arthas.properties文件里。</p>\n<p>参考： <a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/instrument/package-summary.html\">https://docs.oracle.com/javase/8/docs/api/java/lang/instrument/package-summary.html</a></p>\n<h2><span id=\"使用assh\">使用as.sh</span></h2><p>Arthas 支持在 Linux/Unix/Mac 等平台上一键安装：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">curl -L https://arthas.aliyun.com/install.sh | sh</span><br></pre></td></tr></table></figure>\n\n<p>上述命令会下载启动脚本文件 <code>as.sh</code> 到当前目录，你可以放在任何地方或将其加入到 <code>$PATH</code> 中。</p>\n<p>直接在shell下面执行<code>./as.sh</code>，就会进入交互界面。</p>\n<p>也可以执行<code>./as.sh -h</code>来获取更多参数信息, 具体用法与<code>java -jar arthas-boot.jar</code>类似。</p>\n<h2><span id=\"更多信息\">更多信息</span></h2><p>通过本教程基本掌握了Arthas boot支持的参数。如果有更多的技巧或者使用疑问，欢迎在Issue里提出。</p>\n<ul>\n<li>Issues: <a href=\"https://github.com/alibaba/arthas/issues\">https://github.com/alibaba/arthas/issues</a></li>\n<li>文档： <a href=\"https://arthas.aliyun.com/doc\">https://arthas.aliyun.com/doc</a></li>\n</ul>\n<p>如果您在使用Arthas，请让我们知道。您的使用对我们非常重要：<a href=\"https://github.com/alibaba/arthas/issues/111\">查看</a></p>\n<p>文章拷贝来源：<a href=\"https://start.aliyun.com/course?spm=a2ck6.17690074.0.0.28bc2e7dHTphXs&amp;id=PaiFAkJM\">https://start.aliyun.com/course?spm=a2ck6.17690074.0.0.28bc2e7dHTphXs&amp;id=PaiFAkJM</a></p>\n","site":{"data":{}},"excerpt":"","more":"<!-- toc -->\n\n<ul>\n<li><a href=\"#arthas-demo\">Arthas demo</a></li>\n<li><a href=\"#arthas-boot%E6%94%AF%E6%8C%81%E7%9A%84%E5%8F%82%E6%95%B0\">arthas-boot支持的参数</a></li>\n<li><a href=\"#%E5%8F%82%E6%95%B0%E8%AF%A6%E8%A7%A3\">参数详解</a><ul>\n<li><a href=\"#%E6%8C%87%E5%AE%9A%E7%9B%AE%E6%A0%87pid\">指定目标pid</a></li>\n<li><a href=\"#%E5%85%81%E8%AE%B8%E5%A4%96%E9%83%A8%E8%AE%BF%E9%97%AE\">允许外部访问</a></li>\n<li><a href=\"#%E5%88%97%E5%87%BA%E6%89%80%E6%9C%89%E7%9A%84%E7%89%88%E6%9C%AC\">列出所有的版本</a></li>\n<li><a href=\"#%E6%89%93%E5%8D%B0%E8%BF%90%E8%A1%8C%E7%9A%84%E8%AF%A6%E6%83%85\">打印运行的详情</a></li>\n<li><a href=\"#%E6%8C%87%E5%AE%9A%E9%9C%80%E8%A6%81%E6%89%A7%E8%A1%8C%E7%9A%84%E5%91%BD%E4%BB%A4%E7%9B%AE%E6%A0%87pid\">指定需要执行的命令目标pid</a></li>\n<li><a href=\"#%E6%8C%87%E5%AE%9A%E9%9C%80%E8%A6%81%E6%89%A7%E8%A1%8C%E7%9A%84%E6%89%B9%E5%A4%84%E7%90%86%E6%96%87%E4%BB%B6%E7%9B%AE%E6%A0%87pid\">指定需要执行的批处理文件目标pid</a></li>\n<li><a href=\"#%E9%80%9A%E8%BF%87%E7%B1%BB%E5%90%8D%E6%88%96%E8%80%85jar%E6%96%87%E4%BB%B6%E5%90%8D%E6%8C%87%E5%AE%9A%E7%9B%AE%E6%A0%87%E8%BF%9B%E7%A8%8B\">通过类名或者jar文件名指定目标进程</a></li>\n<li><a href=\"#%E6%8C%87%E5%AE%9A%E4%BC%9A%E8%AF%9D%E8%B6%85%E6%97%B6%E7%A7%92%E6%95%B0\">指定会话超时秒数</a></li>\n<li><a href=\"#%E4%BB%85%E9%99%84%E5%8A%A0%E7%9B%AE%E6%A0%87%E8%BF%9B%E7%A8%8B%E4%B8%8D%E8%BF%9E%E6%8E%A5\">仅附加目标进程，不连接</a></li>\n<li><a href=\"#%E6%8C%87%E5%AE%9A%E9%95%9C%E5%83%8F%E4%BB%93%E5%BA%93%E5%BC%BA%E5%88%B6%E4%BD%BF%E7%94%A8http\">指定镜像仓库，强制使用http</a></li>\n<li><a href=\"#%E6%8C%87%E5%AE%9Aarthas%E5%AE%A2%E6%88%B7%E7%AB%AF%E5%91%BD%E4%BB%A4%E8%A1%8C%E5%AE%BD%E9%AB%98\">指定arthas客户端命令行宽高</a></li>\n<li><a href=\"#%E6%8C%87%E5%AE%9Aarthas%E4%B8%BB%E7%9B%AE%E5%BD%95\">指定arthas主目录</a></li>\n<li><a href=\"#%E4%BB%A5java-agent%E7%9A%84%E6%96%B9%E5%BC%8F%E5%90%AF%E5%8A%A8\">以Java Agent的方式启动</a></li>\n</ul>\n</li>\n<li><a href=\"#%E4%BD%BF%E7%94%A8assh\">使用as.sh</a></li>\n<li><a href=\"#%E6%9B%B4%E5%A4%9A%E4%BF%A1%E6%81%AF\">更多信息</a></li>\n</ul>\n<!-- tocstop -->\n\n<p><img src=\"/jlynet.github.io/2021/08/07/Java%E8%AF%8A%E6%96%AD%E5%B7%A5%E5%85%B7Arthas%E6%9C%80%E4%BD%B3%E5%AE%9E%E8%B7%B5/%E5%AD%A6%E4%B9%A0Arthasarthas-boot%E6%94%AF%E6%8C%81%E7%9A%84%E5%8F%82%E6%95%B0%E6%A1%88%E4%BE%8B/arthas.png\" alt=\"Arthas\"></p>\n<p><code>Arthas</code> 是Alibaba开源的Java诊断工具，深受开发者喜爱。在线排查问题，无需重启；动态跟踪Java代码；实时监控JVM状态。</p>\n<p><code>Arthas</code> 支持JDK 6+，支持Linux/Mac/Windows，采用命令行交互模式，同时提供丰富的 <code>Tab</code> 自动补全功能，进一步方便进行问题的定位和诊断。</p>\n<p>当你遇到以下类似问题而束手无策时，Arthas可以帮助你解决：</p>\n<ul>\n<li>这个类从哪个 jar 包加载的？为什么会报各种类相关的 Exception？</li>\n<li>我改的代码为什么没有执行到？难道是我没 commit？分支搞错了？</li>\n<li>遇到问题无法在线上 debug，难道只能通过加日志再重新发布吗？</li>\n<li>线上遇到某个用户的数据处理有问题，但线上同样无法 debug，线下无法重现！</li>\n<li>是否有一个全局视角来查看系统的运行状况？</li>\n<li>有什么办法可以监控到JVM的实时运行状态？</li>\n<li>怎么快速定位应用的热点，生成火焰图？</li>\n</ul>\n<p>本教程会以一个简单的应用为例，演示arthas-boot支持的参数。</p>\n<ul>\n<li>Github: <a href=\"https://github.com/alibaba/arthas\">https://github.com/alibaba/arthas</a></li>\n<li>文档: <a href=\"https://arthas.aliyun.com/doc/\">https://arthas.aliyun.com/doc/</a></li>\n</ul>\n<h2 id=\"Arthas-demo\"><a href=\"#Arthas-demo\" class=\"headerlink\" title=\"Arthas demo\"></a>Arthas demo</h2><p>下载<code>arthas-demo.jar</code>，再用<code>java -jar</code>命令启动：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wget https://arthas.aliyun.com/arthas-demo.jar;java -jar arthas-demo.jar</span><br></pre></td></tr></table></figure>\n\n<p></p>\n<p><code>arthas-demo</code>是一个很简单的程序，它随机生成整数，再执行因式分解，把结果打印出来。如果生成的随机数是负数，则会打印提示信息。</p>\n<h2 id=\"arthas-boot支持的参数\"><a href=\"#arthas-boot支持的参数\" class=\"headerlink\" title=\"arthas-boot支持的参数\"></a>arthas-boot支持的参数</h2><p>在新的<code>Terminal 2</code>里，下载<code>arthas-boot.jar</code>：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wget https://arthas.aliyun.com/arthas-boot.jar</span><br></pre></td></tr></table></figure>\n\n<p><code>arthas-boot.jar</code> 支持很多参数，可以执行 <code>java -jar arthas-boot.jar -h</code> 来查看。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">java -jar arthas-boot.jar -h</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight console\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> java -jar arthas-boot.jar -h</span></span><br><span class=\"line\">[INFO] arthas-boot version: 3.3.6</span><br><span class=\"line\">Usage: arthas-boot [-h] [--target-ip &lt;value&gt;] [--telnet-port &lt;value&gt;]</span><br><span class=\"line\">       [--http-port &lt;value&gt;] [--session-timeout &lt;value&gt;] [--arthas-home &lt;value&gt;]</span><br><span class=\"line\">       [--use-version &lt;value&gt;] [--repo-mirror &lt;value&gt;] [--versions] [--use-http]</span><br><span class=\"line\">       [--attach-only] [-c &lt;value&gt;] [-f &lt;value&gt;] [--height &lt;value&gt;] [--width</span><br><span class=\"line\">       &lt;value&gt;] [-v] [--tunnel-server &lt;value&gt;] [--agent-id &lt;value&gt;] [--stat-url</span><br><span class=\"line\">       &lt;value&gt;] [--select &lt;value&gt;] [pid]</span><br><span class=\"line\"></span><br><span class=\"line\">Bootstrap Arthas</span><br><span class=\"line\"></span><br><span class=\"line\">EXAMPLES:</span><br><span class=\"line\">  java -jar arthas-boot.jar &lt;pid&gt;</span><br><span class=\"line\">  java -jar arthas-boot.jar --target-ip 0.0.0.0</span><br><span class=\"line\">  java -jar arthas-boot.jar --telnet-port 9999 --http-port -1</span><br><span class=\"line\">  java -jar arthas-boot.jar --tunnel-server &#x27;ws://192.168.10.11:7777/ws&#x27;</span><br><span class=\"line\">  java -jar arthas-boot.jar --tunnel-server &#x27;ws://192.168.10.11:7777/ws&#x27;</span><br><span class=\"line\">--agent-id bvDOe8XbTM2pQWjF4cfw</span><br><span class=\"line\">  java -jar arthas-boot.jar --stat-url &#x27;http://192.168.10.11:8080/api/stat&#x27;</span><br><span class=\"line\">  java -jar arthas-boot.jar -c &#x27;sysprop; thread&#x27; &lt;pid&gt;</span><br><span class=\"line\">  java -jar arthas-boot.jar -f batch.as &lt;pid&gt;</span><br><span class=\"line\">  java -jar arthas-boot.jar --use-version 3.3.6</span><br><span class=\"line\">  java -jar arthas-boot.jar --versions</span><br><span class=\"line\">  java -jar arthas-boot.jar --select arthas-demo</span><br><span class=\"line\">  java -jar arthas-boot.jar --session-timeout 3600</span><br><span class=\"line\">  java -jar arthas-boot.jar --attach-only</span><br><span class=\"line\">  java -jar arthas-boot.jar --repo-mirror aliyun --use-http</span><br><span class=\"line\">WIKI:</span><br><span class=\"line\">  https://arthas.aliyun.com/doc</span><br><span class=\"line\"></span><br><span class=\"line\">Options and Arguments:</span><br><span class=\"line\"> -h,--help                      Print usage</span><br><span class=\"line\">    --target-ip &lt;value&gt;         The target jvm listen ip, default 127.0.0.1</span><br><span class=\"line\">    --telnet-port &lt;value&gt;       The target jvm listen telnet port, default 3658</span><br><span class=\"line\">    --http-port &lt;value&gt;         The target jvm listen http port, default 8563</span><br><span class=\"line\">    --session-timeout &lt;value&gt;   The session timeout seconds, default 1800</span><br><span class=\"line\">                                (30min)</span><br><span class=\"line\">    --arthas-home &lt;value&gt;       The arthas home</span><br><span class=\"line\">    --use-version &lt;value&gt;       Use special version arthas</span><br><span class=\"line\">    --repo-mirror &lt;value&gt;       Use special maven repository mirror, value is</span><br><span class=\"line\">                                center/aliyun or http repo url.</span><br><span class=\"line\">    --versions                  List local and remote arthas versions</span><br><span class=\"line\">    --use-http                  Enforce use http to download, default use https</span><br><span class=\"line\">    --attach-only               Attach target process only, do not connect</span><br><span class=\"line\"> -c,--command &lt;value&gt;           Command to execute, multiple commands separated</span><br><span class=\"line\">                                by ;</span><br><span class=\"line\"> -f,--batch-file &lt;value&gt;        The batch file to execute</span><br><span class=\"line\">    --height &lt;value&gt;            arthas-client terminal height</span><br><span class=\"line\">    --width &lt;value&gt;             arthas-client terminal width</span><br><span class=\"line\"> -v,--verbose                   Verbose, print debug info.</span><br><span class=\"line\">    --tunnel-server &lt;value&gt;     The tunnel server url</span><br><span class=\"line\">    --agent-id &lt;value&gt;          The agent id register to tunnel server</span><br><span class=\"line\">    --stat-url &lt;value&gt;          The report stat url</span><br><span class=\"line\">    --select &lt;value&gt;            select target process by classname or</span><br><span class=\"line\">                                JARfilename</span><br><span class=\"line\"> &lt;pid&gt;                          Target pid</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"参数详解\"><a href=\"#参数详解\" class=\"headerlink\" title=\"参数详解\"></a>参数详解</h2><h3 id=\"指定目标pid\"><a href=\"#指定目标pid\" class=\"headerlink\" title=\"指定目标pid\"></a>指定目标pid</h3><p>可以使用<code>jps</code>命令查看pid。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">jps</span><br></pre></td></tr></table></figure>\n\n<p>直接在参数中添加pid，可指定目标pid。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">java -jar arthas-boot.jar 1</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"允许外部访问\"><a href=\"#允许外部访问\" class=\"headerlink\" title=\"允许外部访问\"></a>允许外部访问</h3><p>默认情况下， arthas server侦听的是 <code>127.0.0.1</code> 这个IP，如果希望远程可以访问，可以使用<code>--target-ip</code>的参数。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">java -jar arthas-boot.jar --target-ip 0.0.0.0</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"列出所有的版本\"><a href=\"#列出所有的版本\" class=\"headerlink\" title=\"列出所有的版本\"></a>列出所有的版本</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">java -jar arthas-boot.jar --versions</span><br></pre></td></tr></table></figure>\n\n<p>使用指定版本：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">java -jar arthas-boot.jar --use-version 3.1.0</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"打印运行的详情\"><a href=\"#打印运行的详情\" class=\"headerlink\" title=\"打印运行的详情\"></a>打印运行的详情</h3><p>使用<code>-v</code>或者<code>-verbose</code>。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">java -jar arthas-boot.jar -v</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"指定需要执行的命令目标pid\"><a href=\"#指定需要执行的命令目标pid\" class=\"headerlink\" title=\"指定需要执行的命令目标pid\"></a>指定需要执行的命令目标pid</h3><p>可以使用<code>--command</code>或者<code>-c</code>参数指定，并同时指定pid，多个命令之间用<code>;</code>分隔。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">java -jar arthas-boot.jar -c <span class=\"string\">&#x27;sysprop; thread&#x27;</span> 1</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"指定需要执行的批处理文件目标pid\"><a href=\"#指定需要执行的批处理文件目标pid\" class=\"headerlink\" title=\"指定需要执行的批处理文件目标pid\"></a>指定需要执行的批处理文件目标pid</h3><p>可以使用<code>--command</code>或者<code>-c</code>参数指定，并同时指定pid。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">java -jar arthas-boot.jar -f batch.as 1</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"通过类名或者jar文件名指定目标进程\"><a href=\"#通过类名或者jar文件名指定目标进程\" class=\"headerlink\" title=\"通过类名或者jar文件名指定目标进程\"></a>通过类名或者jar文件名指定目标进程</h3><p>通过<code>--select</code>参数类名或者jar文件名指定目标进程</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">java -jar arthas-boot.jar --select arthas-demo</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"指定会话超时秒数\"><a href=\"#指定会话超时秒数\" class=\"headerlink\" title=\"指定会话超时秒数\"></a>指定会话超时秒数</h3><p>使用<code>--session-timeout</code>参数指定，默认为1800(30分钟)</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">java -jar arthas-boot.jar --session-timeout 3600</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"仅附加目标进程，不连接\"><a href=\"#仅附加目标进程，不连接\" class=\"headerlink\" title=\"仅附加目标进程，不连接\"></a>仅附加目标进程，不连接</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">java -jar arthas-boot.jar --attach-only</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"指定镜像仓库，强制使用http\"><a href=\"#指定镜像仓库，强制使用http\" class=\"headerlink\" title=\"指定镜像仓库，强制使用http\"></a>指定镜像仓库，强制使用http</h3><p><code>--repo-mirror</code>使用特定maven仓库镜像，参数可以为<code>center/aliyun</code>或http仓库地址。</p>\n<p><code>--use-http</code>强制使用http下载，默认使用https。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">java -jar arthas-boot.jar --repo-mirror aliyun --use-http</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"指定arthas客户端命令行宽高\"><a href=\"#指定arthas客户端命令行宽高\" class=\"headerlink\" title=\"指定arthas客户端命令行宽高\"></a>指定arthas客户端命令行宽高</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">java -jar arthas-boot.jar --height 25 --width 80</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"指定arthas主目录\"><a href=\"#指定arthas主目录\" class=\"headerlink\" title=\"指定arthas主目录\"></a>指定arthas主目录</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">java -jar arthas-boot.jar --arthas-home .</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"以Java-Agent的方式启动\"><a href=\"#以Java-Agent的方式启动\" class=\"headerlink\" title=\"以Java Agent的方式启动\"></a>以Java Agent的方式启动</h3><p>通常Arthas是以动态attach的方式来诊断应用，但从3.2.0版本起，Arthas支持直接以 java agent的方式启动。</p>\n<p>比如下载全量的arthas zip包，解压之后以 -javaagent 的参数指定arthas-agent.jar来启动：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">java -javaagent:/tmp/test/arthas-agent.jar -jar arthas-demo.jar</span><br></pre></td></tr></table></figure>\n\n<p>默认的配置项在解压目录里的arthas.properties文件里。</p>\n<p>参考： <a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/instrument/package-summary.html\">https://docs.oracle.com/javase/8/docs/api/java/lang/instrument/package-summary.html</a></p>\n<h2 id=\"使用as-sh\"><a href=\"#使用as-sh\" class=\"headerlink\" title=\"使用as.sh\"></a>使用as.sh</h2><p>Arthas 支持在 Linux/Unix/Mac 等平台上一键安装：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">curl -L https://arthas.aliyun.com/install.sh | sh</span><br></pre></td></tr></table></figure>\n\n<p>上述命令会下载启动脚本文件 <code>as.sh</code> 到当前目录，你可以放在任何地方或将其加入到 <code>$PATH</code> 中。</p>\n<p>直接在shell下面执行<code>./as.sh</code>，就会进入交互界面。</p>\n<p>也可以执行<code>./as.sh -h</code>来获取更多参数信息, 具体用法与<code>java -jar arthas-boot.jar</code>类似。</p>\n<h2 id=\"更多信息\"><a href=\"#更多信息\" class=\"headerlink\" title=\"更多信息\"></a>更多信息</h2><p>通过本教程基本掌握了Arthas boot支持的参数。如果有更多的技巧或者使用疑问，欢迎在Issue里提出。</p>\n<ul>\n<li>Issues: <a href=\"https://github.com/alibaba/arthas/issues\">https://github.com/alibaba/arthas/issues</a></li>\n<li>文档： <a href=\"https://arthas.aliyun.com/doc\">https://arthas.aliyun.com/doc</a></li>\n</ul>\n<p>如果您在使用Arthas，请让我们知道。您的使用对我们非常重要：<a href=\"https://github.com/alibaba/arthas/issues/111\">查看</a></p>\n<p>文章拷贝来源：<a href=\"https://start.aliyun.com/course?spm=a2ck6.17690074.0.0.28bc2e7dHTphXs&amp;id=PaiFAkJM\">https://start.aliyun.com/course?spm=a2ck6.17690074.0.0.28bc2e7dHTphXs&amp;id=PaiFAkJM</a></p>\n"},{"title":"Arthas 理解Spring Boot应用的ClassLoader结构 案例","date":"2021-08-07T00:35:32.000Z","_content":"\n<!-- toc -->\n\n![Arthas](arthas.png)\n\n`Arthas` 是Alibaba开源的Java诊断工具，深受开发者喜爱。在线排查问题，无需重启；动态跟踪Java代码；实时监控JVM状态。\n\n`Arthas` 支持JDK 6+，支持Linux/Mac/Windows，采用命令行交互模式，同时提供丰富的 `Tab` 自动补全功能，进一步方便进行问题的定位和诊断。\n\n当你遇到以下类似问题而束手无策时，Arthas可以帮助你解决：\n\n- 这个类从哪个 jar 包加载的？为什么会报各种类相关的 Exception？\n- 我改的代码为什么没有执行到？难道是我没 commit？分支搞错了？\n- 遇到问题无法在线上 debug，难道只能通过加日志再重新发布吗？\n- 线上遇到某个用户的数据处理有问题，但线上同样无法 debug，线下无法重现！\n- 是否有一个全局视角来查看系统的运行状况？\n- 有什么办法可以监控到JVM的实时运行状态？\n- 怎么快速定位应用的热点，生成火焰图？\n\n本教程会以一个普通的Spring Boot应用为例，演示Arthas Spring Boot应用的ClassLoader结构。\n\n- Github: https://github.com/alibaba/arthas\n- 文档: https://arthas.aliyun.com/doc/\n\n## Start demo\n\n下载`demo-arthas-spring-boot.jar`，再用`java -jar`命令启动：\n\n```bash\nwget https://code.aliyun.com/middleware-container/handsonLabExternedFiles/raw/master/demo-arthas-spring-boot.jar;java -jar demo-arthas-spring-boot.jar\n```\n\n\n\n`demo-arthas-spring-boot`是一个很简单的spring boot应用，源代码：[查看](https://github.com/hengyunabc/spring-boot-inside/tree/master/demo-arthas-spring-boot)\n\n启动之后，可以访问61000端口： 点击查看\n\n![Demo Web](O1CN010Qbzcz1ctPSWSZI6L_!!6000000003658-2-tps-333-182.png)\n\n## Start arthas-boot\n\n在新的`Terminal 2`里，下载`arthas-boot.jar`，再用`java -jar`命令启动：\n\n```bash\nwget https://arthas.aliyun.com/arthas-boot.jar;java -jar arthas-boot.jar\n```\n\n\n\n`arthas-boot`是`Arthas`的启动程序，它启动后，会列出所有的Java进程，用户可以选择需要诊断的目标进程。\n\n选择第一个进程，输入 `1` ，再`Enter/回车`：\n\n```bash\n1\n```\n\n\n\nAttach成功之后，会打印Arthas LOGO。输入 `help` 可以获取到更多的帮助信息。\n\n```bash\nhelp\n```\n\n\n\n![Arthas Boot](O1CN01HzatXZ1RgccrlT90M_!!6000000002141-2-tps-529-244.png)\n\n## 理解Spring Boot应用的ClassLoader结构\n\n下面介绍`classloader`命令的功能。\n\n先访问一个jsp网页，触发jsp的加载： hello\n\n#### 列出所有ClassLoader\n\n```bash\nclassloader -l\n```\n\n```console\n$ classloader -l\n name                                                             loadedCount  hash      parent\n BootstrapClassLoader                                             2724         null      null\n com.taobao.arthas.agent.ArthasClassloader@411ce1ab               2009         411ce1ab  sun.misc.Launcher$ExtClassLoader@7494e528\n com.taobao.arthas.agent.ArthasClassloader@22ae1234               1253         22ae1234  sun.misc.Launcher$ExtClassLoader@7494e528\n org.apache.jasper.servlet.JasperLoader@65361d9a                  1            65361d9a  TomcatEmbeddedWebappClassLoader\n                                                                                           context: ROOT\n                                                                                           delegate: true\n                                                                                         ----------> Parent Classloader:\n                                                                                         org.springframework.boot.loader.LaunchedURLClassLoader@1be6f5c3\n\n TomcatEmbeddedWebappClassLoader                                  0            8546cd5   org.springframework.boot.loader.LaunchedURLClassLoader@1be6f5c3\n   context: ROOT\n   delegate: true\n ----------> Parent Classloader:\n org.springframework.boot.loader.LaunchedURLClassLoader@1be6f5c3\n\n org.springframework.boot.loader.LaunchedURLClassLoader@1be6f5c3  5416         1be6f5c3  sun.misc.Launcher$AppClassLoader@3d4eac69\n sun.misc.Launcher$AppClassLoader@3d4eac69                        45           3d4eac69  sun.misc.Launcher$ExtClassLoader@7494e528\n sun.misc.Launcher$ExtClassLoader@7494e528                        4            7494e528  null\n```\n\n- TomcatEmbeddedWebappClassLoader 加载的class数量是0，所以在spring boot embedded tomcat里，它只是一个空壳，所有的类加载都是`LaunchedURLClassLoader`完成的\n\n请记下你的classLoaderHash，后面需要使用它。在这里，它是 `65361d9a`。\n\n注意：请使用你的classLoaderHash值覆盖 `<classLoaderHash>` ，然后手动执行下面所有所述命令：\n\n#### 列出ClassLoader里加载的所有类\n\n列出上面的`org.apache.jasper.servlet.JasperLoader`加载的类：\n\n```\nclassloader -a -c <classLoaderHash>\n$ classloader -a -c 65361d9a\n hash:1698045338, org.apache.jasper.servlet.JasperLoader@65361d9a\n org.apache.jsp.jsp.hello_jsp\n```\n\n#### 查看类的classloader层次\n\n```bash\nsc -d org.apache.jsp.jsp.hello_jsp\n```\n\n#### 查看ClassLoader树\n\n```bash\nclassloader -t\n```\n\n```\n$ classloader -t+-BootstrapClassLoader+-sun.misc.Launcher$ExtClassLoader@28cbbddd  +-com.taobao.arthas.agent.ArthasClassloader@8c25e55  +-sun.misc.Launcher$AppClassLoader@55f96302    +-org.springframework.boot.loader.LaunchedURLClassLoader@1be6f5c3      +-TomcatEmbeddedWebappClassLoader          context: ROOT          delegate: true        ----------> Parent Classloader:        org.springframework.boot.loader.LaunchedURLClassLoader@1be6f5c3        +-org.apache.jasper.servlet.JasperLoader@21ae0fe2\n```\n\n#### 查看URLClassLoader实际的urls\n\n比如上面查看到的spring LaunchedURLClassLoader的 hashcode是`1be6f5c3`，可以通过`-c`参数来指定classloader，从而查看URLClassLoader实际的urls：\n\n```\nclassloader -c <classLoaderHash>$ classloader -c 1be6f5c3jar:file:/home/scrapbook/tutorial/demo-arthas-spring-boot.jar!/BOOT-INF/classes!/jar:file:/home/scrapbook/tutorial/demo-arthas-spring-boot.jar!/BOOT-INF/lib/spring-boot-starter-aop-1.5.13.RELEASE.jar!/...\n```\n\n#### 加载指定ClassLoader里的资源文件\n\n查找指定的资源文件： `classloader -c <classLoaderHash> -r logback-spring.xml`\n\n```\n$ classloader -c 1be6f5c3 -r logback-spring.xml jar:file:/home/scrapbook/tutorial/demo-arthas-spring-boot.jar!/BOOT-INF/classes!/logback-spring.xml\n```\n\n也可以尝试查找类的class文件：\n\n```\nclassloader -c <classLoaderHash> -r java/lang/String.class$ classloader -c 1b6d3586 -r java/lang/String.class jar:file:/Library/Java/JavaVirtualMachines/jdk1.8.0_60.jdk/Contents/Home/jre/lib/rt.jar!/java/lang/String.class\n```\n\n#### 尝试加载指定的类\n\n比如用上面的spring LaunchedURLClassLoader 尝试加载 `ch.qos.logback.classic.spi.StackTraceElementProxy` ：\n\n首先使用`sc ch.qos.logback.classic.spi.StackTraceElementProxy`查看，可发现未加载：\n\n```bash\nsc ch.qos.logback.classic.spi.StackTraceElementProxy\n```\n\n\n\n```console\nAffect(row-cnt:0) cost in 18 ms.\n```\n\n因而使用spring LaunchedURLClassLoader 尝试加载：\n\n```\nclassloader -c <classLoaderHash> --load ch.qos.logback.classic.spi.StackTraceElementProxy$ classloader -c 1be6f5c3 --load ch.qos.logback.classic.spi.StackTraceElementProxyload class success. class-info        ch.qos.logback.classic.spi.StackTraceElementProxy code-source       file:/home/scrapbook/tutorial/demo-arthas-spring-boot.jar!/BOOT-INF/lib/logback-classic-1.                   1.11.jar!/ name              ch.qos.logback.classic.spi.StackTraceElementProxy isInterface       false isAnnotation      false isEnum            false isAnonymousClass  false isArray           false isLocalClass      false isMemberClass     false isPrimitive       false isSynthetic       false simple-name       StackTraceElementProxy modifier          public annotation interfaces        java.io.Serializable super-class       +-java.lang.Object class-loader      +-org.springframework.boot.loader.LaunchedURLClassLoader@5674cd4d                     +-sun.misc.Launcher$AppClassLoader@70dea4e                       +-sun.misc.Launcher$ExtClassLoader@56a96482 classLoaderHash   5674cd4d\n```\n\n再次使用`sc ch.qos.logback.classic.spi.StackTraceElementProxy`查看，发现已经加载：\n\n```bash\nsc ch.qos.logback.classic.spi.StackTraceElementProxy\n```\n\n```console\nch.qos.logback.classic.spi.StackTraceElementProxyAffect(row-cnt:1) cost in 19 ms.\n```\n\n## 更多信息\n\n通过本教程基本掌握了Arthas Spring Boot应用的ClassLoader结构。如果有更多的技巧或者使用疑问，欢迎在Issue里提出。\n\n- Issues: https://github.com/alibaba/arthas/issues\n- 文档： https://arthas.aliyun.com/doc\n\n如果您在使用Arthas，请让我们知道。您的使用对我们非常重要：[查看](https://github.com/alibaba/arthas/issues/111)\n\n文章拷贝来源：https://start.aliyun.com/course?spm=a2ck6.17690074.0.0.28bc2e7dHTphXs&id=PaiFAkJM","source":"_posts/Java诊断工具Arthas最佳实践/学习Arthasclassloader案例.md","raw":"---\ntitle: Arthas 理解Spring Boot应用的ClassLoader结构 案例\ndate: 2021-08-07 08:35:32\ntags: ['Java 诊断工具 Arthas 最佳实践']\n---\n\n<!-- toc -->\n\n![Arthas](arthas.png)\n\n`Arthas` 是Alibaba开源的Java诊断工具，深受开发者喜爱。在线排查问题，无需重启；动态跟踪Java代码；实时监控JVM状态。\n\n`Arthas` 支持JDK 6+，支持Linux/Mac/Windows，采用命令行交互模式，同时提供丰富的 `Tab` 自动补全功能，进一步方便进行问题的定位和诊断。\n\n当你遇到以下类似问题而束手无策时，Arthas可以帮助你解决：\n\n- 这个类从哪个 jar 包加载的？为什么会报各种类相关的 Exception？\n- 我改的代码为什么没有执行到？难道是我没 commit？分支搞错了？\n- 遇到问题无法在线上 debug，难道只能通过加日志再重新发布吗？\n- 线上遇到某个用户的数据处理有问题，但线上同样无法 debug，线下无法重现！\n- 是否有一个全局视角来查看系统的运行状况？\n- 有什么办法可以监控到JVM的实时运行状态？\n- 怎么快速定位应用的热点，生成火焰图？\n\n本教程会以一个普通的Spring Boot应用为例，演示Arthas Spring Boot应用的ClassLoader结构。\n\n- Github: https://github.com/alibaba/arthas\n- 文档: https://arthas.aliyun.com/doc/\n\n## Start demo\n\n下载`demo-arthas-spring-boot.jar`，再用`java -jar`命令启动：\n\n```bash\nwget https://code.aliyun.com/middleware-container/handsonLabExternedFiles/raw/master/demo-arthas-spring-boot.jar;java -jar demo-arthas-spring-boot.jar\n```\n\n\n\n`demo-arthas-spring-boot`是一个很简单的spring boot应用，源代码：[查看](https://github.com/hengyunabc/spring-boot-inside/tree/master/demo-arthas-spring-boot)\n\n启动之后，可以访问61000端口： 点击查看\n\n![Demo Web](O1CN010Qbzcz1ctPSWSZI6L_!!6000000003658-2-tps-333-182.png)\n\n## Start arthas-boot\n\n在新的`Terminal 2`里，下载`arthas-boot.jar`，再用`java -jar`命令启动：\n\n```bash\nwget https://arthas.aliyun.com/arthas-boot.jar;java -jar arthas-boot.jar\n```\n\n\n\n`arthas-boot`是`Arthas`的启动程序，它启动后，会列出所有的Java进程，用户可以选择需要诊断的目标进程。\n\n选择第一个进程，输入 `1` ，再`Enter/回车`：\n\n```bash\n1\n```\n\n\n\nAttach成功之后，会打印Arthas LOGO。输入 `help` 可以获取到更多的帮助信息。\n\n```bash\nhelp\n```\n\n\n\n![Arthas Boot](O1CN01HzatXZ1RgccrlT90M_!!6000000002141-2-tps-529-244.png)\n\n## 理解Spring Boot应用的ClassLoader结构\n\n下面介绍`classloader`命令的功能。\n\n先访问一个jsp网页，触发jsp的加载： hello\n\n#### 列出所有ClassLoader\n\n```bash\nclassloader -l\n```\n\n```console\n$ classloader -l\n name                                                             loadedCount  hash      parent\n BootstrapClassLoader                                             2724         null      null\n com.taobao.arthas.agent.ArthasClassloader@411ce1ab               2009         411ce1ab  sun.misc.Launcher$ExtClassLoader@7494e528\n com.taobao.arthas.agent.ArthasClassloader@22ae1234               1253         22ae1234  sun.misc.Launcher$ExtClassLoader@7494e528\n org.apache.jasper.servlet.JasperLoader@65361d9a                  1            65361d9a  TomcatEmbeddedWebappClassLoader\n                                                                                           context: ROOT\n                                                                                           delegate: true\n                                                                                         ----------> Parent Classloader:\n                                                                                         org.springframework.boot.loader.LaunchedURLClassLoader@1be6f5c3\n\n TomcatEmbeddedWebappClassLoader                                  0            8546cd5   org.springframework.boot.loader.LaunchedURLClassLoader@1be6f5c3\n   context: ROOT\n   delegate: true\n ----------> Parent Classloader:\n org.springframework.boot.loader.LaunchedURLClassLoader@1be6f5c3\n\n org.springframework.boot.loader.LaunchedURLClassLoader@1be6f5c3  5416         1be6f5c3  sun.misc.Launcher$AppClassLoader@3d4eac69\n sun.misc.Launcher$AppClassLoader@3d4eac69                        45           3d4eac69  sun.misc.Launcher$ExtClassLoader@7494e528\n sun.misc.Launcher$ExtClassLoader@7494e528                        4            7494e528  null\n```\n\n- TomcatEmbeddedWebappClassLoader 加载的class数量是0，所以在spring boot embedded tomcat里，它只是一个空壳，所有的类加载都是`LaunchedURLClassLoader`完成的\n\n请记下你的classLoaderHash，后面需要使用它。在这里，它是 `65361d9a`。\n\n注意：请使用你的classLoaderHash值覆盖 `<classLoaderHash>` ，然后手动执行下面所有所述命令：\n\n#### 列出ClassLoader里加载的所有类\n\n列出上面的`org.apache.jasper.servlet.JasperLoader`加载的类：\n\n```\nclassloader -a -c <classLoaderHash>\n$ classloader -a -c 65361d9a\n hash:1698045338, org.apache.jasper.servlet.JasperLoader@65361d9a\n org.apache.jsp.jsp.hello_jsp\n```\n\n#### 查看类的classloader层次\n\n```bash\nsc -d org.apache.jsp.jsp.hello_jsp\n```\n\n#### 查看ClassLoader树\n\n```bash\nclassloader -t\n```\n\n```\n$ classloader -t+-BootstrapClassLoader+-sun.misc.Launcher$ExtClassLoader@28cbbddd  +-com.taobao.arthas.agent.ArthasClassloader@8c25e55  +-sun.misc.Launcher$AppClassLoader@55f96302    +-org.springframework.boot.loader.LaunchedURLClassLoader@1be6f5c3      +-TomcatEmbeddedWebappClassLoader          context: ROOT          delegate: true        ----------> Parent Classloader:        org.springframework.boot.loader.LaunchedURLClassLoader@1be6f5c3        +-org.apache.jasper.servlet.JasperLoader@21ae0fe2\n```\n\n#### 查看URLClassLoader实际的urls\n\n比如上面查看到的spring LaunchedURLClassLoader的 hashcode是`1be6f5c3`，可以通过`-c`参数来指定classloader，从而查看URLClassLoader实际的urls：\n\n```\nclassloader -c <classLoaderHash>$ classloader -c 1be6f5c3jar:file:/home/scrapbook/tutorial/demo-arthas-spring-boot.jar!/BOOT-INF/classes!/jar:file:/home/scrapbook/tutorial/demo-arthas-spring-boot.jar!/BOOT-INF/lib/spring-boot-starter-aop-1.5.13.RELEASE.jar!/...\n```\n\n#### 加载指定ClassLoader里的资源文件\n\n查找指定的资源文件： `classloader -c <classLoaderHash> -r logback-spring.xml`\n\n```\n$ classloader -c 1be6f5c3 -r logback-spring.xml jar:file:/home/scrapbook/tutorial/demo-arthas-spring-boot.jar!/BOOT-INF/classes!/logback-spring.xml\n```\n\n也可以尝试查找类的class文件：\n\n```\nclassloader -c <classLoaderHash> -r java/lang/String.class$ classloader -c 1b6d3586 -r java/lang/String.class jar:file:/Library/Java/JavaVirtualMachines/jdk1.8.0_60.jdk/Contents/Home/jre/lib/rt.jar!/java/lang/String.class\n```\n\n#### 尝试加载指定的类\n\n比如用上面的spring LaunchedURLClassLoader 尝试加载 `ch.qos.logback.classic.spi.StackTraceElementProxy` ：\n\n首先使用`sc ch.qos.logback.classic.spi.StackTraceElementProxy`查看，可发现未加载：\n\n```bash\nsc ch.qos.logback.classic.spi.StackTraceElementProxy\n```\n\n\n\n```console\nAffect(row-cnt:0) cost in 18 ms.\n```\n\n因而使用spring LaunchedURLClassLoader 尝试加载：\n\n```\nclassloader -c <classLoaderHash> --load ch.qos.logback.classic.spi.StackTraceElementProxy$ classloader -c 1be6f5c3 --load ch.qos.logback.classic.spi.StackTraceElementProxyload class success. class-info        ch.qos.logback.classic.spi.StackTraceElementProxy code-source       file:/home/scrapbook/tutorial/demo-arthas-spring-boot.jar!/BOOT-INF/lib/logback-classic-1.                   1.11.jar!/ name              ch.qos.logback.classic.spi.StackTraceElementProxy isInterface       false isAnnotation      false isEnum            false isAnonymousClass  false isArray           false isLocalClass      false isMemberClass     false isPrimitive       false isSynthetic       false simple-name       StackTraceElementProxy modifier          public annotation interfaces        java.io.Serializable super-class       +-java.lang.Object class-loader      +-org.springframework.boot.loader.LaunchedURLClassLoader@5674cd4d                     +-sun.misc.Launcher$AppClassLoader@70dea4e                       +-sun.misc.Launcher$ExtClassLoader@56a96482 classLoaderHash   5674cd4d\n```\n\n再次使用`sc ch.qos.logback.classic.spi.StackTraceElementProxy`查看，发现已经加载：\n\n```bash\nsc ch.qos.logback.classic.spi.StackTraceElementProxy\n```\n\n```console\nch.qos.logback.classic.spi.StackTraceElementProxyAffect(row-cnt:1) cost in 19 ms.\n```\n\n## 更多信息\n\n通过本教程基本掌握了Arthas Spring Boot应用的ClassLoader结构。如果有更多的技巧或者使用疑问，欢迎在Issue里提出。\n\n- Issues: https://github.com/alibaba/arthas/issues\n- 文档： https://arthas.aliyun.com/doc\n\n如果您在使用Arthas，请让我们知道。您的使用对我们非常重要：[查看](https://github.com/alibaba/arthas/issues/111)\n\n文章拷贝来源：https://start.aliyun.com/course?spm=a2ck6.17690074.0.0.28bc2e7dHTphXs&id=PaiFAkJM","slug":"Java诊断工具Arthas最佳实践/学习Arthasclassloader案例","published":1,"updated":"2021-08-07T05:33:59.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cks1cgr67001hfw5iht9t8y8o","content":"<!-- toc -->\n\n<ul>\n<li><a href=\"#start-demo\">Start demo</a></li>\n<li><a href=\"#start-arthas-boot\">Start arthas-boot</a></li>\n<li><a href=\"#%E7%90%86%E8%A7%A3spring-boot%E5%BA%94%E7%94%A8%E7%9A%84classloader%E7%BB%93%E6%9E%84\">理解Spring Boot应用的ClassLoader结构</a><ul>\n<li><a href=\"#%E5%88%97%E5%87%BA%E6%89%80%E6%9C%89classloader\">列出所有ClassLoader</a></li>\n<li><a href=\"#%E5%88%97%E5%87%BAclassloader%E9%87%8C%E5%8A%A0%E8%BD%BD%E7%9A%84%E6%89%80%E6%9C%89%E7%B1%BB\">列出ClassLoader里加载的所有类</a></li>\n<li><a href=\"#%E6%9F%A5%E7%9C%8B%E7%B1%BB%E7%9A%84classloader%E5%B1%82%E6%AC%A1\">查看类的classloader层次</a></li>\n<li><a href=\"#%E6%9F%A5%E7%9C%8Bclassloader%E6%A0%91\">查看ClassLoader树</a></li>\n<li><a href=\"#%E6%9F%A5%E7%9C%8Burlclassloader%E5%AE%9E%E9%99%85%E7%9A%84urls\">查看URLClassLoader实际的urls</a></li>\n<li><a href=\"#%E5%8A%A0%E8%BD%BD%E6%8C%87%E5%AE%9Aclassloader%E9%87%8C%E7%9A%84%E8%B5%84%E6%BA%90%E6%96%87%E4%BB%B6\">加载指定ClassLoader里的资源文件</a></li>\n<li><a href=\"#%E5%B0%9D%E8%AF%95%E5%8A%A0%E8%BD%BD%E6%8C%87%E5%AE%9A%E7%9A%84%E7%B1%BB\">尝试加载指定的类</a></li>\n</ul>\n</li>\n<li><a href=\"#%E6%9B%B4%E5%A4%9A%E4%BF%A1%E6%81%AF\">更多信息</a></li>\n</ul>\n<!-- tocstop -->\n\n<p><img src=\"/jlynet.github.io/2021/08/07/Java%E8%AF%8A%E6%96%AD%E5%B7%A5%E5%85%B7Arthas%E6%9C%80%E4%BD%B3%E5%AE%9E%E8%B7%B5/%E5%AD%A6%E4%B9%A0Arthasclassloader%E6%A1%88%E4%BE%8B/arthas.png\" alt=\"Arthas\"></p>\n<p><code>Arthas</code> 是Alibaba开源的Java诊断工具，深受开发者喜爱。在线排查问题，无需重启；动态跟踪Java代码；实时监控JVM状态。</p>\n<p><code>Arthas</code> 支持JDK 6+，支持Linux/Mac/Windows，采用命令行交互模式，同时提供丰富的 <code>Tab</code> 自动补全功能，进一步方便进行问题的定位和诊断。</p>\n<p>当你遇到以下类似问题而束手无策时，Arthas可以帮助你解决：</p>\n<ul>\n<li>这个类从哪个 jar 包加载的？为什么会报各种类相关的 Exception？</li>\n<li>我改的代码为什么没有执行到？难道是我没 commit？分支搞错了？</li>\n<li>遇到问题无法在线上 debug，难道只能通过加日志再重新发布吗？</li>\n<li>线上遇到某个用户的数据处理有问题，但线上同样无法 debug，线下无法重现！</li>\n<li>是否有一个全局视角来查看系统的运行状况？</li>\n<li>有什么办法可以监控到JVM的实时运行状态？</li>\n<li>怎么快速定位应用的热点，生成火焰图？</li>\n</ul>\n<p>本教程会以一个普通的Spring Boot应用为例，演示Arthas Spring Boot应用的ClassLoader结构。</p>\n<ul>\n<li>Github: <a href=\"https://github.com/alibaba/arthas\">https://github.com/alibaba/arthas</a></li>\n<li>文档: <a href=\"https://arthas.aliyun.com/doc/\">https://arthas.aliyun.com/doc/</a></li>\n</ul>\n<h2><span id=\"start-demo\">Start demo</span></h2><p>下载<code>demo-arthas-spring-boot.jar</code>，再用<code>java -jar</code>命令启动：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wget https://code.aliyun.com/middleware-container/handsonLabExternedFiles/raw/master/demo-arthas-spring-boot.jar;java -jar demo-arthas-spring-boot.jar</span><br></pre></td></tr></table></figure>\n\n\n\n<p><code>demo-arthas-spring-boot</code>是一个很简单的spring boot应用，源代码：<a href=\"https://github.com/hengyunabc/spring-boot-inside/tree/master/demo-arthas-spring-boot\">查看</a></p>\n<p>启动之后，可以访问61000端口： 点击查看</p>\n<p><img src=\"/jlynet.github.io/2021/08/07/Java%E8%AF%8A%E6%96%AD%E5%B7%A5%E5%85%B7Arthas%E6%9C%80%E4%BD%B3%E5%AE%9E%E8%B7%B5/%E5%AD%A6%E4%B9%A0Arthasclassloader%E6%A1%88%E4%BE%8B/O1CN010Qbzcz1ctPSWSZI6L_!!6000000003658-2-tps-333-182.png\" alt=\"Demo Web\"></p>\n<h2><span id=\"start-arthas-boot\">Start arthas-boot</span></h2><p>在新的<code>Terminal 2</code>里，下载<code>arthas-boot.jar</code>，再用<code>java -jar</code>命令启动：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wget https://arthas.aliyun.com/arthas-boot.jar;java -jar arthas-boot.jar</span><br></pre></td></tr></table></figure>\n\n\n\n<p><code>arthas-boot</code>是<code>Arthas</code>的启动程序，它启动后，会列出所有的Java进程，用户可以选择需要诊断的目标进程。</p>\n<p>选择第一个进程，输入 <code>1</code> ，再<code>Enter/回车</code>：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1</span><br></pre></td></tr></table></figure>\n\n\n\n<p>Attach成功之后，会打印Arthas LOGO。输入 <code>help</code> 可以获取到更多的帮助信息。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">help</span></span><br></pre></td></tr></table></figure>\n\n\n\n<p><img src=\"/jlynet.github.io/2021/08/07/Java%E8%AF%8A%E6%96%AD%E5%B7%A5%E5%85%B7Arthas%E6%9C%80%E4%BD%B3%E5%AE%9E%E8%B7%B5/%E5%AD%A6%E4%B9%A0Arthasclassloader%E6%A1%88%E4%BE%8B/O1CN01HzatXZ1RgccrlT90M_!!6000000002141-2-tps-529-244.png\" alt=\"Arthas Boot\"></p>\n<h2><span id=\"理解spring-boot应用的classloader结构\">理解Spring Boot应用的ClassLoader结构</span></h2><p>下面介绍<code>classloader</code>命令的功能。</p>\n<p>先访问一个jsp网页，触发jsp的加载： hello</p>\n<h4><span id=\"列出所有classloader\">列出所有ClassLoader</span></h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">classloader -l</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight console\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> classloader -l</span></span><br><span class=\"line\"> name                                                             loadedCount  hash      parent</span><br><span class=\"line\"> BootstrapClassLoader                                             2724         null      null</span><br><span class=\"line\"> com.taobao.arthas.agent.ArthasClassloader@411ce1ab               2009         411ce1ab  sun.misc.Launcher$ExtClassLoader@7494e528</span><br><span class=\"line\"> com.taobao.arthas.agent.ArthasClassloader@22ae1234               1253         22ae1234  sun.misc.Launcher$ExtClassLoader@7494e528</span><br><span class=\"line\"> org.apache.jasper.servlet.JasperLoader@65361d9a                  1            65361d9a  TomcatEmbeddedWebappClassLoader</span><br><span class=\"line\">                                                                                           context: ROOT</span><br><span class=\"line\">                                                                                           delegate: true</span><br><span class=\"line\">                                                                                         ----------&gt; Parent Classloader:</span><br><span class=\"line\">                                                                                         org.springframework.boot.loader.LaunchedURLClassLoader@1be6f5c3</span><br><span class=\"line\"></span><br><span class=\"line\"> TomcatEmbeddedWebappClassLoader                                  0            8546cd5   org.springframework.boot.loader.LaunchedURLClassLoader@1be6f5c3</span><br><span class=\"line\">   context: ROOT</span><br><span class=\"line\">   delegate: true</span><br><span class=\"line\"><span class=\"meta\"> ----------&gt;</span><span class=\"bash\"> Parent Classloader:</span></span><br><span class=\"line\"> org.springframework.boot.loader.LaunchedURLClassLoader@1be6f5c3</span><br><span class=\"line\"></span><br><span class=\"line\"> org.springframework.boot.loader.LaunchedURLClassLoader@1be6f5c3  5416         1be6f5c3  sun.misc.Launcher$AppClassLoader@3d4eac69</span><br><span class=\"line\"> sun.misc.Launcher$AppClassLoader@3d4eac69                        45           3d4eac69  sun.misc.Launcher$ExtClassLoader@7494e528</span><br><span class=\"line\"> sun.misc.Launcher$ExtClassLoader@7494e528                        4            7494e528  null</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>TomcatEmbeddedWebappClassLoader 加载的class数量是0，所以在spring boot embedded tomcat里，它只是一个空壳，所有的类加载都是<code>LaunchedURLClassLoader</code>完成的</li>\n</ul>\n<p>请记下你的classLoaderHash，后面需要使用它。在这里，它是 <code>65361d9a</code>。</p>\n<p>注意：请使用你的classLoaderHash值覆盖 <code>&lt;classLoaderHash&gt;</code> ，然后手动执行下面所有所述命令：</p>\n<h4><span id=\"列出classloader里加载的所有类\">列出ClassLoader里加载的所有类</span></h4><p>列出上面的<code>org.apache.jasper.servlet.JasperLoader</code>加载的类：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">classloader -a -c &lt;classLoaderHash&gt;</span><br><span class=\"line\">$ classloader -a -c 65361d9a</span><br><span class=\"line\"> hash:1698045338, org.apache.jasper.servlet.JasperLoader@65361d9a</span><br><span class=\"line\"> org.apache.jsp.jsp.hello_jsp</span><br></pre></td></tr></table></figure>\n\n<h4><span id=\"查看类的classloader层次\">查看类的classloader层次</span></h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sc -d org.apache.jsp.jsp.hello_jsp</span><br></pre></td></tr></table></figure>\n\n<h4><span id=\"查看classloader树\">查看ClassLoader树</span></h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">classloader -t</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ classloader -t+-BootstrapClassLoader+-sun.misc.Launcher$ExtClassLoader@28cbbddd  +-com.taobao.arthas.agent.ArthasClassloader@8c25e55  +-sun.misc.Launcher$AppClassLoader@55f96302    +-org.springframework.boot.loader.LaunchedURLClassLoader@1be6f5c3      +-TomcatEmbeddedWebappClassLoader          context: ROOT          delegate: true        ----------&gt; Parent Classloader:        org.springframework.boot.loader.LaunchedURLClassLoader@1be6f5c3        +-org.apache.jasper.servlet.JasperLoader@21ae0fe2</span><br></pre></td></tr></table></figure>\n\n<h4><span id=\"查看urlclassloader实际的urls\">查看URLClassLoader实际的urls</span></h4><p>比如上面查看到的spring LaunchedURLClassLoader的 hashcode是<code>1be6f5c3</code>，可以通过<code>-c</code>参数来指定classloader，从而查看URLClassLoader实际的urls：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">classloader -c &lt;classLoaderHash&gt;$ classloader -c 1be6f5c3jar:file:/home/scrapbook/tutorial/demo-arthas-spring-boot.jar!/BOOT-INF/classes!/jar:file:/home/scrapbook/tutorial/demo-arthas-spring-boot.jar!/BOOT-INF/lib/spring-boot-starter-aop-1.5.13.RELEASE.jar!/...</span><br></pre></td></tr></table></figure>\n\n<h4><span id=\"加载指定classloader里的资源文件\">加载指定ClassLoader里的资源文件</span></h4><p>查找指定的资源文件： <code>classloader -c &lt;classLoaderHash&gt; -r logback-spring.xml</code></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ classloader -c 1be6f5c3 -r logback-spring.xml jar:file:/home/scrapbook/tutorial/demo-arthas-spring-boot.jar!/BOOT-INF/classes!/logback-spring.xml</span><br></pre></td></tr></table></figure>\n\n<p>也可以尝试查找类的class文件：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">classloader -c &lt;classLoaderHash&gt; -r java/lang/String.class$ classloader -c 1b6d3586 -r java/lang/String.class jar:file:/Library/Java/JavaVirtualMachines/jdk1.8.0_60.jdk/Contents/Home/jre/lib/rt.jar!/java/lang/String.class</span><br></pre></td></tr></table></figure>\n\n<h4><span id=\"尝试加载指定的类\">尝试加载指定的类</span></h4><p>比如用上面的spring LaunchedURLClassLoader 尝试加载 <code>ch.qos.logback.classic.spi.StackTraceElementProxy</code> ：</p>\n<p>首先使用<code>sc ch.qos.logback.classic.spi.StackTraceElementProxy</code>查看，可发现未加载：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sc ch.qos.logback.classic.spi.StackTraceElementProxy</span><br></pre></td></tr></table></figure>\n\n<p></p>\n<figure class=\"highlight console\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Affect(row-cnt:0) cost in 18 ms.</span><br></pre></td></tr></table></figure>\n\n<p>因而使用spring LaunchedURLClassLoader 尝试加载：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">classloader -c &lt;classLoaderHash&gt; --load ch.qos.logback.classic.spi.StackTraceElementProxy$ classloader -c 1be6f5c3 --load ch.qos.logback.classic.spi.StackTraceElementProxyload class success. class-info        ch.qos.logback.classic.spi.StackTraceElementProxy code-source       file:/home/scrapbook/tutorial/demo-arthas-spring-boot.jar!/BOOT-INF/lib/logback-classic-1.                   1.11.jar!/ name              ch.qos.logback.classic.spi.StackTraceElementProxy isInterface       false isAnnotation      false isEnum            false isAnonymousClass  false isArray           false isLocalClass      false isMemberClass     false isPrimitive       false isSynthetic       false simple-name       StackTraceElementProxy modifier          public annotation interfaces        java.io.Serializable super-class       +-java.lang.Object class-loader      +-org.springframework.boot.loader.LaunchedURLClassLoader@5674cd4d                     +-sun.misc.Launcher$AppClassLoader@70dea4e                       +-sun.misc.Launcher$ExtClassLoader@56a96482 classLoaderHash   5674cd4d</span><br></pre></td></tr></table></figure>\n\n<p>再次使用<code>sc ch.qos.logback.classic.spi.StackTraceElementProxy</code>查看，发现已经加载：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sc ch.qos.logback.classic.spi.StackTraceElementProxy</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight console\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ch.qos.logback.classic.spi.StackTraceElementProxyAffect(row-cnt:1) cost in 19 ms.</span><br></pre></td></tr></table></figure>\n\n<h2><span id=\"更多信息\">更多信息</span></h2><p>通过本教程基本掌握了Arthas Spring Boot应用的ClassLoader结构。如果有更多的技巧或者使用疑问，欢迎在Issue里提出。</p>\n<ul>\n<li>Issues: <a href=\"https://github.com/alibaba/arthas/issues\">https://github.com/alibaba/arthas/issues</a></li>\n<li>文档： <a href=\"https://arthas.aliyun.com/doc\">https://arthas.aliyun.com/doc</a></li>\n</ul>\n<p>如果您在使用Arthas，请让我们知道。您的使用对我们非常重要：<a href=\"https://github.com/alibaba/arthas/issues/111\">查看</a></p>\n<p>文章拷贝来源：<a href=\"https://start.aliyun.com/course?spm=a2ck6.17690074.0.0.28bc2e7dHTphXs&amp;id=PaiFAkJM\">https://start.aliyun.com/course?spm=a2ck6.17690074.0.0.28bc2e7dHTphXs&amp;id=PaiFAkJM</a></p>\n","site":{"data":{}},"excerpt":"","more":"<!-- toc -->\n\n<ul>\n<li><a href=\"#start-demo\">Start demo</a></li>\n<li><a href=\"#start-arthas-boot\">Start arthas-boot</a></li>\n<li><a href=\"#%E7%90%86%E8%A7%A3spring-boot%E5%BA%94%E7%94%A8%E7%9A%84classloader%E7%BB%93%E6%9E%84\">理解Spring Boot应用的ClassLoader结构</a><ul>\n<li><a href=\"#%E5%88%97%E5%87%BA%E6%89%80%E6%9C%89classloader\">列出所有ClassLoader</a></li>\n<li><a href=\"#%E5%88%97%E5%87%BAclassloader%E9%87%8C%E5%8A%A0%E8%BD%BD%E7%9A%84%E6%89%80%E6%9C%89%E7%B1%BB\">列出ClassLoader里加载的所有类</a></li>\n<li><a href=\"#%E6%9F%A5%E7%9C%8B%E7%B1%BB%E7%9A%84classloader%E5%B1%82%E6%AC%A1\">查看类的classloader层次</a></li>\n<li><a href=\"#%E6%9F%A5%E7%9C%8Bclassloader%E6%A0%91\">查看ClassLoader树</a></li>\n<li><a href=\"#%E6%9F%A5%E7%9C%8Burlclassloader%E5%AE%9E%E9%99%85%E7%9A%84urls\">查看URLClassLoader实际的urls</a></li>\n<li><a href=\"#%E5%8A%A0%E8%BD%BD%E6%8C%87%E5%AE%9Aclassloader%E9%87%8C%E7%9A%84%E8%B5%84%E6%BA%90%E6%96%87%E4%BB%B6\">加载指定ClassLoader里的资源文件</a></li>\n<li><a href=\"#%E5%B0%9D%E8%AF%95%E5%8A%A0%E8%BD%BD%E6%8C%87%E5%AE%9A%E7%9A%84%E7%B1%BB\">尝试加载指定的类</a></li>\n</ul>\n</li>\n<li><a href=\"#%E6%9B%B4%E5%A4%9A%E4%BF%A1%E6%81%AF\">更多信息</a></li>\n</ul>\n<!-- tocstop -->\n\n<p><img src=\"/jlynet.github.io/2021/08/07/Java%E8%AF%8A%E6%96%AD%E5%B7%A5%E5%85%B7Arthas%E6%9C%80%E4%BD%B3%E5%AE%9E%E8%B7%B5/%E5%AD%A6%E4%B9%A0Arthasclassloader%E6%A1%88%E4%BE%8B/arthas.png\" alt=\"Arthas\"></p>\n<p><code>Arthas</code> 是Alibaba开源的Java诊断工具，深受开发者喜爱。在线排查问题，无需重启；动态跟踪Java代码；实时监控JVM状态。</p>\n<p><code>Arthas</code> 支持JDK 6+，支持Linux/Mac/Windows，采用命令行交互模式，同时提供丰富的 <code>Tab</code> 自动补全功能，进一步方便进行问题的定位和诊断。</p>\n<p>当你遇到以下类似问题而束手无策时，Arthas可以帮助你解决：</p>\n<ul>\n<li>这个类从哪个 jar 包加载的？为什么会报各种类相关的 Exception？</li>\n<li>我改的代码为什么没有执行到？难道是我没 commit？分支搞错了？</li>\n<li>遇到问题无法在线上 debug，难道只能通过加日志再重新发布吗？</li>\n<li>线上遇到某个用户的数据处理有问题，但线上同样无法 debug，线下无法重现！</li>\n<li>是否有一个全局视角来查看系统的运行状况？</li>\n<li>有什么办法可以监控到JVM的实时运行状态？</li>\n<li>怎么快速定位应用的热点，生成火焰图？</li>\n</ul>\n<p>本教程会以一个普通的Spring Boot应用为例，演示Arthas Spring Boot应用的ClassLoader结构。</p>\n<ul>\n<li>Github: <a href=\"https://github.com/alibaba/arthas\">https://github.com/alibaba/arthas</a></li>\n<li>文档: <a href=\"https://arthas.aliyun.com/doc/\">https://arthas.aliyun.com/doc/</a></li>\n</ul>\n<h2 id=\"Start-demo\"><a href=\"#Start-demo\" class=\"headerlink\" title=\"Start demo\"></a>Start demo</h2><p>下载<code>demo-arthas-spring-boot.jar</code>，再用<code>java -jar</code>命令启动：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wget https://code.aliyun.com/middleware-container/handsonLabExternedFiles/raw/master/demo-arthas-spring-boot.jar;java -jar demo-arthas-spring-boot.jar</span><br></pre></td></tr></table></figure>\n\n\n\n<p><code>demo-arthas-spring-boot</code>是一个很简单的spring boot应用，源代码：<a href=\"https://github.com/hengyunabc/spring-boot-inside/tree/master/demo-arthas-spring-boot\">查看</a></p>\n<p>启动之后，可以访问61000端口： 点击查看</p>\n<p><img src=\"/jlynet.github.io/2021/08/07/Java%E8%AF%8A%E6%96%AD%E5%B7%A5%E5%85%B7Arthas%E6%9C%80%E4%BD%B3%E5%AE%9E%E8%B7%B5/%E5%AD%A6%E4%B9%A0Arthasclassloader%E6%A1%88%E4%BE%8B/O1CN010Qbzcz1ctPSWSZI6L_!!6000000003658-2-tps-333-182.png\" alt=\"Demo Web\"></p>\n<h2 id=\"Start-arthas-boot\"><a href=\"#Start-arthas-boot\" class=\"headerlink\" title=\"Start arthas-boot\"></a>Start arthas-boot</h2><p>在新的<code>Terminal 2</code>里，下载<code>arthas-boot.jar</code>，再用<code>java -jar</code>命令启动：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wget https://arthas.aliyun.com/arthas-boot.jar;java -jar arthas-boot.jar</span><br></pre></td></tr></table></figure>\n\n\n\n<p><code>arthas-boot</code>是<code>Arthas</code>的启动程序，它启动后，会列出所有的Java进程，用户可以选择需要诊断的目标进程。</p>\n<p>选择第一个进程，输入 <code>1</code> ，再<code>Enter/回车</code>：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1</span><br></pre></td></tr></table></figure>\n\n\n\n<p>Attach成功之后，会打印Arthas LOGO。输入 <code>help</code> 可以获取到更多的帮助信息。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">help</span></span><br></pre></td></tr></table></figure>\n\n\n\n<p><img src=\"/jlynet.github.io/2021/08/07/Java%E8%AF%8A%E6%96%AD%E5%B7%A5%E5%85%B7Arthas%E6%9C%80%E4%BD%B3%E5%AE%9E%E8%B7%B5/%E5%AD%A6%E4%B9%A0Arthasclassloader%E6%A1%88%E4%BE%8B/O1CN01HzatXZ1RgccrlT90M_!!6000000002141-2-tps-529-244.png\" alt=\"Arthas Boot\"></p>\n<h2 id=\"理解Spring-Boot应用的ClassLoader结构\"><a href=\"#理解Spring-Boot应用的ClassLoader结构\" class=\"headerlink\" title=\"理解Spring Boot应用的ClassLoader结构\"></a>理解Spring Boot应用的ClassLoader结构</h2><p>下面介绍<code>classloader</code>命令的功能。</p>\n<p>先访问一个jsp网页，触发jsp的加载： hello</p>\n<h4 id=\"列出所有ClassLoader\"><a href=\"#列出所有ClassLoader\" class=\"headerlink\" title=\"列出所有ClassLoader\"></a>列出所有ClassLoader</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">classloader -l</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight console\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> classloader -l</span></span><br><span class=\"line\"> name                                                             loadedCount  hash      parent</span><br><span class=\"line\"> BootstrapClassLoader                                             2724         null      null</span><br><span class=\"line\"> com.taobao.arthas.agent.ArthasClassloader@411ce1ab               2009         411ce1ab  sun.misc.Launcher$ExtClassLoader@7494e528</span><br><span class=\"line\"> com.taobao.arthas.agent.ArthasClassloader@22ae1234               1253         22ae1234  sun.misc.Launcher$ExtClassLoader@7494e528</span><br><span class=\"line\"> org.apache.jasper.servlet.JasperLoader@65361d9a                  1            65361d9a  TomcatEmbeddedWebappClassLoader</span><br><span class=\"line\">                                                                                           context: ROOT</span><br><span class=\"line\">                                                                                           delegate: true</span><br><span class=\"line\">                                                                                         ----------&gt; Parent Classloader:</span><br><span class=\"line\">                                                                                         org.springframework.boot.loader.LaunchedURLClassLoader@1be6f5c3</span><br><span class=\"line\"></span><br><span class=\"line\"> TomcatEmbeddedWebappClassLoader                                  0            8546cd5   org.springframework.boot.loader.LaunchedURLClassLoader@1be6f5c3</span><br><span class=\"line\">   context: ROOT</span><br><span class=\"line\">   delegate: true</span><br><span class=\"line\"><span class=\"meta\"> ----------&gt;</span><span class=\"bash\"> Parent Classloader:</span></span><br><span class=\"line\"> org.springframework.boot.loader.LaunchedURLClassLoader@1be6f5c3</span><br><span class=\"line\"></span><br><span class=\"line\"> org.springframework.boot.loader.LaunchedURLClassLoader@1be6f5c3  5416         1be6f5c3  sun.misc.Launcher$AppClassLoader@3d4eac69</span><br><span class=\"line\"> sun.misc.Launcher$AppClassLoader@3d4eac69                        45           3d4eac69  sun.misc.Launcher$ExtClassLoader@7494e528</span><br><span class=\"line\"> sun.misc.Launcher$ExtClassLoader@7494e528                        4            7494e528  null</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>TomcatEmbeddedWebappClassLoader 加载的class数量是0，所以在spring boot embedded tomcat里，它只是一个空壳，所有的类加载都是<code>LaunchedURLClassLoader</code>完成的</li>\n</ul>\n<p>请记下你的classLoaderHash，后面需要使用它。在这里，它是 <code>65361d9a</code>。</p>\n<p>注意：请使用你的classLoaderHash值覆盖 <code>&lt;classLoaderHash&gt;</code> ，然后手动执行下面所有所述命令：</p>\n<h4 id=\"列出ClassLoader里加载的所有类\"><a href=\"#列出ClassLoader里加载的所有类\" class=\"headerlink\" title=\"列出ClassLoader里加载的所有类\"></a>列出ClassLoader里加载的所有类</h4><p>列出上面的<code>org.apache.jasper.servlet.JasperLoader</code>加载的类：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">classloader -a -c &lt;classLoaderHash&gt;</span><br><span class=\"line\">$ classloader -a -c 65361d9a</span><br><span class=\"line\"> hash:1698045338, org.apache.jasper.servlet.JasperLoader@65361d9a</span><br><span class=\"line\"> org.apache.jsp.jsp.hello_jsp</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"查看类的classloader层次\"><a href=\"#查看类的classloader层次\" class=\"headerlink\" title=\"查看类的classloader层次\"></a>查看类的classloader层次</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sc -d org.apache.jsp.jsp.hello_jsp</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"查看ClassLoader树\"><a href=\"#查看ClassLoader树\" class=\"headerlink\" title=\"查看ClassLoader树\"></a>查看ClassLoader树</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">classloader -t</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ classloader -t+-BootstrapClassLoader+-sun.misc.Launcher$ExtClassLoader@28cbbddd  +-com.taobao.arthas.agent.ArthasClassloader@8c25e55  +-sun.misc.Launcher$AppClassLoader@55f96302    +-org.springframework.boot.loader.LaunchedURLClassLoader@1be6f5c3      +-TomcatEmbeddedWebappClassLoader          context: ROOT          delegate: true        ----------&gt; Parent Classloader:        org.springframework.boot.loader.LaunchedURLClassLoader@1be6f5c3        +-org.apache.jasper.servlet.JasperLoader@21ae0fe2</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"查看URLClassLoader实际的urls\"><a href=\"#查看URLClassLoader实际的urls\" class=\"headerlink\" title=\"查看URLClassLoader实际的urls\"></a>查看URLClassLoader实际的urls</h4><p>比如上面查看到的spring LaunchedURLClassLoader的 hashcode是<code>1be6f5c3</code>，可以通过<code>-c</code>参数来指定classloader，从而查看URLClassLoader实际的urls：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">classloader -c &lt;classLoaderHash&gt;$ classloader -c 1be6f5c3jar:file:/home/scrapbook/tutorial/demo-arthas-spring-boot.jar!/BOOT-INF/classes!/jar:file:/home/scrapbook/tutorial/demo-arthas-spring-boot.jar!/BOOT-INF/lib/spring-boot-starter-aop-1.5.13.RELEASE.jar!/...</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"加载指定ClassLoader里的资源文件\"><a href=\"#加载指定ClassLoader里的资源文件\" class=\"headerlink\" title=\"加载指定ClassLoader里的资源文件\"></a>加载指定ClassLoader里的资源文件</h4><p>查找指定的资源文件： <code>classloader -c &lt;classLoaderHash&gt; -r logback-spring.xml</code></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ classloader -c 1be6f5c3 -r logback-spring.xml jar:file:/home/scrapbook/tutorial/demo-arthas-spring-boot.jar!/BOOT-INF/classes!/logback-spring.xml</span><br></pre></td></tr></table></figure>\n\n<p>也可以尝试查找类的class文件：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">classloader -c &lt;classLoaderHash&gt; -r java/lang/String.class$ classloader -c 1b6d3586 -r java/lang/String.class jar:file:/Library/Java/JavaVirtualMachines/jdk1.8.0_60.jdk/Contents/Home/jre/lib/rt.jar!/java/lang/String.class</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"尝试加载指定的类\"><a href=\"#尝试加载指定的类\" class=\"headerlink\" title=\"尝试加载指定的类\"></a>尝试加载指定的类</h4><p>比如用上面的spring LaunchedURLClassLoader 尝试加载 <code>ch.qos.logback.classic.spi.StackTraceElementProxy</code> ：</p>\n<p>首先使用<code>sc ch.qos.logback.classic.spi.StackTraceElementProxy</code>查看，可发现未加载：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sc ch.qos.logback.classic.spi.StackTraceElementProxy</span><br></pre></td></tr></table></figure>\n\n<p></p>\n<figure class=\"highlight console\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Affect(row-cnt:0) cost in 18 ms.</span><br></pre></td></tr></table></figure>\n\n<p>因而使用spring LaunchedURLClassLoader 尝试加载：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">classloader -c &lt;classLoaderHash&gt; --load ch.qos.logback.classic.spi.StackTraceElementProxy$ classloader -c 1be6f5c3 --load ch.qos.logback.classic.spi.StackTraceElementProxyload class success. class-info        ch.qos.logback.classic.spi.StackTraceElementProxy code-source       file:/home/scrapbook/tutorial/demo-arthas-spring-boot.jar!/BOOT-INF/lib/logback-classic-1.                   1.11.jar!/ name              ch.qos.logback.classic.spi.StackTraceElementProxy isInterface       false isAnnotation      false isEnum            false isAnonymousClass  false isArray           false isLocalClass      false isMemberClass     false isPrimitive       false isSynthetic       false simple-name       StackTraceElementProxy modifier          public annotation interfaces        java.io.Serializable super-class       +-java.lang.Object class-loader      +-org.springframework.boot.loader.LaunchedURLClassLoader@5674cd4d                     +-sun.misc.Launcher$AppClassLoader@70dea4e                       +-sun.misc.Launcher$ExtClassLoader@56a96482 classLoaderHash   5674cd4d</span><br></pre></td></tr></table></figure>\n\n<p>再次使用<code>sc ch.qos.logback.classic.spi.StackTraceElementProxy</code>查看，发现已经加载：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sc ch.qos.logback.classic.spi.StackTraceElementProxy</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight console\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ch.qos.logback.classic.spi.StackTraceElementProxyAffect(row-cnt:1) cost in 19 ms.</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"更多信息\"><a href=\"#更多信息\" class=\"headerlink\" title=\"更多信息\"></a>更多信息</h2><p>通过本教程基本掌握了Arthas Spring Boot应用的ClassLoader结构。如果有更多的技巧或者使用疑问，欢迎在Issue里提出。</p>\n<ul>\n<li>Issues: <a href=\"https://github.com/alibaba/arthas/issues\">https://github.com/alibaba/arthas/issues</a></li>\n<li>文档： <a href=\"https://arthas.aliyun.com/doc\">https://arthas.aliyun.com/doc</a></li>\n</ul>\n<p>如果您在使用Arthas，请让我们知道。您的使用对我们非常重要：<a href=\"https://github.com/alibaba/arthas/issues/111\">查看</a></p>\n<p>文章拷贝来源：<a href=\"https://start.aliyun.com/course?spm=a2ck6.17690074.0.0.28bc2e7dHTphXs&amp;id=PaiFAkJM\">https://start.aliyun.com/course?spm=a2ck6.17690074.0.0.28bc2e7dHTphXs&amp;id=PaiFAkJM</a></p>\n"},{"title":"Arthas classloader命令","date":"2021-08-07T01:51:45.000Z","_content":"\n<!-- toc -->\n\n![Arthas](arthas.png)\n\n`Arthas` 是Alibaba开源的Java诊断工具，深受开发者喜爱。在线排查问题，无需重启；动态跟踪Java代码；实时监控JVM状态。\n\n`Arthas` 支持JDK 6+，支持Linux/Mac/Windows，采用命令行交互模式，同时提供丰富的 `Tab` 自动补全功能，进一步方便进行问题的定位和诊断。\n\n当你遇到以下类似问题而束手无策时，Arthas可以帮助你解决：\n\n- 这个类从哪个 jar 包加载的？为什么会报各种类相关的 Exception？\n- 我改的代码为什么没有执行到？难道是我没 commit？分支搞错了？\n- 遇到问题无法在线上 debug，难道只能通过加日志再重新发布吗？\n- 线上遇到某个用户的数据处理有问题，但线上同样无法 debug，线下无法重现！\n- 是否有一个全局视角来查看系统的运行状况？\n- 有什么办法可以监控到JVM的实时运行状态？\n- 怎么快速定位应用的热点，生成火焰图？\n\n本教程会以一个普通的Spring Boot应用为例，演示classloader命令。\n\n- Github: https://github.com/alibaba/arthas\n- 文档: https://arthas.aliyun.com/doc/\n\n## 启动demo\n\n下载`demo-arthas-spring-boot.jar`，再用`java -jar`命令启动：\n\n```bash\nwget https://code.aliyun.com/middleware-container/handsonLabExternedFiles/raw/master/demo-arthas-spring-boot.jar;java -jar demo-arthas-spring-boot.jar\n```\n\n`demo-arthas-spring-boot`是一个很简单的spring boot应用，源代码：[查看](https://github.com/hengyunabc/spring-boot-inside/tree/master/demo-arthas-spring-boot)\n\n启动之后，可以访问61000端口： 点击查看\n\n![Demo Web](https://img.alicdn.com/imgextra/i2/O1CN010Qbzcz1ctPSWSZI6L_!!6000000003658-2-tps-333-182.png)\n\n## 启动arthas-boot\n\n在新的`Terminal 2`里，下载`arthas-boot.jar`，再用`java -jar`命令启动：\n\n```bash\nwget https://arthas.aliyun.com/arthas-boot.jar;java -jar arthas-boot.jar\n```\n\n`arthas-boot`是`Arthas`的启动程序，它启动后，会列出所有的Java进程，用户可以选择需要诊断的目标进程。\n\n选择第一个进程，输入 `1` ，再`Enter/回车`：\n\n```bash\n1\n```\n\nAttach成功之后，会打印Arthas LOGO。输入 `help` 可以获取到更多的帮助信息。\n\n```bash\nhelp\n```\n\n![Arthas Boot](O1CN01HzatXZ1RgccrlT90M_!!6000000002141-2-tps-529-244.png)\n\n## classloader命令\n\n> 查看classloader的继承树，urls，类加载信息\n\n`classloader` 命令将 JVM 中所有的classloader的信息统计出来，并可以展示继承树，urls等。\n\n可以让指定的classloader去getResources，打印出所有查找到的resources的url。对于`ResourceNotFoundException`比较有用。\n\n#### 参数说明\n\n| 参数名称              | 参数说明                                   |\n| --------------------- | ------------------------------------------ |\n| [l]                   | 按类加载实例进行统计                       |\n| [t]                   | 打印所有ClassLoader的继承树                |\n| [a]                   | 列出所有ClassLoader加载的类，请谨慎使用    |\n| `[c:]`                | ClassLoader的hashcode                      |\n| `[classLoaderClass:]` | 指定执行表达式的 ClassLoader 的 class name |\n| `[c: r:]`             | 用ClassLoader去查找resource                |\n| `[c: load:]`          | 用ClassLoader去加载指定的类                |\n\n#### 使用参考\n\n先访问一个jsp网页，触发jsp的加载： hello\n\n#### 列出所有ClassLoader\n\n```bash\nclassloader -l\n```\n\n```console\n$ classloader -l\n name                                                             loadedCount  hash      parent\n BootstrapClassLoader                                             2724         null      null\n com.taobao.arthas.agent.ArthasClassloader@411ce1ab               2009         411ce1ab  sun.misc.Launcher$ExtClassLoader@7494e528\n com.taobao.arthas.agent.ArthasClassloader@22ae1234               1253         22ae1234  sun.misc.Launcher$ExtClassLoader@7494e528\n org.apache.jasper.servlet.JasperLoader@65361d9a                  1            65361d9a  TomcatEmbeddedWebappClassLoader\n                                                                                           context: ROOT\n                                                                                           delegate: true\n                                                                                         ----------> Parent Classloader:\n                                                                                         org.springframework.boot.loader.LaunchedURLClassLoader@1be6f5c3\n\n TomcatEmbeddedWebappClassLoader                                  0            8546cd5   org.springframework.boot.loader.LaunchedURLClassLoader@1be6f5c3\n   context: ROOT\n   delegate: true\n ----------> Parent Classloader:\n org.springframework.boot.loader.LaunchedURLClassLoader@1be6f5c3\n\n org.springframework.boot.loader.LaunchedURLClassLoader@1be6f5c3  5416         1be6f5c3  sun.misc.Launcher$AppClassLoader@3d4eac69\n sun.misc.Launcher$AppClassLoader@3d4eac69                        45           3d4eac69  sun.misc.Launcher$ExtClassLoader@7494e528\n sun.misc.Launcher$ExtClassLoader@7494e528                        4            7494e528  null\n```\n\n- TomcatEmbeddedWebappClassLoader 加载的class数量是0，所以在spring boot embedded tomcat里，它只是一个空壳，所有的类加载都是`LaunchedURLClassLoader`完成的\n\n注意hashcode是变化的，需要先查看当前的ClassLoader信息，提取对应ClassLoader的hashcode。\n\n如果你使用`-c`，你需要手动输入hashcode：`-c <hashcode>`\n\n```console\n$ classloader -c 65361d9a\n```\n\n对于只有唯一实例的ClassLoader可以通过`--classLoaderClass`指定class name，使用起来更加方便：\n\n```console\n$ classloader --classLoaderClass org.apache.jasper.servlet.JasperLoader\n```\n\n`--classLoaderClass` 的值是ClassLoader的类名，只有匹配到唯一的ClassLoader实例时才能工作，目的是方便输入通用命令，而`-c <hashcode>`是动态变化的。\n\n#### 列出ClassLoader里加载的所有类\n\n列出上面的`org.apache.jasper.servlet.JasperLoader`加载的类：\n\n```bash\nclassloader -a --classLoaderClass org.apache.jasper.servlet.JasperLoader\n```\n\n```console\n$ classloader -a --classLoaderClass org.apache.jasper.servlet.JasperLoader\n hash:1698045338, org.apache.jasper.servlet.JasperLoader@65361d9a\n org.apache.jsp.jsp.hello_jsp\n```\n\n#### 查看类的classloader层次\n\n```bash\nsc -d org.apache.jsp.jsp.hello_jsp\n```\n\n#### 查看ClassLoader树\n\n```bash\nclassloader -t\n```\n\n```\n$ classloader -t\n+-BootstrapClassLoader\n+-sun.misc.Launcher$ExtClassLoader@28cbbddd\n  +-com.taobao.arthas.agent.ArthasClassloader@8c25e55\n  +-sun.misc.Launcher$AppClassLoader@55f96302\n    +-org.springframework.boot.loader.LaunchedURLClassLoader@1be6f5c3\n      +-TomcatEmbeddedWebappClassLoader\n          context: ROOT\n          delegate: true\n        ----------> Parent Classloader:\n        org.springframework.boot.loader.LaunchedURLClassLoader@1be6f5c3\n\n        +-org.apache.jasper.servlet.JasperLoader@21ae0fe2\n```\n\n#### 查看URLClassLoader实际的urls\n\n比如上面查看到的spring LaunchedURLClassLoader的 hashcode是`1be6f5c3`，可以通过`-c`参数来指定classloader，或者直接使用`--classLoaderClass`，从而查看URLClassLoader实际的urls：\n\n```bash\nclassloader --classLoaderClass org.springframework.boot.loader.LaunchedURLClassLoader\n```\n\n```\n$ classloader --classLoaderClass org.springframework.boot.loader.LaunchedURLClassLoader\njar:file:/home/scrapbook/tutorial/demo-arthas-spring-boot.jar!/BOOT-INF/classes!/\njar:file:/home/scrapbook/tutorial/demo-arthas-spring-boot.jar!/BOOT-INF/lib/spring-boot-starter-aop-1.5\n.13.RELEASE.jar!/\n...\n```\n\n#### 加载指定ClassLoader里的资源文件\n\n查找指定的资源文件： `classloader --classLoaderClass org.springframework.boot.loader.LaunchedURLClassLoader -r logback-spring.xml`\n\n```bash\nclassloader --classLoaderClass org.springframework.boot.loader.LaunchedURLClassLoader -r logback-spring.xml\n```\n\n```\n$ classloader --classLoaderClass org.springframework.boot.loader.LaunchedURLClassLoader -r logback-spring.xml\n jar:file:/home/scrapbook/tutorial/demo-arthas-spring-boot.jar!/BOOT-INF/classes!/logback-spring.xml\n```\n\n也可以尝试查找类的class文件：\n\n```bash\nclassloader --classLoaderClass org.springframework.boot.loader.LaunchedURLClassLoader -r java/lang/String.class\n```\n\n```console\n$ classloader --classLoaderClass org.springframework.boot.loader.LaunchedURLClassLoader -r java/lang/String.class\n jar:file:/Library/Java/JavaVirtualMachines/jdk1.8.0_60.jdk/Contents/Home/jre/lib/rt.jar!/java/lang/String.class\n```\n\n#### 尝试加载指定的类\n\n比如用上面的spring LaunchedURLClassLoader 尝试加载 `ch.qos.logback.classic.spi.StackTraceElementProxy` ：\n\n首先使用`sc ch.qos.logback.classic.spi.StackTraceElementProxy`查看，可发现未加载：\n\n```bash\nsc ch.qos.logback.classic.spi.StackTraceElementProxy\n```\n\n```console\nAffect(row-cnt:0) cost in 18 ms.\n```\n\n因而使用spring LaunchedURLClassLoader 尝试加载：\n\n```bash\nclassloader --classLoaderClass org.springframework.boot.loader.LaunchedURLClassLoader --load ch.qos.logback.classic.spi.StackTraceElementProxy\n```\n\n```console\n$ classloader --classLoaderClass org.springframework.boot.loader.LaunchedURLClassLoader --load ch.qos.logback.classic.spi.StackTraceElementProxy\nload class success.\n class-info        ch.qos.logback.classic.spi.StackTraceElementProxy\n code-source       file:/home/scrapbook/tutorial/demo-arthas-spring-boot.jar!/BOOT-INF/lib/logback-classic-1.\n                   1.11.jar!/\n name              ch.qos.logback.classic.spi.StackTraceElementProxy\n isInterface       false\n isAnnotation      false\n isEnum            false\n isAnonymousClass  false\n isArray           false\n isLocalClass      false\n isMemberClass     false\n isPrimitive       false\n isSynthetic       false\n simple-name       StackTraceElementProxy\n modifier          public\n annotation\n interfaces        java.io.Serializable\n super-class       +-java.lang.Object\n class-loader      +-org.springframework.boot.loader.LaunchedURLClassLoader@5674cd4d\n                     +-sun.misc.Launcher$AppClassLoader@70dea4e\n                       +-sun.misc.Launcher$ExtClassLoader@56a96482\n classLoaderHash   5674cd4d\n```\n\n再次使用`sc ch.qos.logback.classic.spi.StackTraceElementProxy`查看，发现已经加载：\n\n```bash\nsc ch.qos.logback.classic.spi.StackTraceElementProxy\n```\n\n```console\nch.qos.logback.classic.spi.StackTraceElementProxy\nAffect(row-cnt:1) cost in 19 ms.\n```\n\n## 更多信息\n\n在“classloader”中，我们演示了了Arthas的classloader命令。如果有更多的技巧或者使用疑问，欢迎在Issue里提出。\n\n- Issues: https://github.com/alibaba/arthas/issues\n- 文档： https://arthas.aliyun.com/doc\n\n如果您在使用Arthas，请让我们知道。您的使用对我们非常重要：[查看](https://github.com/alibaba/arthas/issues/111)\n\n文章拷贝来源：https://start.aliyun.com/course?spm=a2ck6.17690074.0.0.28bc2e7dHTphXs&id=PaiFAkJM","source":"_posts/Java诊断工具Arthas高级命令教程/Arthasclassloader命令.md","raw":"---\ntitle: Arthas classloader命令\ndate: 2021-08-07 09:51:45\ntags: ['Java 诊断工具 Arthas 高级命令教程']\n---\n\n<!-- toc -->\n\n![Arthas](arthas.png)\n\n`Arthas` 是Alibaba开源的Java诊断工具，深受开发者喜爱。在线排查问题，无需重启；动态跟踪Java代码；实时监控JVM状态。\n\n`Arthas` 支持JDK 6+，支持Linux/Mac/Windows，采用命令行交互模式，同时提供丰富的 `Tab` 自动补全功能，进一步方便进行问题的定位和诊断。\n\n当你遇到以下类似问题而束手无策时，Arthas可以帮助你解决：\n\n- 这个类从哪个 jar 包加载的？为什么会报各种类相关的 Exception？\n- 我改的代码为什么没有执行到？难道是我没 commit？分支搞错了？\n- 遇到问题无法在线上 debug，难道只能通过加日志再重新发布吗？\n- 线上遇到某个用户的数据处理有问题，但线上同样无法 debug，线下无法重现！\n- 是否有一个全局视角来查看系统的运行状况？\n- 有什么办法可以监控到JVM的实时运行状态？\n- 怎么快速定位应用的热点，生成火焰图？\n\n本教程会以一个普通的Spring Boot应用为例，演示classloader命令。\n\n- Github: https://github.com/alibaba/arthas\n- 文档: https://arthas.aliyun.com/doc/\n\n## 启动demo\n\n下载`demo-arthas-spring-boot.jar`，再用`java -jar`命令启动：\n\n```bash\nwget https://code.aliyun.com/middleware-container/handsonLabExternedFiles/raw/master/demo-arthas-spring-boot.jar;java -jar demo-arthas-spring-boot.jar\n```\n\n`demo-arthas-spring-boot`是一个很简单的spring boot应用，源代码：[查看](https://github.com/hengyunabc/spring-boot-inside/tree/master/demo-arthas-spring-boot)\n\n启动之后，可以访问61000端口： 点击查看\n\n![Demo Web](https://img.alicdn.com/imgextra/i2/O1CN010Qbzcz1ctPSWSZI6L_!!6000000003658-2-tps-333-182.png)\n\n## 启动arthas-boot\n\n在新的`Terminal 2`里，下载`arthas-boot.jar`，再用`java -jar`命令启动：\n\n```bash\nwget https://arthas.aliyun.com/arthas-boot.jar;java -jar arthas-boot.jar\n```\n\n`arthas-boot`是`Arthas`的启动程序，它启动后，会列出所有的Java进程，用户可以选择需要诊断的目标进程。\n\n选择第一个进程，输入 `1` ，再`Enter/回车`：\n\n```bash\n1\n```\n\nAttach成功之后，会打印Arthas LOGO。输入 `help` 可以获取到更多的帮助信息。\n\n```bash\nhelp\n```\n\n![Arthas Boot](O1CN01HzatXZ1RgccrlT90M_!!6000000002141-2-tps-529-244.png)\n\n## classloader命令\n\n> 查看classloader的继承树，urls，类加载信息\n\n`classloader` 命令将 JVM 中所有的classloader的信息统计出来，并可以展示继承树，urls等。\n\n可以让指定的classloader去getResources，打印出所有查找到的resources的url。对于`ResourceNotFoundException`比较有用。\n\n#### 参数说明\n\n| 参数名称              | 参数说明                                   |\n| --------------------- | ------------------------------------------ |\n| [l]                   | 按类加载实例进行统计                       |\n| [t]                   | 打印所有ClassLoader的继承树                |\n| [a]                   | 列出所有ClassLoader加载的类，请谨慎使用    |\n| `[c:]`                | ClassLoader的hashcode                      |\n| `[classLoaderClass:]` | 指定执行表达式的 ClassLoader 的 class name |\n| `[c: r:]`             | 用ClassLoader去查找resource                |\n| `[c: load:]`          | 用ClassLoader去加载指定的类                |\n\n#### 使用参考\n\n先访问一个jsp网页，触发jsp的加载： hello\n\n#### 列出所有ClassLoader\n\n```bash\nclassloader -l\n```\n\n```console\n$ classloader -l\n name                                                             loadedCount  hash      parent\n BootstrapClassLoader                                             2724         null      null\n com.taobao.arthas.agent.ArthasClassloader@411ce1ab               2009         411ce1ab  sun.misc.Launcher$ExtClassLoader@7494e528\n com.taobao.arthas.agent.ArthasClassloader@22ae1234               1253         22ae1234  sun.misc.Launcher$ExtClassLoader@7494e528\n org.apache.jasper.servlet.JasperLoader@65361d9a                  1            65361d9a  TomcatEmbeddedWebappClassLoader\n                                                                                           context: ROOT\n                                                                                           delegate: true\n                                                                                         ----------> Parent Classloader:\n                                                                                         org.springframework.boot.loader.LaunchedURLClassLoader@1be6f5c3\n\n TomcatEmbeddedWebappClassLoader                                  0            8546cd5   org.springframework.boot.loader.LaunchedURLClassLoader@1be6f5c3\n   context: ROOT\n   delegate: true\n ----------> Parent Classloader:\n org.springframework.boot.loader.LaunchedURLClassLoader@1be6f5c3\n\n org.springframework.boot.loader.LaunchedURLClassLoader@1be6f5c3  5416         1be6f5c3  sun.misc.Launcher$AppClassLoader@3d4eac69\n sun.misc.Launcher$AppClassLoader@3d4eac69                        45           3d4eac69  sun.misc.Launcher$ExtClassLoader@7494e528\n sun.misc.Launcher$ExtClassLoader@7494e528                        4            7494e528  null\n```\n\n- TomcatEmbeddedWebappClassLoader 加载的class数量是0，所以在spring boot embedded tomcat里，它只是一个空壳，所有的类加载都是`LaunchedURLClassLoader`完成的\n\n注意hashcode是变化的，需要先查看当前的ClassLoader信息，提取对应ClassLoader的hashcode。\n\n如果你使用`-c`，你需要手动输入hashcode：`-c <hashcode>`\n\n```console\n$ classloader -c 65361d9a\n```\n\n对于只有唯一实例的ClassLoader可以通过`--classLoaderClass`指定class name，使用起来更加方便：\n\n```console\n$ classloader --classLoaderClass org.apache.jasper.servlet.JasperLoader\n```\n\n`--classLoaderClass` 的值是ClassLoader的类名，只有匹配到唯一的ClassLoader实例时才能工作，目的是方便输入通用命令，而`-c <hashcode>`是动态变化的。\n\n#### 列出ClassLoader里加载的所有类\n\n列出上面的`org.apache.jasper.servlet.JasperLoader`加载的类：\n\n```bash\nclassloader -a --classLoaderClass org.apache.jasper.servlet.JasperLoader\n```\n\n```console\n$ classloader -a --classLoaderClass org.apache.jasper.servlet.JasperLoader\n hash:1698045338, org.apache.jasper.servlet.JasperLoader@65361d9a\n org.apache.jsp.jsp.hello_jsp\n```\n\n#### 查看类的classloader层次\n\n```bash\nsc -d org.apache.jsp.jsp.hello_jsp\n```\n\n#### 查看ClassLoader树\n\n```bash\nclassloader -t\n```\n\n```\n$ classloader -t\n+-BootstrapClassLoader\n+-sun.misc.Launcher$ExtClassLoader@28cbbddd\n  +-com.taobao.arthas.agent.ArthasClassloader@8c25e55\n  +-sun.misc.Launcher$AppClassLoader@55f96302\n    +-org.springframework.boot.loader.LaunchedURLClassLoader@1be6f5c3\n      +-TomcatEmbeddedWebappClassLoader\n          context: ROOT\n          delegate: true\n        ----------> Parent Classloader:\n        org.springframework.boot.loader.LaunchedURLClassLoader@1be6f5c3\n\n        +-org.apache.jasper.servlet.JasperLoader@21ae0fe2\n```\n\n#### 查看URLClassLoader实际的urls\n\n比如上面查看到的spring LaunchedURLClassLoader的 hashcode是`1be6f5c3`，可以通过`-c`参数来指定classloader，或者直接使用`--classLoaderClass`，从而查看URLClassLoader实际的urls：\n\n```bash\nclassloader --classLoaderClass org.springframework.boot.loader.LaunchedURLClassLoader\n```\n\n```\n$ classloader --classLoaderClass org.springframework.boot.loader.LaunchedURLClassLoader\njar:file:/home/scrapbook/tutorial/demo-arthas-spring-boot.jar!/BOOT-INF/classes!/\njar:file:/home/scrapbook/tutorial/demo-arthas-spring-boot.jar!/BOOT-INF/lib/spring-boot-starter-aop-1.5\n.13.RELEASE.jar!/\n...\n```\n\n#### 加载指定ClassLoader里的资源文件\n\n查找指定的资源文件： `classloader --classLoaderClass org.springframework.boot.loader.LaunchedURLClassLoader -r logback-spring.xml`\n\n```bash\nclassloader --classLoaderClass org.springframework.boot.loader.LaunchedURLClassLoader -r logback-spring.xml\n```\n\n```\n$ classloader --classLoaderClass org.springframework.boot.loader.LaunchedURLClassLoader -r logback-spring.xml\n jar:file:/home/scrapbook/tutorial/demo-arthas-spring-boot.jar!/BOOT-INF/classes!/logback-spring.xml\n```\n\n也可以尝试查找类的class文件：\n\n```bash\nclassloader --classLoaderClass org.springframework.boot.loader.LaunchedURLClassLoader -r java/lang/String.class\n```\n\n```console\n$ classloader --classLoaderClass org.springframework.boot.loader.LaunchedURLClassLoader -r java/lang/String.class\n jar:file:/Library/Java/JavaVirtualMachines/jdk1.8.0_60.jdk/Contents/Home/jre/lib/rt.jar!/java/lang/String.class\n```\n\n#### 尝试加载指定的类\n\n比如用上面的spring LaunchedURLClassLoader 尝试加载 `ch.qos.logback.classic.spi.StackTraceElementProxy` ：\n\n首先使用`sc ch.qos.logback.classic.spi.StackTraceElementProxy`查看，可发现未加载：\n\n```bash\nsc ch.qos.logback.classic.spi.StackTraceElementProxy\n```\n\n```console\nAffect(row-cnt:0) cost in 18 ms.\n```\n\n因而使用spring LaunchedURLClassLoader 尝试加载：\n\n```bash\nclassloader --classLoaderClass org.springframework.boot.loader.LaunchedURLClassLoader --load ch.qos.logback.classic.spi.StackTraceElementProxy\n```\n\n```console\n$ classloader --classLoaderClass org.springframework.boot.loader.LaunchedURLClassLoader --load ch.qos.logback.classic.spi.StackTraceElementProxy\nload class success.\n class-info        ch.qos.logback.classic.spi.StackTraceElementProxy\n code-source       file:/home/scrapbook/tutorial/demo-arthas-spring-boot.jar!/BOOT-INF/lib/logback-classic-1.\n                   1.11.jar!/\n name              ch.qos.logback.classic.spi.StackTraceElementProxy\n isInterface       false\n isAnnotation      false\n isEnum            false\n isAnonymousClass  false\n isArray           false\n isLocalClass      false\n isMemberClass     false\n isPrimitive       false\n isSynthetic       false\n simple-name       StackTraceElementProxy\n modifier          public\n annotation\n interfaces        java.io.Serializable\n super-class       +-java.lang.Object\n class-loader      +-org.springframework.boot.loader.LaunchedURLClassLoader@5674cd4d\n                     +-sun.misc.Launcher$AppClassLoader@70dea4e\n                       +-sun.misc.Launcher$ExtClassLoader@56a96482\n classLoaderHash   5674cd4d\n```\n\n再次使用`sc ch.qos.logback.classic.spi.StackTraceElementProxy`查看，发现已经加载：\n\n```bash\nsc ch.qos.logback.classic.spi.StackTraceElementProxy\n```\n\n```console\nch.qos.logback.classic.spi.StackTraceElementProxy\nAffect(row-cnt:1) cost in 19 ms.\n```\n\n## 更多信息\n\n在“classloader”中，我们演示了了Arthas的classloader命令。如果有更多的技巧或者使用疑问，欢迎在Issue里提出。\n\n- Issues: https://github.com/alibaba/arthas/issues\n- 文档： https://arthas.aliyun.com/doc\n\n如果您在使用Arthas，请让我们知道。您的使用对我们非常重要：[查看](https://github.com/alibaba/arthas/issues/111)\n\n文章拷贝来源：https://start.aliyun.com/course?spm=a2ck6.17690074.0.0.28bc2e7dHTphXs&id=PaiFAkJM","slug":"Java诊断工具Arthas高级命令教程/Arthasclassloader命令","published":1,"updated":"2021-08-07T05:34:06.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cks1cgr68001kfw5i0pd69qu3","content":"<!-- toc -->\n\n<ul>\n<li><a href=\"#%E5%90%AF%E5%8A%A8demo\">启动demo</a></li>\n<li><a href=\"#%E5%90%AF%E5%8A%A8arthas-boot\">启动arthas-boot</a></li>\n<li><a href=\"#classloader%E5%91%BD%E4%BB%A4\">classloader命令</a><ul>\n<li><a href=\"#%E5%8F%82%E6%95%B0%E8%AF%B4%E6%98%8E\">参数说明</a></li>\n<li><a href=\"#%E4%BD%BF%E7%94%A8%E5%8F%82%E8%80%83\">使用参考</a></li>\n<li><a href=\"#%E5%88%97%E5%87%BA%E6%89%80%E6%9C%89classloader\">列出所有ClassLoader</a></li>\n<li><a href=\"#%E5%88%97%E5%87%BAclassloader%E9%87%8C%E5%8A%A0%E8%BD%BD%E7%9A%84%E6%89%80%E6%9C%89%E7%B1%BB\">列出ClassLoader里加载的所有类</a></li>\n<li><a href=\"#%E6%9F%A5%E7%9C%8B%E7%B1%BB%E7%9A%84classloader%E5%B1%82%E6%AC%A1\">查看类的classloader层次</a></li>\n<li><a href=\"#%E6%9F%A5%E7%9C%8Bclassloader%E6%A0%91\">查看ClassLoader树</a></li>\n<li><a href=\"#%E6%9F%A5%E7%9C%8Burlclassloader%E5%AE%9E%E9%99%85%E7%9A%84urls\">查看URLClassLoader实际的urls</a></li>\n<li><a href=\"#%E5%8A%A0%E8%BD%BD%E6%8C%87%E5%AE%9Aclassloader%E9%87%8C%E7%9A%84%E8%B5%84%E6%BA%90%E6%96%87%E4%BB%B6\">加载指定ClassLoader里的资源文件</a></li>\n<li><a href=\"#%E5%B0%9D%E8%AF%95%E5%8A%A0%E8%BD%BD%E6%8C%87%E5%AE%9A%E7%9A%84%E7%B1%BB\">尝试加载指定的类</a></li>\n</ul>\n</li>\n<li><a href=\"#%E6%9B%B4%E5%A4%9A%E4%BF%A1%E6%81%AF\">更多信息</a></li>\n</ul>\n<!-- tocstop -->\n\n<p><img src=\"/jlynet.github.io/2021/08/07/Java%E8%AF%8A%E6%96%AD%E5%B7%A5%E5%85%B7Arthas%E9%AB%98%E7%BA%A7%E5%91%BD%E4%BB%A4%E6%95%99%E7%A8%8B/Arthasclassloader%E5%91%BD%E4%BB%A4/arthas.png\" alt=\"Arthas\"></p>\n<p><code>Arthas</code> 是Alibaba开源的Java诊断工具，深受开发者喜爱。在线排查问题，无需重启；动态跟踪Java代码；实时监控JVM状态。</p>\n<p><code>Arthas</code> 支持JDK 6+，支持Linux/Mac/Windows，采用命令行交互模式，同时提供丰富的 <code>Tab</code> 自动补全功能，进一步方便进行问题的定位和诊断。</p>\n<p>当你遇到以下类似问题而束手无策时，Arthas可以帮助你解决：</p>\n<ul>\n<li>这个类从哪个 jar 包加载的？为什么会报各种类相关的 Exception？</li>\n<li>我改的代码为什么没有执行到？难道是我没 commit？分支搞错了？</li>\n<li>遇到问题无法在线上 debug，难道只能通过加日志再重新发布吗？</li>\n<li>线上遇到某个用户的数据处理有问题，但线上同样无法 debug，线下无法重现！</li>\n<li>是否有一个全局视角来查看系统的运行状况？</li>\n<li>有什么办法可以监控到JVM的实时运行状态？</li>\n<li>怎么快速定位应用的热点，生成火焰图？</li>\n</ul>\n<p>本教程会以一个普通的Spring Boot应用为例，演示classloader命令。</p>\n<ul>\n<li>Github: <a href=\"https://github.com/alibaba/arthas\">https://github.com/alibaba/arthas</a></li>\n<li>文档: <a href=\"https://arthas.aliyun.com/doc/\">https://arthas.aliyun.com/doc/</a></li>\n</ul>\n<h2><span id=\"启动demo\">启动demo</span></h2><p>下载<code>demo-arthas-spring-boot.jar</code>，再用<code>java -jar</code>命令启动：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wget https://code.aliyun.com/middleware-container/handsonLabExternedFiles/raw/master/demo-arthas-spring-boot.jar;java -jar demo-arthas-spring-boot.jar</span><br></pre></td></tr></table></figure>\n\n<p><code>demo-arthas-spring-boot</code>是一个很简单的spring boot应用，源代码：<a href=\"https://github.com/hengyunabc/spring-boot-inside/tree/master/demo-arthas-spring-boot\">查看</a></p>\n<p>启动之后，可以访问61000端口： 点击查看</p>\n<p><img src=\"https://img.alicdn.com/imgextra/i2/O1CN010Qbzcz1ctPSWSZI6L_!!6000000003658-2-tps-333-182.png\" alt=\"Demo Web\"></p>\n<h2><span id=\"启动arthas-boot\">启动arthas-boot</span></h2><p>在新的<code>Terminal 2</code>里，下载<code>arthas-boot.jar</code>，再用<code>java -jar</code>命令启动：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wget https://arthas.aliyun.com/arthas-boot.jar;java -jar arthas-boot.jar</span><br></pre></td></tr></table></figure>\n\n<p><code>arthas-boot</code>是<code>Arthas</code>的启动程序，它启动后，会列出所有的Java进程，用户可以选择需要诊断的目标进程。</p>\n<p>选择第一个进程，输入 <code>1</code> ，再<code>Enter/回车</code>：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1</span><br></pre></td></tr></table></figure>\n\n<p>Attach成功之后，会打印Arthas LOGO。输入 <code>help</code> 可以获取到更多的帮助信息。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">help</span></span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/jlynet.github.io/2021/08/07/Java%E8%AF%8A%E6%96%AD%E5%B7%A5%E5%85%B7Arthas%E9%AB%98%E7%BA%A7%E5%91%BD%E4%BB%A4%E6%95%99%E7%A8%8B/Arthasclassloader%E5%91%BD%E4%BB%A4/O1CN01HzatXZ1RgccrlT90M_!!6000000002141-2-tps-529-244.png\" alt=\"Arthas Boot\"></p>\n<h2><span id=\"classloader命令\">classloader命令</span></h2><blockquote>\n<p>查看classloader的继承树，urls，类加载信息</p>\n</blockquote>\n<p><code>classloader</code> 命令将 JVM 中所有的classloader的信息统计出来，并可以展示继承树，urls等。</p>\n<p>可以让指定的classloader去getResources，打印出所有查找到的resources的url。对于<code>ResourceNotFoundException</code>比较有用。</p>\n<h4><span id=\"参数说明\">参数说明</span></h4><table>\n<thead>\n<tr>\n<th>参数名称</th>\n<th>参数说明</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>[l]</td>\n<td>按类加载实例进行统计</td>\n</tr>\n<tr>\n<td>[t]</td>\n<td>打印所有ClassLoader的继承树</td>\n</tr>\n<tr>\n<td>[a]</td>\n<td>列出所有ClassLoader加载的类，请谨慎使用</td>\n</tr>\n<tr>\n<td><code>[c:]</code></td>\n<td>ClassLoader的hashcode</td>\n</tr>\n<tr>\n<td><code>[classLoaderClass:]</code></td>\n<td>指定执行表达式的 ClassLoader 的 class name</td>\n</tr>\n<tr>\n<td><code>[c: r:]</code></td>\n<td>用ClassLoader去查找resource</td>\n</tr>\n<tr>\n<td><code>[c: load:]</code></td>\n<td>用ClassLoader去加载指定的类</td>\n</tr>\n</tbody></table>\n<h4><span id=\"使用参考\">使用参考</span></h4><p>先访问一个jsp网页，触发jsp的加载： hello</p>\n<h4><span id=\"列出所有classloader\">列出所有ClassLoader</span></h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">classloader -l</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight console\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> classloader -l</span></span><br><span class=\"line\"> name                                                             loadedCount  hash      parent</span><br><span class=\"line\"> BootstrapClassLoader                                             2724         null      null</span><br><span class=\"line\"> com.taobao.arthas.agent.ArthasClassloader@411ce1ab               2009         411ce1ab  sun.misc.Launcher$ExtClassLoader@7494e528</span><br><span class=\"line\"> com.taobao.arthas.agent.ArthasClassloader@22ae1234               1253         22ae1234  sun.misc.Launcher$ExtClassLoader@7494e528</span><br><span class=\"line\"> org.apache.jasper.servlet.JasperLoader@65361d9a                  1            65361d9a  TomcatEmbeddedWebappClassLoader</span><br><span class=\"line\">                                                                                           context: ROOT</span><br><span class=\"line\">                                                                                           delegate: true</span><br><span class=\"line\">                                                                                         ----------&gt; Parent Classloader:</span><br><span class=\"line\">                                                                                         org.springframework.boot.loader.LaunchedURLClassLoader@1be6f5c3</span><br><span class=\"line\"></span><br><span class=\"line\"> TomcatEmbeddedWebappClassLoader                                  0            8546cd5   org.springframework.boot.loader.LaunchedURLClassLoader@1be6f5c3</span><br><span class=\"line\">   context: ROOT</span><br><span class=\"line\">   delegate: true</span><br><span class=\"line\"><span class=\"meta\"> ----------&gt;</span><span class=\"bash\"> Parent Classloader:</span></span><br><span class=\"line\"> org.springframework.boot.loader.LaunchedURLClassLoader@1be6f5c3</span><br><span class=\"line\"></span><br><span class=\"line\"> org.springframework.boot.loader.LaunchedURLClassLoader@1be6f5c3  5416         1be6f5c3  sun.misc.Launcher$AppClassLoader@3d4eac69</span><br><span class=\"line\"> sun.misc.Launcher$AppClassLoader@3d4eac69                        45           3d4eac69  sun.misc.Launcher$ExtClassLoader@7494e528</span><br><span class=\"line\"> sun.misc.Launcher$ExtClassLoader@7494e528                        4            7494e528  null</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>TomcatEmbeddedWebappClassLoader 加载的class数量是0，所以在spring boot embedded tomcat里，它只是一个空壳，所有的类加载都是<code>LaunchedURLClassLoader</code>完成的</li>\n</ul>\n<p>注意hashcode是变化的，需要先查看当前的ClassLoader信息，提取对应ClassLoader的hashcode。</p>\n<p>如果你使用<code>-c</code>，你需要手动输入hashcode：<code>-c &lt;hashcode&gt;</code></p>\n<figure class=\"highlight console\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> classloader -c 65361d9a</span></span><br></pre></td></tr></table></figure>\n\n<p>对于只有唯一实例的ClassLoader可以通过<code>--classLoaderClass</code>指定class name，使用起来更加方便：</p>\n<figure class=\"highlight console\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> classloader --classLoaderClass org.apache.jasper.servlet.JasperLoader</span></span><br></pre></td></tr></table></figure>\n\n<p><code>--classLoaderClass</code> 的值是ClassLoader的类名，只有匹配到唯一的ClassLoader实例时才能工作，目的是方便输入通用命令，而<code>-c &lt;hashcode&gt;</code>是动态变化的。</p>\n<h4><span id=\"列出classloader里加载的所有类\">列出ClassLoader里加载的所有类</span></h4><p>列出上面的<code>org.apache.jasper.servlet.JasperLoader</code>加载的类：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">classloader -a --classLoaderClass org.apache.jasper.servlet.JasperLoader</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight console\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> classloader -a --classLoaderClass org.apache.jasper.servlet.JasperLoader</span></span><br><span class=\"line\"> hash:1698045338, org.apache.jasper.servlet.JasperLoader@65361d9a</span><br><span class=\"line\"> org.apache.jsp.jsp.hello_jsp</span><br></pre></td></tr></table></figure>\n\n<h4><span id=\"查看类的classloader层次\">查看类的classloader层次</span></h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sc -d org.apache.jsp.jsp.hello_jsp</span><br></pre></td></tr></table></figure>\n\n<h4><span id=\"查看classloader树\">查看ClassLoader树</span></h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">classloader -t</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ classloader -t</span><br><span class=\"line\">+-BootstrapClassLoader</span><br><span class=\"line\">+-sun.misc.Launcher$ExtClassLoader@28cbbddd</span><br><span class=\"line\">  +-com.taobao.arthas.agent.ArthasClassloader@8c25e55</span><br><span class=\"line\">  +-sun.misc.Launcher$AppClassLoader@55f96302</span><br><span class=\"line\">    +-org.springframework.boot.loader.LaunchedURLClassLoader@1be6f5c3</span><br><span class=\"line\">      +-TomcatEmbeddedWebappClassLoader</span><br><span class=\"line\">          context: ROOT</span><br><span class=\"line\">          delegate: true</span><br><span class=\"line\">        ----------&gt; Parent Classloader:</span><br><span class=\"line\">        org.springframework.boot.loader.LaunchedURLClassLoader@1be6f5c3</span><br><span class=\"line\"></span><br><span class=\"line\">        +-org.apache.jasper.servlet.JasperLoader@21ae0fe2</span><br></pre></td></tr></table></figure>\n\n<h4><span id=\"查看urlclassloader实际的urls\">查看URLClassLoader实际的urls</span></h4><p>比如上面查看到的spring LaunchedURLClassLoader的 hashcode是<code>1be6f5c3</code>，可以通过<code>-c</code>参数来指定classloader，或者直接使用<code>--classLoaderClass</code>，从而查看URLClassLoader实际的urls：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">classloader --classLoaderClass org.springframework.boot.loader.LaunchedURLClassLoader</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ classloader --classLoaderClass org.springframework.boot.loader.LaunchedURLClassLoader</span><br><span class=\"line\">jar:file:/home/scrapbook/tutorial/demo-arthas-spring-boot.jar!/BOOT-INF/classes!/</span><br><span class=\"line\">jar:file:/home/scrapbook/tutorial/demo-arthas-spring-boot.jar!/BOOT-INF/lib/spring-boot-starter-aop-1.5</span><br><span class=\"line\">.13.RELEASE.jar!/</span><br><span class=\"line\">...</span><br></pre></td></tr></table></figure>\n\n<h4><span id=\"加载指定classloader里的资源文件\">加载指定ClassLoader里的资源文件</span></h4><p>查找指定的资源文件： <code>classloader --classLoaderClass org.springframework.boot.loader.LaunchedURLClassLoader -r logback-spring.xml</code></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">classloader --classLoaderClass org.springframework.boot.loader.LaunchedURLClassLoader -r logback-spring.xml</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ classloader --classLoaderClass org.springframework.boot.loader.LaunchedURLClassLoader -r logback-spring.xml</span><br><span class=\"line\"> jar:file:/home/scrapbook/tutorial/demo-arthas-spring-boot.jar!/BOOT-INF/classes!/logback-spring.xml</span><br></pre></td></tr></table></figure>\n\n<p>也可以尝试查找类的class文件：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">classloader --classLoaderClass org.springframework.boot.loader.LaunchedURLClassLoader -r java/lang/String.class</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight console\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> classloader --classLoaderClass org.springframework.boot.loader.LaunchedURLClassLoader -r java/lang/String.class</span></span><br><span class=\"line\"> jar:file:/Library/Java/JavaVirtualMachines/jdk1.8.0_60.jdk/Contents/Home/jre/lib/rt.jar!/java/lang/String.class</span><br></pre></td></tr></table></figure>\n\n<h4><span id=\"尝试加载指定的类\">尝试加载指定的类</span></h4><p>比如用上面的spring LaunchedURLClassLoader 尝试加载 <code>ch.qos.logback.classic.spi.StackTraceElementProxy</code> ：</p>\n<p>首先使用<code>sc ch.qos.logback.classic.spi.StackTraceElementProxy</code>查看，可发现未加载：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sc ch.qos.logback.classic.spi.StackTraceElementProxy</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight console\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Affect(row-cnt:0) cost in 18 ms.</span><br></pre></td></tr></table></figure>\n\n<p>因而使用spring LaunchedURLClassLoader 尝试加载：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">classloader --classLoaderClass org.springframework.boot.loader.LaunchedURLClassLoader --load ch.qos.logback.classic.spi.StackTraceElementProxy</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight console\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> classloader --classLoaderClass org.springframework.boot.loader.LaunchedURLClassLoader --load ch.qos.logback.classic.spi.StackTraceElementProxy</span></span><br><span class=\"line\">load class success.</span><br><span class=\"line\"> class-info        ch.qos.logback.classic.spi.StackTraceElementProxy</span><br><span class=\"line\"> code-source       file:/home/scrapbook/tutorial/demo-arthas-spring-boot.jar!/BOOT-INF/lib/logback-classic-1.</span><br><span class=\"line\">                   1.11.jar!/</span><br><span class=\"line\"> name              ch.qos.logback.classic.spi.StackTraceElementProxy</span><br><span class=\"line\"> isInterface       false</span><br><span class=\"line\"> isAnnotation      false</span><br><span class=\"line\"> isEnum            false</span><br><span class=\"line\"> isAnonymousClass  false</span><br><span class=\"line\"> isArray           false</span><br><span class=\"line\"> isLocalClass      false</span><br><span class=\"line\"> isMemberClass     false</span><br><span class=\"line\"> isPrimitive       false</span><br><span class=\"line\"> isSynthetic       false</span><br><span class=\"line\"> simple-name       StackTraceElementProxy</span><br><span class=\"line\"> modifier          public</span><br><span class=\"line\"> annotation</span><br><span class=\"line\"> interfaces        java.io.Serializable</span><br><span class=\"line\"> super-class       +-java.lang.Object</span><br><span class=\"line\"> class-loader      +-org.springframework.boot.loader.LaunchedURLClassLoader@5674cd4d</span><br><span class=\"line\">                     +-sun.misc.Launcher$AppClassLoader@70dea4e</span><br><span class=\"line\">                       +-sun.misc.Launcher$ExtClassLoader@56a96482</span><br><span class=\"line\"> classLoaderHash   5674cd4d</span><br></pre></td></tr></table></figure>\n\n<p>再次使用<code>sc ch.qos.logback.classic.spi.StackTraceElementProxy</code>查看，发现已经加载：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sc ch.qos.logback.classic.spi.StackTraceElementProxy</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight console\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ch.qos.logback.classic.spi.StackTraceElementProxy</span><br><span class=\"line\">Affect(row-cnt:1) cost in 19 ms.</span><br></pre></td></tr></table></figure>\n\n<h2><span id=\"更多信息\">更多信息</span></h2><p>在“classloader”中，我们演示了了Arthas的classloader命令。如果有更多的技巧或者使用疑问，欢迎在Issue里提出。</p>\n<ul>\n<li>Issues: <a href=\"https://github.com/alibaba/arthas/issues\">https://github.com/alibaba/arthas/issues</a></li>\n<li>文档： <a href=\"https://arthas.aliyun.com/doc\">https://arthas.aliyun.com/doc</a></li>\n</ul>\n<p>如果您在使用Arthas，请让我们知道。您的使用对我们非常重要：<a href=\"https://github.com/alibaba/arthas/issues/111\">查看</a></p>\n<p>文章拷贝来源：<a href=\"https://start.aliyun.com/course?spm=a2ck6.17690074.0.0.28bc2e7dHTphXs&amp;id=PaiFAkJM\">https://start.aliyun.com/course?spm=a2ck6.17690074.0.0.28bc2e7dHTphXs&amp;id=PaiFAkJM</a></p>\n","site":{"data":{}},"excerpt":"","more":"<!-- toc -->\n\n<ul>\n<li><a href=\"#%E5%90%AF%E5%8A%A8demo\">启动demo</a></li>\n<li><a href=\"#%E5%90%AF%E5%8A%A8arthas-boot\">启动arthas-boot</a></li>\n<li><a href=\"#classloader%E5%91%BD%E4%BB%A4\">classloader命令</a><ul>\n<li><a href=\"#%E5%8F%82%E6%95%B0%E8%AF%B4%E6%98%8E\">参数说明</a></li>\n<li><a href=\"#%E4%BD%BF%E7%94%A8%E5%8F%82%E8%80%83\">使用参考</a></li>\n<li><a href=\"#%E5%88%97%E5%87%BA%E6%89%80%E6%9C%89classloader\">列出所有ClassLoader</a></li>\n<li><a href=\"#%E5%88%97%E5%87%BAclassloader%E9%87%8C%E5%8A%A0%E8%BD%BD%E7%9A%84%E6%89%80%E6%9C%89%E7%B1%BB\">列出ClassLoader里加载的所有类</a></li>\n<li><a href=\"#%E6%9F%A5%E7%9C%8B%E7%B1%BB%E7%9A%84classloader%E5%B1%82%E6%AC%A1\">查看类的classloader层次</a></li>\n<li><a href=\"#%E6%9F%A5%E7%9C%8Bclassloader%E6%A0%91\">查看ClassLoader树</a></li>\n<li><a href=\"#%E6%9F%A5%E7%9C%8Burlclassloader%E5%AE%9E%E9%99%85%E7%9A%84urls\">查看URLClassLoader实际的urls</a></li>\n<li><a href=\"#%E5%8A%A0%E8%BD%BD%E6%8C%87%E5%AE%9Aclassloader%E9%87%8C%E7%9A%84%E8%B5%84%E6%BA%90%E6%96%87%E4%BB%B6\">加载指定ClassLoader里的资源文件</a></li>\n<li><a href=\"#%E5%B0%9D%E8%AF%95%E5%8A%A0%E8%BD%BD%E6%8C%87%E5%AE%9A%E7%9A%84%E7%B1%BB\">尝试加载指定的类</a></li>\n</ul>\n</li>\n<li><a href=\"#%E6%9B%B4%E5%A4%9A%E4%BF%A1%E6%81%AF\">更多信息</a></li>\n</ul>\n<!-- tocstop -->\n\n<p><img src=\"/jlynet.github.io/2021/08/07/Java%E8%AF%8A%E6%96%AD%E5%B7%A5%E5%85%B7Arthas%E9%AB%98%E7%BA%A7%E5%91%BD%E4%BB%A4%E6%95%99%E7%A8%8B/Arthasclassloader%E5%91%BD%E4%BB%A4/arthas.png\" alt=\"Arthas\"></p>\n<p><code>Arthas</code> 是Alibaba开源的Java诊断工具，深受开发者喜爱。在线排查问题，无需重启；动态跟踪Java代码；实时监控JVM状态。</p>\n<p><code>Arthas</code> 支持JDK 6+，支持Linux/Mac/Windows，采用命令行交互模式，同时提供丰富的 <code>Tab</code> 自动补全功能，进一步方便进行问题的定位和诊断。</p>\n<p>当你遇到以下类似问题而束手无策时，Arthas可以帮助你解决：</p>\n<ul>\n<li>这个类从哪个 jar 包加载的？为什么会报各种类相关的 Exception？</li>\n<li>我改的代码为什么没有执行到？难道是我没 commit？分支搞错了？</li>\n<li>遇到问题无法在线上 debug，难道只能通过加日志再重新发布吗？</li>\n<li>线上遇到某个用户的数据处理有问题，但线上同样无法 debug，线下无法重现！</li>\n<li>是否有一个全局视角来查看系统的运行状况？</li>\n<li>有什么办法可以监控到JVM的实时运行状态？</li>\n<li>怎么快速定位应用的热点，生成火焰图？</li>\n</ul>\n<p>本教程会以一个普通的Spring Boot应用为例，演示classloader命令。</p>\n<ul>\n<li>Github: <a href=\"https://github.com/alibaba/arthas\">https://github.com/alibaba/arthas</a></li>\n<li>文档: <a href=\"https://arthas.aliyun.com/doc/\">https://arthas.aliyun.com/doc/</a></li>\n</ul>\n<h2 id=\"启动demo\"><a href=\"#启动demo\" class=\"headerlink\" title=\"启动demo\"></a>启动demo</h2><p>下载<code>demo-arthas-spring-boot.jar</code>，再用<code>java -jar</code>命令启动：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wget https://code.aliyun.com/middleware-container/handsonLabExternedFiles/raw/master/demo-arthas-spring-boot.jar;java -jar demo-arthas-spring-boot.jar</span><br></pre></td></tr></table></figure>\n\n<p><code>demo-arthas-spring-boot</code>是一个很简单的spring boot应用，源代码：<a href=\"https://github.com/hengyunabc/spring-boot-inside/tree/master/demo-arthas-spring-boot\">查看</a></p>\n<p>启动之后，可以访问61000端口： 点击查看</p>\n<p><img src=\"https://img.alicdn.com/imgextra/i2/O1CN010Qbzcz1ctPSWSZI6L_!!6000000003658-2-tps-333-182.png\" alt=\"Demo Web\"></p>\n<h2 id=\"启动arthas-boot\"><a href=\"#启动arthas-boot\" class=\"headerlink\" title=\"启动arthas-boot\"></a>启动arthas-boot</h2><p>在新的<code>Terminal 2</code>里，下载<code>arthas-boot.jar</code>，再用<code>java -jar</code>命令启动：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wget https://arthas.aliyun.com/arthas-boot.jar;java -jar arthas-boot.jar</span><br></pre></td></tr></table></figure>\n\n<p><code>arthas-boot</code>是<code>Arthas</code>的启动程序，它启动后，会列出所有的Java进程，用户可以选择需要诊断的目标进程。</p>\n<p>选择第一个进程，输入 <code>1</code> ，再<code>Enter/回车</code>：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1</span><br></pre></td></tr></table></figure>\n\n<p>Attach成功之后，会打印Arthas LOGO。输入 <code>help</code> 可以获取到更多的帮助信息。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">help</span></span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/jlynet.github.io/2021/08/07/Java%E8%AF%8A%E6%96%AD%E5%B7%A5%E5%85%B7Arthas%E9%AB%98%E7%BA%A7%E5%91%BD%E4%BB%A4%E6%95%99%E7%A8%8B/Arthasclassloader%E5%91%BD%E4%BB%A4/O1CN01HzatXZ1RgccrlT90M_!!6000000002141-2-tps-529-244.png\" alt=\"Arthas Boot\"></p>\n<h2 id=\"classloader命令\"><a href=\"#classloader命令\" class=\"headerlink\" title=\"classloader命令\"></a>classloader命令</h2><blockquote>\n<p>查看classloader的继承树，urls，类加载信息</p>\n</blockquote>\n<p><code>classloader</code> 命令将 JVM 中所有的classloader的信息统计出来，并可以展示继承树，urls等。</p>\n<p>可以让指定的classloader去getResources，打印出所有查找到的resources的url。对于<code>ResourceNotFoundException</code>比较有用。</p>\n<h4 id=\"参数说明\"><a href=\"#参数说明\" class=\"headerlink\" title=\"参数说明\"></a>参数说明</h4><table>\n<thead>\n<tr>\n<th>参数名称</th>\n<th>参数说明</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>[l]</td>\n<td>按类加载实例进行统计</td>\n</tr>\n<tr>\n<td>[t]</td>\n<td>打印所有ClassLoader的继承树</td>\n</tr>\n<tr>\n<td>[a]</td>\n<td>列出所有ClassLoader加载的类，请谨慎使用</td>\n</tr>\n<tr>\n<td><code>[c:]</code></td>\n<td>ClassLoader的hashcode</td>\n</tr>\n<tr>\n<td><code>[classLoaderClass:]</code></td>\n<td>指定执行表达式的 ClassLoader 的 class name</td>\n</tr>\n<tr>\n<td><code>[c: r:]</code></td>\n<td>用ClassLoader去查找resource</td>\n</tr>\n<tr>\n<td><code>[c: load:]</code></td>\n<td>用ClassLoader去加载指定的类</td>\n</tr>\n</tbody></table>\n<h4 id=\"使用参考\"><a href=\"#使用参考\" class=\"headerlink\" title=\"使用参考\"></a>使用参考</h4><p>先访问一个jsp网页，触发jsp的加载： hello</p>\n<h4 id=\"列出所有ClassLoader\"><a href=\"#列出所有ClassLoader\" class=\"headerlink\" title=\"列出所有ClassLoader\"></a>列出所有ClassLoader</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">classloader -l</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight console\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> classloader -l</span></span><br><span class=\"line\"> name                                                             loadedCount  hash      parent</span><br><span class=\"line\"> BootstrapClassLoader                                             2724         null      null</span><br><span class=\"line\"> com.taobao.arthas.agent.ArthasClassloader@411ce1ab               2009         411ce1ab  sun.misc.Launcher$ExtClassLoader@7494e528</span><br><span class=\"line\"> com.taobao.arthas.agent.ArthasClassloader@22ae1234               1253         22ae1234  sun.misc.Launcher$ExtClassLoader@7494e528</span><br><span class=\"line\"> org.apache.jasper.servlet.JasperLoader@65361d9a                  1            65361d9a  TomcatEmbeddedWebappClassLoader</span><br><span class=\"line\">                                                                                           context: ROOT</span><br><span class=\"line\">                                                                                           delegate: true</span><br><span class=\"line\">                                                                                         ----------&gt; Parent Classloader:</span><br><span class=\"line\">                                                                                         org.springframework.boot.loader.LaunchedURLClassLoader@1be6f5c3</span><br><span class=\"line\"></span><br><span class=\"line\"> TomcatEmbeddedWebappClassLoader                                  0            8546cd5   org.springframework.boot.loader.LaunchedURLClassLoader@1be6f5c3</span><br><span class=\"line\">   context: ROOT</span><br><span class=\"line\">   delegate: true</span><br><span class=\"line\"><span class=\"meta\"> ----------&gt;</span><span class=\"bash\"> Parent Classloader:</span></span><br><span class=\"line\"> org.springframework.boot.loader.LaunchedURLClassLoader@1be6f5c3</span><br><span class=\"line\"></span><br><span class=\"line\"> org.springframework.boot.loader.LaunchedURLClassLoader@1be6f5c3  5416         1be6f5c3  sun.misc.Launcher$AppClassLoader@3d4eac69</span><br><span class=\"line\"> sun.misc.Launcher$AppClassLoader@3d4eac69                        45           3d4eac69  sun.misc.Launcher$ExtClassLoader@7494e528</span><br><span class=\"line\"> sun.misc.Launcher$ExtClassLoader@7494e528                        4            7494e528  null</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>TomcatEmbeddedWebappClassLoader 加载的class数量是0，所以在spring boot embedded tomcat里，它只是一个空壳，所有的类加载都是<code>LaunchedURLClassLoader</code>完成的</li>\n</ul>\n<p>注意hashcode是变化的，需要先查看当前的ClassLoader信息，提取对应ClassLoader的hashcode。</p>\n<p>如果你使用<code>-c</code>，你需要手动输入hashcode：<code>-c &lt;hashcode&gt;</code></p>\n<figure class=\"highlight console\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> classloader -c 65361d9a</span></span><br></pre></td></tr></table></figure>\n\n<p>对于只有唯一实例的ClassLoader可以通过<code>--classLoaderClass</code>指定class name，使用起来更加方便：</p>\n<figure class=\"highlight console\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> classloader --classLoaderClass org.apache.jasper.servlet.JasperLoader</span></span><br></pre></td></tr></table></figure>\n\n<p><code>--classLoaderClass</code> 的值是ClassLoader的类名，只有匹配到唯一的ClassLoader实例时才能工作，目的是方便输入通用命令，而<code>-c &lt;hashcode&gt;</code>是动态变化的。</p>\n<h4 id=\"列出ClassLoader里加载的所有类\"><a href=\"#列出ClassLoader里加载的所有类\" class=\"headerlink\" title=\"列出ClassLoader里加载的所有类\"></a>列出ClassLoader里加载的所有类</h4><p>列出上面的<code>org.apache.jasper.servlet.JasperLoader</code>加载的类：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">classloader -a --classLoaderClass org.apache.jasper.servlet.JasperLoader</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight console\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> classloader -a --classLoaderClass org.apache.jasper.servlet.JasperLoader</span></span><br><span class=\"line\"> hash:1698045338, org.apache.jasper.servlet.JasperLoader@65361d9a</span><br><span class=\"line\"> org.apache.jsp.jsp.hello_jsp</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"查看类的classloader层次\"><a href=\"#查看类的classloader层次\" class=\"headerlink\" title=\"查看类的classloader层次\"></a>查看类的classloader层次</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sc -d org.apache.jsp.jsp.hello_jsp</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"查看ClassLoader树\"><a href=\"#查看ClassLoader树\" class=\"headerlink\" title=\"查看ClassLoader树\"></a>查看ClassLoader树</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">classloader -t</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ classloader -t</span><br><span class=\"line\">+-BootstrapClassLoader</span><br><span class=\"line\">+-sun.misc.Launcher$ExtClassLoader@28cbbddd</span><br><span class=\"line\">  +-com.taobao.arthas.agent.ArthasClassloader@8c25e55</span><br><span class=\"line\">  +-sun.misc.Launcher$AppClassLoader@55f96302</span><br><span class=\"line\">    +-org.springframework.boot.loader.LaunchedURLClassLoader@1be6f5c3</span><br><span class=\"line\">      +-TomcatEmbeddedWebappClassLoader</span><br><span class=\"line\">          context: ROOT</span><br><span class=\"line\">          delegate: true</span><br><span class=\"line\">        ----------&gt; Parent Classloader:</span><br><span class=\"line\">        org.springframework.boot.loader.LaunchedURLClassLoader@1be6f5c3</span><br><span class=\"line\"></span><br><span class=\"line\">        +-org.apache.jasper.servlet.JasperLoader@21ae0fe2</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"查看URLClassLoader实际的urls\"><a href=\"#查看URLClassLoader实际的urls\" class=\"headerlink\" title=\"查看URLClassLoader实际的urls\"></a>查看URLClassLoader实际的urls</h4><p>比如上面查看到的spring LaunchedURLClassLoader的 hashcode是<code>1be6f5c3</code>，可以通过<code>-c</code>参数来指定classloader，或者直接使用<code>--classLoaderClass</code>，从而查看URLClassLoader实际的urls：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">classloader --classLoaderClass org.springframework.boot.loader.LaunchedURLClassLoader</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ classloader --classLoaderClass org.springframework.boot.loader.LaunchedURLClassLoader</span><br><span class=\"line\">jar:file:/home/scrapbook/tutorial/demo-arthas-spring-boot.jar!/BOOT-INF/classes!/</span><br><span class=\"line\">jar:file:/home/scrapbook/tutorial/demo-arthas-spring-boot.jar!/BOOT-INF/lib/spring-boot-starter-aop-1.5</span><br><span class=\"line\">.13.RELEASE.jar!/</span><br><span class=\"line\">...</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"加载指定ClassLoader里的资源文件\"><a href=\"#加载指定ClassLoader里的资源文件\" class=\"headerlink\" title=\"加载指定ClassLoader里的资源文件\"></a>加载指定ClassLoader里的资源文件</h4><p>查找指定的资源文件： <code>classloader --classLoaderClass org.springframework.boot.loader.LaunchedURLClassLoader -r logback-spring.xml</code></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">classloader --classLoaderClass org.springframework.boot.loader.LaunchedURLClassLoader -r logback-spring.xml</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ classloader --classLoaderClass org.springframework.boot.loader.LaunchedURLClassLoader -r logback-spring.xml</span><br><span class=\"line\"> jar:file:/home/scrapbook/tutorial/demo-arthas-spring-boot.jar!/BOOT-INF/classes!/logback-spring.xml</span><br></pre></td></tr></table></figure>\n\n<p>也可以尝试查找类的class文件：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">classloader --classLoaderClass org.springframework.boot.loader.LaunchedURLClassLoader -r java/lang/String.class</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight console\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> classloader --classLoaderClass org.springframework.boot.loader.LaunchedURLClassLoader -r java/lang/String.class</span></span><br><span class=\"line\"> jar:file:/Library/Java/JavaVirtualMachines/jdk1.8.0_60.jdk/Contents/Home/jre/lib/rt.jar!/java/lang/String.class</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"尝试加载指定的类\"><a href=\"#尝试加载指定的类\" class=\"headerlink\" title=\"尝试加载指定的类\"></a>尝试加载指定的类</h4><p>比如用上面的spring LaunchedURLClassLoader 尝试加载 <code>ch.qos.logback.classic.spi.StackTraceElementProxy</code> ：</p>\n<p>首先使用<code>sc ch.qos.logback.classic.spi.StackTraceElementProxy</code>查看，可发现未加载：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sc ch.qos.logback.classic.spi.StackTraceElementProxy</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight console\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Affect(row-cnt:0) cost in 18 ms.</span><br></pre></td></tr></table></figure>\n\n<p>因而使用spring LaunchedURLClassLoader 尝试加载：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">classloader --classLoaderClass org.springframework.boot.loader.LaunchedURLClassLoader --load ch.qos.logback.classic.spi.StackTraceElementProxy</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight console\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> classloader --classLoaderClass org.springframework.boot.loader.LaunchedURLClassLoader --load ch.qos.logback.classic.spi.StackTraceElementProxy</span></span><br><span class=\"line\">load class success.</span><br><span class=\"line\"> class-info        ch.qos.logback.classic.spi.StackTraceElementProxy</span><br><span class=\"line\"> code-source       file:/home/scrapbook/tutorial/demo-arthas-spring-boot.jar!/BOOT-INF/lib/logback-classic-1.</span><br><span class=\"line\">                   1.11.jar!/</span><br><span class=\"line\"> name              ch.qos.logback.classic.spi.StackTraceElementProxy</span><br><span class=\"line\"> isInterface       false</span><br><span class=\"line\"> isAnnotation      false</span><br><span class=\"line\"> isEnum            false</span><br><span class=\"line\"> isAnonymousClass  false</span><br><span class=\"line\"> isArray           false</span><br><span class=\"line\"> isLocalClass      false</span><br><span class=\"line\"> isMemberClass     false</span><br><span class=\"line\"> isPrimitive       false</span><br><span class=\"line\"> isSynthetic       false</span><br><span class=\"line\"> simple-name       StackTraceElementProxy</span><br><span class=\"line\"> modifier          public</span><br><span class=\"line\"> annotation</span><br><span class=\"line\"> interfaces        java.io.Serializable</span><br><span class=\"line\"> super-class       +-java.lang.Object</span><br><span class=\"line\"> class-loader      +-org.springframework.boot.loader.LaunchedURLClassLoader@5674cd4d</span><br><span class=\"line\">                     +-sun.misc.Launcher$AppClassLoader@70dea4e</span><br><span class=\"line\">                       +-sun.misc.Launcher$ExtClassLoader@56a96482</span><br><span class=\"line\"> classLoaderHash   5674cd4d</span><br></pre></td></tr></table></figure>\n\n<p>再次使用<code>sc ch.qos.logback.classic.spi.StackTraceElementProxy</code>查看，发现已经加载：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sc ch.qos.logback.classic.spi.StackTraceElementProxy</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight console\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ch.qos.logback.classic.spi.StackTraceElementProxy</span><br><span class=\"line\">Affect(row-cnt:1) cost in 19 ms.</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"更多信息\"><a href=\"#更多信息\" class=\"headerlink\" title=\"更多信息\"></a>更多信息</h2><p>在“classloader”中，我们演示了了Arthas的classloader命令。如果有更多的技巧或者使用疑问，欢迎在Issue里提出。</p>\n<ul>\n<li>Issues: <a href=\"https://github.com/alibaba/arthas/issues\">https://github.com/alibaba/arthas/issues</a></li>\n<li>文档： <a href=\"https://arthas.aliyun.com/doc\">https://arthas.aliyun.com/doc</a></li>\n</ul>\n<p>如果您在使用Arthas，请让我们知道。您的使用对我们非常重要：<a href=\"https://github.com/alibaba/arthas/issues/111\">查看</a></p>\n<p>文章拷贝来源：<a href=\"https://start.aliyun.com/course?spm=a2ck6.17690074.0.0.28bc2e7dHTphXs&amp;id=PaiFAkJM\">https://start.aliyun.com/course?spm=a2ck6.17690074.0.0.28bc2e7dHTphXs&amp;id=PaiFAkJM</a></p>\n"},{"title":"Arthas dashboard命令","date":"2021-08-07T01:51:34.000Z","_content":"\n<!-- toc -->\n\n![Arthas](arthas.png)\n\n`Arthas` 是Alibaba开源的Java诊断工具，深受开发者喜爱。在线排查问题，无需重启；动态跟踪Java代码；实时监控JVM状态。\n\n`Arthas` 支持JDK 6+，支持Linux/Mac/Windows，采用命令行交互模式，同时提供丰富的 `Tab` 自动补全功能，进一步方便进行问题的定位和诊断。\n\n当你遇到以下类似问题而束手无策时，Arthas可以帮助你解决：\n\n- 这个类从哪个 jar 包加载的？为什么会报各种类相关的 Exception？\n- 我改的代码为什么没有执行到？难道是我没 commit？分支搞错了？\n- 遇到问题无法在线上 debug，难道只能通过加日志再重新发布吗？\n- 线上遇到某个用户的数据处理有问题，但线上同样无法 debug，线下无法重现！\n- 是否有一个全局视角来查看系统的运行状况？\n- 有什么办法可以监控到JVM的实时运行状态？\n- 怎么快速定位应用的热点，生成火焰图？\n\n本教程会以一个简单的应用为例，演示dashboard命令。\n\n- Github: https://github.com/alibaba/arthas\n- 文档: https://arthas.aliyun.com/doc/\n\n## 启动arthas-demo\n\n下载`arthas-demo.jar`，再用`java -jar`命令启动：\n\n```bash\nwget https://arthas.aliyun.com/arthas-demo.jar;java -jar arthas-demo.jar\n```\n\n`arthas-demo`是一个很简单的程序，它随机生成整数，再执行因式分解，把结果打印出来。如果生成的随机数是负数，则会打印提示信息。\n\n## 启动arthas-boot\n\n在新的`Terminal 2`里，下载`arthas-boot.jar`，再用`java -jar`命令启动：\n\n```bash\nwget https://arthas.aliyun.com/arthas-boot.jar;java -jar arthas-boot.jar\n```\n\n`arthas-boot`是`Arthas`的启动程序，它启动后，会列出所有的Java进程，用户可以选择需要诊断的目标进程。\n\n选择第一个进程，输入 `1` ，再`Enter/回车`：\n\n```bash\n1\n```\n\nAttach成功之后，会打印Arthas LOGO。输入 `help` 可以获取到更多的帮助信息。\n\n```bash\nhelp\n```\n\n![Arthas Boot](O1CN01HzatXZ1RgccrlT90M_!!6000000002141-2-tps-529-244.png)\n\n## dashboard 命令\n\n`dashboard` 命令可以查看当前系统的实时数据面板。\n\n```bash\ndashboard\n```\n\n当运行在Ali-tomcat时，会显示当前tomcat的实时信息，如HTTP请求的qps, rt, 错误数, 线程池信息等等。\n\n```\n$ dashboard\nID   NAME                           GROUP           PRIORITY   STATE     %CPU      DELTA_TIME TIME      INTERRUPTE DAEMON\n-1   C2 CompilerThread0             -               -1         -         1.55      0.077      0:8.684   false      true\n53   Timer-for-arthas-dashboard-07b system          5          RUNNABLE  0.08      0.004      0:0.004   false      true\n22   scheduling-1                   main            5          TIMED_WAI 0.06      0.003      0:0.287   false      false\n-1   C1 CompilerThread0             -               -1         -         0.06      0.003      0:2.171   false      true\n-1   VM Periodic Task Thread        -               -1         -         0.03      0.001      0:0.092   false      true\n49   arthas-NettyHttpTelnetBootstra system          5          RUNNABLE  0.02      0.001      0:0.156   false      true\n16   Catalina-utility-1             main            1          TIMED_WAI 0.0       0.000      0:0.029   false      false\n-1   G1 Young RemSet Sampling       -               -1         -         0.0       0.000      0:0.019   false      true\n17   Catalina-utility-2             main            1          WAITING   0.0       0.000      0:0.025   false      false\n34   http-nio-8080-ClientPoller     main            5          RUNNABLE  0.0       0.000      0:0.016   false      true\n23   http-nio-8080-BlockPoller      main            5          RUNNABLE  0.0       0.000      0:0.011   false      true\n-1   VM Thread                      -               -1         -         0.0       0.000      0:0.032   false      true\n-1   Service Thread                 -               -1         -         0.0       0.000      0:0.006   false      true\n-1   GC Thread#5                    -               -1         -         0.0       0.000      0:0.043   false      true\nMemory                     used     total    max      usage    GC\nheap                       36M      70M      4096M    0.90%    gc.g1_young_generation.count   12\ng1_eden_space              6M       18M      -1       33.33%                                  86\ng1_old_gen                 30M      50M      4096M    0.74%    gc.g1_old_generation.count     0\ng1_survivor_space          491K     2048K    -1       24.01%   gc.g1_old_generation.time(ms)  0\nnonheap                    66M      69M      -1       96.56%\ncodeheap_'non-nmethods'    1M       2M       5M       22.39%\nmetaspace                  46M      47M      -1       98.01%\nRuntime\nos.name                                                        Mac OS X\nos.version                                                     10.15.4\njava.version                                                   15\njava.home                                                      /Library/Java/JavaVirtualMachines/jdk-15.jdk/Contents/Home\nsystemload.average                                             10.68\nprocessors                                                     8\nuptime                                                         272s\n```\n\n输入 `q` 或者 `Ctrl+C` 可以退出dashboard命令。\n\n```bash\nq\n```\n\n#### 数据说明\n\n- ID: Java级别的线程ID，注意这个ID不能跟jstack中的nativeID一一对应。\n- NAME: 线程名\n- GROUP: 线程组名\n- PRIORITY: 线程优先级, 1~10之间的数字，越大表示优先级越高\n- STATE: 线程的状态\n- CPU%: 线程的cpu使用率。比如采样间隔1000ms，某个线程的增量cpu时间为100ms，则cpu使用率=100/1000=10%\n- DELTA_TIME: 上次采样之后线程运行增量CPU时间，数据格式为`秒`\n- TIME: 线程运行总CPU时间，数据格式为`分:秒`\n- INTERRUPTED: 线程当前的中断位状态\n- DAEMON: 是否是daemon线程\n\n##### JVM内部线程\n\nJava 8之后支持获取JVM内部线程CPU时间，这些线程只有名称和CPU时间，没有ID及状态等信息（显示ID为-1）。 通过内部线程可以观测到JVM活动，如GC、JIT编译等占用CPU情况，方便了解JVM整体运行状况。\n\n- 当JVM 堆(heap)/元数据(metaspace)空间不足或OOM时，可以看到GC线程的CPU占用率明显高于其他的线程。\n- 当执行`trace/watch/tt/redefine`等命令后，可以看到JIT线程活动变得更频繁。因为JVM热更新class字节码时清除了此class相关的JIT编译结果，需要重新编译。\n\nJVM内部线程包括下面几种：\n\n- JIT编译线程: 如 `C1 CompilerThread0`, `C2 CompilerThread0`\n- GC线程: 如`GC Thread0`, `G1 Young RemSet Sampling`\n- 其它内部线程: 如`VM Periodic Task Thread`, `VM Thread`, `Service Thread`\n\n## dashboard 数据说明\n\n- *ID*: Java级别的线程ID，注意这个ID不能跟jstack中的nativeID一一对应\n- *NAME*: 线程名\n- *GROUP*: 线程组名\n- *PRIORITY*: 线程优先级, 1~10之间的数字，越大表示优先级越高\n- *STATE*: 线程的状态\n- *CPU%*: 线程消耗的cpu占比，采样100ms，将所有线程在这100ms内的cpu使用量求和，再算出每个线程的cpu使用占比。\n- *TIME*: 线程运行总时间，数据格式为`分：秒`\n- *INTERRUPTED*: 线程当前的中断位状态\n- *DAEMON*: 是否是daemon线程\n\n### 截图展示\n\n![img](dashboard.png)\n\n## 更多信息\n\n通过本教程基本掌握了Arthas dashboard的用法。如果有更多的技巧或者使用疑问，欢迎在Issue里提出。\n\n- Issues: https://github.com/alibaba/arthas/issues\n- 文档： https://arthas.aliyun.com/doc\n\n如果您在使用Arthas，请让我们知道。您的使用对我们非常重要：[查看](https://github.com/alibaba/arthas/issues/111)\n\n文章拷贝来源：https://start.aliyun.com/course?spm=a2ck6.17690074.0.0.28bc2e7dHTphXs&id=PaiFAkJM","source":"_posts/Java诊断工具Arthas高级命令教程/Arthasdashboard命令.md","raw":"---\ntitle: Arthas dashboard命令\ndate: 2021-08-07 09:51:34\ntags: ['Java 诊断工具 Arthas 高级命令教程']\n---\n\n<!-- toc -->\n\n![Arthas](arthas.png)\n\n`Arthas` 是Alibaba开源的Java诊断工具，深受开发者喜爱。在线排查问题，无需重启；动态跟踪Java代码；实时监控JVM状态。\n\n`Arthas` 支持JDK 6+，支持Linux/Mac/Windows，采用命令行交互模式，同时提供丰富的 `Tab` 自动补全功能，进一步方便进行问题的定位和诊断。\n\n当你遇到以下类似问题而束手无策时，Arthas可以帮助你解决：\n\n- 这个类从哪个 jar 包加载的？为什么会报各种类相关的 Exception？\n- 我改的代码为什么没有执行到？难道是我没 commit？分支搞错了？\n- 遇到问题无法在线上 debug，难道只能通过加日志再重新发布吗？\n- 线上遇到某个用户的数据处理有问题，但线上同样无法 debug，线下无法重现！\n- 是否有一个全局视角来查看系统的运行状况？\n- 有什么办法可以监控到JVM的实时运行状态？\n- 怎么快速定位应用的热点，生成火焰图？\n\n本教程会以一个简单的应用为例，演示dashboard命令。\n\n- Github: https://github.com/alibaba/arthas\n- 文档: https://arthas.aliyun.com/doc/\n\n## 启动arthas-demo\n\n下载`arthas-demo.jar`，再用`java -jar`命令启动：\n\n```bash\nwget https://arthas.aliyun.com/arthas-demo.jar;java -jar arthas-demo.jar\n```\n\n`arthas-demo`是一个很简单的程序，它随机生成整数，再执行因式分解，把结果打印出来。如果生成的随机数是负数，则会打印提示信息。\n\n## 启动arthas-boot\n\n在新的`Terminal 2`里，下载`arthas-boot.jar`，再用`java -jar`命令启动：\n\n```bash\nwget https://arthas.aliyun.com/arthas-boot.jar;java -jar arthas-boot.jar\n```\n\n`arthas-boot`是`Arthas`的启动程序，它启动后，会列出所有的Java进程，用户可以选择需要诊断的目标进程。\n\n选择第一个进程，输入 `1` ，再`Enter/回车`：\n\n```bash\n1\n```\n\nAttach成功之后，会打印Arthas LOGO。输入 `help` 可以获取到更多的帮助信息。\n\n```bash\nhelp\n```\n\n![Arthas Boot](O1CN01HzatXZ1RgccrlT90M_!!6000000002141-2-tps-529-244.png)\n\n## dashboard 命令\n\n`dashboard` 命令可以查看当前系统的实时数据面板。\n\n```bash\ndashboard\n```\n\n当运行在Ali-tomcat时，会显示当前tomcat的实时信息，如HTTP请求的qps, rt, 错误数, 线程池信息等等。\n\n```\n$ dashboard\nID   NAME                           GROUP           PRIORITY   STATE     %CPU      DELTA_TIME TIME      INTERRUPTE DAEMON\n-1   C2 CompilerThread0             -               -1         -         1.55      0.077      0:8.684   false      true\n53   Timer-for-arthas-dashboard-07b system          5          RUNNABLE  0.08      0.004      0:0.004   false      true\n22   scheduling-1                   main            5          TIMED_WAI 0.06      0.003      0:0.287   false      false\n-1   C1 CompilerThread0             -               -1         -         0.06      0.003      0:2.171   false      true\n-1   VM Periodic Task Thread        -               -1         -         0.03      0.001      0:0.092   false      true\n49   arthas-NettyHttpTelnetBootstra system          5          RUNNABLE  0.02      0.001      0:0.156   false      true\n16   Catalina-utility-1             main            1          TIMED_WAI 0.0       0.000      0:0.029   false      false\n-1   G1 Young RemSet Sampling       -               -1         -         0.0       0.000      0:0.019   false      true\n17   Catalina-utility-2             main            1          WAITING   0.0       0.000      0:0.025   false      false\n34   http-nio-8080-ClientPoller     main            5          RUNNABLE  0.0       0.000      0:0.016   false      true\n23   http-nio-8080-BlockPoller      main            5          RUNNABLE  0.0       0.000      0:0.011   false      true\n-1   VM Thread                      -               -1         -         0.0       0.000      0:0.032   false      true\n-1   Service Thread                 -               -1         -         0.0       0.000      0:0.006   false      true\n-1   GC Thread#5                    -               -1         -         0.0       0.000      0:0.043   false      true\nMemory                     used     total    max      usage    GC\nheap                       36M      70M      4096M    0.90%    gc.g1_young_generation.count   12\ng1_eden_space              6M       18M      -1       33.33%                                  86\ng1_old_gen                 30M      50M      4096M    0.74%    gc.g1_old_generation.count     0\ng1_survivor_space          491K     2048K    -1       24.01%   gc.g1_old_generation.time(ms)  0\nnonheap                    66M      69M      -1       96.56%\ncodeheap_'non-nmethods'    1M       2M       5M       22.39%\nmetaspace                  46M      47M      -1       98.01%\nRuntime\nos.name                                                        Mac OS X\nos.version                                                     10.15.4\njava.version                                                   15\njava.home                                                      /Library/Java/JavaVirtualMachines/jdk-15.jdk/Contents/Home\nsystemload.average                                             10.68\nprocessors                                                     8\nuptime                                                         272s\n```\n\n输入 `q` 或者 `Ctrl+C` 可以退出dashboard命令。\n\n```bash\nq\n```\n\n#### 数据说明\n\n- ID: Java级别的线程ID，注意这个ID不能跟jstack中的nativeID一一对应。\n- NAME: 线程名\n- GROUP: 线程组名\n- PRIORITY: 线程优先级, 1~10之间的数字，越大表示优先级越高\n- STATE: 线程的状态\n- CPU%: 线程的cpu使用率。比如采样间隔1000ms，某个线程的增量cpu时间为100ms，则cpu使用率=100/1000=10%\n- DELTA_TIME: 上次采样之后线程运行增量CPU时间，数据格式为`秒`\n- TIME: 线程运行总CPU时间，数据格式为`分:秒`\n- INTERRUPTED: 线程当前的中断位状态\n- DAEMON: 是否是daemon线程\n\n##### JVM内部线程\n\nJava 8之后支持获取JVM内部线程CPU时间，这些线程只有名称和CPU时间，没有ID及状态等信息（显示ID为-1）。 通过内部线程可以观测到JVM活动，如GC、JIT编译等占用CPU情况，方便了解JVM整体运行状况。\n\n- 当JVM 堆(heap)/元数据(metaspace)空间不足或OOM时，可以看到GC线程的CPU占用率明显高于其他的线程。\n- 当执行`trace/watch/tt/redefine`等命令后，可以看到JIT线程活动变得更频繁。因为JVM热更新class字节码时清除了此class相关的JIT编译结果，需要重新编译。\n\nJVM内部线程包括下面几种：\n\n- JIT编译线程: 如 `C1 CompilerThread0`, `C2 CompilerThread0`\n- GC线程: 如`GC Thread0`, `G1 Young RemSet Sampling`\n- 其它内部线程: 如`VM Periodic Task Thread`, `VM Thread`, `Service Thread`\n\n## dashboard 数据说明\n\n- *ID*: Java级别的线程ID，注意这个ID不能跟jstack中的nativeID一一对应\n- *NAME*: 线程名\n- *GROUP*: 线程组名\n- *PRIORITY*: 线程优先级, 1~10之间的数字，越大表示优先级越高\n- *STATE*: 线程的状态\n- *CPU%*: 线程消耗的cpu占比，采样100ms，将所有线程在这100ms内的cpu使用量求和，再算出每个线程的cpu使用占比。\n- *TIME*: 线程运行总时间，数据格式为`分：秒`\n- *INTERRUPTED*: 线程当前的中断位状态\n- *DAEMON*: 是否是daemon线程\n\n### 截图展示\n\n![img](dashboard.png)\n\n## 更多信息\n\n通过本教程基本掌握了Arthas dashboard的用法。如果有更多的技巧或者使用疑问，欢迎在Issue里提出。\n\n- Issues: https://github.com/alibaba/arthas/issues\n- 文档： https://arthas.aliyun.com/doc\n\n如果您在使用Arthas，请让我们知道。您的使用对我们非常重要：[查看](https://github.com/alibaba/arthas/issues/111)\n\n文章拷贝来源：https://start.aliyun.com/course?spm=a2ck6.17690074.0.0.28bc2e7dHTphXs&id=PaiFAkJM","slug":"Java诊断工具Arthas高级命令教程/Arthasdashboard命令","published":1,"updated":"2021-08-07T05:34:10.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cks1cgr6a001mfw5i5l7ec8ue","content":"<!-- toc -->\n\n<ul>\n<li><a href=\"#%E5%90%AF%E5%8A%A8arthas-demo\">启动arthas-demo</a></li>\n<li><a href=\"#%E5%90%AF%E5%8A%A8arthas-boot\">启动arthas-boot</a></li>\n<li><a href=\"#dashboard-%E5%91%BD%E4%BB%A4\">dashboard 命令</a><ul>\n<li><a href=\"#%E6%95%B0%E6%8D%AE%E8%AF%B4%E6%98%8E\">数据说明</a><ul>\n<li><a href=\"#jvm%E5%86%85%E9%83%A8%E7%BA%BF%E7%A8%8B\">JVM内部线程</a></li>\n</ul>\n</li>\n</ul>\n</li>\n<li><a href=\"#dashboard-%E6%95%B0%E6%8D%AE%E8%AF%B4%E6%98%8E\">dashboard 数据说明</a><ul>\n<li><a href=\"#%E6%88%AA%E5%9B%BE%E5%B1%95%E7%A4%BA\">截图展示</a></li>\n</ul>\n</li>\n<li><a href=\"#%E6%9B%B4%E5%A4%9A%E4%BF%A1%E6%81%AF\">更多信息</a></li>\n</ul>\n<!-- tocstop -->\n\n<p><img src=\"/jlynet.github.io/2021/08/07/Java%E8%AF%8A%E6%96%AD%E5%B7%A5%E5%85%B7Arthas%E9%AB%98%E7%BA%A7%E5%91%BD%E4%BB%A4%E6%95%99%E7%A8%8B/Arthasdashboard%E5%91%BD%E4%BB%A4/arthas.png\" alt=\"Arthas\"></p>\n<p><code>Arthas</code> 是Alibaba开源的Java诊断工具，深受开发者喜爱。在线排查问题，无需重启；动态跟踪Java代码；实时监控JVM状态。</p>\n<p><code>Arthas</code> 支持JDK 6+，支持Linux/Mac/Windows，采用命令行交互模式，同时提供丰富的 <code>Tab</code> 自动补全功能，进一步方便进行问题的定位和诊断。</p>\n<p>当你遇到以下类似问题而束手无策时，Arthas可以帮助你解决：</p>\n<ul>\n<li>这个类从哪个 jar 包加载的？为什么会报各种类相关的 Exception？</li>\n<li>我改的代码为什么没有执行到？难道是我没 commit？分支搞错了？</li>\n<li>遇到问题无法在线上 debug，难道只能通过加日志再重新发布吗？</li>\n<li>线上遇到某个用户的数据处理有问题，但线上同样无法 debug，线下无法重现！</li>\n<li>是否有一个全局视角来查看系统的运行状况？</li>\n<li>有什么办法可以监控到JVM的实时运行状态？</li>\n<li>怎么快速定位应用的热点，生成火焰图？</li>\n</ul>\n<p>本教程会以一个简单的应用为例，演示dashboard命令。</p>\n<ul>\n<li>Github: <a href=\"https://github.com/alibaba/arthas\">https://github.com/alibaba/arthas</a></li>\n<li>文档: <a href=\"https://arthas.aliyun.com/doc/\">https://arthas.aliyun.com/doc/</a></li>\n</ul>\n<h2><span id=\"启动arthas-demo\">启动arthas-demo</span></h2><p>下载<code>arthas-demo.jar</code>，再用<code>java -jar</code>命令启动：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wget https://arthas.aliyun.com/arthas-demo.jar;java -jar arthas-demo.jar</span><br></pre></td></tr></table></figure>\n\n<p><code>arthas-demo</code>是一个很简单的程序，它随机生成整数，再执行因式分解，把结果打印出来。如果生成的随机数是负数，则会打印提示信息。</p>\n<h2><span id=\"启动arthas-boot\">启动arthas-boot</span></h2><p>在新的<code>Terminal 2</code>里，下载<code>arthas-boot.jar</code>，再用<code>java -jar</code>命令启动：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wget https://arthas.aliyun.com/arthas-boot.jar;java -jar arthas-boot.jar</span><br></pre></td></tr></table></figure>\n\n<p><code>arthas-boot</code>是<code>Arthas</code>的启动程序，它启动后，会列出所有的Java进程，用户可以选择需要诊断的目标进程。</p>\n<p>选择第一个进程，输入 <code>1</code> ，再<code>Enter/回车</code>：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1</span><br></pre></td></tr></table></figure>\n\n<p>Attach成功之后，会打印Arthas LOGO。输入 <code>help</code> 可以获取到更多的帮助信息。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">help</span></span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/jlynet.github.io/2021/08/07/Java%E8%AF%8A%E6%96%AD%E5%B7%A5%E5%85%B7Arthas%E9%AB%98%E7%BA%A7%E5%91%BD%E4%BB%A4%E6%95%99%E7%A8%8B/Arthasdashboard%E5%91%BD%E4%BB%A4/O1CN01HzatXZ1RgccrlT90M_!!6000000002141-2-tps-529-244.png\" alt=\"Arthas Boot\"></p>\n<h2><span id=\"dashboard-命令\">dashboard 命令</span></h2><p><code>dashboard</code> 命令可以查看当前系统的实时数据面板。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">dashboard</span><br></pre></td></tr></table></figure>\n\n<p>当运行在Ali-tomcat时，会显示当前tomcat的实时信息，如HTTP请求的qps, rt, 错误数, 线程池信息等等。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ dashboard</span><br><span class=\"line\">ID   NAME                           GROUP           PRIORITY   STATE     %CPU      DELTA_TIME TIME      INTERRUPTE DAEMON</span><br><span class=\"line\">-1   C2 CompilerThread0             -               -1         -         1.55      0.077      0:8.684   false      true</span><br><span class=\"line\">53   Timer-for-arthas-dashboard-07b system          5          RUNNABLE  0.08      0.004      0:0.004   false      true</span><br><span class=\"line\">22   scheduling-1                   main            5          TIMED_WAI 0.06      0.003      0:0.287   false      false</span><br><span class=\"line\">-1   C1 CompilerThread0             -               -1         -         0.06      0.003      0:2.171   false      true</span><br><span class=\"line\">-1   VM Periodic Task Thread        -               -1         -         0.03      0.001      0:0.092   false      true</span><br><span class=\"line\">49   arthas-NettyHttpTelnetBootstra system          5          RUNNABLE  0.02      0.001      0:0.156   false      true</span><br><span class=\"line\">16   Catalina-utility-1             main            1          TIMED_WAI 0.0       0.000      0:0.029   false      false</span><br><span class=\"line\">-1   G1 Young RemSet Sampling       -               -1         -         0.0       0.000      0:0.019   false      true</span><br><span class=\"line\">17   Catalina-utility-2             main            1          WAITING   0.0       0.000      0:0.025   false      false</span><br><span class=\"line\">34   http-nio-8080-ClientPoller     main            5          RUNNABLE  0.0       0.000      0:0.016   false      true</span><br><span class=\"line\">23   http-nio-8080-BlockPoller      main            5          RUNNABLE  0.0       0.000      0:0.011   false      true</span><br><span class=\"line\">-1   VM Thread                      -               -1         -         0.0       0.000      0:0.032   false      true</span><br><span class=\"line\">-1   Service Thread                 -               -1         -         0.0       0.000      0:0.006   false      true</span><br><span class=\"line\">-1   GC Thread#5                    -               -1         -         0.0       0.000      0:0.043   false      true</span><br><span class=\"line\">Memory                     used     total    max      usage    GC</span><br><span class=\"line\">heap                       36M      70M      4096M    0.90%    gc.g1_young_generation.count   12</span><br><span class=\"line\">g1_eden_space              6M       18M      -1       33.33%                                  86</span><br><span class=\"line\">g1_old_gen                 30M      50M      4096M    0.74%    gc.g1_old_generation.count     0</span><br><span class=\"line\">g1_survivor_space          491K     2048K    -1       24.01%   gc.g1_old_generation.time(ms)  0</span><br><span class=\"line\">nonheap                    66M      69M      -1       96.56%</span><br><span class=\"line\">codeheap_&#x27;non-nmethods&#x27;    1M       2M       5M       22.39%</span><br><span class=\"line\">metaspace                  46M      47M      -1       98.01%</span><br><span class=\"line\">Runtime</span><br><span class=\"line\">os.name                                                        Mac OS X</span><br><span class=\"line\">os.version                                                     10.15.4</span><br><span class=\"line\">java.version                                                   15</span><br><span class=\"line\">java.home                                                      /Library/Java/JavaVirtualMachines/jdk-15.jdk/Contents/Home</span><br><span class=\"line\">systemload.average                                             10.68</span><br><span class=\"line\">processors                                                     8</span><br><span class=\"line\">uptime                                                         272s</span><br></pre></td></tr></table></figure>\n\n<p>输入 <code>q</code> 或者 <code>Ctrl+C</code> 可以退出dashboard命令。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">q</span><br></pre></td></tr></table></figure>\n\n<h4><span id=\"数据说明\">数据说明</span></h4><ul>\n<li>ID: Java级别的线程ID，注意这个ID不能跟jstack中的nativeID一一对应。</li>\n<li>NAME: 线程名</li>\n<li>GROUP: 线程组名</li>\n<li>PRIORITY: 线程优先级, 1~10之间的数字，越大表示优先级越高</li>\n<li>STATE: 线程的状态</li>\n<li>CPU%: 线程的cpu使用率。比如采样间隔1000ms，某个线程的增量cpu时间为100ms，则cpu使用率=100/1000=10%</li>\n<li>DELTA_TIME: 上次采样之后线程运行增量CPU时间，数据格式为<code>秒</code></li>\n<li>TIME: 线程运行总CPU时间，数据格式为<code>分:秒</code></li>\n<li>INTERRUPTED: 线程当前的中断位状态</li>\n<li>DAEMON: 是否是daemon线程</li>\n</ul>\n<h5><span id=\"jvm内部线程\">JVM内部线程</span></h5><p>Java 8之后支持获取JVM内部线程CPU时间，这些线程只有名称和CPU时间，没有ID及状态等信息（显示ID为-1）。 通过内部线程可以观测到JVM活动，如GC、JIT编译等占用CPU情况，方便了解JVM整体运行状况。</p>\n<ul>\n<li>当JVM 堆(heap)/元数据(metaspace)空间不足或OOM时，可以看到GC线程的CPU占用率明显高于其他的线程。</li>\n<li>当执行<code>trace/watch/tt/redefine</code>等命令后，可以看到JIT线程活动变得更频繁。因为JVM热更新class字节码时清除了此class相关的JIT编译结果，需要重新编译。</li>\n</ul>\n<p>JVM内部线程包括下面几种：</p>\n<ul>\n<li>JIT编译线程: 如 <code>C1 CompilerThread0</code>, <code>C2 CompilerThread0</code></li>\n<li>GC线程: 如<code>GC Thread0</code>, <code>G1 Young RemSet Sampling</code></li>\n<li>其它内部线程: 如<code>VM Periodic Task Thread</code>, <code>VM Thread</code>, <code>Service Thread</code></li>\n</ul>\n<h2><span id=\"dashboard-数据说明\">dashboard 数据说明</span></h2><ul>\n<li><em>ID</em>: Java级别的线程ID，注意这个ID不能跟jstack中的nativeID一一对应</li>\n<li><em>NAME</em>: 线程名</li>\n<li><em>GROUP</em>: 线程组名</li>\n<li><em>PRIORITY</em>: 线程优先级, 1~10之间的数字，越大表示优先级越高</li>\n<li><em>STATE</em>: 线程的状态</li>\n<li><em>CPU%</em>: 线程消耗的cpu占比，采样100ms，将所有线程在这100ms内的cpu使用量求和，再算出每个线程的cpu使用占比。</li>\n<li><em>TIME</em>: 线程运行总时间，数据格式为<code>分：秒</code></li>\n<li><em>INTERRUPTED</em>: 线程当前的中断位状态</li>\n<li><em>DAEMON</em>: 是否是daemon线程</li>\n</ul>\n<h3><span id=\"截图展示\">截图展示</span></h3><p><img src=\"/jlynet.github.io/2021/08/07/Java%E8%AF%8A%E6%96%AD%E5%B7%A5%E5%85%B7Arthas%E9%AB%98%E7%BA%A7%E5%91%BD%E4%BB%A4%E6%95%99%E7%A8%8B/Arthasdashboard%E5%91%BD%E4%BB%A4/dashboard.png\" alt=\"img\"></p>\n<h2><span id=\"更多信息\">更多信息</span></h2><p>通过本教程基本掌握了Arthas dashboard的用法。如果有更多的技巧或者使用疑问，欢迎在Issue里提出。</p>\n<ul>\n<li>Issues: <a href=\"https://github.com/alibaba/arthas/issues\">https://github.com/alibaba/arthas/issues</a></li>\n<li>文档： <a href=\"https://arthas.aliyun.com/doc\">https://arthas.aliyun.com/doc</a></li>\n</ul>\n<p>如果您在使用Arthas，请让我们知道。您的使用对我们非常重要：<a href=\"https://github.com/alibaba/arthas/issues/111\">查看</a></p>\n<p>文章拷贝来源：<a href=\"https://start.aliyun.com/course?spm=a2ck6.17690074.0.0.28bc2e7dHTphXs&amp;id=PaiFAkJM\">https://start.aliyun.com/course?spm=a2ck6.17690074.0.0.28bc2e7dHTphXs&amp;id=PaiFAkJM</a></p>\n","site":{"data":{}},"excerpt":"","more":"<!-- toc -->\n\n<ul>\n<li><a href=\"#%E5%90%AF%E5%8A%A8arthas-demo\">启动arthas-demo</a></li>\n<li><a href=\"#%E5%90%AF%E5%8A%A8arthas-boot\">启动arthas-boot</a></li>\n<li><a href=\"#dashboard-%E5%91%BD%E4%BB%A4\">dashboard 命令</a><ul>\n<li><a href=\"#%E6%95%B0%E6%8D%AE%E8%AF%B4%E6%98%8E\">数据说明</a><ul>\n<li><a href=\"#jvm%E5%86%85%E9%83%A8%E7%BA%BF%E7%A8%8B\">JVM内部线程</a></li>\n</ul>\n</li>\n</ul>\n</li>\n<li><a href=\"#dashboard-%E6%95%B0%E6%8D%AE%E8%AF%B4%E6%98%8E\">dashboard 数据说明</a><ul>\n<li><a href=\"#%E6%88%AA%E5%9B%BE%E5%B1%95%E7%A4%BA\">截图展示</a></li>\n</ul>\n</li>\n<li><a href=\"#%E6%9B%B4%E5%A4%9A%E4%BF%A1%E6%81%AF\">更多信息</a></li>\n</ul>\n<!-- tocstop -->\n\n<p><img src=\"/jlynet.github.io/2021/08/07/Java%E8%AF%8A%E6%96%AD%E5%B7%A5%E5%85%B7Arthas%E9%AB%98%E7%BA%A7%E5%91%BD%E4%BB%A4%E6%95%99%E7%A8%8B/Arthasdashboard%E5%91%BD%E4%BB%A4/arthas.png\" alt=\"Arthas\"></p>\n<p><code>Arthas</code> 是Alibaba开源的Java诊断工具，深受开发者喜爱。在线排查问题，无需重启；动态跟踪Java代码；实时监控JVM状态。</p>\n<p><code>Arthas</code> 支持JDK 6+，支持Linux/Mac/Windows，采用命令行交互模式，同时提供丰富的 <code>Tab</code> 自动补全功能，进一步方便进行问题的定位和诊断。</p>\n<p>当你遇到以下类似问题而束手无策时，Arthas可以帮助你解决：</p>\n<ul>\n<li>这个类从哪个 jar 包加载的？为什么会报各种类相关的 Exception？</li>\n<li>我改的代码为什么没有执行到？难道是我没 commit？分支搞错了？</li>\n<li>遇到问题无法在线上 debug，难道只能通过加日志再重新发布吗？</li>\n<li>线上遇到某个用户的数据处理有问题，但线上同样无法 debug，线下无法重现！</li>\n<li>是否有一个全局视角来查看系统的运行状况？</li>\n<li>有什么办法可以监控到JVM的实时运行状态？</li>\n<li>怎么快速定位应用的热点，生成火焰图？</li>\n</ul>\n<p>本教程会以一个简单的应用为例，演示dashboard命令。</p>\n<ul>\n<li>Github: <a href=\"https://github.com/alibaba/arthas\">https://github.com/alibaba/arthas</a></li>\n<li>文档: <a href=\"https://arthas.aliyun.com/doc/\">https://arthas.aliyun.com/doc/</a></li>\n</ul>\n<h2 id=\"启动arthas-demo\"><a href=\"#启动arthas-demo\" class=\"headerlink\" title=\"启动arthas-demo\"></a>启动arthas-demo</h2><p>下载<code>arthas-demo.jar</code>，再用<code>java -jar</code>命令启动：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wget https://arthas.aliyun.com/arthas-demo.jar;java -jar arthas-demo.jar</span><br></pre></td></tr></table></figure>\n\n<p><code>arthas-demo</code>是一个很简单的程序，它随机生成整数，再执行因式分解，把结果打印出来。如果生成的随机数是负数，则会打印提示信息。</p>\n<h2 id=\"启动arthas-boot\"><a href=\"#启动arthas-boot\" class=\"headerlink\" title=\"启动arthas-boot\"></a>启动arthas-boot</h2><p>在新的<code>Terminal 2</code>里，下载<code>arthas-boot.jar</code>，再用<code>java -jar</code>命令启动：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wget https://arthas.aliyun.com/arthas-boot.jar;java -jar arthas-boot.jar</span><br></pre></td></tr></table></figure>\n\n<p><code>arthas-boot</code>是<code>Arthas</code>的启动程序，它启动后，会列出所有的Java进程，用户可以选择需要诊断的目标进程。</p>\n<p>选择第一个进程，输入 <code>1</code> ，再<code>Enter/回车</code>：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1</span><br></pre></td></tr></table></figure>\n\n<p>Attach成功之后，会打印Arthas LOGO。输入 <code>help</code> 可以获取到更多的帮助信息。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">help</span></span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/jlynet.github.io/2021/08/07/Java%E8%AF%8A%E6%96%AD%E5%B7%A5%E5%85%B7Arthas%E9%AB%98%E7%BA%A7%E5%91%BD%E4%BB%A4%E6%95%99%E7%A8%8B/Arthasdashboard%E5%91%BD%E4%BB%A4/O1CN01HzatXZ1RgccrlT90M_!!6000000002141-2-tps-529-244.png\" alt=\"Arthas Boot\"></p>\n<h2 id=\"dashboard-命令\"><a href=\"#dashboard-命令\" class=\"headerlink\" title=\"dashboard 命令\"></a>dashboard 命令</h2><p><code>dashboard</code> 命令可以查看当前系统的实时数据面板。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">dashboard</span><br></pre></td></tr></table></figure>\n\n<p>当运行在Ali-tomcat时，会显示当前tomcat的实时信息，如HTTP请求的qps, rt, 错误数, 线程池信息等等。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ dashboard</span><br><span class=\"line\">ID   NAME                           GROUP           PRIORITY   STATE     %CPU      DELTA_TIME TIME      INTERRUPTE DAEMON</span><br><span class=\"line\">-1   C2 CompilerThread0             -               -1         -         1.55      0.077      0:8.684   false      true</span><br><span class=\"line\">53   Timer-for-arthas-dashboard-07b system          5          RUNNABLE  0.08      0.004      0:0.004   false      true</span><br><span class=\"line\">22   scheduling-1                   main            5          TIMED_WAI 0.06      0.003      0:0.287   false      false</span><br><span class=\"line\">-1   C1 CompilerThread0             -               -1         -         0.06      0.003      0:2.171   false      true</span><br><span class=\"line\">-1   VM Periodic Task Thread        -               -1         -         0.03      0.001      0:0.092   false      true</span><br><span class=\"line\">49   arthas-NettyHttpTelnetBootstra system          5          RUNNABLE  0.02      0.001      0:0.156   false      true</span><br><span class=\"line\">16   Catalina-utility-1             main            1          TIMED_WAI 0.0       0.000      0:0.029   false      false</span><br><span class=\"line\">-1   G1 Young RemSet Sampling       -               -1         -         0.0       0.000      0:0.019   false      true</span><br><span class=\"line\">17   Catalina-utility-2             main            1          WAITING   0.0       0.000      0:0.025   false      false</span><br><span class=\"line\">34   http-nio-8080-ClientPoller     main            5          RUNNABLE  0.0       0.000      0:0.016   false      true</span><br><span class=\"line\">23   http-nio-8080-BlockPoller      main            5          RUNNABLE  0.0       0.000      0:0.011   false      true</span><br><span class=\"line\">-1   VM Thread                      -               -1         -         0.0       0.000      0:0.032   false      true</span><br><span class=\"line\">-1   Service Thread                 -               -1         -         0.0       0.000      0:0.006   false      true</span><br><span class=\"line\">-1   GC Thread#5                    -               -1         -         0.0       0.000      0:0.043   false      true</span><br><span class=\"line\">Memory                     used     total    max      usage    GC</span><br><span class=\"line\">heap                       36M      70M      4096M    0.90%    gc.g1_young_generation.count   12</span><br><span class=\"line\">g1_eden_space              6M       18M      -1       33.33%                                  86</span><br><span class=\"line\">g1_old_gen                 30M      50M      4096M    0.74%    gc.g1_old_generation.count     0</span><br><span class=\"line\">g1_survivor_space          491K     2048K    -1       24.01%   gc.g1_old_generation.time(ms)  0</span><br><span class=\"line\">nonheap                    66M      69M      -1       96.56%</span><br><span class=\"line\">codeheap_&#x27;non-nmethods&#x27;    1M       2M       5M       22.39%</span><br><span class=\"line\">metaspace                  46M      47M      -1       98.01%</span><br><span class=\"line\">Runtime</span><br><span class=\"line\">os.name                                                        Mac OS X</span><br><span class=\"line\">os.version                                                     10.15.4</span><br><span class=\"line\">java.version                                                   15</span><br><span class=\"line\">java.home                                                      /Library/Java/JavaVirtualMachines/jdk-15.jdk/Contents/Home</span><br><span class=\"line\">systemload.average                                             10.68</span><br><span class=\"line\">processors                                                     8</span><br><span class=\"line\">uptime                                                         272s</span><br></pre></td></tr></table></figure>\n\n<p>输入 <code>q</code> 或者 <code>Ctrl+C</code> 可以退出dashboard命令。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">q</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"数据说明\"><a href=\"#数据说明\" class=\"headerlink\" title=\"数据说明\"></a>数据说明</h4><ul>\n<li>ID: Java级别的线程ID，注意这个ID不能跟jstack中的nativeID一一对应。</li>\n<li>NAME: 线程名</li>\n<li>GROUP: 线程组名</li>\n<li>PRIORITY: 线程优先级, 1~10之间的数字，越大表示优先级越高</li>\n<li>STATE: 线程的状态</li>\n<li>CPU%: 线程的cpu使用率。比如采样间隔1000ms，某个线程的增量cpu时间为100ms，则cpu使用率=100/1000=10%</li>\n<li>DELTA_TIME: 上次采样之后线程运行增量CPU时间，数据格式为<code>秒</code></li>\n<li>TIME: 线程运行总CPU时间，数据格式为<code>分:秒</code></li>\n<li>INTERRUPTED: 线程当前的中断位状态</li>\n<li>DAEMON: 是否是daemon线程</li>\n</ul>\n<h5 id=\"JVM内部线程\"><a href=\"#JVM内部线程\" class=\"headerlink\" title=\"JVM内部线程\"></a>JVM内部线程</h5><p>Java 8之后支持获取JVM内部线程CPU时间，这些线程只有名称和CPU时间，没有ID及状态等信息（显示ID为-1）。 通过内部线程可以观测到JVM活动，如GC、JIT编译等占用CPU情况，方便了解JVM整体运行状况。</p>\n<ul>\n<li>当JVM 堆(heap)/元数据(metaspace)空间不足或OOM时，可以看到GC线程的CPU占用率明显高于其他的线程。</li>\n<li>当执行<code>trace/watch/tt/redefine</code>等命令后，可以看到JIT线程活动变得更频繁。因为JVM热更新class字节码时清除了此class相关的JIT编译结果，需要重新编译。</li>\n</ul>\n<p>JVM内部线程包括下面几种：</p>\n<ul>\n<li>JIT编译线程: 如 <code>C1 CompilerThread0</code>, <code>C2 CompilerThread0</code></li>\n<li>GC线程: 如<code>GC Thread0</code>, <code>G1 Young RemSet Sampling</code></li>\n<li>其它内部线程: 如<code>VM Periodic Task Thread</code>, <code>VM Thread</code>, <code>Service Thread</code></li>\n</ul>\n<h2 id=\"dashboard-数据说明\"><a href=\"#dashboard-数据说明\" class=\"headerlink\" title=\"dashboard 数据说明\"></a>dashboard 数据说明</h2><ul>\n<li><em>ID</em>: Java级别的线程ID，注意这个ID不能跟jstack中的nativeID一一对应</li>\n<li><em>NAME</em>: 线程名</li>\n<li><em>GROUP</em>: 线程组名</li>\n<li><em>PRIORITY</em>: 线程优先级, 1~10之间的数字，越大表示优先级越高</li>\n<li><em>STATE</em>: 线程的状态</li>\n<li><em>CPU%</em>: 线程消耗的cpu占比，采样100ms，将所有线程在这100ms内的cpu使用量求和，再算出每个线程的cpu使用占比。</li>\n<li><em>TIME</em>: 线程运行总时间，数据格式为<code>分：秒</code></li>\n<li><em>INTERRUPTED</em>: 线程当前的中断位状态</li>\n<li><em>DAEMON</em>: 是否是daemon线程</li>\n</ul>\n<h3 id=\"截图展示\"><a href=\"#截图展示\" class=\"headerlink\" title=\"截图展示\"></a>截图展示</h3><p><img src=\"/jlynet.github.io/2021/08/07/Java%E8%AF%8A%E6%96%AD%E5%B7%A5%E5%85%B7Arthas%E9%AB%98%E7%BA%A7%E5%91%BD%E4%BB%A4%E6%95%99%E7%A8%8B/Arthasdashboard%E5%91%BD%E4%BB%A4/dashboard.png\" alt=\"img\"></p>\n<h2 id=\"更多信息\"><a href=\"#更多信息\" class=\"headerlink\" title=\"更多信息\"></a>更多信息</h2><p>通过本教程基本掌握了Arthas dashboard的用法。如果有更多的技巧或者使用疑问，欢迎在Issue里提出。</p>\n<ul>\n<li>Issues: <a href=\"https://github.com/alibaba/arthas/issues\">https://github.com/alibaba/arthas/issues</a></li>\n<li>文档： <a href=\"https://arthas.aliyun.com/doc\">https://arthas.aliyun.com/doc</a></li>\n</ul>\n<p>如果您在使用Arthas，请让我们知道。您的使用对我们非常重要：<a href=\"https://github.com/alibaba/arthas/issues/111\">查看</a></p>\n<p>文章拷贝来源：<a href=\"https://start.aliyun.com/course?spm=a2ck6.17690074.0.0.28bc2e7dHTphXs&amp;id=PaiFAkJM\">https://start.aliyun.com/course?spm=a2ck6.17690074.0.0.28bc2e7dHTphXs&amp;id=PaiFAkJM</a></p>\n"},{"title":"Arthas dump命令","date":"2021-08-07T01:51:44.000Z","_content":"\n<!-- toc -->\n\n![Arthas](arthas.png)\n\n`Arthas` 是Alibaba开源的Java诊断工具，深受开发者喜爱。在线排查问题，无需重启；动态跟踪Java代码；实时监控JVM状态。\n\n`Arthas` 支持JDK 6+，支持Linux/Mac/Windows，采用命令行交互模式，同时提供丰富的 `Tab` 自动补全功能，进一步方便进行问题的定位和诊断。\n\n当你遇到以下类似问题而束手无策时，Arthas可以帮助你解决：\n\n- 这个类从哪个 jar 包加载的？为什么会报各种类相关的 Exception？\n- 我改的代码为什么没有执行到？难道是我没 commit？分支搞错了？\n- 遇到问题无法在线上 debug，难道只能通过加日志再重新发布吗？\n- 线上遇到某个用户的数据处理有问题，但线上同样无法 debug，线下无法重现！\n- 是否有一个全局视角来查看系统的运行状况？\n- 有什么办法可以监控到JVM的实时运行状态？\n- 怎么快速定位应用的热点，生成火焰图？\n\n本教程会以一个简单的应用为例，演示dump命令。\n\n- Github: https://github.com/alibaba/arthas\n- 文档: https://arthas.aliyun.com/doc/\n\n## 启动arthas demo\n\n下载`arthas-demo.jar`，再用`java -jar`命令启动：\n\n```bash\nwget https://arthas.aliyun.com/arthas-demo.jar;java -jar arthas-demo.jar\n```\n\n`arthas-demo`是一个很简单的程序，它随机生成整数，再执行因式分解，把结果打印出来。如果生成的随机数是负数，则会打印提示信息。\n\n## 启动arthas-boot\n\n在新的`Terminal 2`里，下载`arthas-boot.jar`，再用`java -jar`命令启动：\n\n```bash\nwget https://arthas.aliyun.com/arthas-boot.jar;java -jar arthas-boot.jar\n```\n\n`arthas-boot`是`Arthas`的启动程序，它启动后，会列出所有的Java进程，用户可以选择需要诊断的目标进程。\n\n选择第一个进程，输入 `1` ，再`Enter/回车`：\n\n```bash\n1\n```\n\nAttach成功之后，会打印Arthas LOGO。输入 `help` 可以获取到更多的帮助信息。\n\n```bash\nhelp\n```\n\n![Arthas Boot](O1CN01HzatXZ1RgccrlT90M_!!6000000002141-2-tps-529-244.png)\n\n## dump命令\n\n> dump 已加载类的 bytecode 到特定目录\n\n#### 参数说明\n\n| 参数名称              | 参数说明                                   |\n| --------------------- | ------------------------------------------ |\n| *class-pattern*       | 类名表达式匹配                             |\n| `[c:]`                | 类所属 ClassLoader 的 hashcode             |\n| `[d:]`                | 设置类文件的目标目录                       |\n| `[classLoaderClass:]` | 指定执行表达式的 ClassLoader 的 class name |\n| [E]                   | 开启正则表达式匹配，默认为通配符匹配       |\n\n#### 使用参考\n\n```bash\ndump java.lang.String\n```\n\n```console\n$ dump java.lang.String\n HASHCODE  CLASSLOADER  LOCATION\n null                   /Users/admin/logs/arthas/classdump/java/lang/String.class\nAffect(row-cnt:1) cost in 119 ms.\ndump demo.*\n```\n\n```console\n$ dump demo.*\n HASHCODE  CLASSLOADER                                    LOCATION\n 3d4eac69  +-sun.misc.Launcher$AppClassLoader@3d4eac69    /Users/admin/logs/arthas/classdump/sun.misc.Launcher$AppClassLoader-3d4eac69/demo/MathGame.class\n             +-sun.misc.Launcher$ExtClassLoader@66350f69\nAffect(row-cnt:1) cost in 39 ms.\ndump -d /tmp/output java.lang.String\n```\n\n```console\n$ dump -d /tmp/output java.lang.String\n HASHCODE  CLASSLOADER  LOCATION\n null                   /tmp/output/java/lang/String.class\nAffect(row-cnt:1) cost in 138 ms.\n```\n\n- 指定classLoader\n\n注意hashcode是变化的，需要先查看当前的ClassLoader信息，提取对应ClassLoader的hashcode。\n\n如果你使用`-c`，你需要手动输入hashcode：`-c <hashcode>`\n\n```console\n$ dump -c 3d4eac69 demo.*\n```\n\n对于只有唯一实例的ClassLoader可以通过`--classLoaderClass`指定class name，使用起来更加方便：\n\n```bash\ndump --classLoaderClass sun.misc.Launcher$AppClassLoader demo.*\n```\n\n```console\n$ dump --classLoaderClass sun.misc.Launcher$AppClassLoader demo.*\n HASHCODE  CLASSLOADER                                    LOCATION\n 3d4eac69  +-sun.misc.Launcher$AppClassLoader@3d4eac69    /Users/admin/logs/arthas/classdump/sun.misc.Launcher$AppClassLoader-3d4eac69/demo/MathGame.class\n             +-sun.misc.Launcher$ExtClassLoader@66350f69\nAffect(row-cnt:1) cost in 39 ms.\n```\n\n- 注: 这里classLoaderClass 在 java 8 是 sun.misc.Launcher$AppClassLoader，而java 11的classloader是jdk.internal.loader.ClassLoaders$AppClassLoader，katacoda目前环境是java8。\n\n`--classLoaderClass` 的值是ClassLoader的类名，只有匹配到唯一的ClassLoader实例时才能工作，目的是方便输入通用命令，而`-c <hashcode>`是动态变化的。\n\n## 更多信息\n\n在“dump”中，我们演示了了Arthas的dump命令。如果有更多的技巧或者使用疑问，欢迎在Issue里提出。\n\n- Issues: https://github.com/alibaba/arthas/issues\n- 文档： https://arthas.aliyun.com/doc\n\n如果您在使用Arthas，请让我们知道。您的使用对我们非常重要：[查看](https://github.com/alibaba/arthas/issues/111)\n\n文章拷贝来源：https://start.aliyun.com/course?spm=a2ck6.17690074.0.0.28bc2e7dHTphXs&id=PaiFAkJM","source":"_posts/Java诊断工具Arthas高级命令教程/Arthasdump命令.md","raw":"---\ntitle: Arthas dump命令\ndate: 2021-08-07 09:51:44\ntags: ['Java 诊断工具 Arthas 高级命令教程']\n---\n\n<!-- toc -->\n\n![Arthas](arthas.png)\n\n`Arthas` 是Alibaba开源的Java诊断工具，深受开发者喜爱。在线排查问题，无需重启；动态跟踪Java代码；实时监控JVM状态。\n\n`Arthas` 支持JDK 6+，支持Linux/Mac/Windows，采用命令行交互模式，同时提供丰富的 `Tab` 自动补全功能，进一步方便进行问题的定位和诊断。\n\n当你遇到以下类似问题而束手无策时，Arthas可以帮助你解决：\n\n- 这个类从哪个 jar 包加载的？为什么会报各种类相关的 Exception？\n- 我改的代码为什么没有执行到？难道是我没 commit？分支搞错了？\n- 遇到问题无法在线上 debug，难道只能通过加日志再重新发布吗？\n- 线上遇到某个用户的数据处理有问题，但线上同样无法 debug，线下无法重现！\n- 是否有一个全局视角来查看系统的运行状况？\n- 有什么办法可以监控到JVM的实时运行状态？\n- 怎么快速定位应用的热点，生成火焰图？\n\n本教程会以一个简单的应用为例，演示dump命令。\n\n- Github: https://github.com/alibaba/arthas\n- 文档: https://arthas.aliyun.com/doc/\n\n## 启动arthas demo\n\n下载`arthas-demo.jar`，再用`java -jar`命令启动：\n\n```bash\nwget https://arthas.aliyun.com/arthas-demo.jar;java -jar arthas-demo.jar\n```\n\n`arthas-demo`是一个很简单的程序，它随机生成整数，再执行因式分解，把结果打印出来。如果生成的随机数是负数，则会打印提示信息。\n\n## 启动arthas-boot\n\n在新的`Terminal 2`里，下载`arthas-boot.jar`，再用`java -jar`命令启动：\n\n```bash\nwget https://arthas.aliyun.com/arthas-boot.jar;java -jar arthas-boot.jar\n```\n\n`arthas-boot`是`Arthas`的启动程序，它启动后，会列出所有的Java进程，用户可以选择需要诊断的目标进程。\n\n选择第一个进程，输入 `1` ，再`Enter/回车`：\n\n```bash\n1\n```\n\nAttach成功之后，会打印Arthas LOGO。输入 `help` 可以获取到更多的帮助信息。\n\n```bash\nhelp\n```\n\n![Arthas Boot](O1CN01HzatXZ1RgccrlT90M_!!6000000002141-2-tps-529-244.png)\n\n## dump命令\n\n> dump 已加载类的 bytecode 到特定目录\n\n#### 参数说明\n\n| 参数名称              | 参数说明                                   |\n| --------------------- | ------------------------------------------ |\n| *class-pattern*       | 类名表达式匹配                             |\n| `[c:]`                | 类所属 ClassLoader 的 hashcode             |\n| `[d:]`                | 设置类文件的目标目录                       |\n| `[classLoaderClass:]` | 指定执行表达式的 ClassLoader 的 class name |\n| [E]                   | 开启正则表达式匹配，默认为通配符匹配       |\n\n#### 使用参考\n\n```bash\ndump java.lang.String\n```\n\n```console\n$ dump java.lang.String\n HASHCODE  CLASSLOADER  LOCATION\n null                   /Users/admin/logs/arthas/classdump/java/lang/String.class\nAffect(row-cnt:1) cost in 119 ms.\ndump demo.*\n```\n\n```console\n$ dump demo.*\n HASHCODE  CLASSLOADER                                    LOCATION\n 3d4eac69  +-sun.misc.Launcher$AppClassLoader@3d4eac69    /Users/admin/logs/arthas/classdump/sun.misc.Launcher$AppClassLoader-3d4eac69/demo/MathGame.class\n             +-sun.misc.Launcher$ExtClassLoader@66350f69\nAffect(row-cnt:1) cost in 39 ms.\ndump -d /tmp/output java.lang.String\n```\n\n```console\n$ dump -d /tmp/output java.lang.String\n HASHCODE  CLASSLOADER  LOCATION\n null                   /tmp/output/java/lang/String.class\nAffect(row-cnt:1) cost in 138 ms.\n```\n\n- 指定classLoader\n\n注意hashcode是变化的，需要先查看当前的ClassLoader信息，提取对应ClassLoader的hashcode。\n\n如果你使用`-c`，你需要手动输入hashcode：`-c <hashcode>`\n\n```console\n$ dump -c 3d4eac69 demo.*\n```\n\n对于只有唯一实例的ClassLoader可以通过`--classLoaderClass`指定class name，使用起来更加方便：\n\n```bash\ndump --classLoaderClass sun.misc.Launcher$AppClassLoader demo.*\n```\n\n```console\n$ dump --classLoaderClass sun.misc.Launcher$AppClassLoader demo.*\n HASHCODE  CLASSLOADER                                    LOCATION\n 3d4eac69  +-sun.misc.Launcher$AppClassLoader@3d4eac69    /Users/admin/logs/arthas/classdump/sun.misc.Launcher$AppClassLoader-3d4eac69/demo/MathGame.class\n             +-sun.misc.Launcher$ExtClassLoader@66350f69\nAffect(row-cnt:1) cost in 39 ms.\n```\n\n- 注: 这里classLoaderClass 在 java 8 是 sun.misc.Launcher$AppClassLoader，而java 11的classloader是jdk.internal.loader.ClassLoaders$AppClassLoader，katacoda目前环境是java8。\n\n`--classLoaderClass` 的值是ClassLoader的类名，只有匹配到唯一的ClassLoader实例时才能工作，目的是方便输入通用命令，而`-c <hashcode>`是动态变化的。\n\n## 更多信息\n\n在“dump”中，我们演示了了Arthas的dump命令。如果有更多的技巧或者使用疑问，欢迎在Issue里提出。\n\n- Issues: https://github.com/alibaba/arthas/issues\n- 文档： https://arthas.aliyun.com/doc\n\n如果您在使用Arthas，请让我们知道。您的使用对我们非常重要：[查看](https://github.com/alibaba/arthas/issues/111)\n\n文章拷贝来源：https://start.aliyun.com/course?spm=a2ck6.17690074.0.0.28bc2e7dHTphXs&id=PaiFAkJM","slug":"Java诊断工具Arthas高级命令教程/Arthasdump命令","published":1,"updated":"2021-08-07T05:34:14.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cks1cgr6b001pfw5i9x341if6","content":"<!-- toc -->\n\n<ul>\n<li><a href=\"#%E5%90%AF%E5%8A%A8arthas-demo\">启动arthas demo</a></li>\n<li><a href=\"#%E5%90%AF%E5%8A%A8arthas-boot\">启动arthas-boot</a></li>\n<li><a href=\"#dump%E5%91%BD%E4%BB%A4\">dump命令</a><ul>\n<li><a href=\"#%E5%8F%82%E6%95%B0%E8%AF%B4%E6%98%8E\">参数说明</a></li>\n<li><a href=\"#%E4%BD%BF%E7%94%A8%E5%8F%82%E8%80%83\">使用参考</a></li>\n</ul>\n</li>\n<li><a href=\"#%E6%9B%B4%E5%A4%9A%E4%BF%A1%E6%81%AF\">更多信息</a></li>\n</ul>\n<!-- tocstop -->\n\n<p><img src=\"/jlynet.github.io/2021/08/07/Java%E8%AF%8A%E6%96%AD%E5%B7%A5%E5%85%B7Arthas%E9%AB%98%E7%BA%A7%E5%91%BD%E4%BB%A4%E6%95%99%E7%A8%8B/Arthasdump%E5%91%BD%E4%BB%A4/arthas.png\" alt=\"Arthas\"></p>\n<p><code>Arthas</code> 是Alibaba开源的Java诊断工具，深受开发者喜爱。在线排查问题，无需重启；动态跟踪Java代码；实时监控JVM状态。</p>\n<p><code>Arthas</code> 支持JDK 6+，支持Linux/Mac/Windows，采用命令行交互模式，同时提供丰富的 <code>Tab</code> 自动补全功能，进一步方便进行问题的定位和诊断。</p>\n<p>当你遇到以下类似问题而束手无策时，Arthas可以帮助你解决：</p>\n<ul>\n<li>这个类从哪个 jar 包加载的？为什么会报各种类相关的 Exception？</li>\n<li>我改的代码为什么没有执行到？难道是我没 commit？分支搞错了？</li>\n<li>遇到问题无法在线上 debug，难道只能通过加日志再重新发布吗？</li>\n<li>线上遇到某个用户的数据处理有问题，但线上同样无法 debug，线下无法重现！</li>\n<li>是否有一个全局视角来查看系统的运行状况？</li>\n<li>有什么办法可以监控到JVM的实时运行状态？</li>\n<li>怎么快速定位应用的热点，生成火焰图？</li>\n</ul>\n<p>本教程会以一个简单的应用为例，演示dump命令。</p>\n<ul>\n<li>Github: <a href=\"https://github.com/alibaba/arthas\">https://github.com/alibaba/arthas</a></li>\n<li>文档: <a href=\"https://arthas.aliyun.com/doc/\">https://arthas.aliyun.com/doc/</a></li>\n</ul>\n<h2><span id=\"启动arthas-demo\">启动arthas demo</span></h2><p>下载<code>arthas-demo.jar</code>，再用<code>java -jar</code>命令启动：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wget https://arthas.aliyun.com/arthas-demo.jar;java -jar arthas-demo.jar</span><br></pre></td></tr></table></figure>\n\n<p><code>arthas-demo</code>是一个很简单的程序，它随机生成整数，再执行因式分解，把结果打印出来。如果生成的随机数是负数，则会打印提示信息。</p>\n<h2><span id=\"启动arthas-boot\">启动arthas-boot</span></h2><p>在新的<code>Terminal 2</code>里，下载<code>arthas-boot.jar</code>，再用<code>java -jar</code>命令启动：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wget https://arthas.aliyun.com/arthas-boot.jar;java -jar arthas-boot.jar</span><br></pre></td></tr></table></figure>\n\n<p><code>arthas-boot</code>是<code>Arthas</code>的启动程序，它启动后，会列出所有的Java进程，用户可以选择需要诊断的目标进程。</p>\n<p>选择第一个进程，输入 <code>1</code> ，再<code>Enter/回车</code>：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1</span><br></pre></td></tr></table></figure>\n\n<p>Attach成功之后，会打印Arthas LOGO。输入 <code>help</code> 可以获取到更多的帮助信息。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">help</span></span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/jlynet.github.io/2021/08/07/Java%E8%AF%8A%E6%96%AD%E5%B7%A5%E5%85%B7Arthas%E9%AB%98%E7%BA%A7%E5%91%BD%E4%BB%A4%E6%95%99%E7%A8%8B/Arthasdump%E5%91%BD%E4%BB%A4/O1CN01HzatXZ1RgccrlT90M_!!6000000002141-2-tps-529-244.png\" alt=\"Arthas Boot\"></p>\n<h2><span id=\"dump命令\">dump命令</span></h2><blockquote>\n<p>dump 已加载类的 bytecode 到特定目录</p>\n</blockquote>\n<h4><span id=\"参数说明\">参数说明</span></h4><table>\n<thead>\n<tr>\n<th>参数名称</th>\n<th>参数说明</th>\n</tr>\n</thead>\n<tbody><tr>\n<td><em>class-pattern</em></td>\n<td>类名表达式匹配</td>\n</tr>\n<tr>\n<td><code>[c:]</code></td>\n<td>类所属 ClassLoader 的 hashcode</td>\n</tr>\n<tr>\n<td><code>[d:]</code></td>\n<td>设置类文件的目标目录</td>\n</tr>\n<tr>\n<td><code>[classLoaderClass:]</code></td>\n<td>指定执行表达式的 ClassLoader 的 class name</td>\n</tr>\n<tr>\n<td>[E]</td>\n<td>开启正则表达式匹配，默认为通配符匹配</td>\n</tr>\n</tbody></table>\n<h4><span id=\"使用参考\">使用参考</span></h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">dump java.lang.String</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight console\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> dump java.lang.String</span></span><br><span class=\"line\"> HASHCODE  CLASSLOADER  LOCATION</span><br><span class=\"line\"> null                   /Users/admin/logs/arthas/classdump/java/lang/String.class</span><br><span class=\"line\">Affect(row-cnt:1) cost in 119 ms.</span><br><span class=\"line\">dump demo.*</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight console\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> dump demo.*</span></span><br><span class=\"line\"> HASHCODE  CLASSLOADER                                    LOCATION</span><br><span class=\"line\"> 3d4eac69  +-sun.misc.Launcher$AppClassLoader@3d4eac69    /Users/admin/logs/arthas/classdump/sun.misc.Launcher$AppClassLoader-3d4eac69/demo/MathGame.class</span><br><span class=\"line\">             +-sun.misc.Launcher$ExtClassLoader@66350f69</span><br><span class=\"line\">Affect(row-cnt:1) cost in 39 ms.</span><br><span class=\"line\">dump -d /tmp/output java.lang.String</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight console\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> dump -d /tmp/output java.lang.String</span></span><br><span class=\"line\"> HASHCODE  CLASSLOADER  LOCATION</span><br><span class=\"line\"> null                   /tmp/output/java/lang/String.class</span><br><span class=\"line\">Affect(row-cnt:1) cost in 138 ms.</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>指定classLoader</li>\n</ul>\n<p>注意hashcode是变化的，需要先查看当前的ClassLoader信息，提取对应ClassLoader的hashcode。</p>\n<p>如果你使用<code>-c</code>，你需要手动输入hashcode：<code>-c &lt;hashcode&gt;</code></p>\n<figure class=\"highlight console\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> dump -c 3d4eac69 demo.*</span></span><br></pre></td></tr></table></figure>\n\n<p>对于只有唯一实例的ClassLoader可以通过<code>--classLoaderClass</code>指定class name，使用起来更加方便：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">dump --classLoaderClass sun.misc.Launcher<span class=\"variable\">$AppClassLoader</span> demo.*</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight console\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> dump --classLoaderClass sun.misc.Launcher<span class=\"variable\">$AppClassLoader</span> demo.*</span></span><br><span class=\"line\"> HASHCODE  CLASSLOADER                                    LOCATION</span><br><span class=\"line\"> 3d4eac69  +-sun.misc.Launcher$AppClassLoader@3d4eac69    /Users/admin/logs/arthas/classdump/sun.misc.Launcher$AppClassLoader-3d4eac69/demo/MathGame.class</span><br><span class=\"line\">             +-sun.misc.Launcher$ExtClassLoader@66350f69</span><br><span class=\"line\">Affect(row-cnt:1) cost in 39 ms.</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>注: 这里classLoaderClass 在 java 8 是 sun.misc.Launcher$AppClassLoader，而java 11的classloader是jdk.internal.loader.ClassLoaders$AppClassLoader，katacoda目前环境是java8。</li>\n</ul>\n<p><code>--classLoaderClass</code> 的值是ClassLoader的类名，只有匹配到唯一的ClassLoader实例时才能工作，目的是方便输入通用命令，而<code>-c &lt;hashcode&gt;</code>是动态变化的。</p>\n<h2><span id=\"更多信息\">更多信息</span></h2><p>在“dump”中，我们演示了了Arthas的dump命令。如果有更多的技巧或者使用疑问，欢迎在Issue里提出。</p>\n<ul>\n<li>Issues: <a href=\"https://github.com/alibaba/arthas/issues\">https://github.com/alibaba/arthas/issues</a></li>\n<li>文档： <a href=\"https://arthas.aliyun.com/doc\">https://arthas.aliyun.com/doc</a></li>\n</ul>\n<p>如果您在使用Arthas，请让我们知道。您的使用对我们非常重要：<a href=\"https://github.com/alibaba/arthas/issues/111\">查看</a></p>\n<p>文章拷贝来源：<a href=\"https://start.aliyun.com/course?spm=a2ck6.17690074.0.0.28bc2e7dHTphXs&amp;id=PaiFAkJM\">https://start.aliyun.com/course?spm=a2ck6.17690074.0.0.28bc2e7dHTphXs&amp;id=PaiFAkJM</a></p>\n","site":{"data":{}},"excerpt":"","more":"<!-- toc -->\n\n<ul>\n<li><a href=\"#%E5%90%AF%E5%8A%A8arthas-demo\">启动arthas demo</a></li>\n<li><a href=\"#%E5%90%AF%E5%8A%A8arthas-boot\">启动arthas-boot</a></li>\n<li><a href=\"#dump%E5%91%BD%E4%BB%A4\">dump命令</a><ul>\n<li><a href=\"#%E5%8F%82%E6%95%B0%E8%AF%B4%E6%98%8E\">参数说明</a></li>\n<li><a href=\"#%E4%BD%BF%E7%94%A8%E5%8F%82%E8%80%83\">使用参考</a></li>\n</ul>\n</li>\n<li><a href=\"#%E6%9B%B4%E5%A4%9A%E4%BF%A1%E6%81%AF\">更多信息</a></li>\n</ul>\n<!-- tocstop -->\n\n<p><img src=\"/jlynet.github.io/2021/08/07/Java%E8%AF%8A%E6%96%AD%E5%B7%A5%E5%85%B7Arthas%E9%AB%98%E7%BA%A7%E5%91%BD%E4%BB%A4%E6%95%99%E7%A8%8B/Arthasdump%E5%91%BD%E4%BB%A4/arthas.png\" alt=\"Arthas\"></p>\n<p><code>Arthas</code> 是Alibaba开源的Java诊断工具，深受开发者喜爱。在线排查问题，无需重启；动态跟踪Java代码；实时监控JVM状态。</p>\n<p><code>Arthas</code> 支持JDK 6+，支持Linux/Mac/Windows，采用命令行交互模式，同时提供丰富的 <code>Tab</code> 自动补全功能，进一步方便进行问题的定位和诊断。</p>\n<p>当你遇到以下类似问题而束手无策时，Arthas可以帮助你解决：</p>\n<ul>\n<li>这个类从哪个 jar 包加载的？为什么会报各种类相关的 Exception？</li>\n<li>我改的代码为什么没有执行到？难道是我没 commit？分支搞错了？</li>\n<li>遇到问题无法在线上 debug，难道只能通过加日志再重新发布吗？</li>\n<li>线上遇到某个用户的数据处理有问题，但线上同样无法 debug，线下无法重现！</li>\n<li>是否有一个全局视角来查看系统的运行状况？</li>\n<li>有什么办法可以监控到JVM的实时运行状态？</li>\n<li>怎么快速定位应用的热点，生成火焰图？</li>\n</ul>\n<p>本教程会以一个简单的应用为例，演示dump命令。</p>\n<ul>\n<li>Github: <a href=\"https://github.com/alibaba/arthas\">https://github.com/alibaba/arthas</a></li>\n<li>文档: <a href=\"https://arthas.aliyun.com/doc/\">https://arthas.aliyun.com/doc/</a></li>\n</ul>\n<h2 id=\"启动arthas-demo\"><a href=\"#启动arthas-demo\" class=\"headerlink\" title=\"启动arthas demo\"></a>启动arthas demo</h2><p>下载<code>arthas-demo.jar</code>，再用<code>java -jar</code>命令启动：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wget https://arthas.aliyun.com/arthas-demo.jar;java -jar arthas-demo.jar</span><br></pre></td></tr></table></figure>\n\n<p><code>arthas-demo</code>是一个很简单的程序，它随机生成整数，再执行因式分解，把结果打印出来。如果生成的随机数是负数，则会打印提示信息。</p>\n<h2 id=\"启动arthas-boot\"><a href=\"#启动arthas-boot\" class=\"headerlink\" title=\"启动arthas-boot\"></a>启动arthas-boot</h2><p>在新的<code>Terminal 2</code>里，下载<code>arthas-boot.jar</code>，再用<code>java -jar</code>命令启动：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wget https://arthas.aliyun.com/arthas-boot.jar;java -jar arthas-boot.jar</span><br></pre></td></tr></table></figure>\n\n<p><code>arthas-boot</code>是<code>Arthas</code>的启动程序，它启动后，会列出所有的Java进程，用户可以选择需要诊断的目标进程。</p>\n<p>选择第一个进程，输入 <code>1</code> ，再<code>Enter/回车</code>：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1</span><br></pre></td></tr></table></figure>\n\n<p>Attach成功之后，会打印Arthas LOGO。输入 <code>help</code> 可以获取到更多的帮助信息。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">help</span></span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/jlynet.github.io/2021/08/07/Java%E8%AF%8A%E6%96%AD%E5%B7%A5%E5%85%B7Arthas%E9%AB%98%E7%BA%A7%E5%91%BD%E4%BB%A4%E6%95%99%E7%A8%8B/Arthasdump%E5%91%BD%E4%BB%A4/O1CN01HzatXZ1RgccrlT90M_!!6000000002141-2-tps-529-244.png\" alt=\"Arthas Boot\"></p>\n<h2 id=\"dump命令\"><a href=\"#dump命令\" class=\"headerlink\" title=\"dump命令\"></a>dump命令</h2><blockquote>\n<p>dump 已加载类的 bytecode 到特定目录</p>\n</blockquote>\n<h4 id=\"参数说明\"><a href=\"#参数说明\" class=\"headerlink\" title=\"参数说明\"></a>参数说明</h4><table>\n<thead>\n<tr>\n<th>参数名称</th>\n<th>参数说明</th>\n</tr>\n</thead>\n<tbody><tr>\n<td><em>class-pattern</em></td>\n<td>类名表达式匹配</td>\n</tr>\n<tr>\n<td><code>[c:]</code></td>\n<td>类所属 ClassLoader 的 hashcode</td>\n</tr>\n<tr>\n<td><code>[d:]</code></td>\n<td>设置类文件的目标目录</td>\n</tr>\n<tr>\n<td><code>[classLoaderClass:]</code></td>\n<td>指定执行表达式的 ClassLoader 的 class name</td>\n</tr>\n<tr>\n<td>[E]</td>\n<td>开启正则表达式匹配，默认为通配符匹配</td>\n</tr>\n</tbody></table>\n<h4 id=\"使用参考\"><a href=\"#使用参考\" class=\"headerlink\" title=\"使用参考\"></a>使用参考</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">dump java.lang.String</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight console\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> dump java.lang.String</span></span><br><span class=\"line\"> HASHCODE  CLASSLOADER  LOCATION</span><br><span class=\"line\"> null                   /Users/admin/logs/arthas/classdump/java/lang/String.class</span><br><span class=\"line\">Affect(row-cnt:1) cost in 119 ms.</span><br><span class=\"line\">dump demo.*</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight console\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> dump demo.*</span></span><br><span class=\"line\"> HASHCODE  CLASSLOADER                                    LOCATION</span><br><span class=\"line\"> 3d4eac69  +-sun.misc.Launcher$AppClassLoader@3d4eac69    /Users/admin/logs/arthas/classdump/sun.misc.Launcher$AppClassLoader-3d4eac69/demo/MathGame.class</span><br><span class=\"line\">             +-sun.misc.Launcher$ExtClassLoader@66350f69</span><br><span class=\"line\">Affect(row-cnt:1) cost in 39 ms.</span><br><span class=\"line\">dump -d /tmp/output java.lang.String</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight console\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> dump -d /tmp/output java.lang.String</span></span><br><span class=\"line\"> HASHCODE  CLASSLOADER  LOCATION</span><br><span class=\"line\"> null                   /tmp/output/java/lang/String.class</span><br><span class=\"line\">Affect(row-cnt:1) cost in 138 ms.</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>指定classLoader</li>\n</ul>\n<p>注意hashcode是变化的，需要先查看当前的ClassLoader信息，提取对应ClassLoader的hashcode。</p>\n<p>如果你使用<code>-c</code>，你需要手动输入hashcode：<code>-c &lt;hashcode&gt;</code></p>\n<figure class=\"highlight console\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> dump -c 3d4eac69 demo.*</span></span><br></pre></td></tr></table></figure>\n\n<p>对于只有唯一实例的ClassLoader可以通过<code>--classLoaderClass</code>指定class name，使用起来更加方便：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">dump --classLoaderClass sun.misc.Launcher<span class=\"variable\">$AppClassLoader</span> demo.*</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight console\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> dump --classLoaderClass sun.misc.Launcher<span class=\"variable\">$AppClassLoader</span> demo.*</span></span><br><span class=\"line\"> HASHCODE  CLASSLOADER                                    LOCATION</span><br><span class=\"line\"> 3d4eac69  +-sun.misc.Launcher$AppClassLoader@3d4eac69    /Users/admin/logs/arthas/classdump/sun.misc.Launcher$AppClassLoader-3d4eac69/demo/MathGame.class</span><br><span class=\"line\">             +-sun.misc.Launcher$ExtClassLoader@66350f69</span><br><span class=\"line\">Affect(row-cnt:1) cost in 39 ms.</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>注: 这里classLoaderClass 在 java 8 是 sun.misc.Launcher$AppClassLoader，而java 11的classloader是jdk.internal.loader.ClassLoaders$AppClassLoader，katacoda目前环境是java8。</li>\n</ul>\n<p><code>--classLoaderClass</code> 的值是ClassLoader的类名，只有匹配到唯一的ClassLoader实例时才能工作，目的是方便输入通用命令，而<code>-c &lt;hashcode&gt;</code>是动态变化的。</p>\n<h2 id=\"更多信息\"><a href=\"#更多信息\" class=\"headerlink\" title=\"更多信息\"></a>更多信息</h2><p>在“dump”中，我们演示了了Arthas的dump命令。如果有更多的技巧或者使用疑问，欢迎在Issue里提出。</p>\n<ul>\n<li>Issues: <a href=\"https://github.com/alibaba/arthas/issues\">https://github.com/alibaba/arthas/issues</a></li>\n<li>文档： <a href=\"https://arthas.aliyun.com/doc\">https://arthas.aliyun.com/doc</a></li>\n</ul>\n<p>如果您在使用Arthas，请让我们知道。您的使用对我们非常重要：<a href=\"https://github.com/alibaba/arthas/issues/111\">查看</a></p>\n<p>文章拷贝来源：<a href=\"https://start.aliyun.com/course?spm=a2ck6.17690074.0.0.28bc2e7dHTphXs&amp;id=PaiFAkJM\">https://start.aliyun.com/course?spm=a2ck6.17690074.0.0.28bc2e7dHTphXs&amp;id=PaiFAkJM</a></p>\n"},{"title":"Arthas getstatic命令","date":"2021-08-07T01:51:35.000Z","_content":"\n<!-- toc -->\n\n![Arthas](arthas.png)\n\n`Arthas` 是Alibaba开源的Java诊断工具，深受开发者喜爱。在线排查问题，无需重启；动态跟踪Java代码；实时监控JVM状态。\n\n`Arthas` 支持JDK 6+，支持Linux/Mac/Windows，采用命令行交互模式，同时提供丰富的 `Tab` 自动补全功能，进一步方便进行问题的定位和诊断。\n\n当你遇到以下类似问题而束手无策时，Arthas可以帮助你解决：\n\n- 这个类从哪个 jar 包加载的？为什么会报各种类相关的 Exception？\n- 我改的代码为什么没有执行到？难道是我没 commit？分支搞错了？\n- 遇到问题无法在线上 debug，难道只能通过加日志再重新发布吗？\n- 线上遇到某个用户的数据处理有问题，但线上同样无法 debug，线下无法重现！\n- 是否有一个全局视角来查看系统的运行状况？\n- 有什么办法可以监控到JVM的实时运行状态？\n- 怎么快速定位应用的热点，生成火焰图？\n\n本教程会以一个简单的应用为例，演示getstatic命令。\n\n- Github: https://github.com/alibaba/arthas\n- 文档: https://arthas.aliyun.com/doc/\n\n## 启动arthas demo\n\n下载`arthas-demo.jar`，再用`java -jar`命令启动：\n\n```bash\nwget https://arthas.aliyun.com/arthas-demo.jar;java -jar arthas-demo.jar\n```\n\n`arthas-demo`是一个很简单的程序，它随机生成整数，再执行因式分解，把结果打印出来。如果生成的随机数是负数，则会打印提示信息。\n\n## 启动arthas-boot\n\n在新的`Terminal 2`里，下载`arthas-boot.jar`，再用`java -jar`命令启动：\n\n```bash\nwget https://arthas.aliyun.com/arthas-boot.jar;java -jar arthas-boot.jar\n```\n\n`arthas-boot`是`Arthas`的启动程序，它启动后，会列出所有的Java进程，用户可以选择需要诊断的目标进程。\n\n选择第一个进程，输入 `1` ，再`Enter/回车`：\n\n```bash\n1\n```\n\nAttach成功之后，会打印Arthas LOGO。输入 `help` 可以获取到更多的帮助信息。\n\n```bash\nhelp\n```\n\n![Arthas Boot](O1CN01HzatXZ1RgccrlT90M_!!6000000002141-2-tps-529-244.png)\n\n## getstatic命令\n\n- 推荐直接使用[ognl](https://arthas.aliyun.com/doc/arthas-tutorials.html?language=cn&id=command-ognl)命令，更加灵活。\n\n通过getstatic命令可以方便的查看类的静态属性。使用方法为`getstatic class_name field_name`\n\n```bash\ngetstatic demo.MathGame random\n```\n\n```console\n$ getstatic demo.MathGame random\nfield: random\n@Random[\n    serialVersionUID=@Long[3905348978240129619],\n    seed=@AtomicLong[120955813885284],\n    multiplier=@Long[25214903917],\n    addend=@Long[11],\n    mask=@Long[281474976710655],\n    DOUBLE_UNIT=@Double[1.1102230246251565E-16],\n    BadBound=@String[bound must be positive],\n    BadRange=@String[bound must be greater than origin],\n    BadSize=@String[size must be non-negative],\n    seedUniquifier=@AtomicLong[-3282039941672302964],\n    nextNextGaussian=@Double[0.0],\n    haveNextNextGaussian=@Boolean[false],\n    serialPersistentFields=@ObjectStreamField[][isEmpty=false;size=3],\n    unsafe=@Unsafe[sun.misc.Unsafe@2eaa1027],\n    seedOffset=@Long[24],\n]\n```\n\n- 指定classLoader\n\n注意hashcode是变化的，需要先查看当前的ClassLoader信息，使用`sc -d <ClassName>`提取对应ClassLoader的hashcode。\n\n如果你使用`-c`，你需要手动输入hashcode：`-c <hashcode>`\n\n```console\n$ getstatic -c 3d4eac69 demo.MathGame random\n```\n\n对于只有唯一实例的ClassLoader可以通过`--classLoaderClass`指定class name，使用起来更加方便：\n\n```bash\ngetstatic --classLoaderClass sun.misc.Launcher$AppClassLoader demo.MathGame random\n```\n\n- 注: 这里classLoaderClass 在 java 8 是 sun.misc.Launcher$AppClassLoader，而java 11的classloader是jdk.internal.loader.ClassLoaders$AppClassLoader，katacoda目前环境是java8。\n\n`--classLoaderClass` 的值是ClassLoader的类名，只有匹配到唯一的ClassLoader实例时才能工作，目的是方便输入通用命令，而`-c <hashcode>`是动态变化的。\n\n如果该静态属性是一个复杂对象，还可以支持在该属性上通过ognl表示进行遍历，过滤，访问对象的内部属性等操作。\n\n- OGNL特殊用法请参考：https://github.com/alibaba/arthas/issues/71\n- OGNL表达式官方指南：https://commons.apache.org/proper/commons-ognl/language-guide.html\n\n## 更多信息\n\n在“getstatic”中，我们演示了了Arthas的getstatic命令。如果有更多的技巧或者使用疑问，欢迎在Issue里提出。\n\n- Issues: https://github.com/alibaba/arthas/issues\n- 文档： https://arthas.aliyun.com/doc\n\n如果您在使用Arthas，请让我们知道。您的使用对我们非常重要：[查看](https://github.com/alibaba/arthas/issues/111)\n\n文章拷贝来源：https://start.aliyun.com/course?spm=a2ck6.17690074.0.0.28bc2e7dHTphXs&id=PaiFAkJM","source":"_posts/Java诊断工具Arthas高级命令教程/Arthasgetstatic命令.md","raw":"---\ntitle: Arthas getstatic命令\ndate: 2021-08-07 09:51:35\ntags: ['Java 诊断工具 Arthas 高级命令教程']\n---\n\n<!-- toc -->\n\n![Arthas](arthas.png)\n\n`Arthas` 是Alibaba开源的Java诊断工具，深受开发者喜爱。在线排查问题，无需重启；动态跟踪Java代码；实时监控JVM状态。\n\n`Arthas` 支持JDK 6+，支持Linux/Mac/Windows，采用命令行交互模式，同时提供丰富的 `Tab` 自动补全功能，进一步方便进行问题的定位和诊断。\n\n当你遇到以下类似问题而束手无策时，Arthas可以帮助你解决：\n\n- 这个类从哪个 jar 包加载的？为什么会报各种类相关的 Exception？\n- 我改的代码为什么没有执行到？难道是我没 commit？分支搞错了？\n- 遇到问题无法在线上 debug，难道只能通过加日志再重新发布吗？\n- 线上遇到某个用户的数据处理有问题，但线上同样无法 debug，线下无法重现！\n- 是否有一个全局视角来查看系统的运行状况？\n- 有什么办法可以监控到JVM的实时运行状态？\n- 怎么快速定位应用的热点，生成火焰图？\n\n本教程会以一个简单的应用为例，演示getstatic命令。\n\n- Github: https://github.com/alibaba/arthas\n- 文档: https://arthas.aliyun.com/doc/\n\n## 启动arthas demo\n\n下载`arthas-demo.jar`，再用`java -jar`命令启动：\n\n```bash\nwget https://arthas.aliyun.com/arthas-demo.jar;java -jar arthas-demo.jar\n```\n\n`arthas-demo`是一个很简单的程序，它随机生成整数，再执行因式分解，把结果打印出来。如果生成的随机数是负数，则会打印提示信息。\n\n## 启动arthas-boot\n\n在新的`Terminal 2`里，下载`arthas-boot.jar`，再用`java -jar`命令启动：\n\n```bash\nwget https://arthas.aliyun.com/arthas-boot.jar;java -jar arthas-boot.jar\n```\n\n`arthas-boot`是`Arthas`的启动程序，它启动后，会列出所有的Java进程，用户可以选择需要诊断的目标进程。\n\n选择第一个进程，输入 `1` ，再`Enter/回车`：\n\n```bash\n1\n```\n\nAttach成功之后，会打印Arthas LOGO。输入 `help` 可以获取到更多的帮助信息。\n\n```bash\nhelp\n```\n\n![Arthas Boot](O1CN01HzatXZ1RgccrlT90M_!!6000000002141-2-tps-529-244.png)\n\n## getstatic命令\n\n- 推荐直接使用[ognl](https://arthas.aliyun.com/doc/arthas-tutorials.html?language=cn&id=command-ognl)命令，更加灵活。\n\n通过getstatic命令可以方便的查看类的静态属性。使用方法为`getstatic class_name field_name`\n\n```bash\ngetstatic demo.MathGame random\n```\n\n```console\n$ getstatic demo.MathGame random\nfield: random\n@Random[\n    serialVersionUID=@Long[3905348978240129619],\n    seed=@AtomicLong[120955813885284],\n    multiplier=@Long[25214903917],\n    addend=@Long[11],\n    mask=@Long[281474976710655],\n    DOUBLE_UNIT=@Double[1.1102230246251565E-16],\n    BadBound=@String[bound must be positive],\n    BadRange=@String[bound must be greater than origin],\n    BadSize=@String[size must be non-negative],\n    seedUniquifier=@AtomicLong[-3282039941672302964],\n    nextNextGaussian=@Double[0.0],\n    haveNextNextGaussian=@Boolean[false],\n    serialPersistentFields=@ObjectStreamField[][isEmpty=false;size=3],\n    unsafe=@Unsafe[sun.misc.Unsafe@2eaa1027],\n    seedOffset=@Long[24],\n]\n```\n\n- 指定classLoader\n\n注意hashcode是变化的，需要先查看当前的ClassLoader信息，使用`sc -d <ClassName>`提取对应ClassLoader的hashcode。\n\n如果你使用`-c`，你需要手动输入hashcode：`-c <hashcode>`\n\n```console\n$ getstatic -c 3d4eac69 demo.MathGame random\n```\n\n对于只有唯一实例的ClassLoader可以通过`--classLoaderClass`指定class name，使用起来更加方便：\n\n```bash\ngetstatic --classLoaderClass sun.misc.Launcher$AppClassLoader demo.MathGame random\n```\n\n- 注: 这里classLoaderClass 在 java 8 是 sun.misc.Launcher$AppClassLoader，而java 11的classloader是jdk.internal.loader.ClassLoaders$AppClassLoader，katacoda目前环境是java8。\n\n`--classLoaderClass` 的值是ClassLoader的类名，只有匹配到唯一的ClassLoader实例时才能工作，目的是方便输入通用命令，而`-c <hashcode>`是动态变化的。\n\n如果该静态属性是一个复杂对象，还可以支持在该属性上通过ognl表示进行遍历，过滤，访问对象的内部属性等操作。\n\n- OGNL特殊用法请参考：https://github.com/alibaba/arthas/issues/71\n- OGNL表达式官方指南：https://commons.apache.org/proper/commons-ognl/language-guide.html\n\n## 更多信息\n\n在“getstatic”中，我们演示了了Arthas的getstatic命令。如果有更多的技巧或者使用疑问，欢迎在Issue里提出。\n\n- Issues: https://github.com/alibaba/arthas/issues\n- 文档： https://arthas.aliyun.com/doc\n\n如果您在使用Arthas，请让我们知道。您的使用对我们非常重要：[查看](https://github.com/alibaba/arthas/issues/111)\n\n文章拷贝来源：https://start.aliyun.com/course?spm=a2ck6.17690074.0.0.28bc2e7dHTphXs&id=PaiFAkJM","slug":"Java诊断工具Arthas高级命令教程/Arthasgetstatic命令","published":1,"updated":"2021-08-07T05:34:22.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cks1cgr6d001rfw5i0cszdhna","content":"<!-- toc -->\n\n<ul>\n<li><a href=\"#%E5%90%AF%E5%8A%A8arthas-demo\">启动arthas demo</a></li>\n<li><a href=\"#%E5%90%AF%E5%8A%A8arthas-boot\">启动arthas-boot</a></li>\n<li><a href=\"#getstatic%E5%91%BD%E4%BB%A4\">getstatic命令</a></li>\n<li><a href=\"#%E6%9B%B4%E5%A4%9A%E4%BF%A1%E6%81%AF\">更多信息</a></li>\n</ul>\n<!-- tocstop -->\n\n<p><img src=\"/jlynet.github.io/2021/08/07/Java%E8%AF%8A%E6%96%AD%E5%B7%A5%E5%85%B7Arthas%E9%AB%98%E7%BA%A7%E5%91%BD%E4%BB%A4%E6%95%99%E7%A8%8B/Arthasgetstatic%E5%91%BD%E4%BB%A4/arthas.png\" alt=\"Arthas\"></p>\n<p><code>Arthas</code> 是Alibaba开源的Java诊断工具，深受开发者喜爱。在线排查问题，无需重启；动态跟踪Java代码；实时监控JVM状态。</p>\n<p><code>Arthas</code> 支持JDK 6+，支持Linux/Mac/Windows，采用命令行交互模式，同时提供丰富的 <code>Tab</code> 自动补全功能，进一步方便进行问题的定位和诊断。</p>\n<p>当你遇到以下类似问题而束手无策时，Arthas可以帮助你解决：</p>\n<ul>\n<li>这个类从哪个 jar 包加载的？为什么会报各种类相关的 Exception？</li>\n<li>我改的代码为什么没有执行到？难道是我没 commit？分支搞错了？</li>\n<li>遇到问题无法在线上 debug，难道只能通过加日志再重新发布吗？</li>\n<li>线上遇到某个用户的数据处理有问题，但线上同样无法 debug，线下无法重现！</li>\n<li>是否有一个全局视角来查看系统的运行状况？</li>\n<li>有什么办法可以监控到JVM的实时运行状态？</li>\n<li>怎么快速定位应用的热点，生成火焰图？</li>\n</ul>\n<p>本教程会以一个简单的应用为例，演示getstatic命令。</p>\n<ul>\n<li>Github: <a href=\"https://github.com/alibaba/arthas\">https://github.com/alibaba/arthas</a></li>\n<li>文档: <a href=\"https://arthas.aliyun.com/doc/\">https://arthas.aliyun.com/doc/</a></li>\n</ul>\n<h2><span id=\"启动arthas-demo\">启动arthas demo</span></h2><p>下载<code>arthas-demo.jar</code>，再用<code>java -jar</code>命令启动：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wget https://arthas.aliyun.com/arthas-demo.jar;java -jar arthas-demo.jar</span><br></pre></td></tr></table></figure>\n\n<p><code>arthas-demo</code>是一个很简单的程序，它随机生成整数，再执行因式分解，把结果打印出来。如果生成的随机数是负数，则会打印提示信息。</p>\n<h2><span id=\"启动arthas-boot\">启动arthas-boot</span></h2><p>在新的<code>Terminal 2</code>里，下载<code>arthas-boot.jar</code>，再用<code>java -jar</code>命令启动：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wget https://arthas.aliyun.com/arthas-boot.jar;java -jar arthas-boot.jar</span><br></pre></td></tr></table></figure>\n\n<p><code>arthas-boot</code>是<code>Arthas</code>的启动程序，它启动后，会列出所有的Java进程，用户可以选择需要诊断的目标进程。</p>\n<p>选择第一个进程，输入 <code>1</code> ，再<code>Enter/回车</code>：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1</span><br></pre></td></tr></table></figure>\n\n<p>Attach成功之后，会打印Arthas LOGO。输入 <code>help</code> 可以获取到更多的帮助信息。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">help</span></span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/jlynet.github.io/2021/08/07/Java%E8%AF%8A%E6%96%AD%E5%B7%A5%E5%85%B7Arthas%E9%AB%98%E7%BA%A7%E5%91%BD%E4%BB%A4%E6%95%99%E7%A8%8B/Arthasgetstatic%E5%91%BD%E4%BB%A4/O1CN01HzatXZ1RgccrlT90M_!!6000000002141-2-tps-529-244.png\" alt=\"Arthas Boot\"></p>\n<h2><span id=\"getstatic命令\">getstatic命令</span></h2><ul>\n<li>推荐直接使用<a href=\"https://arthas.aliyun.com/doc/arthas-tutorials.html?language=cn&id=command-ognl\">ognl</a>命令，更加灵活。</li>\n</ul>\n<p>通过getstatic命令可以方便的查看类的静态属性。使用方法为<code>getstatic class_name field_name</code></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">getstatic demo.MathGame random</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight console\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> getstatic demo.MathGame random</span></span><br><span class=\"line\">field: random</span><br><span class=\"line\">@Random[</span><br><span class=\"line\">    serialVersionUID=@Long[3905348978240129619],</span><br><span class=\"line\">    seed=@AtomicLong[120955813885284],</span><br><span class=\"line\">    multiplier=@Long[25214903917],</span><br><span class=\"line\">    addend=@Long[11],</span><br><span class=\"line\">    mask=@Long[281474976710655],</span><br><span class=\"line\">    DOUBLE_UNIT=@Double[1.1102230246251565E-16],</span><br><span class=\"line\">    BadBound=@String[bound must be positive],</span><br><span class=\"line\">    BadRange=@String[bound must be greater than origin],</span><br><span class=\"line\">    BadSize=@String[size must be non-negative],</span><br><span class=\"line\">    seedUniquifier=@AtomicLong[-3282039941672302964],</span><br><span class=\"line\">    nextNextGaussian=@Double[0.0],</span><br><span class=\"line\">    haveNextNextGaussian=@Boolean[false],</span><br><span class=\"line\">    serialPersistentFields=@ObjectStreamField[][isEmpty=false;size=3],</span><br><span class=\"line\">    unsafe=@Unsafe[sun.misc.Unsafe@2eaa1027],</span><br><span class=\"line\">    seedOffset=@Long[24],</span><br><span class=\"line\">]</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>指定classLoader</li>\n</ul>\n<p>注意hashcode是变化的，需要先查看当前的ClassLoader信息，使用<code>sc -d &lt;ClassName&gt;</code>提取对应ClassLoader的hashcode。</p>\n<p>如果你使用<code>-c</code>，你需要手动输入hashcode：<code>-c &lt;hashcode&gt;</code></p>\n<figure class=\"highlight console\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> getstatic -c 3d4eac69 demo.MathGame random</span></span><br></pre></td></tr></table></figure>\n\n<p>对于只有唯一实例的ClassLoader可以通过<code>--classLoaderClass</code>指定class name，使用起来更加方便：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">getstatic --classLoaderClass sun.misc.Launcher<span class=\"variable\">$AppClassLoader</span> demo.MathGame random</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>注: 这里classLoaderClass 在 java 8 是 sun.misc.Launcher$AppClassLoader，而java 11的classloader是jdk.internal.loader.ClassLoaders$AppClassLoader，katacoda目前环境是java8。</li>\n</ul>\n<p><code>--classLoaderClass</code> 的值是ClassLoader的类名，只有匹配到唯一的ClassLoader实例时才能工作，目的是方便输入通用命令，而<code>-c &lt;hashcode&gt;</code>是动态变化的。</p>\n<p>如果该静态属性是一个复杂对象，还可以支持在该属性上通过ognl表示进行遍历，过滤，访问对象的内部属性等操作。</p>\n<ul>\n<li>OGNL特殊用法请参考：<a href=\"https://github.com/alibaba/arthas/issues/71\">https://github.com/alibaba/arthas/issues/71</a></li>\n<li>OGNL表达式官方指南：<a href=\"https://commons.apache.org/proper/commons-ognl/language-guide.html\">https://commons.apache.org/proper/commons-ognl/language-guide.html</a></li>\n</ul>\n<h2><span id=\"更多信息\">更多信息</span></h2><p>在“getstatic”中，我们演示了了Arthas的getstatic命令。如果有更多的技巧或者使用疑问，欢迎在Issue里提出。</p>\n<ul>\n<li>Issues: <a href=\"https://github.com/alibaba/arthas/issues\">https://github.com/alibaba/arthas/issues</a></li>\n<li>文档： <a href=\"https://arthas.aliyun.com/doc\">https://arthas.aliyun.com/doc</a></li>\n</ul>\n<p>如果您在使用Arthas，请让我们知道。您的使用对我们非常重要：<a href=\"https://github.com/alibaba/arthas/issues/111\">查看</a></p>\n<p>文章拷贝来源：<a href=\"https://start.aliyun.com/course?spm=a2ck6.17690074.0.0.28bc2e7dHTphXs&amp;id=PaiFAkJM\">https://start.aliyun.com/course?spm=a2ck6.17690074.0.0.28bc2e7dHTphXs&amp;id=PaiFAkJM</a></p>\n","site":{"data":{}},"excerpt":"","more":"<!-- toc -->\n\n<ul>\n<li><a href=\"#%E5%90%AF%E5%8A%A8arthas-demo\">启动arthas demo</a></li>\n<li><a href=\"#%E5%90%AF%E5%8A%A8arthas-boot\">启动arthas-boot</a></li>\n<li><a href=\"#getstatic%E5%91%BD%E4%BB%A4\">getstatic命令</a></li>\n<li><a href=\"#%E6%9B%B4%E5%A4%9A%E4%BF%A1%E6%81%AF\">更多信息</a></li>\n</ul>\n<!-- tocstop -->\n\n<p><img src=\"/jlynet.github.io/2021/08/07/Java%E8%AF%8A%E6%96%AD%E5%B7%A5%E5%85%B7Arthas%E9%AB%98%E7%BA%A7%E5%91%BD%E4%BB%A4%E6%95%99%E7%A8%8B/Arthasgetstatic%E5%91%BD%E4%BB%A4/arthas.png\" alt=\"Arthas\"></p>\n<p><code>Arthas</code> 是Alibaba开源的Java诊断工具，深受开发者喜爱。在线排查问题，无需重启；动态跟踪Java代码；实时监控JVM状态。</p>\n<p><code>Arthas</code> 支持JDK 6+，支持Linux/Mac/Windows，采用命令行交互模式，同时提供丰富的 <code>Tab</code> 自动补全功能，进一步方便进行问题的定位和诊断。</p>\n<p>当你遇到以下类似问题而束手无策时，Arthas可以帮助你解决：</p>\n<ul>\n<li>这个类从哪个 jar 包加载的？为什么会报各种类相关的 Exception？</li>\n<li>我改的代码为什么没有执行到？难道是我没 commit？分支搞错了？</li>\n<li>遇到问题无法在线上 debug，难道只能通过加日志再重新发布吗？</li>\n<li>线上遇到某个用户的数据处理有问题，但线上同样无法 debug，线下无法重现！</li>\n<li>是否有一个全局视角来查看系统的运行状况？</li>\n<li>有什么办法可以监控到JVM的实时运行状态？</li>\n<li>怎么快速定位应用的热点，生成火焰图？</li>\n</ul>\n<p>本教程会以一个简单的应用为例，演示getstatic命令。</p>\n<ul>\n<li>Github: <a href=\"https://github.com/alibaba/arthas\">https://github.com/alibaba/arthas</a></li>\n<li>文档: <a href=\"https://arthas.aliyun.com/doc/\">https://arthas.aliyun.com/doc/</a></li>\n</ul>\n<h2 id=\"启动arthas-demo\"><a href=\"#启动arthas-demo\" class=\"headerlink\" title=\"启动arthas demo\"></a>启动arthas demo</h2><p>下载<code>arthas-demo.jar</code>，再用<code>java -jar</code>命令启动：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wget https://arthas.aliyun.com/arthas-demo.jar;java -jar arthas-demo.jar</span><br></pre></td></tr></table></figure>\n\n<p><code>arthas-demo</code>是一个很简单的程序，它随机生成整数，再执行因式分解，把结果打印出来。如果生成的随机数是负数，则会打印提示信息。</p>\n<h2 id=\"启动arthas-boot\"><a href=\"#启动arthas-boot\" class=\"headerlink\" title=\"启动arthas-boot\"></a>启动arthas-boot</h2><p>在新的<code>Terminal 2</code>里，下载<code>arthas-boot.jar</code>，再用<code>java -jar</code>命令启动：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wget https://arthas.aliyun.com/arthas-boot.jar;java -jar arthas-boot.jar</span><br></pre></td></tr></table></figure>\n\n<p><code>arthas-boot</code>是<code>Arthas</code>的启动程序，它启动后，会列出所有的Java进程，用户可以选择需要诊断的目标进程。</p>\n<p>选择第一个进程，输入 <code>1</code> ，再<code>Enter/回车</code>：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1</span><br></pre></td></tr></table></figure>\n\n<p>Attach成功之后，会打印Arthas LOGO。输入 <code>help</code> 可以获取到更多的帮助信息。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">help</span></span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/jlynet.github.io/2021/08/07/Java%E8%AF%8A%E6%96%AD%E5%B7%A5%E5%85%B7Arthas%E9%AB%98%E7%BA%A7%E5%91%BD%E4%BB%A4%E6%95%99%E7%A8%8B/Arthasgetstatic%E5%91%BD%E4%BB%A4/O1CN01HzatXZ1RgccrlT90M_!!6000000002141-2-tps-529-244.png\" alt=\"Arthas Boot\"></p>\n<h2 id=\"getstatic命令\"><a href=\"#getstatic命令\" class=\"headerlink\" title=\"getstatic命令\"></a>getstatic命令</h2><ul>\n<li>推荐直接使用<a href=\"https://arthas.aliyun.com/doc/arthas-tutorials.html?language=cn&id=command-ognl\">ognl</a>命令，更加灵活。</li>\n</ul>\n<p>通过getstatic命令可以方便的查看类的静态属性。使用方法为<code>getstatic class_name field_name</code></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">getstatic demo.MathGame random</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight console\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> getstatic demo.MathGame random</span></span><br><span class=\"line\">field: random</span><br><span class=\"line\">@Random[</span><br><span class=\"line\">    serialVersionUID=@Long[3905348978240129619],</span><br><span class=\"line\">    seed=@AtomicLong[120955813885284],</span><br><span class=\"line\">    multiplier=@Long[25214903917],</span><br><span class=\"line\">    addend=@Long[11],</span><br><span class=\"line\">    mask=@Long[281474976710655],</span><br><span class=\"line\">    DOUBLE_UNIT=@Double[1.1102230246251565E-16],</span><br><span class=\"line\">    BadBound=@String[bound must be positive],</span><br><span class=\"line\">    BadRange=@String[bound must be greater than origin],</span><br><span class=\"line\">    BadSize=@String[size must be non-negative],</span><br><span class=\"line\">    seedUniquifier=@AtomicLong[-3282039941672302964],</span><br><span class=\"line\">    nextNextGaussian=@Double[0.0],</span><br><span class=\"line\">    haveNextNextGaussian=@Boolean[false],</span><br><span class=\"line\">    serialPersistentFields=@ObjectStreamField[][isEmpty=false;size=3],</span><br><span class=\"line\">    unsafe=@Unsafe[sun.misc.Unsafe@2eaa1027],</span><br><span class=\"line\">    seedOffset=@Long[24],</span><br><span class=\"line\">]</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>指定classLoader</li>\n</ul>\n<p>注意hashcode是变化的，需要先查看当前的ClassLoader信息，使用<code>sc -d &lt;ClassName&gt;</code>提取对应ClassLoader的hashcode。</p>\n<p>如果你使用<code>-c</code>，你需要手动输入hashcode：<code>-c &lt;hashcode&gt;</code></p>\n<figure class=\"highlight console\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> getstatic -c 3d4eac69 demo.MathGame random</span></span><br></pre></td></tr></table></figure>\n\n<p>对于只有唯一实例的ClassLoader可以通过<code>--classLoaderClass</code>指定class name，使用起来更加方便：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">getstatic --classLoaderClass sun.misc.Launcher<span class=\"variable\">$AppClassLoader</span> demo.MathGame random</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>注: 这里classLoaderClass 在 java 8 是 sun.misc.Launcher$AppClassLoader，而java 11的classloader是jdk.internal.loader.ClassLoaders$AppClassLoader，katacoda目前环境是java8。</li>\n</ul>\n<p><code>--classLoaderClass</code> 的值是ClassLoader的类名，只有匹配到唯一的ClassLoader实例时才能工作，目的是方便输入通用命令，而<code>-c &lt;hashcode&gt;</code>是动态变化的。</p>\n<p>如果该静态属性是一个复杂对象，还可以支持在该属性上通过ognl表示进行遍历，过滤，访问对象的内部属性等操作。</p>\n<ul>\n<li>OGNL特殊用法请参考：<a href=\"https://github.com/alibaba/arthas/issues/71\">https://github.com/alibaba/arthas/issues/71</a></li>\n<li>OGNL表达式官方指南：<a href=\"https://commons.apache.org/proper/commons-ognl/language-guide.html\">https://commons.apache.org/proper/commons-ognl/language-guide.html</a></li>\n</ul>\n<h2 id=\"更多信息\"><a href=\"#更多信息\" class=\"headerlink\" title=\"更多信息\"></a>更多信息</h2><p>在“getstatic”中，我们演示了了Arthas的getstatic命令。如果有更多的技巧或者使用疑问，欢迎在Issue里提出。</p>\n<ul>\n<li>Issues: <a href=\"https://github.com/alibaba/arthas/issues\">https://github.com/alibaba/arthas/issues</a></li>\n<li>文档： <a href=\"https://arthas.aliyun.com/doc\">https://arthas.aliyun.com/doc</a></li>\n</ul>\n<p>如果您在使用Arthas，请让我们知道。您的使用对我们非常重要：<a href=\"https://github.com/alibaba/arthas/issues/111\">查看</a></p>\n<p>文章拷贝来源：<a href=\"https://start.aliyun.com/course?spm=a2ck6.17690074.0.0.28bc2e7dHTphXs&amp;id=PaiFAkJM\">https://start.aliyun.com/course?spm=a2ck6.17690074.0.0.28bc2e7dHTphXs&amp;id=PaiFAkJM</a></p>\n"},{"title":"Arthas heapdump命令","date":"2021-08-07T01:51:33.000Z","_content":"\n<!-- toc -->\n\n![Arthas](arthas.png)\n\n`Arthas` 是Alibaba开源的Java诊断工具，深受开发者喜爱。在线排查问题，无需重启；动态跟踪Java代码；实时监控JVM状态。\n\n`Arthas` 支持JDK 6+，支持Linux/Mac/Windows，采用命令行交互模式，同时提供丰富的 `Tab` 自动补全功能，进一步方便进行问题的定位和诊断。\n\n当你遇到以下类似问题而束手无策时，Arthas可以帮助你解决：\n\n- 这个类从哪个 jar 包加载的？为什么会报各种类相关的 Exception？\n- 我改的代码为什么没有执行到？难道是我没 commit？分支搞错了？\n- 遇到问题无法在线上 debug，难道只能通过加日志再重新发布吗？\n- 线上遇到某个用户的数据处理有问题，但线上同样无法 debug，线下无法重现！\n- 是否有一个全局视角来查看系统的运行状况？\n- 有什么办法可以监控到JVM的实时运行状态？\n- 怎么快速定位应用的热点，生成火焰图？\n\n本教程会以一个简单的应用为例，演示heapdump命令。\n\n- Github: https://github.com/alibaba/arthas\n- 文档: https://arthas.aliyun.com/doc/\n\n## 启动arthas demo\n\n下载`arthas-demo.jar`，再用`java -jar`命令启动：\n\n```bash\nwget https://arthas.aliyun.com/arthas-demo.jar;java -jar arthas-demo.jar\n```\n\n`arthas-demo`是一个很简单的程序，它随机生成整数，再执行因式分解，把结果打印出来。如果生成的随机数是负数，则会打印提示信息。\n\n## 启动arthas-boot\n\n在新的`Terminal 2`里，下载`arthas-boot.jar`，再用`java -jar`命令启动：\n\n```bash\nwget https://arthas.aliyun.com/arthas-boot.jar;java -jar arthas-boot.jar\n```\n\n`arthas-boot`是`Arthas`的启动程序，它启动后，会列出所有的Java进程，用户可以选择需要诊断的目标进程。\n\n选择第一个进程，输入 `1` ，再`Enter/回车`：\n\n```bash\n1\n```\n\nAttach成功之后，会打印Arthas LOGO。输入 `help` 可以获取到更多的帮助信息。\n\n```bash\nhelp\n```\n\n![Arthas Boot](O1CN01HzatXZ1RgccrlT90M_!!6000000002141-2-tps-529-244.png)\n\n## heapdump命令\n\n> dump java heap, 类似jmap命令的heap dump功能。\n>\n> #### 使用参考\n\n##### dump到指定文件\n\n```bash\nheapdump /tmp/dump.hprof\n```\n\n```console\n[arthas@58205]$ heapdump /tmp/dump.hprof\nDumping heap to /tmp/dump.hprof...\nHeap dump file created\n```\n\n##### 只dump live对象\n\n```bash\nheapdump --live /tmp/dump.hprof\n```\n\n```console\n[arthas@58205]$ heapdump --live /tmp/dump.hprof\nDumping heap to /tmp/dump.hprof...\nHeap dump file created\n```\n\n#### dump到临时文件\n\n```bash\nheapdump\n```\n\n```console\n[arthas@58205]$ heapdump\nDumping heap to /var/folders/my/wy7c9w9j5732xbkcyt1mb4g40000gp/T/heapdump2019-09-03-16-385121018449645518991.hprof...\nHeap dump file created\n```\n\n## 更多信息\n\n在“heapdump”中，我们演示了了Arthas的heapdump命令。如果有更多的技巧或者使用疑问，欢迎在Issue里提出。\n\n- Issues: https://github.com/alibaba/arthas/issues\n- 文档： https://arthas.aliyun.com/doc\n\n如果您在使用Arthas，请让我们知道。您的使用对我们非常重要：[查看](https://github.com/alibaba/arthas/issues/111)\n\n文章拷贝来源：https://start.aliyun.com/course?spm=a2ck6.17690074.0.0.28bc2e7dHTphXs&id=PaiFAkJM","source":"_posts/Java诊断工具Arthas高级命令教程/Arthasheapdump命令.md","raw":"---\ntitle: Arthas heapdump命令\ndate: 2021-08-07 09:51:33\ntags: ['Java 诊断工具 Arthas 高级命令教程']\n---\n\n<!-- toc -->\n\n![Arthas](arthas.png)\n\n`Arthas` 是Alibaba开源的Java诊断工具，深受开发者喜爱。在线排查问题，无需重启；动态跟踪Java代码；实时监控JVM状态。\n\n`Arthas` 支持JDK 6+，支持Linux/Mac/Windows，采用命令行交互模式，同时提供丰富的 `Tab` 自动补全功能，进一步方便进行问题的定位和诊断。\n\n当你遇到以下类似问题而束手无策时，Arthas可以帮助你解决：\n\n- 这个类从哪个 jar 包加载的？为什么会报各种类相关的 Exception？\n- 我改的代码为什么没有执行到？难道是我没 commit？分支搞错了？\n- 遇到问题无法在线上 debug，难道只能通过加日志再重新发布吗？\n- 线上遇到某个用户的数据处理有问题，但线上同样无法 debug，线下无法重现！\n- 是否有一个全局视角来查看系统的运行状况？\n- 有什么办法可以监控到JVM的实时运行状态？\n- 怎么快速定位应用的热点，生成火焰图？\n\n本教程会以一个简单的应用为例，演示heapdump命令。\n\n- Github: https://github.com/alibaba/arthas\n- 文档: https://arthas.aliyun.com/doc/\n\n## 启动arthas demo\n\n下载`arthas-demo.jar`，再用`java -jar`命令启动：\n\n```bash\nwget https://arthas.aliyun.com/arthas-demo.jar;java -jar arthas-demo.jar\n```\n\n`arthas-demo`是一个很简单的程序，它随机生成整数，再执行因式分解，把结果打印出来。如果生成的随机数是负数，则会打印提示信息。\n\n## 启动arthas-boot\n\n在新的`Terminal 2`里，下载`arthas-boot.jar`，再用`java -jar`命令启动：\n\n```bash\nwget https://arthas.aliyun.com/arthas-boot.jar;java -jar arthas-boot.jar\n```\n\n`arthas-boot`是`Arthas`的启动程序，它启动后，会列出所有的Java进程，用户可以选择需要诊断的目标进程。\n\n选择第一个进程，输入 `1` ，再`Enter/回车`：\n\n```bash\n1\n```\n\nAttach成功之后，会打印Arthas LOGO。输入 `help` 可以获取到更多的帮助信息。\n\n```bash\nhelp\n```\n\n![Arthas Boot](O1CN01HzatXZ1RgccrlT90M_!!6000000002141-2-tps-529-244.png)\n\n## heapdump命令\n\n> dump java heap, 类似jmap命令的heap dump功能。\n>\n> #### 使用参考\n\n##### dump到指定文件\n\n```bash\nheapdump /tmp/dump.hprof\n```\n\n```console\n[arthas@58205]$ heapdump /tmp/dump.hprof\nDumping heap to /tmp/dump.hprof...\nHeap dump file created\n```\n\n##### 只dump live对象\n\n```bash\nheapdump --live /tmp/dump.hprof\n```\n\n```console\n[arthas@58205]$ heapdump --live /tmp/dump.hprof\nDumping heap to /tmp/dump.hprof...\nHeap dump file created\n```\n\n#### dump到临时文件\n\n```bash\nheapdump\n```\n\n```console\n[arthas@58205]$ heapdump\nDumping heap to /var/folders/my/wy7c9w9j5732xbkcyt1mb4g40000gp/T/heapdump2019-09-03-16-385121018449645518991.hprof...\nHeap dump file created\n```\n\n## 更多信息\n\n在“heapdump”中，我们演示了了Arthas的heapdump命令。如果有更多的技巧或者使用疑问，欢迎在Issue里提出。\n\n- Issues: https://github.com/alibaba/arthas/issues\n- 文档： https://arthas.aliyun.com/doc\n\n如果您在使用Arthas，请让我们知道。您的使用对我们非常重要：[查看](https://github.com/alibaba/arthas/issues/111)\n\n文章拷贝来源：https://start.aliyun.com/course?spm=a2ck6.17690074.0.0.28bc2e7dHTphXs&id=PaiFAkJM","slug":"Java诊断工具Arthas高级命令教程/Arthasheapdump命令","published":1,"updated":"2021-08-07T05:34:29.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cks1cgr6e001ufw5i8ubk4ogb","content":"<!-- toc -->\n\n<ul>\n<li><a href=\"#%E5%90%AF%E5%8A%A8arthas-demo\">启动arthas demo</a></li>\n<li><a href=\"#%E5%90%AF%E5%8A%A8arthas-boot\">启动arthas-boot</a></li>\n<li><a href=\"#heapdump%E5%91%BD%E4%BB%A4\">heapdump命令</a><ul>\n<li><a href=\"#%E4%BD%BF%E7%94%A8%E5%8F%82%E8%80%83\">使用参考</a><ul>\n<li><a href=\"#dump%E5%88%B0%E6%8C%87%E5%AE%9A%E6%96%87%E4%BB%B6\">dump到指定文件</a></li>\n<li><a href=\"#%E5%8F%AAdump-live%E5%AF%B9%E8%B1%A1\">只dump live对象</a></li>\n</ul>\n</li>\n<li><a href=\"#dump%E5%88%B0%E4%B8%B4%E6%97%B6%E6%96%87%E4%BB%B6\">dump到临时文件</a></li>\n</ul>\n</li>\n<li><a href=\"#%E6%9B%B4%E5%A4%9A%E4%BF%A1%E6%81%AF\">更多信息</a></li>\n</ul>\n<!-- tocstop -->\n\n<p><img src=\"/jlynet.github.io/2021/08/07/Java%E8%AF%8A%E6%96%AD%E5%B7%A5%E5%85%B7Arthas%E9%AB%98%E7%BA%A7%E5%91%BD%E4%BB%A4%E6%95%99%E7%A8%8B/Arthasheapdump%E5%91%BD%E4%BB%A4/arthas.png\" alt=\"Arthas\"></p>\n<p><code>Arthas</code> 是Alibaba开源的Java诊断工具，深受开发者喜爱。在线排查问题，无需重启；动态跟踪Java代码；实时监控JVM状态。</p>\n<p><code>Arthas</code> 支持JDK 6+，支持Linux/Mac/Windows，采用命令行交互模式，同时提供丰富的 <code>Tab</code> 自动补全功能，进一步方便进行问题的定位和诊断。</p>\n<p>当你遇到以下类似问题而束手无策时，Arthas可以帮助你解决：</p>\n<ul>\n<li>这个类从哪个 jar 包加载的？为什么会报各种类相关的 Exception？</li>\n<li>我改的代码为什么没有执行到？难道是我没 commit？分支搞错了？</li>\n<li>遇到问题无法在线上 debug，难道只能通过加日志再重新发布吗？</li>\n<li>线上遇到某个用户的数据处理有问题，但线上同样无法 debug，线下无法重现！</li>\n<li>是否有一个全局视角来查看系统的运行状况？</li>\n<li>有什么办法可以监控到JVM的实时运行状态？</li>\n<li>怎么快速定位应用的热点，生成火焰图？</li>\n</ul>\n<p>本教程会以一个简单的应用为例，演示heapdump命令。</p>\n<ul>\n<li>Github: <a href=\"https://github.com/alibaba/arthas\">https://github.com/alibaba/arthas</a></li>\n<li>文档: <a href=\"https://arthas.aliyun.com/doc/\">https://arthas.aliyun.com/doc/</a></li>\n</ul>\n<h2><span id=\"启动arthas-demo\">启动arthas demo</span></h2><p>下载<code>arthas-demo.jar</code>，再用<code>java -jar</code>命令启动：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wget https://arthas.aliyun.com/arthas-demo.jar;java -jar arthas-demo.jar</span><br></pre></td></tr></table></figure>\n\n<p><code>arthas-demo</code>是一个很简单的程序，它随机生成整数，再执行因式分解，把结果打印出来。如果生成的随机数是负数，则会打印提示信息。</p>\n<h2><span id=\"启动arthas-boot\">启动arthas-boot</span></h2><p>在新的<code>Terminal 2</code>里，下载<code>arthas-boot.jar</code>，再用<code>java -jar</code>命令启动：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wget https://arthas.aliyun.com/arthas-boot.jar;java -jar arthas-boot.jar</span><br></pre></td></tr></table></figure>\n\n<p><code>arthas-boot</code>是<code>Arthas</code>的启动程序，它启动后，会列出所有的Java进程，用户可以选择需要诊断的目标进程。</p>\n<p>选择第一个进程，输入 <code>1</code> ，再<code>Enter/回车</code>：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1</span><br></pre></td></tr></table></figure>\n\n<p>Attach成功之后，会打印Arthas LOGO。输入 <code>help</code> 可以获取到更多的帮助信息。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">help</span></span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/jlynet.github.io/2021/08/07/Java%E8%AF%8A%E6%96%AD%E5%B7%A5%E5%85%B7Arthas%E9%AB%98%E7%BA%A7%E5%91%BD%E4%BB%A4%E6%95%99%E7%A8%8B/Arthasheapdump%E5%91%BD%E4%BB%A4/O1CN01HzatXZ1RgccrlT90M_!!6000000002141-2-tps-529-244.png\" alt=\"Arthas Boot\"></p>\n<h2><span id=\"heapdump命令\">heapdump命令</span></h2><blockquote>\n<p>dump java heap, 类似jmap命令的heap dump功能。</p>\n<h4><span id=\"使用参考\">使用参考</span></h4></blockquote>\n<h5><span id=\"dump到指定文件\">dump到指定文件</span></h5><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">heapdump /tmp/dump.hprof</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight console\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">[arthas@58205]$</span><span class=\"bash\"> heapdump /tmp/dump.hprof</span></span><br><span class=\"line\">Dumping heap to /tmp/dump.hprof...</span><br><span class=\"line\">Heap dump file created</span><br></pre></td></tr></table></figure>\n\n<h5><span id=\"只dump-live对象\">只dump live对象</span></h5><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">heapdump --live /tmp/dump.hprof</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight console\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">[arthas@58205]$</span><span class=\"bash\"> heapdump --live /tmp/dump.hprof</span></span><br><span class=\"line\">Dumping heap to /tmp/dump.hprof...</span><br><span class=\"line\">Heap dump file created</span><br></pre></td></tr></table></figure>\n\n<h4><span id=\"dump到临时文件\">dump到临时文件</span></h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">heapdump</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight console\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">[arthas@58205]$</span><span class=\"bash\"> heapdump</span></span><br><span class=\"line\">Dumping heap to /var/folders/my/wy7c9w9j5732xbkcyt1mb4g40000gp/T/heapdump2019-09-03-16-385121018449645518991.hprof...</span><br><span class=\"line\">Heap dump file created</span><br></pre></td></tr></table></figure>\n\n<h2><span id=\"更多信息\">更多信息</span></h2><p>在“heapdump”中，我们演示了了Arthas的heapdump命令。如果有更多的技巧或者使用疑问，欢迎在Issue里提出。</p>\n<ul>\n<li>Issues: <a href=\"https://github.com/alibaba/arthas/issues\">https://github.com/alibaba/arthas/issues</a></li>\n<li>文档： <a href=\"https://arthas.aliyun.com/doc\">https://arthas.aliyun.com/doc</a></li>\n</ul>\n<p>如果您在使用Arthas，请让我们知道。您的使用对我们非常重要：<a href=\"https://github.com/alibaba/arthas/issues/111\">查看</a></p>\n<p>文章拷贝来源：<a href=\"https://start.aliyun.com/course?spm=a2ck6.17690074.0.0.28bc2e7dHTphXs&amp;id=PaiFAkJM\">https://start.aliyun.com/course?spm=a2ck6.17690074.0.0.28bc2e7dHTphXs&amp;id=PaiFAkJM</a></p>\n","site":{"data":{}},"excerpt":"","more":"<!-- toc -->\n\n<ul>\n<li><a href=\"#%E5%90%AF%E5%8A%A8arthas-demo\">启动arthas demo</a></li>\n<li><a href=\"#%E5%90%AF%E5%8A%A8arthas-boot\">启动arthas-boot</a></li>\n<li><a href=\"#heapdump%E5%91%BD%E4%BB%A4\">heapdump命令</a><ul>\n<li><a href=\"#%E4%BD%BF%E7%94%A8%E5%8F%82%E8%80%83\">使用参考</a><ul>\n<li><a href=\"#dump%E5%88%B0%E6%8C%87%E5%AE%9A%E6%96%87%E4%BB%B6\">dump到指定文件</a></li>\n<li><a href=\"#%E5%8F%AAdump-live%E5%AF%B9%E8%B1%A1\">只dump live对象</a></li>\n</ul>\n</li>\n<li><a href=\"#dump%E5%88%B0%E4%B8%B4%E6%97%B6%E6%96%87%E4%BB%B6\">dump到临时文件</a></li>\n</ul>\n</li>\n<li><a href=\"#%E6%9B%B4%E5%A4%9A%E4%BF%A1%E6%81%AF\">更多信息</a></li>\n</ul>\n<!-- tocstop -->\n\n<p><img src=\"/jlynet.github.io/2021/08/07/Java%E8%AF%8A%E6%96%AD%E5%B7%A5%E5%85%B7Arthas%E9%AB%98%E7%BA%A7%E5%91%BD%E4%BB%A4%E6%95%99%E7%A8%8B/Arthasheapdump%E5%91%BD%E4%BB%A4/arthas.png\" alt=\"Arthas\"></p>\n<p><code>Arthas</code> 是Alibaba开源的Java诊断工具，深受开发者喜爱。在线排查问题，无需重启；动态跟踪Java代码；实时监控JVM状态。</p>\n<p><code>Arthas</code> 支持JDK 6+，支持Linux/Mac/Windows，采用命令行交互模式，同时提供丰富的 <code>Tab</code> 自动补全功能，进一步方便进行问题的定位和诊断。</p>\n<p>当你遇到以下类似问题而束手无策时，Arthas可以帮助你解决：</p>\n<ul>\n<li>这个类从哪个 jar 包加载的？为什么会报各种类相关的 Exception？</li>\n<li>我改的代码为什么没有执行到？难道是我没 commit？分支搞错了？</li>\n<li>遇到问题无法在线上 debug，难道只能通过加日志再重新发布吗？</li>\n<li>线上遇到某个用户的数据处理有问题，但线上同样无法 debug，线下无法重现！</li>\n<li>是否有一个全局视角来查看系统的运行状况？</li>\n<li>有什么办法可以监控到JVM的实时运行状态？</li>\n<li>怎么快速定位应用的热点，生成火焰图？</li>\n</ul>\n<p>本教程会以一个简单的应用为例，演示heapdump命令。</p>\n<ul>\n<li>Github: <a href=\"https://github.com/alibaba/arthas\">https://github.com/alibaba/arthas</a></li>\n<li>文档: <a href=\"https://arthas.aliyun.com/doc/\">https://arthas.aliyun.com/doc/</a></li>\n</ul>\n<h2 id=\"启动arthas-demo\"><a href=\"#启动arthas-demo\" class=\"headerlink\" title=\"启动arthas demo\"></a>启动arthas demo</h2><p>下载<code>arthas-demo.jar</code>，再用<code>java -jar</code>命令启动：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wget https://arthas.aliyun.com/arthas-demo.jar;java -jar arthas-demo.jar</span><br></pre></td></tr></table></figure>\n\n<p><code>arthas-demo</code>是一个很简单的程序，它随机生成整数，再执行因式分解，把结果打印出来。如果生成的随机数是负数，则会打印提示信息。</p>\n<h2 id=\"启动arthas-boot\"><a href=\"#启动arthas-boot\" class=\"headerlink\" title=\"启动arthas-boot\"></a>启动arthas-boot</h2><p>在新的<code>Terminal 2</code>里，下载<code>arthas-boot.jar</code>，再用<code>java -jar</code>命令启动：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wget https://arthas.aliyun.com/arthas-boot.jar;java -jar arthas-boot.jar</span><br></pre></td></tr></table></figure>\n\n<p><code>arthas-boot</code>是<code>Arthas</code>的启动程序，它启动后，会列出所有的Java进程，用户可以选择需要诊断的目标进程。</p>\n<p>选择第一个进程，输入 <code>1</code> ，再<code>Enter/回车</code>：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1</span><br></pre></td></tr></table></figure>\n\n<p>Attach成功之后，会打印Arthas LOGO。输入 <code>help</code> 可以获取到更多的帮助信息。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">help</span></span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/jlynet.github.io/2021/08/07/Java%E8%AF%8A%E6%96%AD%E5%B7%A5%E5%85%B7Arthas%E9%AB%98%E7%BA%A7%E5%91%BD%E4%BB%A4%E6%95%99%E7%A8%8B/Arthasheapdump%E5%91%BD%E4%BB%A4/O1CN01HzatXZ1RgccrlT90M_!!6000000002141-2-tps-529-244.png\" alt=\"Arthas Boot\"></p>\n<h2 id=\"heapdump命令\"><a href=\"#heapdump命令\" class=\"headerlink\" title=\"heapdump命令\"></a>heapdump命令</h2><blockquote>\n<p>dump java heap, 类似jmap命令的heap dump功能。</p>\n<h4 id=\"使用参考\"><a href=\"#使用参考\" class=\"headerlink\" title=\"使用参考\"></a>使用参考</h4></blockquote>\n<h5 id=\"dump到指定文件\"><a href=\"#dump到指定文件\" class=\"headerlink\" title=\"dump到指定文件\"></a>dump到指定文件</h5><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">heapdump /tmp/dump.hprof</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight console\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">[arthas@58205]$</span><span class=\"bash\"> heapdump /tmp/dump.hprof</span></span><br><span class=\"line\">Dumping heap to /tmp/dump.hprof...</span><br><span class=\"line\">Heap dump file created</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"只dump-live对象\"><a href=\"#只dump-live对象\" class=\"headerlink\" title=\"只dump live对象\"></a>只dump live对象</h5><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">heapdump --live /tmp/dump.hprof</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight console\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">[arthas@58205]$</span><span class=\"bash\"> heapdump --live /tmp/dump.hprof</span></span><br><span class=\"line\">Dumping heap to /tmp/dump.hprof...</span><br><span class=\"line\">Heap dump file created</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"dump到临时文件\"><a href=\"#dump到临时文件\" class=\"headerlink\" title=\"dump到临时文件\"></a>dump到临时文件</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">heapdump</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight console\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">[arthas@58205]$</span><span class=\"bash\"> heapdump</span></span><br><span class=\"line\">Dumping heap to /var/folders/my/wy7c9w9j5732xbkcyt1mb4g40000gp/T/heapdump2019-09-03-16-385121018449645518991.hprof...</span><br><span class=\"line\">Heap dump file created</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"更多信息\"><a href=\"#更多信息\" class=\"headerlink\" title=\"更多信息\"></a>更多信息</h2><p>在“heapdump”中，我们演示了了Arthas的heapdump命令。如果有更多的技巧或者使用疑问，欢迎在Issue里提出。</p>\n<ul>\n<li>Issues: <a href=\"https://github.com/alibaba/arthas/issues\">https://github.com/alibaba/arthas/issues</a></li>\n<li>文档： <a href=\"https://arthas.aliyun.com/doc\">https://arthas.aliyun.com/doc</a></li>\n</ul>\n<p>如果您在使用Arthas，请让我们知道。您的使用对我们非常重要：<a href=\"https://github.com/alibaba/arthas/issues/111\">查看</a></p>\n<p>文章拷贝来源：<a href=\"https://start.aliyun.com/course?spm=a2ck6.17690074.0.0.28bc2e7dHTphXs&amp;id=PaiFAkJM\">https://start.aliyun.com/course?spm=a2ck6.17690074.0.0.28bc2e7dHTphXs&amp;id=PaiFAkJM</a></p>\n"},{"title":"Arthas jad命令","date":"2021-08-07T01:51:44.000Z","_content":"\n<!-- toc -->\n\n![Arthas](arthas.png)\n\n`Arthas` 是Alibaba开源的Java诊断工具，深受开发者喜爱。在线排查问题，无需重启；动态跟踪Java代码；实时监控JVM状态。\n\n`Arthas` 支持JDK 6+，支持Linux/Mac/Windows，采用命令行交互模式，同时提供丰富的 `Tab` 自动补全功能，进一步方便进行问题的定位和诊断。\n\n当你遇到以下类似问题而束手无策时，Arthas可以帮助你解决：\n\n- 这个类从哪个 jar 包加载的？为什么会报各种类相关的 Exception？\n- 我改的代码为什么没有执行到？难道是我没 commit？分支搞错了？\n- 遇到问题无法在线上 debug，难道只能通过加日志再重新发布吗？\n- 线上遇到某个用户的数据处理有问题，但线上同样无法 debug，线下无法重现！\n- 是否有一个全局视角来查看系统的运行状况？\n- 有什么办法可以监控到JVM的实时运行状态？\n- 怎么快速定位应用的热点，生成火焰图？\n\n本教程会以一个简单的应用为例，演示jad命令。\n\n- Github: https://github.com/alibaba/arthas\n- 文档: https://arthas.aliyun.com/doc/\n\n## 启动arthas demo\n\n下载`arthas-demo.jar`，再用`java -jar`命令启动：\n\n```bash\nwget https://arthas.aliyun.com/arthas-demo.jar;java -jar arthas-demo.jar\n```\n\n`arthas-demo`是一个很简单的程序，它随机生成整数，再执行因式分解，把结果打印出来。如果生成的随机数是负数，则会打印提示信息。\n\n## 启动arthas-boot\n\n在新的`Terminal 2`里，下载`arthas-boot.jar`，再用`java -jar`命令启动：\n\n```bash\nwget https://arthas.aliyun.com/arthas-boot.jar;java -jar arthas-boot.jar\n```\n\n`arthas-boot`是`Arthas`的启动程序，它启动后，会列出所有的Java进程，用户可以选择需要诊断的目标进程。\n\n选择第一个进程，输入 `1` ，再`Enter/回车`：\n\n```bash\n1\n```\n\nAttach成功之后，会打印Arthas LOGO。输入 `help` 可以获取到更多的帮助信息。\n\n```bash\nhelp\n```\n\n![Arthas Boot](O1CN01HzatXZ1RgccrlT90M_!!6000000002141-2-tps-529-244.png)\n\n## jad命令\n\n> 反编译指定已加载类的源码\n\n`jad` 命令将 JVM 中实际运行的 class 的 byte code 反编译成 java 代码，便于你理解业务逻辑；\n\n- 在 Arthas Console 上，反编译出来的源码是带语法高亮的，阅读更方便\n- 当然，反编译出来的 java 代码可能会存在语法错误，但不影响你进行阅读理解\n\n#### 参数说明\n\n| 参数名称              | 参数说明                                   |\n| --------------------- | ------------------------------------------ |\n| *class-pattern*       | 类名表达式匹配                             |\n| `[c:]`                | 类所属 ClassLoader 的 hashcode             |\n| `[classLoaderClass:]` | 指定执行表达式的 ClassLoader 的 class name |\n| [E]                   | 开启正则表达式匹配，默认为通配符匹配       |\n\n#### 使用参考\n\n##### 编译`java.lang.String`\n\n```bash\njad java.lang.String\n```\n\n```java\n$ jad java.lang.String\n\nClassLoader:\n\nLocation:\n/*\n* Decompiled with CFR 0_132.\n*/\npackage java.lang;\n\nimport java.io.ObjectStreamField;\n...\npublic final class String\nimplements Serializable,\nComparable<String>,\nCharSequence {\n    private final char[] value;\n    private int hash;\n    private static final long serialVersionUID = -6849794470754667710L;\n    private static final ObjectStreamField[] serialPersistentFields = new ObjectStreamField[0];\n    public static final Comparator<String> CASE_INSENSITIVE_ORDER = new CaseInsensitiveComparator();\n\n    public String(byte[] arrby, int n, int n2) {\n        String.checkBounds(arrby, n, n2);\n        this.value = StringCoding.decode(arrby, n, n2);\n    }\n...\n```\n\n##### 反编译时只显示源代码\n\n默认情况下，反编译结果里会带有`ClassLoader`信息，通过`--source-only`选项，可以只打印源代码。方便和`mc`/`redefine`命令结合使用。\n\n```bash\njad --source-only java.lang.String\n```\n\n```\n$ jad --source-only java.lang.String\n...\n        @Override\n        public int compare(String string, String string2) {\n            int n = string.length();\n            int n2 = string2.length();\n            int n3 = Math.min(n, n2);\n            for (int i = 0; i < n3; ++i) {\n                char c;\n                char c2 = string.charAt(i);\n                if (c2 == (c = string2.charAt(i)) || (c2 = Character.toUpperCase(c2)) == (c = Character.toUpperCase(c)) || (c2 = Character.toLowerCase(c2)) == (c = Character.toLowerCase(c))) continue;\n                return c2 - c;\n            }\n            return n - n2;\n        }\n\n        private Object readResolve() {\n            return String.CASE_INSENSITIVE_ORDER;\n        }\n    }\n}\n```\n\n##### 反编译指定的函数\n\n```bash\njad java.lang.String toString\n```\n\n```java\n$ jad java.lang.String toString\n\nClassLoader:\n\nLocation:\n@Override\npublic String toString() {\n    return this;\n}\n\nAffect(row-cnt:2) cost in 407 ms.\n```\n\n##### 反编译时指定ClassLoader\n\n> 当有多个 `ClassLoader` 都加载了这个类时，`jad` 命令会输出对应 `ClassLoader` 实例的 `hashcode`，然后你只需要重新执行 `jad` 命令，并使用参数 `-c <hashcode>` 就可以反编译指定 ClassLoader 加载的那个类了；\n\n例如：\n\n```java\n$ jad org.apache.log4j.Logger\n\nFound more than one class for: org.apache.log4j.Logger, Please use jad -c hashcode org.apache.log4j.Logger\nHASHCODE  CLASSLOADER\n69dcaba4  +-monitor's ModuleClassLoader\n6e51ad67  +-java.net.URLClassLoader@6e51ad67\n            +-sun.misc.Launcher$AppClassLoader@6951a712\n            +-sun.misc.Launcher$ExtClassLoader@6fafc4c2\n2bdd9114  +-pandora-qos-service's ModuleClassLoader\n4c0df5f8  +-pandora-framework's ModuleClassLoader\n\nAffect(row-cnt:0) cost in 38 ms.\n```\n\n```java\n$ jad org.apache.log4j.Logger -c 69dcaba4\n\nClassLoader:\n+-monitor's ModuleClassLoader\n\nLocation:\n/Users/admin/app/log4j-1.2.14.jar\n\npackage org.apache.log4j;\n\nimport org.apache.log4j.spi.*;\n\npublic class Logger extends Category\n{\n    private static final String FQCN;\n\n    protected Logger(String name)\n    {\n        super(name);\n    }\n\n...\n\nAffect(row-cnt:1) cost in 190 ms.\n```\n\n对于只有唯一实例的ClassLoader还可以通过`--classLoaderClass`指定class name，使用起来更加方便：\n\n`--classLoaderClass` 的值是ClassLoader的类名，只有匹配到唯一的ClassLoader实例时才能工作，目的是方便输入通用命令，而`-c <hashcode>`是动态变化的。\n\n## 更多信息\n\n在“heapdump”中，我们演示了了Arthas的heapdump命令。如果有更多的技巧或者使用疑问，欢迎在Issue里提出。\n\n- Issues: https://github.com/alibaba/arthas/issues\n- 文档： https://arthas.aliyun.com/doc\n\n如果您在使用Arthas，请让我们知道。您的使用对我们非常重要：[查看](https://github.com/alibaba/arthas/issues/111)\n\n文章拷贝来源：https://start.aliyun.com/course?spm=a2ck6.17690074.0.0.28bc2e7dHTphXs&id=PaiFAkJM","source":"_posts/Java诊断工具Arthas高级命令教程/Arthasjad命令.md","raw":"---\ntitle: Arthas jad命令\ndate: 2021-08-07 09:51:44\ntags: ['Java 诊断工具 Arthas 高级命令教程']\n---\n\n<!-- toc -->\n\n![Arthas](arthas.png)\n\n`Arthas` 是Alibaba开源的Java诊断工具，深受开发者喜爱。在线排查问题，无需重启；动态跟踪Java代码；实时监控JVM状态。\n\n`Arthas` 支持JDK 6+，支持Linux/Mac/Windows，采用命令行交互模式，同时提供丰富的 `Tab` 自动补全功能，进一步方便进行问题的定位和诊断。\n\n当你遇到以下类似问题而束手无策时，Arthas可以帮助你解决：\n\n- 这个类从哪个 jar 包加载的？为什么会报各种类相关的 Exception？\n- 我改的代码为什么没有执行到？难道是我没 commit？分支搞错了？\n- 遇到问题无法在线上 debug，难道只能通过加日志再重新发布吗？\n- 线上遇到某个用户的数据处理有问题，但线上同样无法 debug，线下无法重现！\n- 是否有一个全局视角来查看系统的运行状况？\n- 有什么办法可以监控到JVM的实时运行状态？\n- 怎么快速定位应用的热点，生成火焰图？\n\n本教程会以一个简单的应用为例，演示jad命令。\n\n- Github: https://github.com/alibaba/arthas\n- 文档: https://arthas.aliyun.com/doc/\n\n## 启动arthas demo\n\n下载`arthas-demo.jar`，再用`java -jar`命令启动：\n\n```bash\nwget https://arthas.aliyun.com/arthas-demo.jar;java -jar arthas-demo.jar\n```\n\n`arthas-demo`是一个很简单的程序，它随机生成整数，再执行因式分解，把结果打印出来。如果生成的随机数是负数，则会打印提示信息。\n\n## 启动arthas-boot\n\n在新的`Terminal 2`里，下载`arthas-boot.jar`，再用`java -jar`命令启动：\n\n```bash\nwget https://arthas.aliyun.com/arthas-boot.jar;java -jar arthas-boot.jar\n```\n\n`arthas-boot`是`Arthas`的启动程序，它启动后，会列出所有的Java进程，用户可以选择需要诊断的目标进程。\n\n选择第一个进程，输入 `1` ，再`Enter/回车`：\n\n```bash\n1\n```\n\nAttach成功之后，会打印Arthas LOGO。输入 `help` 可以获取到更多的帮助信息。\n\n```bash\nhelp\n```\n\n![Arthas Boot](O1CN01HzatXZ1RgccrlT90M_!!6000000002141-2-tps-529-244.png)\n\n## jad命令\n\n> 反编译指定已加载类的源码\n\n`jad` 命令将 JVM 中实际运行的 class 的 byte code 反编译成 java 代码，便于你理解业务逻辑；\n\n- 在 Arthas Console 上，反编译出来的源码是带语法高亮的，阅读更方便\n- 当然，反编译出来的 java 代码可能会存在语法错误，但不影响你进行阅读理解\n\n#### 参数说明\n\n| 参数名称              | 参数说明                                   |\n| --------------------- | ------------------------------------------ |\n| *class-pattern*       | 类名表达式匹配                             |\n| `[c:]`                | 类所属 ClassLoader 的 hashcode             |\n| `[classLoaderClass:]` | 指定执行表达式的 ClassLoader 的 class name |\n| [E]                   | 开启正则表达式匹配，默认为通配符匹配       |\n\n#### 使用参考\n\n##### 编译`java.lang.String`\n\n```bash\njad java.lang.String\n```\n\n```java\n$ jad java.lang.String\n\nClassLoader:\n\nLocation:\n/*\n* Decompiled with CFR 0_132.\n*/\npackage java.lang;\n\nimport java.io.ObjectStreamField;\n...\npublic final class String\nimplements Serializable,\nComparable<String>,\nCharSequence {\n    private final char[] value;\n    private int hash;\n    private static final long serialVersionUID = -6849794470754667710L;\n    private static final ObjectStreamField[] serialPersistentFields = new ObjectStreamField[0];\n    public static final Comparator<String> CASE_INSENSITIVE_ORDER = new CaseInsensitiveComparator();\n\n    public String(byte[] arrby, int n, int n2) {\n        String.checkBounds(arrby, n, n2);\n        this.value = StringCoding.decode(arrby, n, n2);\n    }\n...\n```\n\n##### 反编译时只显示源代码\n\n默认情况下，反编译结果里会带有`ClassLoader`信息，通过`--source-only`选项，可以只打印源代码。方便和`mc`/`redefine`命令结合使用。\n\n```bash\njad --source-only java.lang.String\n```\n\n```\n$ jad --source-only java.lang.String\n...\n        @Override\n        public int compare(String string, String string2) {\n            int n = string.length();\n            int n2 = string2.length();\n            int n3 = Math.min(n, n2);\n            for (int i = 0; i < n3; ++i) {\n                char c;\n                char c2 = string.charAt(i);\n                if (c2 == (c = string2.charAt(i)) || (c2 = Character.toUpperCase(c2)) == (c = Character.toUpperCase(c)) || (c2 = Character.toLowerCase(c2)) == (c = Character.toLowerCase(c))) continue;\n                return c2 - c;\n            }\n            return n - n2;\n        }\n\n        private Object readResolve() {\n            return String.CASE_INSENSITIVE_ORDER;\n        }\n    }\n}\n```\n\n##### 反编译指定的函数\n\n```bash\njad java.lang.String toString\n```\n\n```java\n$ jad java.lang.String toString\n\nClassLoader:\n\nLocation:\n@Override\npublic String toString() {\n    return this;\n}\n\nAffect(row-cnt:2) cost in 407 ms.\n```\n\n##### 反编译时指定ClassLoader\n\n> 当有多个 `ClassLoader` 都加载了这个类时，`jad` 命令会输出对应 `ClassLoader` 实例的 `hashcode`，然后你只需要重新执行 `jad` 命令，并使用参数 `-c <hashcode>` 就可以反编译指定 ClassLoader 加载的那个类了；\n\n例如：\n\n```java\n$ jad org.apache.log4j.Logger\n\nFound more than one class for: org.apache.log4j.Logger, Please use jad -c hashcode org.apache.log4j.Logger\nHASHCODE  CLASSLOADER\n69dcaba4  +-monitor's ModuleClassLoader\n6e51ad67  +-java.net.URLClassLoader@6e51ad67\n            +-sun.misc.Launcher$AppClassLoader@6951a712\n            +-sun.misc.Launcher$ExtClassLoader@6fafc4c2\n2bdd9114  +-pandora-qos-service's ModuleClassLoader\n4c0df5f8  +-pandora-framework's ModuleClassLoader\n\nAffect(row-cnt:0) cost in 38 ms.\n```\n\n```java\n$ jad org.apache.log4j.Logger -c 69dcaba4\n\nClassLoader:\n+-monitor's ModuleClassLoader\n\nLocation:\n/Users/admin/app/log4j-1.2.14.jar\n\npackage org.apache.log4j;\n\nimport org.apache.log4j.spi.*;\n\npublic class Logger extends Category\n{\n    private static final String FQCN;\n\n    protected Logger(String name)\n    {\n        super(name);\n    }\n\n...\n\nAffect(row-cnt:1) cost in 190 ms.\n```\n\n对于只有唯一实例的ClassLoader还可以通过`--classLoaderClass`指定class name，使用起来更加方便：\n\n`--classLoaderClass` 的值是ClassLoader的类名，只有匹配到唯一的ClassLoader实例时才能工作，目的是方便输入通用命令，而`-c <hashcode>`是动态变化的。\n\n## 更多信息\n\n在“heapdump”中，我们演示了了Arthas的heapdump命令。如果有更多的技巧或者使用疑问，欢迎在Issue里提出。\n\n- Issues: https://github.com/alibaba/arthas/issues\n- 文档： https://arthas.aliyun.com/doc\n\n如果您在使用Arthas，请让我们知道。您的使用对我们非常重要：[查看](https://github.com/alibaba/arthas/issues/111)\n\n文章拷贝来源：https://start.aliyun.com/course?spm=a2ck6.17690074.0.0.28bc2e7dHTphXs&id=PaiFAkJM","slug":"Java诊断工具Arthas高级命令教程/Arthasjad命令","published":1,"updated":"2021-08-07T05:34:33.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cks1cgr6g001wfw5iegmea9b6","content":"<!-- toc -->\n\n<ul>\n<li><a href=\"#%E5%90%AF%E5%8A%A8arthas-demo\">启动arthas demo</a></li>\n<li><a href=\"#%E5%90%AF%E5%8A%A8arthas-boot\">启动arthas-boot</a></li>\n<li><a href=\"#jad%E5%91%BD%E4%BB%A4\">jad命令</a><ul>\n<li><a href=\"#%E5%8F%82%E6%95%B0%E8%AF%B4%E6%98%8E\">参数说明</a></li>\n<li><a href=\"#%E4%BD%BF%E7%94%A8%E5%8F%82%E8%80%83\">使用参考</a><ul>\n<li><a href=\"#%E7%BC%96%E8%AF%91javalangstring\">编译<code>java.lang.String</code></a></li>\n<li><a href=\"#%E5%8F%8D%E7%BC%96%E8%AF%91%E6%97%B6%E5%8F%AA%E6%98%BE%E7%A4%BA%E6%BA%90%E4%BB%A3%E7%A0%81\">反编译时只显示源代码</a></li>\n<li><a href=\"#%E5%8F%8D%E7%BC%96%E8%AF%91%E6%8C%87%E5%AE%9A%E7%9A%84%E5%87%BD%E6%95%B0\">反编译指定的函数</a></li>\n<li><a href=\"#%E5%8F%8D%E7%BC%96%E8%AF%91%E6%97%B6%E6%8C%87%E5%AE%9Aclassloader\">反编译时指定ClassLoader</a></li>\n</ul>\n</li>\n</ul>\n</li>\n<li><a href=\"#%E6%9B%B4%E5%A4%9A%E4%BF%A1%E6%81%AF\">更多信息</a></li>\n</ul>\n<!-- tocstop -->\n\n<p><img src=\"/jlynet.github.io/2021/08/07/Java%E8%AF%8A%E6%96%AD%E5%B7%A5%E5%85%B7Arthas%E9%AB%98%E7%BA%A7%E5%91%BD%E4%BB%A4%E6%95%99%E7%A8%8B/Arthasjad%E5%91%BD%E4%BB%A4/arthas.png\" alt=\"Arthas\"></p>\n<p><code>Arthas</code> 是Alibaba开源的Java诊断工具，深受开发者喜爱。在线排查问题，无需重启；动态跟踪Java代码；实时监控JVM状态。</p>\n<p><code>Arthas</code> 支持JDK 6+，支持Linux/Mac/Windows，采用命令行交互模式，同时提供丰富的 <code>Tab</code> 自动补全功能，进一步方便进行问题的定位和诊断。</p>\n<p>当你遇到以下类似问题而束手无策时，Arthas可以帮助你解决：</p>\n<ul>\n<li>这个类从哪个 jar 包加载的？为什么会报各种类相关的 Exception？</li>\n<li>我改的代码为什么没有执行到？难道是我没 commit？分支搞错了？</li>\n<li>遇到问题无法在线上 debug，难道只能通过加日志再重新发布吗？</li>\n<li>线上遇到某个用户的数据处理有问题，但线上同样无法 debug，线下无法重现！</li>\n<li>是否有一个全局视角来查看系统的运行状况？</li>\n<li>有什么办法可以监控到JVM的实时运行状态？</li>\n<li>怎么快速定位应用的热点，生成火焰图？</li>\n</ul>\n<p>本教程会以一个简单的应用为例，演示jad命令。</p>\n<ul>\n<li>Github: <a href=\"https://github.com/alibaba/arthas\">https://github.com/alibaba/arthas</a></li>\n<li>文档: <a href=\"https://arthas.aliyun.com/doc/\">https://arthas.aliyun.com/doc/</a></li>\n</ul>\n<h2><span id=\"启动arthas-demo\">启动arthas demo</span></h2><p>下载<code>arthas-demo.jar</code>，再用<code>java -jar</code>命令启动：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wget https://arthas.aliyun.com/arthas-demo.jar;java -jar arthas-demo.jar</span><br></pre></td></tr></table></figure>\n\n<p><code>arthas-demo</code>是一个很简单的程序，它随机生成整数，再执行因式分解，把结果打印出来。如果生成的随机数是负数，则会打印提示信息。</p>\n<h2><span id=\"启动arthas-boot\">启动arthas-boot</span></h2><p>在新的<code>Terminal 2</code>里，下载<code>arthas-boot.jar</code>，再用<code>java -jar</code>命令启动：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wget https://arthas.aliyun.com/arthas-boot.jar;java -jar arthas-boot.jar</span><br></pre></td></tr></table></figure>\n\n<p><code>arthas-boot</code>是<code>Arthas</code>的启动程序，它启动后，会列出所有的Java进程，用户可以选择需要诊断的目标进程。</p>\n<p>选择第一个进程，输入 <code>1</code> ，再<code>Enter/回车</code>：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1</span><br></pre></td></tr></table></figure>\n\n<p>Attach成功之后，会打印Arthas LOGO。输入 <code>help</code> 可以获取到更多的帮助信息。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">help</span></span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/jlynet.github.io/2021/08/07/Java%E8%AF%8A%E6%96%AD%E5%B7%A5%E5%85%B7Arthas%E9%AB%98%E7%BA%A7%E5%91%BD%E4%BB%A4%E6%95%99%E7%A8%8B/Arthasjad%E5%91%BD%E4%BB%A4/O1CN01HzatXZ1RgccrlT90M_!!6000000002141-2-tps-529-244.png\" alt=\"Arthas Boot\"></p>\n<h2><span id=\"jad命令\">jad命令</span></h2><blockquote>\n<p>反编译指定已加载类的源码</p>\n</blockquote>\n<p><code>jad</code> 命令将 JVM 中实际运行的 class 的 byte code 反编译成 java 代码，便于你理解业务逻辑；</p>\n<ul>\n<li>在 Arthas Console 上，反编译出来的源码是带语法高亮的，阅读更方便</li>\n<li>当然，反编译出来的 java 代码可能会存在语法错误，但不影响你进行阅读理解</li>\n</ul>\n<h4><span id=\"参数说明\">参数说明</span></h4><table>\n<thead>\n<tr>\n<th>参数名称</th>\n<th>参数说明</th>\n</tr>\n</thead>\n<tbody><tr>\n<td><em>class-pattern</em></td>\n<td>类名表达式匹配</td>\n</tr>\n<tr>\n<td><code>[c:]</code></td>\n<td>类所属 ClassLoader 的 hashcode</td>\n</tr>\n<tr>\n<td><code>[classLoaderClass:]</code></td>\n<td>指定执行表达式的 ClassLoader 的 class name</td>\n</tr>\n<tr>\n<td>[E]</td>\n<td>开启正则表达式匹配，默认为通配符匹配</td>\n</tr>\n</tbody></table>\n<h4><span id=\"使用参考\">使用参考</span></h4><h5><span id=\"编译javalangstring\">编译<code>java.lang.String</code></span></h5><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">jad java.lang.String</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ jad java.lang.String</span><br><span class=\"line\"></span><br><span class=\"line\">ClassLoader:</span><br><span class=\"line\"></span><br><span class=\"line\">Location:</span><br><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">* Decompiled with CFR 0_132.</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\"><span class=\"keyword\">package</span> java.lang;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.ObjectStreamField;</span><br><span class=\"line\">...</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">final</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">String</span></span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">implements</span> <span class=\"title\">Serializable</span>,</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"title\">Comparable</span>&lt;<span class=\"title\">String</span>&gt;,</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"title\">CharSequence</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> <span class=\"keyword\">char</span>[] value;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">int</span> hash;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">long</span> serialVersionUID = -<span class=\"number\">6849794470754667710L</span>;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> ObjectStreamField[] serialPersistentFields = <span class=\"keyword\">new</span> ObjectStreamField[<span class=\"number\">0</span>];</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> Comparator&lt;String&gt; CASE_INSENSITIVE_ORDER = <span class=\"keyword\">new</span> CaseInsensitiveComparator();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">String</span><span class=\"params\">(<span class=\"keyword\">byte</span>[] arrby, <span class=\"keyword\">int</span> n, <span class=\"keyword\">int</span> n2)</span> </span>&#123;</span><br><span class=\"line\">        String.checkBounds(arrby, n, n2);</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.value = StringCoding.decode(arrby, n, n2);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">...</span><br></pre></td></tr></table></figure>\n\n<h5><span id=\"反编译时只显示源代码\">反编译时只显示源代码</span></h5><p>默认情况下，反编译结果里会带有<code>ClassLoader</code>信息，通过<code>--source-only</code>选项，可以只打印源代码。方便和<code>mc</code>/<code>redefine</code>命令结合使用。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">jad --source-only java.lang.String</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ jad --source-only java.lang.String</span><br><span class=\"line\">...</span><br><span class=\"line\">        @Override</span><br><span class=\"line\">        public int compare(String string, String string2) &#123;</span><br><span class=\"line\">            int n = string.length();</span><br><span class=\"line\">            int n2 = string2.length();</span><br><span class=\"line\">            int n3 = Math.min(n, n2);</span><br><span class=\"line\">            for (int i = 0; i &lt; n3; ++i) &#123;</span><br><span class=\"line\">                char c;</span><br><span class=\"line\">                char c2 = string.charAt(i);</span><br><span class=\"line\">                if (c2 == (c = string2.charAt(i)) || (c2 = Character.toUpperCase(c2)) == (c = Character.toUpperCase(c)) || (c2 = Character.toLowerCase(c2)) == (c = Character.toLowerCase(c))) continue;</span><br><span class=\"line\">                return c2 - c;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            return n - n2;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        private Object readResolve() &#123;</span><br><span class=\"line\">            return String.CASE_INSENSITIVE_ORDER;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h5><span id=\"反编译指定的函数\">反编译指定的函数</span></h5><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">jad java.lang.String toString</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ jad java.lang.String toString</span><br><span class=\"line\"></span><br><span class=\"line\">ClassLoader:</span><br><span class=\"line\"></span><br><span class=\"line\">Location:</span><br><span class=\"line\"><span class=\"meta\">@Override</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">toString</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">Affect(row-cnt:<span class=\"number\">2</span>) cost in <span class=\"number\">407</span> ms.</span><br></pre></td></tr></table></figure>\n\n<h5><span id=\"反编译时指定classloader\">反编译时指定ClassLoader</span></h5><blockquote>\n<p>当有多个 <code>ClassLoader</code> 都加载了这个类时，<code>jad</code> 命令会输出对应 <code>ClassLoader</code> 实例的 <code>hashcode</code>，然后你只需要重新执行 <code>jad</code> 命令，并使用参数 <code>-c &lt;hashcode&gt;</code> 就可以反编译指定 ClassLoader 加载的那个类了；</p>\n</blockquote>\n<p>例如：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ jad org.apache.log4j.Logger</span><br><span class=\"line\"></span><br><span class=\"line\">Found more than one <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">for</span>: <span class=\"title\">org</span>.<span class=\"title\">apache</span>.<span class=\"title\">log4j</span>.<span class=\"title\">Logger</span>, <span class=\"title\">Please</span> <span class=\"title\">use</span> <span class=\"title\">jad</span> -<span class=\"title\">c</span> <span class=\"title\">hashcode</span> <span class=\"title\">org</span>.<span class=\"title\">apache</span>.<span class=\"title\">log4j</span>.<span class=\"title\">Logger</span></span></span><br><span class=\"line\"><span class=\"class\"><span class=\"title\">HASHCODE</span>  <span class=\"title\">CLASSLOADER</span></span></span><br><span class=\"line\"><span class=\"class\">69<span class=\"title\">dcaba4</span>  +-<span class=\"title\">monitor</span>&#x27;<span class=\"title\">s</span> <span class=\"title\">ModuleClassLoader</span></span></span><br><span class=\"line\"><span class=\"class\">6<span class=\"title\">e51ad67</span>  +-<span class=\"title\">java</span>.<span class=\"title\">net</span>.<span class=\"title\">URLClassLoader</span>@6<span class=\"title\">e51ad67</span></span></span><br><span class=\"line\"><span class=\"class\">            +-<span class=\"title\">sun</span>.<span class=\"title\">misc</span>.<span class=\"title\">Launcher</span>$<span class=\"title\">AppClassLoader</span>@6951<span class=\"title\">a712</span></span></span><br><span class=\"line\"><span class=\"class\">            +-<span class=\"title\">sun</span>.<span class=\"title\">misc</span>.<span class=\"title\">Launcher</span>$<span class=\"title\">ExtClassLoader</span>@6<span class=\"title\">fafc4c2</span></span></span><br><span class=\"line\"><span class=\"class\">2<span class=\"title\">bdd9114</span>  +-<span class=\"title\">pandora</span>-<span class=\"title\">qos</span>-<span class=\"title\">service</span>&#x27;<span class=\"title\">s</span> <span class=\"title\">ModuleClassLoader</span></span></span><br><span class=\"line\"><span class=\"class\">4<span class=\"title\">c0df5f8</span>  +-<span class=\"title\">pandora</span>-<span class=\"title\">framework</span>&#x27;<span class=\"title\">s</span> <span class=\"title\">ModuleClassLoader</span></span></span><br><span class=\"line\"><span class=\"class\"></span></span><br><span class=\"line\"><span class=\"class\"><span class=\"title\">Affect</span>(<span class=\"title\">row</span>-<span class=\"title\">cnt</span>:0) <span class=\"title\">cost</span> <span class=\"title\">in</span> 38 <span class=\"title\">ms</span>.</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ jad org.apache.log4j.Logger -c 69dcaba4</span><br><span class=\"line\"></span><br><span class=\"line\">ClassLoader:</span><br><span class=\"line\">+-monitor<span class=\"string\">&#x27;s ModuleClassLoader</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">Location:</span></span><br><span class=\"line\"><span class=\"string\">/Users/admin/app/log4j-1.2.14.jar</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">package org.apache.log4j;</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">import org.apache.log4j.spi.*;</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">public class Logger extends Category</span></span><br><span class=\"line\"><span class=\"string\">&#123;</span></span><br><span class=\"line\"><span class=\"string\">    private static final String FQCN;</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">    protected Logger(String name)</span></span><br><span class=\"line\"><span class=\"string\">    &#123;</span></span><br><span class=\"line\"><span class=\"string\">        super(name);</span></span><br><span class=\"line\"><span class=\"string\">    &#125;</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">...</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">Affect(row-cnt:1) cost in 190 ms.</span></span><br></pre></td></tr></table></figure>\n\n<p>对于只有唯一实例的ClassLoader还可以通过<code>--classLoaderClass</code>指定class name，使用起来更加方便：</p>\n<p><code>--classLoaderClass</code> 的值是ClassLoader的类名，只有匹配到唯一的ClassLoader实例时才能工作，目的是方便输入通用命令，而<code>-c &lt;hashcode&gt;</code>是动态变化的。</p>\n<h2><span id=\"更多信息\">更多信息</span></h2><p>在“heapdump”中，我们演示了了Arthas的heapdump命令。如果有更多的技巧或者使用疑问，欢迎在Issue里提出。</p>\n<ul>\n<li>Issues: <a href=\"https://github.com/alibaba/arthas/issues\">https://github.com/alibaba/arthas/issues</a></li>\n<li>文档： <a href=\"https://arthas.aliyun.com/doc\">https://arthas.aliyun.com/doc</a></li>\n</ul>\n<p>如果您在使用Arthas，请让我们知道。您的使用对我们非常重要：<a href=\"https://github.com/alibaba/arthas/issues/111\">查看</a></p>\n<p>文章拷贝来源：<a href=\"https://start.aliyun.com/course?spm=a2ck6.17690074.0.0.28bc2e7dHTphXs&amp;id=PaiFAkJM\">https://start.aliyun.com/course?spm=a2ck6.17690074.0.0.28bc2e7dHTphXs&amp;id=PaiFAkJM</a></p>\n","site":{"data":{}},"excerpt":"","more":"<!-- toc -->\n\n<ul>\n<li><a href=\"#%E5%90%AF%E5%8A%A8arthas-demo\">启动arthas demo</a></li>\n<li><a href=\"#%E5%90%AF%E5%8A%A8arthas-boot\">启动arthas-boot</a></li>\n<li><a href=\"#jad%E5%91%BD%E4%BB%A4\">jad命令</a><ul>\n<li><a href=\"#%E5%8F%82%E6%95%B0%E8%AF%B4%E6%98%8E\">参数说明</a></li>\n<li><a href=\"#%E4%BD%BF%E7%94%A8%E5%8F%82%E8%80%83\">使用参考</a><ul>\n<li><a href=\"#%E7%BC%96%E8%AF%91javalangstring\">编译<code>java.lang.String</code></a></li>\n<li><a href=\"#%E5%8F%8D%E7%BC%96%E8%AF%91%E6%97%B6%E5%8F%AA%E6%98%BE%E7%A4%BA%E6%BA%90%E4%BB%A3%E7%A0%81\">反编译时只显示源代码</a></li>\n<li><a href=\"#%E5%8F%8D%E7%BC%96%E8%AF%91%E6%8C%87%E5%AE%9A%E7%9A%84%E5%87%BD%E6%95%B0\">反编译指定的函数</a></li>\n<li><a href=\"#%E5%8F%8D%E7%BC%96%E8%AF%91%E6%97%B6%E6%8C%87%E5%AE%9Aclassloader\">反编译时指定ClassLoader</a></li>\n</ul>\n</li>\n</ul>\n</li>\n<li><a href=\"#%E6%9B%B4%E5%A4%9A%E4%BF%A1%E6%81%AF\">更多信息</a></li>\n</ul>\n<!-- tocstop -->\n\n<p><img src=\"/jlynet.github.io/2021/08/07/Java%E8%AF%8A%E6%96%AD%E5%B7%A5%E5%85%B7Arthas%E9%AB%98%E7%BA%A7%E5%91%BD%E4%BB%A4%E6%95%99%E7%A8%8B/Arthasjad%E5%91%BD%E4%BB%A4/arthas.png\" alt=\"Arthas\"></p>\n<p><code>Arthas</code> 是Alibaba开源的Java诊断工具，深受开发者喜爱。在线排查问题，无需重启；动态跟踪Java代码；实时监控JVM状态。</p>\n<p><code>Arthas</code> 支持JDK 6+，支持Linux/Mac/Windows，采用命令行交互模式，同时提供丰富的 <code>Tab</code> 自动补全功能，进一步方便进行问题的定位和诊断。</p>\n<p>当你遇到以下类似问题而束手无策时，Arthas可以帮助你解决：</p>\n<ul>\n<li>这个类从哪个 jar 包加载的？为什么会报各种类相关的 Exception？</li>\n<li>我改的代码为什么没有执行到？难道是我没 commit？分支搞错了？</li>\n<li>遇到问题无法在线上 debug，难道只能通过加日志再重新发布吗？</li>\n<li>线上遇到某个用户的数据处理有问题，但线上同样无法 debug，线下无法重现！</li>\n<li>是否有一个全局视角来查看系统的运行状况？</li>\n<li>有什么办法可以监控到JVM的实时运行状态？</li>\n<li>怎么快速定位应用的热点，生成火焰图？</li>\n</ul>\n<p>本教程会以一个简单的应用为例，演示jad命令。</p>\n<ul>\n<li>Github: <a href=\"https://github.com/alibaba/arthas\">https://github.com/alibaba/arthas</a></li>\n<li>文档: <a href=\"https://arthas.aliyun.com/doc/\">https://arthas.aliyun.com/doc/</a></li>\n</ul>\n<h2 id=\"启动arthas-demo\"><a href=\"#启动arthas-demo\" class=\"headerlink\" title=\"启动arthas demo\"></a>启动arthas demo</h2><p>下载<code>arthas-demo.jar</code>，再用<code>java -jar</code>命令启动：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wget https://arthas.aliyun.com/arthas-demo.jar;java -jar arthas-demo.jar</span><br></pre></td></tr></table></figure>\n\n<p><code>arthas-demo</code>是一个很简单的程序，它随机生成整数，再执行因式分解，把结果打印出来。如果生成的随机数是负数，则会打印提示信息。</p>\n<h2 id=\"启动arthas-boot\"><a href=\"#启动arthas-boot\" class=\"headerlink\" title=\"启动arthas-boot\"></a>启动arthas-boot</h2><p>在新的<code>Terminal 2</code>里，下载<code>arthas-boot.jar</code>，再用<code>java -jar</code>命令启动：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wget https://arthas.aliyun.com/arthas-boot.jar;java -jar arthas-boot.jar</span><br></pre></td></tr></table></figure>\n\n<p><code>arthas-boot</code>是<code>Arthas</code>的启动程序，它启动后，会列出所有的Java进程，用户可以选择需要诊断的目标进程。</p>\n<p>选择第一个进程，输入 <code>1</code> ，再<code>Enter/回车</code>：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1</span><br></pre></td></tr></table></figure>\n\n<p>Attach成功之后，会打印Arthas LOGO。输入 <code>help</code> 可以获取到更多的帮助信息。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">help</span></span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/jlynet.github.io/2021/08/07/Java%E8%AF%8A%E6%96%AD%E5%B7%A5%E5%85%B7Arthas%E9%AB%98%E7%BA%A7%E5%91%BD%E4%BB%A4%E6%95%99%E7%A8%8B/Arthasjad%E5%91%BD%E4%BB%A4/O1CN01HzatXZ1RgccrlT90M_!!6000000002141-2-tps-529-244.png\" alt=\"Arthas Boot\"></p>\n<h2 id=\"jad命令\"><a href=\"#jad命令\" class=\"headerlink\" title=\"jad命令\"></a>jad命令</h2><blockquote>\n<p>反编译指定已加载类的源码</p>\n</blockquote>\n<p><code>jad</code> 命令将 JVM 中实际运行的 class 的 byte code 反编译成 java 代码，便于你理解业务逻辑；</p>\n<ul>\n<li>在 Arthas Console 上，反编译出来的源码是带语法高亮的，阅读更方便</li>\n<li>当然，反编译出来的 java 代码可能会存在语法错误，但不影响你进行阅读理解</li>\n</ul>\n<h4 id=\"参数说明\"><a href=\"#参数说明\" class=\"headerlink\" title=\"参数说明\"></a>参数说明</h4><table>\n<thead>\n<tr>\n<th>参数名称</th>\n<th>参数说明</th>\n</tr>\n</thead>\n<tbody><tr>\n<td><em>class-pattern</em></td>\n<td>类名表达式匹配</td>\n</tr>\n<tr>\n<td><code>[c:]</code></td>\n<td>类所属 ClassLoader 的 hashcode</td>\n</tr>\n<tr>\n<td><code>[classLoaderClass:]</code></td>\n<td>指定执行表达式的 ClassLoader 的 class name</td>\n</tr>\n<tr>\n<td>[E]</td>\n<td>开启正则表达式匹配，默认为通配符匹配</td>\n</tr>\n</tbody></table>\n<h4 id=\"使用参考\"><a href=\"#使用参考\" class=\"headerlink\" title=\"使用参考\"></a>使用参考</h4><h5 id=\"编译java-lang-String\"><a href=\"#编译java-lang-String\" class=\"headerlink\" title=\"编译java.lang.String\"></a>编译<code>java.lang.String</code></h5><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">jad java.lang.String</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ jad java.lang.String</span><br><span class=\"line\"></span><br><span class=\"line\">ClassLoader:</span><br><span class=\"line\"></span><br><span class=\"line\">Location:</span><br><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">* Decompiled with CFR 0_132.</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\"><span class=\"keyword\">package</span> java.lang;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.ObjectStreamField;</span><br><span class=\"line\">...</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">final</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">String</span></span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">implements</span> <span class=\"title\">Serializable</span>,</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"title\">Comparable</span>&lt;<span class=\"title\">String</span>&gt;,</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"title\">CharSequence</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> <span class=\"keyword\">char</span>[] value;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">int</span> hash;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">long</span> serialVersionUID = -<span class=\"number\">6849794470754667710L</span>;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> ObjectStreamField[] serialPersistentFields = <span class=\"keyword\">new</span> ObjectStreamField[<span class=\"number\">0</span>];</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> Comparator&lt;String&gt; CASE_INSENSITIVE_ORDER = <span class=\"keyword\">new</span> CaseInsensitiveComparator();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">String</span><span class=\"params\">(<span class=\"keyword\">byte</span>[] arrby, <span class=\"keyword\">int</span> n, <span class=\"keyword\">int</span> n2)</span> </span>&#123;</span><br><span class=\"line\">        String.checkBounds(arrby, n, n2);</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.value = StringCoding.decode(arrby, n, n2);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">...</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"反编译时只显示源代码\"><a href=\"#反编译时只显示源代码\" class=\"headerlink\" title=\"反编译时只显示源代码\"></a>反编译时只显示源代码</h5><p>默认情况下，反编译结果里会带有<code>ClassLoader</code>信息，通过<code>--source-only</code>选项，可以只打印源代码。方便和<code>mc</code>/<code>redefine</code>命令结合使用。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">jad --source-only java.lang.String</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ jad --source-only java.lang.String</span><br><span class=\"line\">...</span><br><span class=\"line\">        @Override</span><br><span class=\"line\">        public int compare(String string, String string2) &#123;</span><br><span class=\"line\">            int n = string.length();</span><br><span class=\"line\">            int n2 = string2.length();</span><br><span class=\"line\">            int n3 = Math.min(n, n2);</span><br><span class=\"line\">            for (int i = 0; i &lt; n3; ++i) &#123;</span><br><span class=\"line\">                char c;</span><br><span class=\"line\">                char c2 = string.charAt(i);</span><br><span class=\"line\">                if (c2 == (c = string2.charAt(i)) || (c2 = Character.toUpperCase(c2)) == (c = Character.toUpperCase(c)) || (c2 = Character.toLowerCase(c2)) == (c = Character.toLowerCase(c))) continue;</span><br><span class=\"line\">                return c2 - c;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            return n - n2;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        private Object readResolve() &#123;</span><br><span class=\"line\">            return String.CASE_INSENSITIVE_ORDER;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"反编译指定的函数\"><a href=\"#反编译指定的函数\" class=\"headerlink\" title=\"反编译指定的函数\"></a>反编译指定的函数</h5><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">jad java.lang.String toString</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ jad java.lang.String toString</span><br><span class=\"line\"></span><br><span class=\"line\">ClassLoader:</span><br><span class=\"line\"></span><br><span class=\"line\">Location:</span><br><span class=\"line\"><span class=\"meta\">@Override</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">toString</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">Affect(row-cnt:<span class=\"number\">2</span>) cost in <span class=\"number\">407</span> ms.</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"反编译时指定ClassLoader\"><a href=\"#反编译时指定ClassLoader\" class=\"headerlink\" title=\"反编译时指定ClassLoader\"></a>反编译时指定ClassLoader</h5><blockquote>\n<p>当有多个 <code>ClassLoader</code> 都加载了这个类时，<code>jad</code> 命令会输出对应 <code>ClassLoader</code> 实例的 <code>hashcode</code>，然后你只需要重新执行 <code>jad</code> 命令，并使用参数 <code>-c &lt;hashcode&gt;</code> 就可以反编译指定 ClassLoader 加载的那个类了；</p>\n</blockquote>\n<p>例如：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ jad org.apache.log4j.Logger</span><br><span class=\"line\"></span><br><span class=\"line\">Found more than one <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">for</span>: <span class=\"title\">org</span>.<span class=\"title\">apache</span>.<span class=\"title\">log4j</span>.<span class=\"title\">Logger</span>, <span class=\"title\">Please</span> <span class=\"title\">use</span> <span class=\"title\">jad</span> -<span class=\"title\">c</span> <span class=\"title\">hashcode</span> <span class=\"title\">org</span>.<span class=\"title\">apache</span>.<span class=\"title\">log4j</span>.<span class=\"title\">Logger</span></span></span><br><span class=\"line\"><span class=\"class\"><span class=\"title\">HASHCODE</span>  <span class=\"title\">CLASSLOADER</span></span></span><br><span class=\"line\"><span class=\"class\">69<span class=\"title\">dcaba4</span>  +-<span class=\"title\">monitor</span>&#x27;<span class=\"title\">s</span> <span class=\"title\">ModuleClassLoader</span></span></span><br><span class=\"line\"><span class=\"class\">6<span class=\"title\">e51ad67</span>  +-<span class=\"title\">java</span>.<span class=\"title\">net</span>.<span class=\"title\">URLClassLoader</span>@6<span class=\"title\">e51ad67</span></span></span><br><span class=\"line\"><span class=\"class\">            +-<span class=\"title\">sun</span>.<span class=\"title\">misc</span>.<span class=\"title\">Launcher</span>$<span class=\"title\">AppClassLoader</span>@6951<span class=\"title\">a712</span></span></span><br><span class=\"line\"><span class=\"class\">            +-<span class=\"title\">sun</span>.<span class=\"title\">misc</span>.<span class=\"title\">Launcher</span>$<span class=\"title\">ExtClassLoader</span>@6<span class=\"title\">fafc4c2</span></span></span><br><span class=\"line\"><span class=\"class\">2<span class=\"title\">bdd9114</span>  +-<span class=\"title\">pandora</span>-<span class=\"title\">qos</span>-<span class=\"title\">service</span>&#x27;<span class=\"title\">s</span> <span class=\"title\">ModuleClassLoader</span></span></span><br><span class=\"line\"><span class=\"class\">4<span class=\"title\">c0df5f8</span>  +-<span class=\"title\">pandora</span>-<span class=\"title\">framework</span>&#x27;<span class=\"title\">s</span> <span class=\"title\">ModuleClassLoader</span></span></span><br><span class=\"line\"><span class=\"class\"></span></span><br><span class=\"line\"><span class=\"class\"><span class=\"title\">Affect</span>(<span class=\"title\">row</span>-<span class=\"title\">cnt</span>:0) <span class=\"title\">cost</span> <span class=\"title\">in</span> 38 <span class=\"title\">ms</span>.</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ jad org.apache.log4j.Logger -c 69dcaba4</span><br><span class=\"line\"></span><br><span class=\"line\">ClassLoader:</span><br><span class=\"line\">+-monitor<span class=\"string\">&#x27;s ModuleClassLoader</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">Location:</span></span><br><span class=\"line\"><span class=\"string\">/Users/admin/app/log4j-1.2.14.jar</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">package org.apache.log4j;</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">import org.apache.log4j.spi.*;</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">public class Logger extends Category</span></span><br><span class=\"line\"><span class=\"string\">&#123;</span></span><br><span class=\"line\"><span class=\"string\">    private static final String FQCN;</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">    protected Logger(String name)</span></span><br><span class=\"line\"><span class=\"string\">    &#123;</span></span><br><span class=\"line\"><span class=\"string\">        super(name);</span></span><br><span class=\"line\"><span class=\"string\">    &#125;</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">...</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">Affect(row-cnt:1) cost in 190 ms.</span></span><br></pre></td></tr></table></figure>\n\n<p>对于只有唯一实例的ClassLoader还可以通过<code>--classLoaderClass</code>指定class name，使用起来更加方便：</p>\n<p><code>--classLoaderClass</code> 的值是ClassLoader的类名，只有匹配到唯一的ClassLoader实例时才能工作，目的是方便输入通用命令，而<code>-c &lt;hashcode&gt;</code>是动态变化的。</p>\n<h2 id=\"更多信息\"><a href=\"#更多信息\" class=\"headerlink\" title=\"更多信息\"></a>更多信息</h2><p>在“heapdump”中，我们演示了了Arthas的heapdump命令。如果有更多的技巧或者使用疑问，欢迎在Issue里提出。</p>\n<ul>\n<li>Issues: <a href=\"https://github.com/alibaba/arthas/issues\">https://github.com/alibaba/arthas/issues</a></li>\n<li>文档： <a href=\"https://arthas.aliyun.com/doc\">https://arthas.aliyun.com/doc</a></li>\n</ul>\n<p>如果您在使用Arthas，请让我们知道。您的使用对我们非常重要：<a href=\"https://github.com/alibaba/arthas/issues/111\">查看</a></p>\n<p>文章拷贝来源：<a href=\"https://start.aliyun.com/course?spm=a2ck6.17690074.0.0.28bc2e7dHTphXs&amp;id=PaiFAkJM\">https://start.aliyun.com/course?spm=a2ck6.17690074.0.0.28bc2e7dHTphXs&amp;id=PaiFAkJM</a></p>\n"},{"title":"Arthas jvm命令","date":"2021-08-07T01:51:33.000Z","_content":"\n<!-- toc -->\n\n![Arthas](arthas.png)\n\n`Arthas` 是Alibaba开源的Java诊断工具，深受开发者喜爱。在线排查问题，无需重启；动态跟踪Java代码；实时监控JVM状态。\n\n`Arthas` 支持JDK 6+，支持Linux/Mac/Windows，采用命令行交互模式，同时提供丰富的 `Tab` 自动补全功能，进一步方便进行问题的定位和诊断。\n\n当你遇到以下类似问题而束手无策时，Arthas可以帮助你解决：\n\n- 这个类从哪个 jar 包加载的？为什么会报各种类相关的 Exception？\n- 我改的代码为什么没有执行到？难道是我没 commit？分支搞错了？\n- 遇到问题无法在线上 debug，难道只能通过加日志再重新发布吗？\n- 线上遇到某个用户的数据处理有问题，但线上同样无法 debug，线下无法重现！\n- 是否有一个全局视角来查看系统的运行状况？\n- 有什么办法可以监控到JVM的实时运行状态？\n- 怎么快速定位应用的热点，生成火焰图？\n\n本教程会以一个简单的应用为例，演示jvm命令。\n\n- Github: https://github.com/alibaba/arthas\n- 文档: https://arthas.aliyun.com/doc/\n\n## Arthas demo\n\n下载`arthas-demo.jar`，再用`java -jar`命令启动：\n\n```bash\nwget https://arthas.aliyun.com/arthas-demo.jar;java -jar arthas-demo.jar\n```\n\n`arthas-demo`是一个很简单的程序，它随机生成整数，再执行因式分解，把结果打印出来。如果生成的随机数是负数，则会打印提示信息。\n\n## 启动arthas-boot\n\n在新的`Terminal 2`里，下载`arthas-boot.jar`，再用`java -jar`命令启动：\n\n```bash\nwget https://arthas.aliyun.com/arthas-boot.jar;java -jar arthas-boot.jar\n```\n\n`arthas-boot`是`Arthas`的启动程序，它启动后，会列出所有的Java进程，用户可以选择需要诊断的目标进程。\n\n选择第一个进程，输入 `1` ，再`Enter/回车`：\n\n```bash\n1\n```\n\nAttach成功之后，会打印Arthas LOGO。输入 `help` 可以获取到更多的帮助信息。\n\n```bash\nhelp\n```\n\n![Arthas Boot](O1CN01HzatXZ1RgccrlT90M_!!6000000002141-2-tps-529-244.png)\n\n## jvm命令\n\n`jvm` 命令可以查看当前JVM信息。\n\n```bash\njvm\n```\n\n### 查找Java应用的classpath\n\n```bash\njvm | grep PATH\n```\n\n```console\n[arthas@41064]$ jvm | grep PATH\n CLASS-PATH                             packaging/target/arthas-bin/arthas-demo.jar\n BOOT-CLASS-PATH                        /Library/Java/JavaVirtualMachines/jdk1.8.0_151.jdk/Contents/Home/jre/lib/resources.jar:/Librar\n LIBRARY-PATH                           /Users/gongdewei/Library/Java/Extensions:/Library/Java/Extensions:/Network/Library/Java/Extens\n```\n\n## jvm使用参考\n\n```console\n$ jvm\nRUNTIME\n--------------------------------------------------------------------------------------------------------------\n MACHINE-NAME                   37@ff267334bb65\n JVM-START-TIME                 2020-07-23 07:50:36\n MANAGEMENT-SPEC-VERSION        1.2\n SPEC-NAME                      Java Virtual Machine Specification\n SPEC-VENDOR                    Oracle Corporation\n SPEC-VERSION                   1.8\n VM-NAME                        Java HotSpot(TM) 64-Bit Server VM\n VM-VENDOR                      Oracle Corporation\n VM-VERSION                     25.201-b09\n INPUT-ARGUMENTS                []\n CLASS-PATH                     demo-arthas-spring-boot.jar\n BOOT-CLASS-PATH                /usr/lib/jvm/java-8-oracle/jre/lib/resources.jar:/usr/lib/jvm/java-8-oracle/j\n                                re/lib/rt.jar:/usr/lib/jvm/java-8-oracle/jre/lib/sunrsasign.jar:/usr/lib/jvm/\n                                java-8-oracle/jre/lib/jsse.jar:/usr/lib/jvm/java-8-oracle/jre/lib/jce.jar:/us\n                                r/lib/jvm/java-8-oracle/jre/lib/charsets.jar:/usr/lib/jvm/java-8-oracle/jre/l\n                                ib/jfr.jar:/usr/lib/jvm/java-8-oracle/jre/classes\n LIBRARY-PATH                   /usr/java/packages/lib/amd64:/usr/lib64:/lib64:/lib:/usr/lib\n\n--------------------------------------------------------------------------------------------------------------\n CLASS-LOADING\n--------------------------------------------------------------------------------------------------------------\n LOADED-CLASS-COUNT             7529\n TOTAL-LOADED-CLASS-COUNT       7529\n UNLOADED-CLASS-COUNT           0\n IS-VERBOSE                     false\n\n--------------------------------------------------------------------------------------------------------------\n COMPILATION\n--------------------------------------------------------------------------------------------------------------\n NAME                           HotSpot 64-Bit Tiered Compilers\n TOTAL-COMPILE-TIME             14921(ms)\n\n--------------------------------------------------------------------------------------------------------------\n GARBAGE-COLLECTORS\n--------------------------------------------------------------------------------------------------------------\n PS Scavenge                            name : PS Scavenge                                                                             \n [count/time (ms)]                      collectionCount : 7                                                                            \n                                        collectionTime : 68                                                                            \n\n PS MarkSweep                           name : PS MarkSweep                                                                            \n [count/time (ms)]                      collectionCount : 1                                                                            \n                                        collectionTime : 47 \n\n--------------------------------------------------------------------------------------------------------------\n MEMORY-MANAGERS\n--------------------------------------------------------------------------------------------------------------\n CodeCacheManager               Code Cache\n\n Metaspace Manager              Metaspace\n                                Compressed Class Space\n\n Copy                           Eden Space\n                                Survivor Space\n\n MarkSweepCompact               Eden Space\n                                Survivor Space\n                                Tenured Gen\n--------------------------------------------------------------------------------------------------------------\n MEMORY\n--------------------------------------------------------------------------------------------------------------\n HEAP-MEMORY-USAGE                      init : 268435456(256.0 MiB)                                                                    \n [memory in bytes]                      used : 18039504(17.2 MiB)                                                                      \n                                        committed : 181403648(173.0 MiB)                                                               \n                                        max : 3817865216(3.6 GiB)                                                                      \n\n NO-HEAP-MEMORY-USAGE                   init : 2555904(2.4 MiB)                                                                        \n [memory in bytes]                      used : 33926216(32.4 MiB)                                                                      \n                                        committed : 35176448(33.5 MiB)                                                                 \n                                        max : -1(-1 B)  \n\n--------------------------------------------------------------------------------------------------------------\n OPERATING-SYSTEM\n--------------------------------------------------------------------------------------------------------------\n OS                             Linux\n ARCH                           amd64\n PROCESSORS-COUNT               3\n LOAD-AVERAGE                   29.53\n VERSION                        4.15.0-52-generic\n\n--------------------------------------------------------------------------------------------------------------\n THREAD\n--------------------------------------------------------------------------------------------------------------\n COUNT                          30\n DAEMON-COUNT                   24\n PEAK-COUNT                     31\n STARTED-COUNT                  36\n DEADLOCK-COUNT                 0\n\n--------------------------------------------------------------------------------------------------------------\n FILE-DESCRIPTOR\n--------------------------------------------------------------------------------------------------------------\n MAX-FILE-DESCRIPTOR-COUNT      1048576\n OPEN-FILE-DESCRIPTOR-COUNT     100\nAffect(row-cnt:0) cost in 88 ms.\n```\n\n## jvm使用参考\n\n#### THREAD相关\n\n- `COUNT`: JVM当前活跃的线程数\n- `DAEMON-COUNT`: JVM当前活跃的守护线程数\n- `PEAK-COUNT`: 从JVM启动开始曾经活着的最大线程数\n- `STARTED-COUNT`: 从JVM启动开始总共启动过的线程次数\n- `DEADLOCK-COUNT`: JVM当前死锁的线程数\n\n#### 文件描述符相关\n\n- `MAX-FILE-DESCRIPTOR-COUNT`：JVM进程最大可以打开的文件描述符数\n- `OPEN-FILE-DESCRIPTOR-COUNT`：JVM当前打开的文件描述符数\n\n## 更多信息\n\n在“jvm”中，我们演示了了Arthas的jvm命令。如果有更多的技巧或者使用疑问，欢迎在Issue里提出。\n\n- Issues: https://github.com/alibaba/arthas/issues\n- 文档： https://arthas.aliyun.com/doc\n\n如果您在使用Arthas，请让我们知道。您的使用对我们非常重要：[查看](https://github.com/alibaba/arthas/issues/111)\n\n文章拷贝来源：https://start.aliyun.com/course?spm=a2ck6.17690074.0.0.28bc2e7dHTphXs&id=PaiFAkJM","source":"_posts/Java诊断工具Arthas高级命令教程/Arthasjvm命令.md","raw":"---\ntitle: Arthas jvm命令\ndate: 2021-08-07 09:51:33\ntags: ['Java 诊断工具 Arthas 高级命令教程']\n---\n\n<!-- toc -->\n\n![Arthas](arthas.png)\n\n`Arthas` 是Alibaba开源的Java诊断工具，深受开发者喜爱。在线排查问题，无需重启；动态跟踪Java代码；实时监控JVM状态。\n\n`Arthas` 支持JDK 6+，支持Linux/Mac/Windows，采用命令行交互模式，同时提供丰富的 `Tab` 自动补全功能，进一步方便进行问题的定位和诊断。\n\n当你遇到以下类似问题而束手无策时，Arthas可以帮助你解决：\n\n- 这个类从哪个 jar 包加载的？为什么会报各种类相关的 Exception？\n- 我改的代码为什么没有执行到？难道是我没 commit？分支搞错了？\n- 遇到问题无法在线上 debug，难道只能通过加日志再重新发布吗？\n- 线上遇到某个用户的数据处理有问题，但线上同样无法 debug，线下无法重现！\n- 是否有一个全局视角来查看系统的运行状况？\n- 有什么办法可以监控到JVM的实时运行状态？\n- 怎么快速定位应用的热点，生成火焰图？\n\n本教程会以一个简单的应用为例，演示jvm命令。\n\n- Github: https://github.com/alibaba/arthas\n- 文档: https://arthas.aliyun.com/doc/\n\n## Arthas demo\n\n下载`arthas-demo.jar`，再用`java -jar`命令启动：\n\n```bash\nwget https://arthas.aliyun.com/arthas-demo.jar;java -jar arthas-demo.jar\n```\n\n`arthas-demo`是一个很简单的程序，它随机生成整数，再执行因式分解，把结果打印出来。如果生成的随机数是负数，则会打印提示信息。\n\n## 启动arthas-boot\n\n在新的`Terminal 2`里，下载`arthas-boot.jar`，再用`java -jar`命令启动：\n\n```bash\nwget https://arthas.aliyun.com/arthas-boot.jar;java -jar arthas-boot.jar\n```\n\n`arthas-boot`是`Arthas`的启动程序，它启动后，会列出所有的Java进程，用户可以选择需要诊断的目标进程。\n\n选择第一个进程，输入 `1` ，再`Enter/回车`：\n\n```bash\n1\n```\n\nAttach成功之后，会打印Arthas LOGO。输入 `help` 可以获取到更多的帮助信息。\n\n```bash\nhelp\n```\n\n![Arthas Boot](O1CN01HzatXZ1RgccrlT90M_!!6000000002141-2-tps-529-244.png)\n\n## jvm命令\n\n`jvm` 命令可以查看当前JVM信息。\n\n```bash\njvm\n```\n\n### 查找Java应用的classpath\n\n```bash\njvm | grep PATH\n```\n\n```console\n[arthas@41064]$ jvm | grep PATH\n CLASS-PATH                             packaging/target/arthas-bin/arthas-demo.jar\n BOOT-CLASS-PATH                        /Library/Java/JavaVirtualMachines/jdk1.8.0_151.jdk/Contents/Home/jre/lib/resources.jar:/Librar\n LIBRARY-PATH                           /Users/gongdewei/Library/Java/Extensions:/Library/Java/Extensions:/Network/Library/Java/Extens\n```\n\n## jvm使用参考\n\n```console\n$ jvm\nRUNTIME\n--------------------------------------------------------------------------------------------------------------\n MACHINE-NAME                   37@ff267334bb65\n JVM-START-TIME                 2020-07-23 07:50:36\n MANAGEMENT-SPEC-VERSION        1.2\n SPEC-NAME                      Java Virtual Machine Specification\n SPEC-VENDOR                    Oracle Corporation\n SPEC-VERSION                   1.8\n VM-NAME                        Java HotSpot(TM) 64-Bit Server VM\n VM-VENDOR                      Oracle Corporation\n VM-VERSION                     25.201-b09\n INPUT-ARGUMENTS                []\n CLASS-PATH                     demo-arthas-spring-boot.jar\n BOOT-CLASS-PATH                /usr/lib/jvm/java-8-oracle/jre/lib/resources.jar:/usr/lib/jvm/java-8-oracle/j\n                                re/lib/rt.jar:/usr/lib/jvm/java-8-oracle/jre/lib/sunrsasign.jar:/usr/lib/jvm/\n                                java-8-oracle/jre/lib/jsse.jar:/usr/lib/jvm/java-8-oracle/jre/lib/jce.jar:/us\n                                r/lib/jvm/java-8-oracle/jre/lib/charsets.jar:/usr/lib/jvm/java-8-oracle/jre/l\n                                ib/jfr.jar:/usr/lib/jvm/java-8-oracle/jre/classes\n LIBRARY-PATH                   /usr/java/packages/lib/amd64:/usr/lib64:/lib64:/lib:/usr/lib\n\n--------------------------------------------------------------------------------------------------------------\n CLASS-LOADING\n--------------------------------------------------------------------------------------------------------------\n LOADED-CLASS-COUNT             7529\n TOTAL-LOADED-CLASS-COUNT       7529\n UNLOADED-CLASS-COUNT           0\n IS-VERBOSE                     false\n\n--------------------------------------------------------------------------------------------------------------\n COMPILATION\n--------------------------------------------------------------------------------------------------------------\n NAME                           HotSpot 64-Bit Tiered Compilers\n TOTAL-COMPILE-TIME             14921(ms)\n\n--------------------------------------------------------------------------------------------------------------\n GARBAGE-COLLECTORS\n--------------------------------------------------------------------------------------------------------------\n PS Scavenge                            name : PS Scavenge                                                                             \n [count/time (ms)]                      collectionCount : 7                                                                            \n                                        collectionTime : 68                                                                            \n\n PS MarkSweep                           name : PS MarkSweep                                                                            \n [count/time (ms)]                      collectionCount : 1                                                                            \n                                        collectionTime : 47 \n\n--------------------------------------------------------------------------------------------------------------\n MEMORY-MANAGERS\n--------------------------------------------------------------------------------------------------------------\n CodeCacheManager               Code Cache\n\n Metaspace Manager              Metaspace\n                                Compressed Class Space\n\n Copy                           Eden Space\n                                Survivor Space\n\n MarkSweepCompact               Eden Space\n                                Survivor Space\n                                Tenured Gen\n--------------------------------------------------------------------------------------------------------------\n MEMORY\n--------------------------------------------------------------------------------------------------------------\n HEAP-MEMORY-USAGE                      init : 268435456(256.0 MiB)                                                                    \n [memory in bytes]                      used : 18039504(17.2 MiB)                                                                      \n                                        committed : 181403648(173.0 MiB)                                                               \n                                        max : 3817865216(3.6 GiB)                                                                      \n\n NO-HEAP-MEMORY-USAGE                   init : 2555904(2.4 MiB)                                                                        \n [memory in bytes]                      used : 33926216(32.4 MiB)                                                                      \n                                        committed : 35176448(33.5 MiB)                                                                 \n                                        max : -1(-1 B)  \n\n--------------------------------------------------------------------------------------------------------------\n OPERATING-SYSTEM\n--------------------------------------------------------------------------------------------------------------\n OS                             Linux\n ARCH                           amd64\n PROCESSORS-COUNT               3\n LOAD-AVERAGE                   29.53\n VERSION                        4.15.0-52-generic\n\n--------------------------------------------------------------------------------------------------------------\n THREAD\n--------------------------------------------------------------------------------------------------------------\n COUNT                          30\n DAEMON-COUNT                   24\n PEAK-COUNT                     31\n STARTED-COUNT                  36\n DEADLOCK-COUNT                 0\n\n--------------------------------------------------------------------------------------------------------------\n FILE-DESCRIPTOR\n--------------------------------------------------------------------------------------------------------------\n MAX-FILE-DESCRIPTOR-COUNT      1048576\n OPEN-FILE-DESCRIPTOR-COUNT     100\nAffect(row-cnt:0) cost in 88 ms.\n```\n\n## jvm使用参考\n\n#### THREAD相关\n\n- `COUNT`: JVM当前活跃的线程数\n- `DAEMON-COUNT`: JVM当前活跃的守护线程数\n- `PEAK-COUNT`: 从JVM启动开始曾经活着的最大线程数\n- `STARTED-COUNT`: 从JVM启动开始总共启动过的线程次数\n- `DEADLOCK-COUNT`: JVM当前死锁的线程数\n\n#### 文件描述符相关\n\n- `MAX-FILE-DESCRIPTOR-COUNT`：JVM进程最大可以打开的文件描述符数\n- `OPEN-FILE-DESCRIPTOR-COUNT`：JVM当前打开的文件描述符数\n\n## 更多信息\n\n在“jvm”中，我们演示了了Arthas的jvm命令。如果有更多的技巧或者使用疑问，欢迎在Issue里提出。\n\n- Issues: https://github.com/alibaba/arthas/issues\n- 文档： https://arthas.aliyun.com/doc\n\n如果您在使用Arthas，请让我们知道。您的使用对我们非常重要：[查看](https://github.com/alibaba/arthas/issues/111)\n\n文章拷贝来源：https://start.aliyun.com/course?spm=a2ck6.17690074.0.0.28bc2e7dHTphXs&id=PaiFAkJM","slug":"Java诊断工具Arthas高级命令教程/Arthasjvm命令","published":1,"updated":"2021-08-07T05:34:37.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cks1cgr6h001zfw5i2p7z0v8m","content":"<!-- toc -->\n\n<ul>\n<li><a href=\"#arthas-demo\">Arthas demo</a></li>\n<li><a href=\"#%E5%90%AF%E5%8A%A8arthas-boot\">启动arthas-boot</a></li>\n<li><a href=\"#jvm%E5%91%BD%E4%BB%A4\">jvm命令</a><ul>\n<li><a href=\"#%E6%9F%A5%E6%89%BEjava%E5%BA%94%E7%94%A8%E7%9A%84classpath\">查找Java应用的classpath</a></li>\n</ul>\n</li>\n<li><a href=\"#jvm%E4%BD%BF%E7%94%A8%E5%8F%82%E8%80%83\">jvm使用参考</a></li>\n<li><a href=\"#jvm%E4%BD%BF%E7%94%A8%E5%8F%82%E8%80%83-1\">jvm使用参考</a><ul>\n<li><a href=\"#thread%E7%9B%B8%E5%85%B3\">THREAD相关</a></li>\n<li><a href=\"#%E6%96%87%E4%BB%B6%E6%8F%8F%E8%BF%B0%E7%AC%A6%E7%9B%B8%E5%85%B3\">文件描述符相关</a></li>\n</ul>\n</li>\n<li><a href=\"#%E6%9B%B4%E5%A4%9A%E4%BF%A1%E6%81%AF\">更多信息</a></li>\n</ul>\n<!-- tocstop -->\n\n<p><img src=\"/jlynet.github.io/2021/08/07/Java%E8%AF%8A%E6%96%AD%E5%B7%A5%E5%85%B7Arthas%E9%AB%98%E7%BA%A7%E5%91%BD%E4%BB%A4%E6%95%99%E7%A8%8B/Arthasjvm%E5%91%BD%E4%BB%A4/arthas.png\" alt=\"Arthas\"></p>\n<p><code>Arthas</code> 是Alibaba开源的Java诊断工具，深受开发者喜爱。在线排查问题，无需重启；动态跟踪Java代码；实时监控JVM状态。</p>\n<p><code>Arthas</code> 支持JDK 6+，支持Linux/Mac/Windows，采用命令行交互模式，同时提供丰富的 <code>Tab</code> 自动补全功能，进一步方便进行问题的定位和诊断。</p>\n<p>当你遇到以下类似问题而束手无策时，Arthas可以帮助你解决：</p>\n<ul>\n<li>这个类从哪个 jar 包加载的？为什么会报各种类相关的 Exception？</li>\n<li>我改的代码为什么没有执行到？难道是我没 commit？分支搞错了？</li>\n<li>遇到问题无法在线上 debug，难道只能通过加日志再重新发布吗？</li>\n<li>线上遇到某个用户的数据处理有问题，但线上同样无法 debug，线下无法重现！</li>\n<li>是否有一个全局视角来查看系统的运行状况？</li>\n<li>有什么办法可以监控到JVM的实时运行状态？</li>\n<li>怎么快速定位应用的热点，生成火焰图？</li>\n</ul>\n<p>本教程会以一个简单的应用为例，演示jvm命令。</p>\n<ul>\n<li>Github: <a href=\"https://github.com/alibaba/arthas\">https://github.com/alibaba/arthas</a></li>\n<li>文档: <a href=\"https://arthas.aliyun.com/doc/\">https://arthas.aliyun.com/doc/</a></li>\n</ul>\n<h2><span id=\"arthas-demo\">Arthas demo</span></h2><p>下载<code>arthas-demo.jar</code>，再用<code>java -jar</code>命令启动：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wget https://arthas.aliyun.com/arthas-demo.jar;java -jar arthas-demo.jar</span><br></pre></td></tr></table></figure>\n\n<p><code>arthas-demo</code>是一个很简单的程序，它随机生成整数，再执行因式分解，把结果打印出来。如果生成的随机数是负数，则会打印提示信息。</p>\n<h2><span id=\"启动arthas-boot\">启动arthas-boot</span></h2><p>在新的<code>Terminal 2</code>里，下载<code>arthas-boot.jar</code>，再用<code>java -jar</code>命令启动：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wget https://arthas.aliyun.com/arthas-boot.jar;java -jar arthas-boot.jar</span><br></pre></td></tr></table></figure>\n\n<p><code>arthas-boot</code>是<code>Arthas</code>的启动程序，它启动后，会列出所有的Java进程，用户可以选择需要诊断的目标进程。</p>\n<p>选择第一个进程，输入 <code>1</code> ，再<code>Enter/回车</code>：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1</span><br></pre></td></tr></table></figure>\n\n<p>Attach成功之后，会打印Arthas LOGO。输入 <code>help</code> 可以获取到更多的帮助信息。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">help</span></span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/jlynet.github.io/2021/08/07/Java%E8%AF%8A%E6%96%AD%E5%B7%A5%E5%85%B7Arthas%E9%AB%98%E7%BA%A7%E5%91%BD%E4%BB%A4%E6%95%99%E7%A8%8B/Arthasjvm%E5%91%BD%E4%BB%A4/O1CN01HzatXZ1RgccrlT90M_!!6000000002141-2-tps-529-244.png\" alt=\"Arthas Boot\"></p>\n<h2><span id=\"jvm命令\">jvm命令</span></h2><p><code>jvm</code> 命令可以查看当前JVM信息。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">jvm</span><br></pre></td></tr></table></figure>\n\n<h3><span id=\"查找java应用的classpath\">查找Java应用的classpath</span></h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">jvm | grep PATH</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight console\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">[arthas@41064]$</span><span class=\"bash\"> jvm | grep PATH</span></span><br><span class=\"line\"> CLASS-PATH                             packaging/target/arthas-bin/arthas-demo.jar</span><br><span class=\"line\"> BOOT-CLASS-PATH                        /Library/Java/JavaVirtualMachines/jdk1.8.0_151.jdk/Contents/Home/jre/lib/resources.jar:/Librar</span><br><span class=\"line\"> LIBRARY-PATH                           /Users/gongdewei/Library/Java/Extensions:/Library/Java/Extensions:/Network/Library/Java/Extens</span><br></pre></td></tr></table></figure>\n\n<h2><span id=\"jvm使用参考\">jvm使用参考</span></h2><figure class=\"highlight console\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> jvm</span></span><br><span class=\"line\">RUNTIME</span><br><span class=\"line\">--------------------------------------------------------------------------------------------------------------</span><br><span class=\"line\"> MACHINE-NAME                   37@ff267334bb65</span><br><span class=\"line\"> JVM-START-TIME                 2020-07-23 07:50:36</span><br><span class=\"line\"> MANAGEMENT-SPEC-VERSION        1.2</span><br><span class=\"line\"> SPEC-NAME                      Java Virtual Machine Specification</span><br><span class=\"line\"> SPEC-VENDOR                    Oracle Corporation</span><br><span class=\"line\"> SPEC-VERSION                   1.8</span><br><span class=\"line\"> VM-NAME                        Java HotSpot(TM) 64-Bit Server VM</span><br><span class=\"line\"> VM-VENDOR                      Oracle Corporation</span><br><span class=\"line\"> VM-VERSION                     25.201-b09</span><br><span class=\"line\"> INPUT-ARGUMENTS                []</span><br><span class=\"line\"> CLASS-PATH                     demo-arthas-spring-boot.jar</span><br><span class=\"line\"> BOOT-CLASS-PATH                /usr/lib/jvm/java-8-oracle/jre/lib/resources.jar:/usr/lib/jvm/java-8-oracle/j</span><br><span class=\"line\">                                re/lib/rt.jar:/usr/lib/jvm/java-8-oracle/jre/lib/sunrsasign.jar:/usr/lib/jvm/</span><br><span class=\"line\">                                java-8-oracle/jre/lib/jsse.jar:/usr/lib/jvm/java-8-oracle/jre/lib/jce.jar:/us</span><br><span class=\"line\">                                r/lib/jvm/java-8-oracle/jre/lib/charsets.jar:/usr/lib/jvm/java-8-oracle/jre/l</span><br><span class=\"line\">                                ib/jfr.jar:/usr/lib/jvm/java-8-oracle/jre/classes</span><br><span class=\"line\"> LIBRARY-PATH                   /usr/java/packages/lib/amd64:/usr/lib64:/lib64:/lib:/usr/lib</span><br><span class=\"line\"></span><br><span class=\"line\">--------------------------------------------------------------------------------------------------------------</span><br><span class=\"line\"> CLASS-LOADING</span><br><span class=\"line\">--------------------------------------------------------------------------------------------------------------</span><br><span class=\"line\"> LOADED-CLASS-COUNT             7529</span><br><span class=\"line\"> TOTAL-LOADED-CLASS-COUNT       7529</span><br><span class=\"line\"> UNLOADED-CLASS-COUNT           0</span><br><span class=\"line\"> IS-VERBOSE                     false</span><br><span class=\"line\"></span><br><span class=\"line\">--------------------------------------------------------------------------------------------------------------</span><br><span class=\"line\"> COMPILATION</span><br><span class=\"line\">--------------------------------------------------------------------------------------------------------------</span><br><span class=\"line\"> NAME                           HotSpot 64-Bit Tiered Compilers</span><br><span class=\"line\"> TOTAL-COMPILE-TIME             14921(ms)</span><br><span class=\"line\"></span><br><span class=\"line\">--------------------------------------------------------------------------------------------------------------</span><br><span class=\"line\"> GARBAGE-COLLECTORS</span><br><span class=\"line\">--------------------------------------------------------------------------------------------------------------</span><br><span class=\"line\"> PS Scavenge                            name : PS Scavenge                                                                             </span><br><span class=\"line\"> [count/time (ms)]                      collectionCount : 7                                                                            </span><br><span class=\"line\">                                        collectionTime : 68                                                                            </span><br><span class=\"line\"></span><br><span class=\"line\"> PS MarkSweep                           name : PS MarkSweep                                                                            </span><br><span class=\"line\"> [count/time (ms)]                      collectionCount : 1                                                                            </span><br><span class=\"line\">                                        collectionTime : 47 </span><br><span class=\"line\"></span><br><span class=\"line\">--------------------------------------------------------------------------------------------------------------</span><br><span class=\"line\"> MEMORY-MANAGERS</span><br><span class=\"line\">--------------------------------------------------------------------------------------------------------------</span><br><span class=\"line\"> CodeCacheManager               Code Cache</span><br><span class=\"line\"></span><br><span class=\"line\"> Metaspace Manager              Metaspace</span><br><span class=\"line\">                                Compressed Class Space</span><br><span class=\"line\"></span><br><span class=\"line\"> Copy                           Eden Space</span><br><span class=\"line\">                                Survivor Space</span><br><span class=\"line\"></span><br><span class=\"line\"> MarkSweepCompact               Eden Space</span><br><span class=\"line\">                                Survivor Space</span><br><span class=\"line\">                                Tenured Gen</span><br><span class=\"line\">--------------------------------------------------------------------------------------------------------------</span><br><span class=\"line\"> MEMORY</span><br><span class=\"line\">--------------------------------------------------------------------------------------------------------------</span><br><span class=\"line\"> HEAP-MEMORY-USAGE                      init : 268435456(256.0 MiB)                                                                    </span><br><span class=\"line\"> [memory in bytes]                      used : 18039504(17.2 MiB)                                                                      </span><br><span class=\"line\">                                        committed : 181403648(173.0 MiB)                                                               </span><br><span class=\"line\">                                        max : 3817865216(3.6 GiB)                                                                      </span><br><span class=\"line\"></span><br><span class=\"line\"> NO-HEAP-MEMORY-USAGE                   init : 2555904(2.4 MiB)                                                                        </span><br><span class=\"line\"> [memory in bytes]                      used : 33926216(32.4 MiB)                                                                      </span><br><span class=\"line\">                                        committed : 35176448(33.5 MiB)                                                                 </span><br><span class=\"line\">                                        max : -1(-1 B)  </span><br><span class=\"line\"></span><br><span class=\"line\">--------------------------------------------------------------------------------------------------------------</span><br><span class=\"line\"> OPERATING-SYSTEM</span><br><span class=\"line\">--------------------------------------------------------------------------------------------------------------</span><br><span class=\"line\"> OS                             Linux</span><br><span class=\"line\"> ARCH                           amd64</span><br><span class=\"line\"> PROCESSORS-COUNT               3</span><br><span class=\"line\"> LOAD-AVERAGE                   29.53</span><br><span class=\"line\"> VERSION                        4.15.0-52-generic</span><br><span class=\"line\"></span><br><span class=\"line\">--------------------------------------------------------------------------------------------------------------</span><br><span class=\"line\"> THREAD</span><br><span class=\"line\">--------------------------------------------------------------------------------------------------------------</span><br><span class=\"line\"> COUNT                          30</span><br><span class=\"line\"> DAEMON-COUNT                   24</span><br><span class=\"line\"> PEAK-COUNT                     31</span><br><span class=\"line\"> STARTED-COUNT                  36</span><br><span class=\"line\"> DEADLOCK-COUNT                 0</span><br><span class=\"line\"></span><br><span class=\"line\">--------------------------------------------------------------------------------------------------------------</span><br><span class=\"line\"> FILE-DESCRIPTOR</span><br><span class=\"line\">--------------------------------------------------------------------------------------------------------------</span><br><span class=\"line\"> MAX-FILE-DESCRIPTOR-COUNT      1048576</span><br><span class=\"line\"> OPEN-FILE-DESCRIPTOR-COUNT     100</span><br><span class=\"line\">Affect(row-cnt:0) cost in 88 ms.</span><br></pre></td></tr></table></figure>\n\n<h2><span id=\"jvm使用参考\">jvm使用参考</span></h2><h4><span id=\"thread相关\">THREAD相关</span></h4><ul>\n<li><code>COUNT</code>: JVM当前活跃的线程数</li>\n<li><code>DAEMON-COUNT</code>: JVM当前活跃的守护线程数</li>\n<li><code>PEAK-COUNT</code>: 从JVM启动开始曾经活着的最大线程数</li>\n<li><code>STARTED-COUNT</code>: 从JVM启动开始总共启动过的线程次数</li>\n<li><code>DEADLOCK-COUNT</code>: JVM当前死锁的线程数</li>\n</ul>\n<h4><span id=\"文件描述符相关\">文件描述符相关</span></h4><ul>\n<li><code>MAX-FILE-DESCRIPTOR-COUNT</code>：JVM进程最大可以打开的文件描述符数</li>\n<li><code>OPEN-FILE-DESCRIPTOR-COUNT</code>：JVM当前打开的文件描述符数</li>\n</ul>\n<h2><span id=\"更多信息\">更多信息</span></h2><p>在“jvm”中，我们演示了了Arthas的jvm命令。如果有更多的技巧或者使用疑问，欢迎在Issue里提出。</p>\n<ul>\n<li>Issues: <a href=\"https://github.com/alibaba/arthas/issues\">https://github.com/alibaba/arthas/issues</a></li>\n<li>文档： <a href=\"https://arthas.aliyun.com/doc\">https://arthas.aliyun.com/doc</a></li>\n</ul>\n<p>如果您在使用Arthas，请让我们知道。您的使用对我们非常重要：<a href=\"https://github.com/alibaba/arthas/issues/111\">查看</a></p>\n<p>文章拷贝来源：<a href=\"https://start.aliyun.com/course?spm=a2ck6.17690074.0.0.28bc2e7dHTphXs&amp;id=PaiFAkJM\">https://start.aliyun.com/course?spm=a2ck6.17690074.0.0.28bc2e7dHTphXs&amp;id=PaiFAkJM</a></p>\n","site":{"data":{}},"excerpt":"","more":"<!-- toc -->\n\n<ul>\n<li><a href=\"#arthas-demo\">Arthas demo</a></li>\n<li><a href=\"#%E5%90%AF%E5%8A%A8arthas-boot\">启动arthas-boot</a></li>\n<li><a href=\"#jvm%E5%91%BD%E4%BB%A4\">jvm命令</a><ul>\n<li><a href=\"#%E6%9F%A5%E6%89%BEjava%E5%BA%94%E7%94%A8%E7%9A%84classpath\">查找Java应用的classpath</a></li>\n</ul>\n</li>\n<li><a href=\"#jvm%E4%BD%BF%E7%94%A8%E5%8F%82%E8%80%83\">jvm使用参考</a></li>\n<li><a href=\"#jvm%E4%BD%BF%E7%94%A8%E5%8F%82%E8%80%83-1\">jvm使用参考</a><ul>\n<li><a href=\"#thread%E7%9B%B8%E5%85%B3\">THREAD相关</a></li>\n<li><a href=\"#%E6%96%87%E4%BB%B6%E6%8F%8F%E8%BF%B0%E7%AC%A6%E7%9B%B8%E5%85%B3\">文件描述符相关</a></li>\n</ul>\n</li>\n<li><a href=\"#%E6%9B%B4%E5%A4%9A%E4%BF%A1%E6%81%AF\">更多信息</a></li>\n</ul>\n<!-- tocstop -->\n\n<p><img src=\"/jlynet.github.io/2021/08/07/Java%E8%AF%8A%E6%96%AD%E5%B7%A5%E5%85%B7Arthas%E9%AB%98%E7%BA%A7%E5%91%BD%E4%BB%A4%E6%95%99%E7%A8%8B/Arthasjvm%E5%91%BD%E4%BB%A4/arthas.png\" alt=\"Arthas\"></p>\n<p><code>Arthas</code> 是Alibaba开源的Java诊断工具，深受开发者喜爱。在线排查问题，无需重启；动态跟踪Java代码；实时监控JVM状态。</p>\n<p><code>Arthas</code> 支持JDK 6+，支持Linux/Mac/Windows，采用命令行交互模式，同时提供丰富的 <code>Tab</code> 自动补全功能，进一步方便进行问题的定位和诊断。</p>\n<p>当你遇到以下类似问题而束手无策时，Arthas可以帮助你解决：</p>\n<ul>\n<li>这个类从哪个 jar 包加载的？为什么会报各种类相关的 Exception？</li>\n<li>我改的代码为什么没有执行到？难道是我没 commit？分支搞错了？</li>\n<li>遇到问题无法在线上 debug，难道只能通过加日志再重新发布吗？</li>\n<li>线上遇到某个用户的数据处理有问题，但线上同样无法 debug，线下无法重现！</li>\n<li>是否有一个全局视角来查看系统的运行状况？</li>\n<li>有什么办法可以监控到JVM的实时运行状态？</li>\n<li>怎么快速定位应用的热点，生成火焰图？</li>\n</ul>\n<p>本教程会以一个简单的应用为例，演示jvm命令。</p>\n<ul>\n<li>Github: <a href=\"https://github.com/alibaba/arthas\">https://github.com/alibaba/arthas</a></li>\n<li>文档: <a href=\"https://arthas.aliyun.com/doc/\">https://arthas.aliyun.com/doc/</a></li>\n</ul>\n<h2 id=\"Arthas-demo\"><a href=\"#Arthas-demo\" class=\"headerlink\" title=\"Arthas demo\"></a>Arthas demo</h2><p>下载<code>arthas-demo.jar</code>，再用<code>java -jar</code>命令启动：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wget https://arthas.aliyun.com/arthas-demo.jar;java -jar arthas-demo.jar</span><br></pre></td></tr></table></figure>\n\n<p><code>arthas-demo</code>是一个很简单的程序，它随机生成整数，再执行因式分解，把结果打印出来。如果生成的随机数是负数，则会打印提示信息。</p>\n<h2 id=\"启动arthas-boot\"><a href=\"#启动arthas-boot\" class=\"headerlink\" title=\"启动arthas-boot\"></a>启动arthas-boot</h2><p>在新的<code>Terminal 2</code>里，下载<code>arthas-boot.jar</code>，再用<code>java -jar</code>命令启动：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wget https://arthas.aliyun.com/arthas-boot.jar;java -jar arthas-boot.jar</span><br></pre></td></tr></table></figure>\n\n<p><code>arthas-boot</code>是<code>Arthas</code>的启动程序，它启动后，会列出所有的Java进程，用户可以选择需要诊断的目标进程。</p>\n<p>选择第一个进程，输入 <code>1</code> ，再<code>Enter/回车</code>：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1</span><br></pre></td></tr></table></figure>\n\n<p>Attach成功之后，会打印Arthas LOGO。输入 <code>help</code> 可以获取到更多的帮助信息。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">help</span></span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/jlynet.github.io/2021/08/07/Java%E8%AF%8A%E6%96%AD%E5%B7%A5%E5%85%B7Arthas%E9%AB%98%E7%BA%A7%E5%91%BD%E4%BB%A4%E6%95%99%E7%A8%8B/Arthasjvm%E5%91%BD%E4%BB%A4/O1CN01HzatXZ1RgccrlT90M_!!6000000002141-2-tps-529-244.png\" alt=\"Arthas Boot\"></p>\n<h2 id=\"jvm命令\"><a href=\"#jvm命令\" class=\"headerlink\" title=\"jvm命令\"></a>jvm命令</h2><p><code>jvm</code> 命令可以查看当前JVM信息。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">jvm</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"查找Java应用的classpath\"><a href=\"#查找Java应用的classpath\" class=\"headerlink\" title=\"查找Java应用的classpath\"></a>查找Java应用的classpath</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">jvm | grep PATH</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight console\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">[arthas@41064]$</span><span class=\"bash\"> jvm | grep PATH</span></span><br><span class=\"line\"> CLASS-PATH                             packaging/target/arthas-bin/arthas-demo.jar</span><br><span class=\"line\"> BOOT-CLASS-PATH                        /Library/Java/JavaVirtualMachines/jdk1.8.0_151.jdk/Contents/Home/jre/lib/resources.jar:/Librar</span><br><span class=\"line\"> LIBRARY-PATH                           /Users/gongdewei/Library/Java/Extensions:/Library/Java/Extensions:/Network/Library/Java/Extens</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"jvm使用参考\"><a href=\"#jvm使用参考\" class=\"headerlink\" title=\"jvm使用参考\"></a>jvm使用参考</h2><figure class=\"highlight console\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> jvm</span></span><br><span class=\"line\">RUNTIME</span><br><span class=\"line\">--------------------------------------------------------------------------------------------------------------</span><br><span class=\"line\"> MACHINE-NAME                   37@ff267334bb65</span><br><span class=\"line\"> JVM-START-TIME                 2020-07-23 07:50:36</span><br><span class=\"line\"> MANAGEMENT-SPEC-VERSION        1.2</span><br><span class=\"line\"> SPEC-NAME                      Java Virtual Machine Specification</span><br><span class=\"line\"> SPEC-VENDOR                    Oracle Corporation</span><br><span class=\"line\"> SPEC-VERSION                   1.8</span><br><span class=\"line\"> VM-NAME                        Java HotSpot(TM) 64-Bit Server VM</span><br><span class=\"line\"> VM-VENDOR                      Oracle Corporation</span><br><span class=\"line\"> VM-VERSION                     25.201-b09</span><br><span class=\"line\"> INPUT-ARGUMENTS                []</span><br><span class=\"line\"> CLASS-PATH                     demo-arthas-spring-boot.jar</span><br><span class=\"line\"> BOOT-CLASS-PATH                /usr/lib/jvm/java-8-oracle/jre/lib/resources.jar:/usr/lib/jvm/java-8-oracle/j</span><br><span class=\"line\">                                re/lib/rt.jar:/usr/lib/jvm/java-8-oracle/jre/lib/sunrsasign.jar:/usr/lib/jvm/</span><br><span class=\"line\">                                java-8-oracle/jre/lib/jsse.jar:/usr/lib/jvm/java-8-oracle/jre/lib/jce.jar:/us</span><br><span class=\"line\">                                r/lib/jvm/java-8-oracle/jre/lib/charsets.jar:/usr/lib/jvm/java-8-oracle/jre/l</span><br><span class=\"line\">                                ib/jfr.jar:/usr/lib/jvm/java-8-oracle/jre/classes</span><br><span class=\"line\"> LIBRARY-PATH                   /usr/java/packages/lib/amd64:/usr/lib64:/lib64:/lib:/usr/lib</span><br><span class=\"line\"></span><br><span class=\"line\">--------------------------------------------------------------------------------------------------------------</span><br><span class=\"line\"> CLASS-LOADING</span><br><span class=\"line\">--------------------------------------------------------------------------------------------------------------</span><br><span class=\"line\"> LOADED-CLASS-COUNT             7529</span><br><span class=\"line\"> TOTAL-LOADED-CLASS-COUNT       7529</span><br><span class=\"line\"> UNLOADED-CLASS-COUNT           0</span><br><span class=\"line\"> IS-VERBOSE                     false</span><br><span class=\"line\"></span><br><span class=\"line\">--------------------------------------------------------------------------------------------------------------</span><br><span class=\"line\"> COMPILATION</span><br><span class=\"line\">--------------------------------------------------------------------------------------------------------------</span><br><span class=\"line\"> NAME                           HotSpot 64-Bit Tiered Compilers</span><br><span class=\"line\"> TOTAL-COMPILE-TIME             14921(ms)</span><br><span class=\"line\"></span><br><span class=\"line\">--------------------------------------------------------------------------------------------------------------</span><br><span class=\"line\"> GARBAGE-COLLECTORS</span><br><span class=\"line\">--------------------------------------------------------------------------------------------------------------</span><br><span class=\"line\"> PS Scavenge                            name : PS Scavenge                                                                             </span><br><span class=\"line\"> [count/time (ms)]                      collectionCount : 7                                                                            </span><br><span class=\"line\">                                        collectionTime : 68                                                                            </span><br><span class=\"line\"></span><br><span class=\"line\"> PS MarkSweep                           name : PS MarkSweep                                                                            </span><br><span class=\"line\"> [count/time (ms)]                      collectionCount : 1                                                                            </span><br><span class=\"line\">                                        collectionTime : 47 </span><br><span class=\"line\"></span><br><span class=\"line\">--------------------------------------------------------------------------------------------------------------</span><br><span class=\"line\"> MEMORY-MANAGERS</span><br><span class=\"line\">--------------------------------------------------------------------------------------------------------------</span><br><span class=\"line\"> CodeCacheManager               Code Cache</span><br><span class=\"line\"></span><br><span class=\"line\"> Metaspace Manager              Metaspace</span><br><span class=\"line\">                                Compressed Class Space</span><br><span class=\"line\"></span><br><span class=\"line\"> Copy                           Eden Space</span><br><span class=\"line\">                                Survivor Space</span><br><span class=\"line\"></span><br><span class=\"line\"> MarkSweepCompact               Eden Space</span><br><span class=\"line\">                                Survivor Space</span><br><span class=\"line\">                                Tenured Gen</span><br><span class=\"line\">--------------------------------------------------------------------------------------------------------------</span><br><span class=\"line\"> MEMORY</span><br><span class=\"line\">--------------------------------------------------------------------------------------------------------------</span><br><span class=\"line\"> HEAP-MEMORY-USAGE                      init : 268435456(256.0 MiB)                                                                    </span><br><span class=\"line\"> [memory in bytes]                      used : 18039504(17.2 MiB)                                                                      </span><br><span class=\"line\">                                        committed : 181403648(173.0 MiB)                                                               </span><br><span class=\"line\">                                        max : 3817865216(3.6 GiB)                                                                      </span><br><span class=\"line\"></span><br><span class=\"line\"> NO-HEAP-MEMORY-USAGE                   init : 2555904(2.4 MiB)                                                                        </span><br><span class=\"line\"> [memory in bytes]                      used : 33926216(32.4 MiB)                                                                      </span><br><span class=\"line\">                                        committed : 35176448(33.5 MiB)                                                                 </span><br><span class=\"line\">                                        max : -1(-1 B)  </span><br><span class=\"line\"></span><br><span class=\"line\">--------------------------------------------------------------------------------------------------------------</span><br><span class=\"line\"> OPERATING-SYSTEM</span><br><span class=\"line\">--------------------------------------------------------------------------------------------------------------</span><br><span class=\"line\"> OS                             Linux</span><br><span class=\"line\"> ARCH                           amd64</span><br><span class=\"line\"> PROCESSORS-COUNT               3</span><br><span class=\"line\"> LOAD-AVERAGE                   29.53</span><br><span class=\"line\"> VERSION                        4.15.0-52-generic</span><br><span class=\"line\"></span><br><span class=\"line\">--------------------------------------------------------------------------------------------------------------</span><br><span class=\"line\"> THREAD</span><br><span class=\"line\">--------------------------------------------------------------------------------------------------------------</span><br><span class=\"line\"> COUNT                          30</span><br><span class=\"line\"> DAEMON-COUNT                   24</span><br><span class=\"line\"> PEAK-COUNT                     31</span><br><span class=\"line\"> STARTED-COUNT                  36</span><br><span class=\"line\"> DEADLOCK-COUNT                 0</span><br><span class=\"line\"></span><br><span class=\"line\">--------------------------------------------------------------------------------------------------------------</span><br><span class=\"line\"> FILE-DESCRIPTOR</span><br><span class=\"line\">--------------------------------------------------------------------------------------------------------------</span><br><span class=\"line\"> MAX-FILE-DESCRIPTOR-COUNT      1048576</span><br><span class=\"line\"> OPEN-FILE-DESCRIPTOR-COUNT     100</span><br><span class=\"line\">Affect(row-cnt:0) cost in 88 ms.</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"jvm使用参考-1\"><a href=\"#jvm使用参考-1\" class=\"headerlink\" title=\"jvm使用参考\"></a>jvm使用参考</h2><h4 id=\"THREAD相关\"><a href=\"#THREAD相关\" class=\"headerlink\" title=\"THREAD相关\"></a>THREAD相关</h4><ul>\n<li><code>COUNT</code>: JVM当前活跃的线程数</li>\n<li><code>DAEMON-COUNT</code>: JVM当前活跃的守护线程数</li>\n<li><code>PEAK-COUNT</code>: 从JVM启动开始曾经活着的最大线程数</li>\n<li><code>STARTED-COUNT</code>: 从JVM启动开始总共启动过的线程次数</li>\n<li><code>DEADLOCK-COUNT</code>: JVM当前死锁的线程数</li>\n</ul>\n<h4 id=\"文件描述符相关\"><a href=\"#文件描述符相关\" class=\"headerlink\" title=\"文件描述符相关\"></a>文件描述符相关</h4><ul>\n<li><code>MAX-FILE-DESCRIPTOR-COUNT</code>：JVM进程最大可以打开的文件描述符数</li>\n<li><code>OPEN-FILE-DESCRIPTOR-COUNT</code>：JVM当前打开的文件描述符数</li>\n</ul>\n<h2 id=\"更多信息\"><a href=\"#更多信息\" class=\"headerlink\" title=\"更多信息\"></a>更多信息</h2><p>在“jvm”中，我们演示了了Arthas的jvm命令。如果有更多的技巧或者使用疑问，欢迎在Issue里提出。</p>\n<ul>\n<li>Issues: <a href=\"https://github.com/alibaba/arthas/issues\">https://github.com/alibaba/arthas/issues</a></li>\n<li>文档： <a href=\"https://arthas.aliyun.com/doc\">https://arthas.aliyun.com/doc</a></li>\n</ul>\n<p>如果您在使用Arthas，请让我们知道。您的使用对我们非常重要：<a href=\"https://github.com/alibaba/arthas/issues/111\">查看</a></p>\n<p>文章拷贝来源：<a href=\"https://start.aliyun.com/course?spm=a2ck6.17690074.0.0.28bc2e7dHTphXs&amp;id=PaiFAkJM\">https://start.aliyun.com/course?spm=a2ck6.17690074.0.0.28bc2e7dHTphXs&amp;id=PaiFAkJM</a></p>\n"},{"title":"Arthas logger命令","date":"2021-08-07T01:51:31.000Z","_content":"\n<!-- toc -->\n\n![Arthas](arthas.png)\n\n`Arthas` 是Alibaba开源的Java诊断工具，深受开发者喜爱。在线排查问题，无需重启；动态跟踪Java代码；实时监控JVM状态。\n\n`Arthas` 支持JDK 6+，支持Linux/Mac/Windows，采用命令行交互模式，同时提供丰富的 `Tab` 自动补全功能，进一步方便进行问题的定位和诊断。\n\n当你遇到以下类似问题而束手无策时，Arthas可以帮助你解决：\n\n- 这个类从哪个 jar 包加载的？为什么会报各种类相关的 Exception？\n- 我改的代码为什么没有执行到？难道是我没 commit？分支搞错了？\n- 遇到问题无法在线上 debug，难道只能通过加日志再重新发布吗？\n- 线上遇到某个用户的数据处理有问题，但线上同样无法 debug，线下无法重现！\n- 是否有一个全局视角来查看系统的运行状况？\n- 有什么办法可以监控到JVM的实时运行状态？\n- 怎么快速定位应用的热点，生成火焰图？\n\n本教程会以一个普通的Spring Boot应用为例，演示logger命令。\n\n- Github: https://github.com/alibaba/arthas\n- 文档: https://arthas.aliyun.com/doc/\n\n## 启动demo\n\n下载`demo-arthas-spring-boot.jar`，再用`java -jar`命令启动：\n\n```bash\nwget https://code.aliyun.com/middleware-container/handsonLabExternedFiles/raw/master/demo-arthas-spring-boot.jar;java -jar demo-arthas-spring-boot.jar\n```\n\n`demo-arthas-spring-boot`是一个很简单的spring boot应用，源代码：[查看](https://github.com/hengyunabc/spring-boot-inside/tree/master/demo-arthas-spring-boot)\n\n启动之后，可以访问61000端口： 点击查看\n\n![Demo Web](https://img.alicdn.com/imgextra/i2/O1CN010Qbzcz1ctPSWSZI6L_!!6000000003658-2-tps-333-182.png)\n\n## 启动arthas-boot\n\n在新的`Terminal 2`里，下载`arthas-boot.jar`，再用`java -jar`命令启动：\n\n```bash\nwget https://arthas.aliyun.com/arthas-boot.jar;java -jar arthas-boot.jar\n```\n\n`arthas-boot`是`Arthas`的启动程序，它启动后，会列出所有的Java进程，用户可以选择需要诊断的目标进程。\n\n选择第一个进程，输入 `1` ，再`Enter/回车`：\n\n```bash\n1\n```\n\nAttach成功之后，会打印Arthas LOGO。输入 `help` 可以获取到更多的帮助信息。\n\n```bash\nhelp\n```\n\n![Arthas Boot](O1CN01HzatXZ1RgccrlT90M_!!6000000002141-2-tps-529-244.png)\n\n## logger命令\n\n查看logger信息，更新logger level\n\n#### 使用参考\n\n##### 查看所有logger信息\n\n```bash\nlogger\n```\n\n```console\n[arthas@2062]$ logger\n name              ROOT\n class             ch.qos.logback.classic.Logger\n classLoader       org.springframework.boot.loader.LaunchedURLClassLoader@5674cd4d\n classLoaderHash   5674cd4d\n level             INFO\n effectiveLevel    INFO\n additivity        true\n codeSource        jar:file:/home/scrapbook/tutorial/demo-arthas-spring-boot.jar!/BOOT-INF/lib/logback-classi\n                   c-1.1.11.jar!/\n appenders         name            CONSOLE\n                   class           ch.qos.logback.core.ConsoleAppender\n                   classLoader     org.springframework.boot.loader.LaunchedURLClassLoader@5674cd4d\n                   classLoaderHash 5674cd4d\n                   target          System.out\n...\n```\n\n##### 查看指定名字的logger信息\n\n```bash\nlogger -n org.springframework.web\n```\n\n```console\n[arthas@2062]$ logger -n org.springframework.web\n name              org.springframework.web\n class             ch.qos.logback.classic.Logger\n classLoader       org.springframework.boot.loader.LaunchedURLClassLoader@5674cd4d\n classLoaderHash   5674cd4d\n level             null\n effectiveLevel    INFO\n additivity        true\n codeSource        jar:file:/home/scrapbook/tutorial/demo-arthas-spring-boot.jar!/BOOT-INF/lib/logback-classi\n                   c-1.1.11.jar!/\n```\n\n请记下你的classLoaderHash，后面需要使用它。在这里，它是 `5674cd4d`。\n\n注意：请使用你的classLoaderHash值覆盖 `<classLoaderHash>` ，然后手动执行下面所述命令：\n\n##### 查看指定classloader的logger信息\n\n注意hashcode是变化的，需要先查看当前的ClassLoader信息，提取对应ClassLoader的hashcode。\n\n如果你使用`-c`，你需要手动输入hashcode：`-c <hashcode>`\n\n```console\n$ logger -c 5674cd4d\n```\n\n对于只有唯一实例的ClassLoader可以通过`--classLoaderClass`指定class name，使用起来更加方便：\n\n```bash\nlogger --classLoaderClass org.springframework.boot.loader.LaunchedURLClassLoader\n```\n\n```console\n[arthas@2062]$ logger --classLoaderClass org.springframework.boot.loader.LaunchedURLClassLoader\nname              ROOT\n class             ch.qos.logback.classic.Logger\n classLoader       org.springframework.boot.loader.LaunchedURLClassLoader@5674cd4d\n classLoaderHash   5674cd4d\n level             INFO\n effectiveLevel    INFO\n additivity        true\n codeSource        jar:file:/home/scrapbook/tutorial/demo-arthas-spring-boot.jar!/BOOT-INF/lib/logback-classi\n                   c-1.1.11.jar!/\n appenders         name            CONSOLE\n                   class           ch.qos.logback.core.ConsoleAppender\n                   classLoader     org.springframework.boot.loader.LaunchedURLClassLoader@5674cd4d\n                   classLoaderHash 5674cd4d\n                   target          System.out\n...\n```\n\n`--classLoaderClass` 的值是ClassLoader的类名，只有匹配到唯一的ClassLoader实例时才能工作，目的是方便输入通用命令，而`-c <hashcode>`是动态变化的。\n\n##### 更新logger level\n\n```bash\nlogger --name ROOT --level debug\n```\n\n```console\n[arthas@2062]$ logger --name ROOT --level debug\nupdate logger level success.\n```\n\n注意：在教程中执行会提示错误，需要指定classloader\n\n##### 指定classloader更新 logger level\n\n默认情况下，logger命令会在SystemClassloader下执行，如果应用是传统的`war`应用，或者spring boot fat jar启动的应用，那么需要指定classloader。\n\n可以先用 `sc -d yourClassName` 来查看具体的 classloader hashcode，然后在更新level时指定classloader：\n\n```bash\nlogger --classLoaderClass org.springframework.boot.loader.LaunchedURLClassLoader --name ROOT --level debug\n```\n\n```console\n[arthas@2062]$ logger --classLoaderClass org.springframework.boot.loader.LaunchedURLClassLoader --name ROOT --level debug\n```\n\n##### 查看没有appender的logger的信息\n\n默认情况下，`logger`命令只打印有appender的logger的信息。如果想查看没有`appender`的logger的信息，可以加上参数`--include-no-appender`。\n\n注意，通常输出结果会很长。\n\n```bash\nlogger --include-no-appender\n```\n\n```console\n[arthas@2062]$ logger --include-no-appender\n name              org.thymeleaf\n class             ch.qos.logback.classic.Logger\n classLoader       org.springframework.boot.loader.LaunchedURLClassLoader@5674cd4d\n classLoaderHash   5674cd4d\n level             null\n effectiveLevel    INFO\n additivity        false\n codeSource        jar:file:/home/scrapbook/tutorial/demo-arthas-spring-boot.jar!/BOOT-INF/lib/logback-classi\n                   c-1.1.11.jar!/\n appenders         name            DEBUG_LEVEL_REMAPPER\n                   class           org.springframework.boot.logging.logback.LevelRemappingAppender\n                   classLoader     org.springframework.boot.loader.LaunchedURLClassLoader@5674cd4d\n                   classLoaderHash 5674cd4d\n...\n```\n\n## 更多信息\n\n在“logger”中，我们演示了了Arthas的logger命令。如果有更多的技巧或者使用疑问，欢迎在Issue里提出。\n\n- Issues: https://github.com/alibaba/arthas/issues\n- 文档： https://arthas.aliyun.com/doc\n\n如果您在使用Arthas，请让我们知道。您的使用对我们非常重要：[查看](https://github.com/alibaba/arthas/issues/111)\n\n文章拷贝来源：https://start.aliyun.com/course?spm=a2ck6.17690074.0.0.28bc2e7dHTphXs&id=PaiFAkJM","source":"_posts/Java诊断工具Arthas高级命令教程/Arthaslogger命令.md","raw":"---\ntitle: Arthas logger命令\ndate: 2021-08-07 09:51:31\ntags: ['Java 诊断工具 Arthas 高级命令教程']\n---\n\n<!-- toc -->\n\n![Arthas](arthas.png)\n\n`Arthas` 是Alibaba开源的Java诊断工具，深受开发者喜爱。在线排查问题，无需重启；动态跟踪Java代码；实时监控JVM状态。\n\n`Arthas` 支持JDK 6+，支持Linux/Mac/Windows，采用命令行交互模式，同时提供丰富的 `Tab` 自动补全功能，进一步方便进行问题的定位和诊断。\n\n当你遇到以下类似问题而束手无策时，Arthas可以帮助你解决：\n\n- 这个类从哪个 jar 包加载的？为什么会报各种类相关的 Exception？\n- 我改的代码为什么没有执行到？难道是我没 commit？分支搞错了？\n- 遇到问题无法在线上 debug，难道只能通过加日志再重新发布吗？\n- 线上遇到某个用户的数据处理有问题，但线上同样无法 debug，线下无法重现！\n- 是否有一个全局视角来查看系统的运行状况？\n- 有什么办法可以监控到JVM的实时运行状态？\n- 怎么快速定位应用的热点，生成火焰图？\n\n本教程会以一个普通的Spring Boot应用为例，演示logger命令。\n\n- Github: https://github.com/alibaba/arthas\n- 文档: https://arthas.aliyun.com/doc/\n\n## 启动demo\n\n下载`demo-arthas-spring-boot.jar`，再用`java -jar`命令启动：\n\n```bash\nwget https://code.aliyun.com/middleware-container/handsonLabExternedFiles/raw/master/demo-arthas-spring-boot.jar;java -jar demo-arthas-spring-boot.jar\n```\n\n`demo-arthas-spring-boot`是一个很简单的spring boot应用，源代码：[查看](https://github.com/hengyunabc/spring-boot-inside/tree/master/demo-arthas-spring-boot)\n\n启动之后，可以访问61000端口： 点击查看\n\n![Demo Web](https://img.alicdn.com/imgextra/i2/O1CN010Qbzcz1ctPSWSZI6L_!!6000000003658-2-tps-333-182.png)\n\n## 启动arthas-boot\n\n在新的`Terminal 2`里，下载`arthas-boot.jar`，再用`java -jar`命令启动：\n\n```bash\nwget https://arthas.aliyun.com/arthas-boot.jar;java -jar arthas-boot.jar\n```\n\n`arthas-boot`是`Arthas`的启动程序，它启动后，会列出所有的Java进程，用户可以选择需要诊断的目标进程。\n\n选择第一个进程，输入 `1` ，再`Enter/回车`：\n\n```bash\n1\n```\n\nAttach成功之后，会打印Arthas LOGO。输入 `help` 可以获取到更多的帮助信息。\n\n```bash\nhelp\n```\n\n![Arthas Boot](O1CN01HzatXZ1RgccrlT90M_!!6000000002141-2-tps-529-244.png)\n\n## logger命令\n\n查看logger信息，更新logger level\n\n#### 使用参考\n\n##### 查看所有logger信息\n\n```bash\nlogger\n```\n\n```console\n[arthas@2062]$ logger\n name              ROOT\n class             ch.qos.logback.classic.Logger\n classLoader       org.springframework.boot.loader.LaunchedURLClassLoader@5674cd4d\n classLoaderHash   5674cd4d\n level             INFO\n effectiveLevel    INFO\n additivity        true\n codeSource        jar:file:/home/scrapbook/tutorial/demo-arthas-spring-boot.jar!/BOOT-INF/lib/logback-classi\n                   c-1.1.11.jar!/\n appenders         name            CONSOLE\n                   class           ch.qos.logback.core.ConsoleAppender\n                   classLoader     org.springframework.boot.loader.LaunchedURLClassLoader@5674cd4d\n                   classLoaderHash 5674cd4d\n                   target          System.out\n...\n```\n\n##### 查看指定名字的logger信息\n\n```bash\nlogger -n org.springframework.web\n```\n\n```console\n[arthas@2062]$ logger -n org.springframework.web\n name              org.springframework.web\n class             ch.qos.logback.classic.Logger\n classLoader       org.springframework.boot.loader.LaunchedURLClassLoader@5674cd4d\n classLoaderHash   5674cd4d\n level             null\n effectiveLevel    INFO\n additivity        true\n codeSource        jar:file:/home/scrapbook/tutorial/demo-arthas-spring-boot.jar!/BOOT-INF/lib/logback-classi\n                   c-1.1.11.jar!/\n```\n\n请记下你的classLoaderHash，后面需要使用它。在这里，它是 `5674cd4d`。\n\n注意：请使用你的classLoaderHash值覆盖 `<classLoaderHash>` ，然后手动执行下面所述命令：\n\n##### 查看指定classloader的logger信息\n\n注意hashcode是变化的，需要先查看当前的ClassLoader信息，提取对应ClassLoader的hashcode。\n\n如果你使用`-c`，你需要手动输入hashcode：`-c <hashcode>`\n\n```console\n$ logger -c 5674cd4d\n```\n\n对于只有唯一实例的ClassLoader可以通过`--classLoaderClass`指定class name，使用起来更加方便：\n\n```bash\nlogger --classLoaderClass org.springframework.boot.loader.LaunchedURLClassLoader\n```\n\n```console\n[arthas@2062]$ logger --classLoaderClass org.springframework.boot.loader.LaunchedURLClassLoader\nname              ROOT\n class             ch.qos.logback.classic.Logger\n classLoader       org.springframework.boot.loader.LaunchedURLClassLoader@5674cd4d\n classLoaderHash   5674cd4d\n level             INFO\n effectiveLevel    INFO\n additivity        true\n codeSource        jar:file:/home/scrapbook/tutorial/demo-arthas-spring-boot.jar!/BOOT-INF/lib/logback-classi\n                   c-1.1.11.jar!/\n appenders         name            CONSOLE\n                   class           ch.qos.logback.core.ConsoleAppender\n                   classLoader     org.springframework.boot.loader.LaunchedURLClassLoader@5674cd4d\n                   classLoaderHash 5674cd4d\n                   target          System.out\n...\n```\n\n`--classLoaderClass` 的值是ClassLoader的类名，只有匹配到唯一的ClassLoader实例时才能工作，目的是方便输入通用命令，而`-c <hashcode>`是动态变化的。\n\n##### 更新logger level\n\n```bash\nlogger --name ROOT --level debug\n```\n\n```console\n[arthas@2062]$ logger --name ROOT --level debug\nupdate logger level success.\n```\n\n注意：在教程中执行会提示错误，需要指定classloader\n\n##### 指定classloader更新 logger level\n\n默认情况下，logger命令会在SystemClassloader下执行，如果应用是传统的`war`应用，或者spring boot fat jar启动的应用，那么需要指定classloader。\n\n可以先用 `sc -d yourClassName` 来查看具体的 classloader hashcode，然后在更新level时指定classloader：\n\n```bash\nlogger --classLoaderClass org.springframework.boot.loader.LaunchedURLClassLoader --name ROOT --level debug\n```\n\n```console\n[arthas@2062]$ logger --classLoaderClass org.springframework.boot.loader.LaunchedURLClassLoader --name ROOT --level debug\n```\n\n##### 查看没有appender的logger的信息\n\n默认情况下，`logger`命令只打印有appender的logger的信息。如果想查看没有`appender`的logger的信息，可以加上参数`--include-no-appender`。\n\n注意，通常输出结果会很长。\n\n```bash\nlogger --include-no-appender\n```\n\n```console\n[arthas@2062]$ logger --include-no-appender\n name              org.thymeleaf\n class             ch.qos.logback.classic.Logger\n classLoader       org.springframework.boot.loader.LaunchedURLClassLoader@5674cd4d\n classLoaderHash   5674cd4d\n level             null\n effectiveLevel    INFO\n additivity        false\n codeSource        jar:file:/home/scrapbook/tutorial/demo-arthas-spring-boot.jar!/BOOT-INF/lib/logback-classi\n                   c-1.1.11.jar!/\n appenders         name            DEBUG_LEVEL_REMAPPER\n                   class           org.springframework.boot.logging.logback.LevelRemappingAppender\n                   classLoader     org.springframework.boot.loader.LaunchedURLClassLoader@5674cd4d\n                   classLoaderHash 5674cd4d\n...\n```\n\n## 更多信息\n\n在“logger”中，我们演示了了Arthas的logger命令。如果有更多的技巧或者使用疑问，欢迎在Issue里提出。\n\n- Issues: https://github.com/alibaba/arthas/issues\n- 文档： https://arthas.aliyun.com/doc\n\n如果您在使用Arthas，请让我们知道。您的使用对我们非常重要：[查看](https://github.com/alibaba/arthas/issues/111)\n\n文章拷贝来源：https://start.aliyun.com/course?spm=a2ck6.17690074.0.0.28bc2e7dHTphXs&id=PaiFAkJM","slug":"Java诊断工具Arthas高级命令教程/Arthaslogger命令","published":1,"updated":"2021-08-07T05:34:40.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cks1cgr6j0021fw5i705v7k2e","content":"<!-- toc -->\n\n<ul>\n<li><a href=\"#%E5%90%AF%E5%8A%A8demo\">启动demo</a></li>\n<li><a href=\"#%E5%90%AF%E5%8A%A8arthas-boot\">启动arthas-boot</a></li>\n<li><a href=\"#logger%E5%91%BD%E4%BB%A4\">logger命令</a><ul>\n<li><a href=\"#%E4%BD%BF%E7%94%A8%E5%8F%82%E8%80%83\">使用参考</a><ul>\n<li><a href=\"#%E6%9F%A5%E7%9C%8B%E6%89%80%E6%9C%89logger%E4%BF%A1%E6%81%AF\">查看所有logger信息</a></li>\n<li><a href=\"#%E6%9F%A5%E7%9C%8B%E6%8C%87%E5%AE%9A%E5%90%8D%E5%AD%97%E7%9A%84logger%E4%BF%A1%E6%81%AF\">查看指定名字的logger信息</a></li>\n<li><a href=\"#%E6%9F%A5%E7%9C%8B%E6%8C%87%E5%AE%9Aclassloader%E7%9A%84logger%E4%BF%A1%E6%81%AF\">查看指定classloader的logger信息</a></li>\n<li><a href=\"#%E6%9B%B4%E6%96%B0logger-level\">更新logger level</a></li>\n<li><a href=\"#%E6%8C%87%E5%AE%9Aclassloader%E6%9B%B4%E6%96%B0-logger-level\">指定classloader更新 logger level</a></li>\n<li><a href=\"#%E6%9F%A5%E7%9C%8B%E6%B2%A1%E6%9C%89appender%E7%9A%84logger%E7%9A%84%E4%BF%A1%E6%81%AF\">查看没有appender的logger的信息</a></li>\n</ul>\n</li>\n</ul>\n</li>\n<li><a href=\"#%E6%9B%B4%E5%A4%9A%E4%BF%A1%E6%81%AF\">更多信息</a></li>\n</ul>\n<!-- tocstop -->\n\n<p><img src=\"/jlynet.github.io/2021/08/07/Java%E8%AF%8A%E6%96%AD%E5%B7%A5%E5%85%B7Arthas%E9%AB%98%E7%BA%A7%E5%91%BD%E4%BB%A4%E6%95%99%E7%A8%8B/Arthaslogger%E5%91%BD%E4%BB%A4/arthas.png\" alt=\"Arthas\"></p>\n<p><code>Arthas</code> 是Alibaba开源的Java诊断工具，深受开发者喜爱。在线排查问题，无需重启；动态跟踪Java代码；实时监控JVM状态。</p>\n<p><code>Arthas</code> 支持JDK 6+，支持Linux/Mac/Windows，采用命令行交互模式，同时提供丰富的 <code>Tab</code> 自动补全功能，进一步方便进行问题的定位和诊断。</p>\n<p>当你遇到以下类似问题而束手无策时，Arthas可以帮助你解决：</p>\n<ul>\n<li>这个类从哪个 jar 包加载的？为什么会报各种类相关的 Exception？</li>\n<li>我改的代码为什么没有执行到？难道是我没 commit？分支搞错了？</li>\n<li>遇到问题无法在线上 debug，难道只能通过加日志再重新发布吗？</li>\n<li>线上遇到某个用户的数据处理有问题，但线上同样无法 debug，线下无法重现！</li>\n<li>是否有一个全局视角来查看系统的运行状况？</li>\n<li>有什么办法可以监控到JVM的实时运行状态？</li>\n<li>怎么快速定位应用的热点，生成火焰图？</li>\n</ul>\n<p>本教程会以一个普通的Spring Boot应用为例，演示logger命令。</p>\n<ul>\n<li>Github: <a href=\"https://github.com/alibaba/arthas\">https://github.com/alibaba/arthas</a></li>\n<li>文档: <a href=\"https://arthas.aliyun.com/doc/\">https://arthas.aliyun.com/doc/</a></li>\n</ul>\n<h2><span id=\"启动demo\">启动demo</span></h2><p>下载<code>demo-arthas-spring-boot.jar</code>，再用<code>java -jar</code>命令启动：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wget https://code.aliyun.com/middleware-container/handsonLabExternedFiles/raw/master/demo-arthas-spring-boot.jar;java -jar demo-arthas-spring-boot.jar</span><br></pre></td></tr></table></figure>\n\n<p><code>demo-arthas-spring-boot</code>是一个很简单的spring boot应用，源代码：<a href=\"https://github.com/hengyunabc/spring-boot-inside/tree/master/demo-arthas-spring-boot\">查看</a></p>\n<p>启动之后，可以访问61000端口： 点击查看</p>\n<p><img src=\"https://img.alicdn.com/imgextra/i2/O1CN010Qbzcz1ctPSWSZI6L_!!6000000003658-2-tps-333-182.png\" alt=\"Demo Web\"></p>\n<h2><span id=\"启动arthas-boot\">启动arthas-boot</span></h2><p>在新的<code>Terminal 2</code>里，下载<code>arthas-boot.jar</code>，再用<code>java -jar</code>命令启动：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wget https://arthas.aliyun.com/arthas-boot.jar;java -jar arthas-boot.jar</span><br></pre></td></tr></table></figure>\n\n<p><code>arthas-boot</code>是<code>Arthas</code>的启动程序，它启动后，会列出所有的Java进程，用户可以选择需要诊断的目标进程。</p>\n<p>选择第一个进程，输入 <code>1</code> ，再<code>Enter/回车</code>：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1</span><br></pre></td></tr></table></figure>\n\n<p>Attach成功之后，会打印Arthas LOGO。输入 <code>help</code> 可以获取到更多的帮助信息。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">help</span></span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/jlynet.github.io/2021/08/07/Java%E8%AF%8A%E6%96%AD%E5%B7%A5%E5%85%B7Arthas%E9%AB%98%E7%BA%A7%E5%91%BD%E4%BB%A4%E6%95%99%E7%A8%8B/Arthaslogger%E5%91%BD%E4%BB%A4/O1CN01HzatXZ1RgccrlT90M_!!6000000002141-2-tps-529-244.png\" alt=\"Arthas Boot\"></p>\n<h2><span id=\"logger命令\">logger命令</span></h2><p>查看logger信息，更新logger level</p>\n<h4><span id=\"使用参考\">使用参考</span></h4><h5><span id=\"查看所有logger信息\">查看所有logger信息</span></h5><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">logger</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight console\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">[arthas@2062]$</span><span class=\"bash\"> logger</span></span><br><span class=\"line\"> name              ROOT</span><br><span class=\"line\"> class             ch.qos.logback.classic.Logger</span><br><span class=\"line\"> classLoader       org.springframework.boot.loader.LaunchedURLClassLoader@5674cd4d</span><br><span class=\"line\"> classLoaderHash   5674cd4d</span><br><span class=\"line\"> level             INFO</span><br><span class=\"line\"> effectiveLevel    INFO</span><br><span class=\"line\"> additivity        true</span><br><span class=\"line\"> codeSource        jar:file:/home/scrapbook/tutorial/demo-arthas-spring-boot.jar!/BOOT-INF/lib/logback-classi</span><br><span class=\"line\">                   c-1.1.11.jar!/</span><br><span class=\"line\"> appenders         name            CONSOLE</span><br><span class=\"line\">                   class           ch.qos.logback.core.ConsoleAppender</span><br><span class=\"line\">                   classLoader     org.springframework.boot.loader.LaunchedURLClassLoader@5674cd4d</span><br><span class=\"line\">                   classLoaderHash 5674cd4d</span><br><span class=\"line\">                   target          System.out</span><br><span class=\"line\">...</span><br></pre></td></tr></table></figure>\n\n<h5><span id=\"查看指定名字的logger信息\">查看指定名字的logger信息</span></h5><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">logger -n org.springframework.web</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight console\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">[arthas@2062]$</span><span class=\"bash\"> logger -n org.springframework.web</span></span><br><span class=\"line\"> name              org.springframework.web</span><br><span class=\"line\"> class             ch.qos.logback.classic.Logger</span><br><span class=\"line\"> classLoader       org.springframework.boot.loader.LaunchedURLClassLoader@5674cd4d</span><br><span class=\"line\"> classLoaderHash   5674cd4d</span><br><span class=\"line\"> level             null</span><br><span class=\"line\"> effectiveLevel    INFO</span><br><span class=\"line\"> additivity        true</span><br><span class=\"line\"> codeSource        jar:file:/home/scrapbook/tutorial/demo-arthas-spring-boot.jar!/BOOT-INF/lib/logback-classi</span><br><span class=\"line\">                   c-1.1.11.jar!/</span><br></pre></td></tr></table></figure>\n\n<p>请记下你的classLoaderHash，后面需要使用它。在这里，它是 <code>5674cd4d</code>。</p>\n<p>注意：请使用你的classLoaderHash值覆盖 <code>&lt;classLoaderHash&gt;</code> ，然后手动执行下面所述命令：</p>\n<h5><span id=\"查看指定classloader的logger信息\">查看指定classloader的logger信息</span></h5><p>注意hashcode是变化的，需要先查看当前的ClassLoader信息，提取对应ClassLoader的hashcode。</p>\n<p>如果你使用<code>-c</code>，你需要手动输入hashcode：<code>-c &lt;hashcode&gt;</code></p>\n<figure class=\"highlight console\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> logger -c 5674cd4d</span></span><br></pre></td></tr></table></figure>\n\n<p>对于只有唯一实例的ClassLoader可以通过<code>--classLoaderClass</code>指定class name，使用起来更加方便：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">logger --classLoaderClass org.springframework.boot.loader.LaunchedURLClassLoader</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight console\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">[arthas@2062]$</span><span class=\"bash\"> logger --classLoaderClass org.springframework.boot.loader.LaunchedURLClassLoader</span></span><br><span class=\"line\">name              ROOT</span><br><span class=\"line\"> class             ch.qos.logback.classic.Logger</span><br><span class=\"line\"> classLoader       org.springframework.boot.loader.LaunchedURLClassLoader@5674cd4d</span><br><span class=\"line\"> classLoaderHash   5674cd4d</span><br><span class=\"line\"> level             INFO</span><br><span class=\"line\"> effectiveLevel    INFO</span><br><span class=\"line\"> additivity        true</span><br><span class=\"line\"> codeSource        jar:file:/home/scrapbook/tutorial/demo-arthas-spring-boot.jar!/BOOT-INF/lib/logback-classi</span><br><span class=\"line\">                   c-1.1.11.jar!/</span><br><span class=\"line\"> appenders         name            CONSOLE</span><br><span class=\"line\">                   class           ch.qos.logback.core.ConsoleAppender</span><br><span class=\"line\">                   classLoader     org.springframework.boot.loader.LaunchedURLClassLoader@5674cd4d</span><br><span class=\"line\">                   classLoaderHash 5674cd4d</span><br><span class=\"line\">                   target          System.out</span><br><span class=\"line\">...</span><br></pre></td></tr></table></figure>\n\n<p><code>--classLoaderClass</code> 的值是ClassLoader的类名，只有匹配到唯一的ClassLoader实例时才能工作，目的是方便输入通用命令，而<code>-c &lt;hashcode&gt;</code>是动态变化的。</p>\n<h5><span id=\"更新logger-level\">更新logger level</span></h5><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">logger --name ROOT --level debug</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight console\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">[arthas@2062]$</span><span class=\"bash\"> logger --name ROOT --level debug</span></span><br><span class=\"line\">update logger level success.</span><br></pre></td></tr></table></figure>\n\n<p>注意：在教程中执行会提示错误，需要指定classloader</p>\n<h5><span id=\"指定classloader更新-logger-level\">指定classloader更新 logger level</span></h5><p>默认情况下，logger命令会在SystemClassloader下执行，如果应用是传统的<code>war</code>应用，或者spring boot fat jar启动的应用，那么需要指定classloader。</p>\n<p>可以先用 <code>sc -d yourClassName</code> 来查看具体的 classloader hashcode，然后在更新level时指定classloader：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">logger --classLoaderClass org.springframework.boot.loader.LaunchedURLClassLoader --name ROOT --level debug</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight console\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">[arthas@2062]$</span><span class=\"bash\"> logger --classLoaderClass org.springframework.boot.loader.LaunchedURLClassLoader --name ROOT --level debug</span></span><br></pre></td></tr></table></figure>\n\n<h5><span id=\"查看没有appender的logger的信息\">查看没有appender的logger的信息</span></h5><p>默认情况下，<code>logger</code>命令只打印有appender的logger的信息。如果想查看没有<code>appender</code>的logger的信息，可以加上参数<code>--include-no-appender</code>。</p>\n<p>注意，通常输出结果会很长。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">logger --include-no-appender</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight console\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">[arthas@2062]$</span><span class=\"bash\"> logger --include-no-appender</span></span><br><span class=\"line\"> name              org.thymeleaf</span><br><span class=\"line\"> class             ch.qos.logback.classic.Logger</span><br><span class=\"line\"> classLoader       org.springframework.boot.loader.LaunchedURLClassLoader@5674cd4d</span><br><span class=\"line\"> classLoaderHash   5674cd4d</span><br><span class=\"line\"> level             null</span><br><span class=\"line\"> effectiveLevel    INFO</span><br><span class=\"line\"> additivity        false</span><br><span class=\"line\"> codeSource        jar:file:/home/scrapbook/tutorial/demo-arthas-spring-boot.jar!/BOOT-INF/lib/logback-classi</span><br><span class=\"line\">                   c-1.1.11.jar!/</span><br><span class=\"line\"> appenders         name            DEBUG_LEVEL_REMAPPER</span><br><span class=\"line\">                   class           org.springframework.boot.logging.logback.LevelRemappingAppender</span><br><span class=\"line\">                   classLoader     org.springframework.boot.loader.LaunchedURLClassLoader@5674cd4d</span><br><span class=\"line\">                   classLoaderHash 5674cd4d</span><br><span class=\"line\">...</span><br></pre></td></tr></table></figure>\n\n<h2><span id=\"更多信息\">更多信息</span></h2><p>在“logger”中，我们演示了了Arthas的logger命令。如果有更多的技巧或者使用疑问，欢迎在Issue里提出。</p>\n<ul>\n<li>Issues: <a href=\"https://github.com/alibaba/arthas/issues\">https://github.com/alibaba/arthas/issues</a></li>\n<li>文档： <a href=\"https://arthas.aliyun.com/doc\">https://arthas.aliyun.com/doc</a></li>\n</ul>\n<p>如果您在使用Arthas，请让我们知道。您的使用对我们非常重要：<a href=\"https://github.com/alibaba/arthas/issues/111\">查看</a></p>\n<p>文章拷贝来源：<a href=\"https://start.aliyun.com/course?spm=a2ck6.17690074.0.0.28bc2e7dHTphXs&amp;id=PaiFAkJM\">https://start.aliyun.com/course?spm=a2ck6.17690074.0.0.28bc2e7dHTphXs&amp;id=PaiFAkJM</a></p>\n","site":{"data":{}},"excerpt":"","more":"<!-- toc -->\n\n<ul>\n<li><a href=\"#%E5%90%AF%E5%8A%A8demo\">启动demo</a></li>\n<li><a href=\"#%E5%90%AF%E5%8A%A8arthas-boot\">启动arthas-boot</a></li>\n<li><a href=\"#logger%E5%91%BD%E4%BB%A4\">logger命令</a><ul>\n<li><a href=\"#%E4%BD%BF%E7%94%A8%E5%8F%82%E8%80%83\">使用参考</a><ul>\n<li><a href=\"#%E6%9F%A5%E7%9C%8B%E6%89%80%E6%9C%89logger%E4%BF%A1%E6%81%AF\">查看所有logger信息</a></li>\n<li><a href=\"#%E6%9F%A5%E7%9C%8B%E6%8C%87%E5%AE%9A%E5%90%8D%E5%AD%97%E7%9A%84logger%E4%BF%A1%E6%81%AF\">查看指定名字的logger信息</a></li>\n<li><a href=\"#%E6%9F%A5%E7%9C%8B%E6%8C%87%E5%AE%9Aclassloader%E7%9A%84logger%E4%BF%A1%E6%81%AF\">查看指定classloader的logger信息</a></li>\n<li><a href=\"#%E6%9B%B4%E6%96%B0logger-level\">更新logger level</a></li>\n<li><a href=\"#%E6%8C%87%E5%AE%9Aclassloader%E6%9B%B4%E6%96%B0-logger-level\">指定classloader更新 logger level</a></li>\n<li><a href=\"#%E6%9F%A5%E7%9C%8B%E6%B2%A1%E6%9C%89appender%E7%9A%84logger%E7%9A%84%E4%BF%A1%E6%81%AF\">查看没有appender的logger的信息</a></li>\n</ul>\n</li>\n</ul>\n</li>\n<li><a href=\"#%E6%9B%B4%E5%A4%9A%E4%BF%A1%E6%81%AF\">更多信息</a></li>\n</ul>\n<!-- tocstop -->\n\n<p><img src=\"/jlynet.github.io/2021/08/07/Java%E8%AF%8A%E6%96%AD%E5%B7%A5%E5%85%B7Arthas%E9%AB%98%E7%BA%A7%E5%91%BD%E4%BB%A4%E6%95%99%E7%A8%8B/Arthaslogger%E5%91%BD%E4%BB%A4/arthas.png\" alt=\"Arthas\"></p>\n<p><code>Arthas</code> 是Alibaba开源的Java诊断工具，深受开发者喜爱。在线排查问题，无需重启；动态跟踪Java代码；实时监控JVM状态。</p>\n<p><code>Arthas</code> 支持JDK 6+，支持Linux/Mac/Windows，采用命令行交互模式，同时提供丰富的 <code>Tab</code> 自动补全功能，进一步方便进行问题的定位和诊断。</p>\n<p>当你遇到以下类似问题而束手无策时，Arthas可以帮助你解决：</p>\n<ul>\n<li>这个类从哪个 jar 包加载的？为什么会报各种类相关的 Exception？</li>\n<li>我改的代码为什么没有执行到？难道是我没 commit？分支搞错了？</li>\n<li>遇到问题无法在线上 debug，难道只能通过加日志再重新发布吗？</li>\n<li>线上遇到某个用户的数据处理有问题，但线上同样无法 debug，线下无法重现！</li>\n<li>是否有一个全局视角来查看系统的运行状况？</li>\n<li>有什么办法可以监控到JVM的实时运行状态？</li>\n<li>怎么快速定位应用的热点，生成火焰图？</li>\n</ul>\n<p>本教程会以一个普通的Spring Boot应用为例，演示logger命令。</p>\n<ul>\n<li>Github: <a href=\"https://github.com/alibaba/arthas\">https://github.com/alibaba/arthas</a></li>\n<li>文档: <a href=\"https://arthas.aliyun.com/doc/\">https://arthas.aliyun.com/doc/</a></li>\n</ul>\n<h2 id=\"启动demo\"><a href=\"#启动demo\" class=\"headerlink\" title=\"启动demo\"></a>启动demo</h2><p>下载<code>demo-arthas-spring-boot.jar</code>，再用<code>java -jar</code>命令启动：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wget https://code.aliyun.com/middleware-container/handsonLabExternedFiles/raw/master/demo-arthas-spring-boot.jar;java -jar demo-arthas-spring-boot.jar</span><br></pre></td></tr></table></figure>\n\n<p><code>demo-arthas-spring-boot</code>是一个很简单的spring boot应用，源代码：<a href=\"https://github.com/hengyunabc/spring-boot-inside/tree/master/demo-arthas-spring-boot\">查看</a></p>\n<p>启动之后，可以访问61000端口： 点击查看</p>\n<p><img src=\"https://img.alicdn.com/imgextra/i2/O1CN010Qbzcz1ctPSWSZI6L_!!6000000003658-2-tps-333-182.png\" alt=\"Demo Web\"></p>\n<h2 id=\"启动arthas-boot\"><a href=\"#启动arthas-boot\" class=\"headerlink\" title=\"启动arthas-boot\"></a>启动arthas-boot</h2><p>在新的<code>Terminal 2</code>里，下载<code>arthas-boot.jar</code>，再用<code>java -jar</code>命令启动：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wget https://arthas.aliyun.com/arthas-boot.jar;java -jar arthas-boot.jar</span><br></pre></td></tr></table></figure>\n\n<p><code>arthas-boot</code>是<code>Arthas</code>的启动程序，它启动后，会列出所有的Java进程，用户可以选择需要诊断的目标进程。</p>\n<p>选择第一个进程，输入 <code>1</code> ，再<code>Enter/回车</code>：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1</span><br></pre></td></tr></table></figure>\n\n<p>Attach成功之后，会打印Arthas LOGO。输入 <code>help</code> 可以获取到更多的帮助信息。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">help</span></span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/jlynet.github.io/2021/08/07/Java%E8%AF%8A%E6%96%AD%E5%B7%A5%E5%85%B7Arthas%E9%AB%98%E7%BA%A7%E5%91%BD%E4%BB%A4%E6%95%99%E7%A8%8B/Arthaslogger%E5%91%BD%E4%BB%A4/O1CN01HzatXZ1RgccrlT90M_!!6000000002141-2-tps-529-244.png\" alt=\"Arthas Boot\"></p>\n<h2 id=\"logger命令\"><a href=\"#logger命令\" class=\"headerlink\" title=\"logger命令\"></a>logger命令</h2><p>查看logger信息，更新logger level</p>\n<h4 id=\"使用参考\"><a href=\"#使用参考\" class=\"headerlink\" title=\"使用参考\"></a>使用参考</h4><h5 id=\"查看所有logger信息\"><a href=\"#查看所有logger信息\" class=\"headerlink\" title=\"查看所有logger信息\"></a>查看所有logger信息</h5><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">logger</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight console\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">[arthas@2062]$</span><span class=\"bash\"> logger</span></span><br><span class=\"line\"> name              ROOT</span><br><span class=\"line\"> class             ch.qos.logback.classic.Logger</span><br><span class=\"line\"> classLoader       org.springframework.boot.loader.LaunchedURLClassLoader@5674cd4d</span><br><span class=\"line\"> classLoaderHash   5674cd4d</span><br><span class=\"line\"> level             INFO</span><br><span class=\"line\"> effectiveLevel    INFO</span><br><span class=\"line\"> additivity        true</span><br><span class=\"line\"> codeSource        jar:file:/home/scrapbook/tutorial/demo-arthas-spring-boot.jar!/BOOT-INF/lib/logback-classi</span><br><span class=\"line\">                   c-1.1.11.jar!/</span><br><span class=\"line\"> appenders         name            CONSOLE</span><br><span class=\"line\">                   class           ch.qos.logback.core.ConsoleAppender</span><br><span class=\"line\">                   classLoader     org.springframework.boot.loader.LaunchedURLClassLoader@5674cd4d</span><br><span class=\"line\">                   classLoaderHash 5674cd4d</span><br><span class=\"line\">                   target          System.out</span><br><span class=\"line\">...</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"查看指定名字的logger信息\"><a href=\"#查看指定名字的logger信息\" class=\"headerlink\" title=\"查看指定名字的logger信息\"></a>查看指定名字的logger信息</h5><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">logger -n org.springframework.web</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight console\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">[arthas@2062]$</span><span class=\"bash\"> logger -n org.springframework.web</span></span><br><span class=\"line\"> name              org.springframework.web</span><br><span class=\"line\"> class             ch.qos.logback.classic.Logger</span><br><span class=\"line\"> classLoader       org.springframework.boot.loader.LaunchedURLClassLoader@5674cd4d</span><br><span class=\"line\"> classLoaderHash   5674cd4d</span><br><span class=\"line\"> level             null</span><br><span class=\"line\"> effectiveLevel    INFO</span><br><span class=\"line\"> additivity        true</span><br><span class=\"line\"> codeSource        jar:file:/home/scrapbook/tutorial/demo-arthas-spring-boot.jar!/BOOT-INF/lib/logback-classi</span><br><span class=\"line\">                   c-1.1.11.jar!/</span><br></pre></td></tr></table></figure>\n\n<p>请记下你的classLoaderHash，后面需要使用它。在这里，它是 <code>5674cd4d</code>。</p>\n<p>注意：请使用你的classLoaderHash值覆盖 <code>&lt;classLoaderHash&gt;</code> ，然后手动执行下面所述命令：</p>\n<h5 id=\"查看指定classloader的logger信息\"><a href=\"#查看指定classloader的logger信息\" class=\"headerlink\" title=\"查看指定classloader的logger信息\"></a>查看指定classloader的logger信息</h5><p>注意hashcode是变化的，需要先查看当前的ClassLoader信息，提取对应ClassLoader的hashcode。</p>\n<p>如果你使用<code>-c</code>，你需要手动输入hashcode：<code>-c &lt;hashcode&gt;</code></p>\n<figure class=\"highlight console\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> logger -c 5674cd4d</span></span><br></pre></td></tr></table></figure>\n\n<p>对于只有唯一实例的ClassLoader可以通过<code>--classLoaderClass</code>指定class name，使用起来更加方便：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">logger --classLoaderClass org.springframework.boot.loader.LaunchedURLClassLoader</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight console\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">[arthas@2062]$</span><span class=\"bash\"> logger --classLoaderClass org.springframework.boot.loader.LaunchedURLClassLoader</span></span><br><span class=\"line\">name              ROOT</span><br><span class=\"line\"> class             ch.qos.logback.classic.Logger</span><br><span class=\"line\"> classLoader       org.springframework.boot.loader.LaunchedURLClassLoader@5674cd4d</span><br><span class=\"line\"> classLoaderHash   5674cd4d</span><br><span class=\"line\"> level             INFO</span><br><span class=\"line\"> effectiveLevel    INFO</span><br><span class=\"line\"> additivity        true</span><br><span class=\"line\"> codeSource        jar:file:/home/scrapbook/tutorial/demo-arthas-spring-boot.jar!/BOOT-INF/lib/logback-classi</span><br><span class=\"line\">                   c-1.1.11.jar!/</span><br><span class=\"line\"> appenders         name            CONSOLE</span><br><span class=\"line\">                   class           ch.qos.logback.core.ConsoleAppender</span><br><span class=\"line\">                   classLoader     org.springframework.boot.loader.LaunchedURLClassLoader@5674cd4d</span><br><span class=\"line\">                   classLoaderHash 5674cd4d</span><br><span class=\"line\">                   target          System.out</span><br><span class=\"line\">...</span><br></pre></td></tr></table></figure>\n\n<p><code>--classLoaderClass</code> 的值是ClassLoader的类名，只有匹配到唯一的ClassLoader实例时才能工作，目的是方便输入通用命令，而<code>-c &lt;hashcode&gt;</code>是动态变化的。</p>\n<h5 id=\"更新logger-level\"><a href=\"#更新logger-level\" class=\"headerlink\" title=\"更新logger level\"></a>更新logger level</h5><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">logger --name ROOT --level debug</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight console\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">[arthas@2062]$</span><span class=\"bash\"> logger --name ROOT --level debug</span></span><br><span class=\"line\">update logger level success.</span><br></pre></td></tr></table></figure>\n\n<p>注意：在教程中执行会提示错误，需要指定classloader</p>\n<h5 id=\"指定classloader更新-logger-level\"><a href=\"#指定classloader更新-logger-level\" class=\"headerlink\" title=\"指定classloader更新 logger level\"></a>指定classloader更新 logger level</h5><p>默认情况下，logger命令会在SystemClassloader下执行，如果应用是传统的<code>war</code>应用，或者spring boot fat jar启动的应用，那么需要指定classloader。</p>\n<p>可以先用 <code>sc -d yourClassName</code> 来查看具体的 classloader hashcode，然后在更新level时指定classloader：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">logger --classLoaderClass org.springframework.boot.loader.LaunchedURLClassLoader --name ROOT --level debug</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight console\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">[arthas@2062]$</span><span class=\"bash\"> logger --classLoaderClass org.springframework.boot.loader.LaunchedURLClassLoader --name ROOT --level debug</span></span><br></pre></td></tr></table></figure>\n\n<h5 id=\"查看没有appender的logger的信息\"><a href=\"#查看没有appender的logger的信息\" class=\"headerlink\" title=\"查看没有appender的logger的信息\"></a>查看没有appender的logger的信息</h5><p>默认情况下，<code>logger</code>命令只打印有appender的logger的信息。如果想查看没有<code>appender</code>的logger的信息，可以加上参数<code>--include-no-appender</code>。</p>\n<p>注意，通常输出结果会很长。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">logger --include-no-appender</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight console\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">[arthas@2062]$</span><span class=\"bash\"> logger --include-no-appender</span></span><br><span class=\"line\"> name              org.thymeleaf</span><br><span class=\"line\"> class             ch.qos.logback.classic.Logger</span><br><span class=\"line\"> classLoader       org.springframework.boot.loader.LaunchedURLClassLoader@5674cd4d</span><br><span class=\"line\"> classLoaderHash   5674cd4d</span><br><span class=\"line\"> level             null</span><br><span class=\"line\"> effectiveLevel    INFO</span><br><span class=\"line\"> additivity        false</span><br><span class=\"line\"> codeSource        jar:file:/home/scrapbook/tutorial/demo-arthas-spring-boot.jar!/BOOT-INF/lib/logback-classi</span><br><span class=\"line\">                   c-1.1.11.jar!/</span><br><span class=\"line\"> appenders         name            DEBUG_LEVEL_REMAPPER</span><br><span class=\"line\">                   class           org.springframework.boot.logging.logback.LevelRemappingAppender</span><br><span class=\"line\">                   classLoader     org.springframework.boot.loader.LaunchedURLClassLoader@5674cd4d</span><br><span class=\"line\">                   classLoaderHash 5674cd4d</span><br><span class=\"line\">...</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"更多信息\"><a href=\"#更多信息\" class=\"headerlink\" title=\"更多信息\"></a>更多信息</h2><p>在“logger”中，我们演示了了Arthas的logger命令。如果有更多的技巧或者使用疑问，欢迎在Issue里提出。</p>\n<ul>\n<li>Issues: <a href=\"https://github.com/alibaba/arthas/issues\">https://github.com/alibaba/arthas/issues</a></li>\n<li>文档： <a href=\"https://arthas.aliyun.com/doc\">https://arthas.aliyun.com/doc</a></li>\n</ul>\n<p>如果您在使用Arthas，请让我们知道。您的使用对我们非常重要：<a href=\"https://github.com/alibaba/arthas/issues/111\">查看</a></p>\n<p>文章拷贝来源：<a href=\"https://start.aliyun.com/course?spm=a2ck6.17690074.0.0.28bc2e7dHTphXs&amp;id=PaiFAkJM\">https://start.aliyun.com/course?spm=a2ck6.17690074.0.0.28bc2e7dHTphXs&amp;id=PaiFAkJM</a></p>\n"},{"title":"Arthas mbean命令","date":"2021-08-07T01:51:32.000Z","_content":"\n<!-- toc -->\n\n![Arthas](arthas.png)\n\n`Arthas` 是Alibaba开源的Java诊断工具，深受开发者喜爱。在线排查问题，无需重启；动态跟踪Java代码；实时监控JVM状态。\n\n`Arthas` 支持JDK 6+，支持Linux/Mac/Windows，采用命令行交互模式，同时提供丰富的 `Tab` 自动补全功能，进一步方便进行问题的定位和诊断。\n\n当你遇到以下类似问题而束手无策时，Arthas可以帮助你解决：\n\n- 这个类从哪个 jar 包加载的？为什么会报各种类相关的 Exception？\n- 我改的代码为什么没有执行到？难道是我没 commit？分支搞错了？\n- 遇到问题无法在线上 debug，难道只能通过加日志再重新发布吗？\n- 线上遇到某个用户的数据处理有问题，但线上同样无法 debug，线下无法重现！\n- 是否有一个全局视角来查看系统的运行状况？\n- 有什么办法可以监控到JVM的实时运行状态？\n- 怎么快速定位应用的热点，生成火焰图？\n\n本教程会以一个简单的应用为例，演示mbean命令。\n\n- Github: https://github.com/alibaba/arthas\n- 文档: https://arthas.aliyun.com/doc/\n\n## Arthas demo\n\n下载`arthas-demo.jar`，再用`java -jar`命令启动：\n\n```bash\nwget https://arthas.aliyun.com/arthas-demo.jar;java -jar arthas-demo.jar\n```\n\n`arthas-demo`是一个很简单的程序，它随机生成整数，再执行因式分解，把结果打印出来。如果生成的随机数是负数，则会打印提示信息。\n\n## 启动arthas-boot\n\n在新的`Terminal 2`里，下载`arthas-boot.jar`，再用`java -jar`命令启动：\n\n```bash\nwget https://arthas.aliyun.com/arthas-boot.jar;java -jar arthas-boot.jar\n```\n\n`arthas-boot`是`Arthas`的启动程序，它启动后，会列出所有的Java进程，用户可以选择需要诊断的目标进程。\n\n选择第一个进程，输入 `1` ，再`Enter/回车`：\n\n```bash\n1\n```\n\nAttach成功之后，会打印Arthas LOGO。输入 `help` 可以获取到更多的帮助信息。\n\n```bash\nhelp\n```\n\n![Arthas Boot](O1CN01HzatXZ1RgccrlT90M_!!6000000002141-2-tps-529-244.png)\n\n## mbean命令\n\n查看 Mbean 的信息\n\n这个命令可以便捷的查看或监控 Mbean 的属性信息。\n\n#### 参数说明\n\n| 参数名称          | 参数说明                                             |\n| ----------------- | ---------------------------------------------------- |\n| name-pattern      | 名称表达式匹配                                       |\n| attribute-pattern | 属性名表达式匹配                                     |\n| [m]               | 查看元信息                                           |\n| [i:]              | 刷新属性值的时间间隔 (ms)                            |\n| [n:]              | 刷新属性值的次数                                     |\n| [E]               | 开启正则表达式匹配，默认为通配符匹配。仅对属性名有效 |\n\n### 使用参考\n\n#### 列出所有 Mbean 的名称\n\n```bash\nmbean\n```\n\n#### 查看 Mbean 的元信息\n\n```bash\nmbean -m java.lang:type=Threading\n```\n\n#### 查看mbean属性信息\n\n```bash\nmbean java.lang:type=Threading \n```\n\n#### mbean的name支持通配符匹配\n\n```bash\nmbean java.lang:type=Th*\n```\n\n注意：ObjectName 的匹配规则与正常的通配符存在差异，详细参见：[javax.management.ObjectName](https://docs.oracle.com/javase/8/docs/api/javax/management/ObjectName.html?is-external=true)\n\n#### 多属性名称的匹配\n\n查看内存池：\n\n```bash\nmbean java.lang:name=*,type=MemoryPool\n```\n\n#### 通配符匹配特定的属性字段\n\n```bash\nmbean java.lang:type=Threading *Count\n```\n\n#### 使用`-E`命令切换为正则匹配\n\n```bash\nmbean -E java.lang:type=Threading PeakThreadCount|ThreadCount|DaemonThreadCount\n```\n\n查看内存池：\n\n```bash\nmbean -E java.lang:name=*,type=MemoryPool Name|Usage|Type | grep \" HEAP\" -A3 -B1\n```\n\n#### 使用`-i`命令实时监控\n\n```bash\nmbean -i 1000 java.lang:type=Threading *Count\n```\n\n## 更多信息\n\n在“mbean”中，我们演示了了Arthas的mbean命令。如果有更多的技巧或者使用疑问，欢迎在Issue里提出。\n\n- Issues: https://github.com/alibaba/arthas/issues\n- 文档： https://arthas.aliyun.com/doc\n\n如果您在使用Arthas，请让我们知道。您的使用对我们非常重要：[查看](https://github.com/alibaba/arthas/issues/111)\n\n文章拷贝来源：https://start.aliyun.com/course?spm=a2ck6.17690074.0.0.28bc2e7dHTphXs&id=PaiFAkJM","source":"_posts/Java诊断工具Arthas高级命令教程/Arthasmbean命令.md","raw":"---\ntitle: Arthas mbean命令\ndate: 2021-08-07 09:51:32\ntags: ['Java 诊断工具 Arthas 高级命令教程']\n---\n\n<!-- toc -->\n\n![Arthas](arthas.png)\n\n`Arthas` 是Alibaba开源的Java诊断工具，深受开发者喜爱。在线排查问题，无需重启；动态跟踪Java代码；实时监控JVM状态。\n\n`Arthas` 支持JDK 6+，支持Linux/Mac/Windows，采用命令行交互模式，同时提供丰富的 `Tab` 自动补全功能，进一步方便进行问题的定位和诊断。\n\n当你遇到以下类似问题而束手无策时，Arthas可以帮助你解决：\n\n- 这个类从哪个 jar 包加载的？为什么会报各种类相关的 Exception？\n- 我改的代码为什么没有执行到？难道是我没 commit？分支搞错了？\n- 遇到问题无法在线上 debug，难道只能通过加日志再重新发布吗？\n- 线上遇到某个用户的数据处理有问题，但线上同样无法 debug，线下无法重现！\n- 是否有一个全局视角来查看系统的运行状况？\n- 有什么办法可以监控到JVM的实时运行状态？\n- 怎么快速定位应用的热点，生成火焰图？\n\n本教程会以一个简单的应用为例，演示mbean命令。\n\n- Github: https://github.com/alibaba/arthas\n- 文档: https://arthas.aliyun.com/doc/\n\n## Arthas demo\n\n下载`arthas-demo.jar`，再用`java -jar`命令启动：\n\n```bash\nwget https://arthas.aliyun.com/arthas-demo.jar;java -jar arthas-demo.jar\n```\n\n`arthas-demo`是一个很简单的程序，它随机生成整数，再执行因式分解，把结果打印出来。如果生成的随机数是负数，则会打印提示信息。\n\n## 启动arthas-boot\n\n在新的`Terminal 2`里，下载`arthas-boot.jar`，再用`java -jar`命令启动：\n\n```bash\nwget https://arthas.aliyun.com/arthas-boot.jar;java -jar arthas-boot.jar\n```\n\n`arthas-boot`是`Arthas`的启动程序，它启动后，会列出所有的Java进程，用户可以选择需要诊断的目标进程。\n\n选择第一个进程，输入 `1` ，再`Enter/回车`：\n\n```bash\n1\n```\n\nAttach成功之后，会打印Arthas LOGO。输入 `help` 可以获取到更多的帮助信息。\n\n```bash\nhelp\n```\n\n![Arthas Boot](O1CN01HzatXZ1RgccrlT90M_!!6000000002141-2-tps-529-244.png)\n\n## mbean命令\n\n查看 Mbean 的信息\n\n这个命令可以便捷的查看或监控 Mbean 的属性信息。\n\n#### 参数说明\n\n| 参数名称          | 参数说明                                             |\n| ----------------- | ---------------------------------------------------- |\n| name-pattern      | 名称表达式匹配                                       |\n| attribute-pattern | 属性名表达式匹配                                     |\n| [m]               | 查看元信息                                           |\n| [i:]              | 刷新属性值的时间间隔 (ms)                            |\n| [n:]              | 刷新属性值的次数                                     |\n| [E]               | 开启正则表达式匹配，默认为通配符匹配。仅对属性名有效 |\n\n### 使用参考\n\n#### 列出所有 Mbean 的名称\n\n```bash\nmbean\n```\n\n#### 查看 Mbean 的元信息\n\n```bash\nmbean -m java.lang:type=Threading\n```\n\n#### 查看mbean属性信息\n\n```bash\nmbean java.lang:type=Threading \n```\n\n#### mbean的name支持通配符匹配\n\n```bash\nmbean java.lang:type=Th*\n```\n\n注意：ObjectName 的匹配规则与正常的通配符存在差异，详细参见：[javax.management.ObjectName](https://docs.oracle.com/javase/8/docs/api/javax/management/ObjectName.html?is-external=true)\n\n#### 多属性名称的匹配\n\n查看内存池：\n\n```bash\nmbean java.lang:name=*,type=MemoryPool\n```\n\n#### 通配符匹配特定的属性字段\n\n```bash\nmbean java.lang:type=Threading *Count\n```\n\n#### 使用`-E`命令切换为正则匹配\n\n```bash\nmbean -E java.lang:type=Threading PeakThreadCount|ThreadCount|DaemonThreadCount\n```\n\n查看内存池：\n\n```bash\nmbean -E java.lang:name=*,type=MemoryPool Name|Usage|Type | grep \" HEAP\" -A3 -B1\n```\n\n#### 使用`-i`命令实时监控\n\n```bash\nmbean -i 1000 java.lang:type=Threading *Count\n```\n\n## 更多信息\n\n在“mbean”中，我们演示了了Arthas的mbean命令。如果有更多的技巧或者使用疑问，欢迎在Issue里提出。\n\n- Issues: https://github.com/alibaba/arthas/issues\n- 文档： https://arthas.aliyun.com/doc\n\n如果您在使用Arthas，请让我们知道。您的使用对我们非常重要：[查看](https://github.com/alibaba/arthas/issues/111)\n\n文章拷贝来源：https://start.aliyun.com/course?spm=a2ck6.17690074.0.0.28bc2e7dHTphXs&id=PaiFAkJM","slug":"Java诊断工具Arthas高级命令教程/Arthasmbean命令","published":1,"updated":"2021-08-07T05:34:44.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cks1cgr6k0023fw5idwww7wcj","content":"<!-- toc -->\n\n<ul>\n<li><a href=\"#arthas-demo\">Arthas demo</a></li>\n<li><a href=\"#%E5%90%AF%E5%8A%A8arthas-boot\">启动arthas-boot</a></li>\n<li><a href=\"#mbean%E5%91%BD%E4%BB%A4\">mbean命令</a><ul>\n<li><a href=\"#%E5%8F%82%E6%95%B0%E8%AF%B4%E6%98%8E\">参数说明</a></li>\n</ul>\n<ul>\n<li><a href=\"#%E4%BD%BF%E7%94%A8%E5%8F%82%E8%80%83\">使用参考</a><ul>\n<li><a href=\"#%E5%88%97%E5%87%BA%E6%89%80%E6%9C%89-mbean-%E7%9A%84%E5%90%8D%E7%A7%B0\">列出所有 Mbean 的名称</a></li>\n<li><a href=\"#%E6%9F%A5%E7%9C%8B-mbean-%E7%9A%84%E5%85%83%E4%BF%A1%E6%81%AF\">查看 Mbean 的元信息</a></li>\n<li><a href=\"#%E6%9F%A5%E7%9C%8Bmbean%E5%B1%9E%E6%80%A7%E4%BF%A1%E6%81%AF\">查看mbean属性信息</a></li>\n<li><a href=\"#mbean%E7%9A%84name%E6%94%AF%E6%8C%81%E9%80%9A%E9%85%8D%E7%AC%A6%E5%8C%B9%E9%85%8D\">mbean的name支持通配符匹配</a></li>\n<li><a href=\"#%E5%A4%9A%E5%B1%9E%E6%80%A7%E5%90%8D%E7%A7%B0%E7%9A%84%E5%8C%B9%E9%85%8D\">多属性名称的匹配</a></li>\n<li><a href=\"#%E9%80%9A%E9%85%8D%E7%AC%A6%E5%8C%B9%E9%85%8D%E7%89%B9%E5%AE%9A%E7%9A%84%E5%B1%9E%E6%80%A7%E5%AD%97%E6%AE%B5\">通配符匹配特定的属性字段</a></li>\n<li><a href=\"#%E4%BD%BF%E7%94%A8-e%E5%91%BD%E4%BB%A4%E5%88%87%E6%8D%A2%E4%B8%BA%E6%AD%A3%E5%88%99%E5%8C%B9%E9%85%8D\">使用<code>-E</code>命令切换为正则匹配</a></li>\n<li><a href=\"#%E4%BD%BF%E7%94%A8-i%E5%91%BD%E4%BB%A4%E5%AE%9E%E6%97%B6%E7%9B%91%E6%8E%A7\">使用<code>-i</code>命令实时监控</a></li>\n</ul>\n</li>\n</ul>\n</li>\n<li><a href=\"#%E6%9B%B4%E5%A4%9A%E4%BF%A1%E6%81%AF\">更多信息</a></li>\n</ul>\n<!-- tocstop -->\n\n<p><img src=\"/jlynet.github.io/2021/08/07/Java%E8%AF%8A%E6%96%AD%E5%B7%A5%E5%85%B7Arthas%E9%AB%98%E7%BA%A7%E5%91%BD%E4%BB%A4%E6%95%99%E7%A8%8B/Arthasmbean%E5%91%BD%E4%BB%A4/arthas.png\" alt=\"Arthas\"></p>\n<p><code>Arthas</code> 是Alibaba开源的Java诊断工具，深受开发者喜爱。在线排查问题，无需重启；动态跟踪Java代码；实时监控JVM状态。</p>\n<p><code>Arthas</code> 支持JDK 6+，支持Linux/Mac/Windows，采用命令行交互模式，同时提供丰富的 <code>Tab</code> 自动补全功能，进一步方便进行问题的定位和诊断。</p>\n<p>当你遇到以下类似问题而束手无策时，Arthas可以帮助你解决：</p>\n<ul>\n<li>这个类从哪个 jar 包加载的？为什么会报各种类相关的 Exception？</li>\n<li>我改的代码为什么没有执行到？难道是我没 commit？分支搞错了？</li>\n<li>遇到问题无法在线上 debug，难道只能通过加日志再重新发布吗？</li>\n<li>线上遇到某个用户的数据处理有问题，但线上同样无法 debug，线下无法重现！</li>\n<li>是否有一个全局视角来查看系统的运行状况？</li>\n<li>有什么办法可以监控到JVM的实时运行状态？</li>\n<li>怎么快速定位应用的热点，生成火焰图？</li>\n</ul>\n<p>本教程会以一个简单的应用为例，演示mbean命令。</p>\n<ul>\n<li>Github: <a href=\"https://github.com/alibaba/arthas\">https://github.com/alibaba/arthas</a></li>\n<li>文档: <a href=\"https://arthas.aliyun.com/doc/\">https://arthas.aliyun.com/doc/</a></li>\n</ul>\n<h2><span id=\"arthas-demo\">Arthas demo</span></h2><p>下载<code>arthas-demo.jar</code>，再用<code>java -jar</code>命令启动：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wget https://arthas.aliyun.com/arthas-demo.jar;java -jar arthas-demo.jar</span><br></pre></td></tr></table></figure>\n\n<p><code>arthas-demo</code>是一个很简单的程序，它随机生成整数，再执行因式分解，把结果打印出来。如果生成的随机数是负数，则会打印提示信息。</p>\n<h2><span id=\"启动arthas-boot\">启动arthas-boot</span></h2><p>在新的<code>Terminal 2</code>里，下载<code>arthas-boot.jar</code>，再用<code>java -jar</code>命令启动：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wget https://arthas.aliyun.com/arthas-boot.jar;java -jar arthas-boot.jar</span><br></pre></td></tr></table></figure>\n\n<p><code>arthas-boot</code>是<code>Arthas</code>的启动程序，它启动后，会列出所有的Java进程，用户可以选择需要诊断的目标进程。</p>\n<p>选择第一个进程，输入 <code>1</code> ，再<code>Enter/回车</code>：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1</span><br></pre></td></tr></table></figure>\n\n<p>Attach成功之后，会打印Arthas LOGO。输入 <code>help</code> 可以获取到更多的帮助信息。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">help</span></span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/jlynet.github.io/2021/08/07/Java%E8%AF%8A%E6%96%AD%E5%B7%A5%E5%85%B7Arthas%E9%AB%98%E7%BA%A7%E5%91%BD%E4%BB%A4%E6%95%99%E7%A8%8B/Arthasmbean%E5%91%BD%E4%BB%A4/O1CN01HzatXZ1RgccrlT90M_!!6000000002141-2-tps-529-244.png\" alt=\"Arthas Boot\"></p>\n<h2><span id=\"mbean命令\">mbean命令</span></h2><p>查看 Mbean 的信息</p>\n<p>这个命令可以便捷的查看或监控 Mbean 的属性信息。</p>\n<h4><span id=\"参数说明\">参数说明</span></h4><table>\n<thead>\n<tr>\n<th>参数名称</th>\n<th>参数说明</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>name-pattern</td>\n<td>名称表达式匹配</td>\n</tr>\n<tr>\n<td>attribute-pattern</td>\n<td>属性名表达式匹配</td>\n</tr>\n<tr>\n<td>[m]</td>\n<td>查看元信息</td>\n</tr>\n<tr>\n<td>[i:]</td>\n<td>刷新属性值的时间间隔 (ms)</td>\n</tr>\n<tr>\n<td>[n:]</td>\n<td>刷新属性值的次数</td>\n</tr>\n<tr>\n<td>[E]</td>\n<td>开启正则表达式匹配，默认为通配符匹配。仅对属性名有效</td>\n</tr>\n</tbody></table>\n<h3><span id=\"使用参考\">使用参考</span></h3><h4><span id=\"列出所有-mbean-的名称\">列出所有 Mbean 的名称</span></h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mbean</span><br></pre></td></tr></table></figure>\n\n<h4><span id=\"查看-mbean-的元信息\">查看 Mbean 的元信息</span></h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mbean -m java.lang:<span class=\"built_in\">type</span>=Threading</span><br></pre></td></tr></table></figure>\n\n<h4><span id=\"查看mbean属性信息\">查看mbean属性信息</span></h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mbean java.lang:<span class=\"built_in\">type</span>=Threading </span><br></pre></td></tr></table></figure>\n\n<h4><span id=\"mbean的name支持通配符匹配\">mbean的name支持通配符匹配</span></h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mbean java.lang:<span class=\"built_in\">type</span>=Th*</span><br></pre></td></tr></table></figure>\n\n<p>注意：ObjectName 的匹配规则与正常的通配符存在差异，详细参见：<a href=\"https://docs.oracle.com/javase/8/docs/api/javax/management/ObjectName.html?is-external=true\">javax.management.ObjectName</a></p>\n<h4><span id=\"多属性名称的匹配\">多属性名称的匹配</span></h4><p>查看内存池：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mbean java.lang:name=*,<span class=\"built_in\">type</span>=MemoryPool</span><br></pre></td></tr></table></figure>\n\n<h4><span id=\"通配符匹配特定的属性字段\">通配符匹配特定的属性字段</span></h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mbean java.lang:<span class=\"built_in\">type</span>=Threading *Count</span><br></pre></td></tr></table></figure>\n\n<h4><span id=\"使用-e命令切换为正则匹配\">使用<code>-E</code>命令切换为正则匹配</span></h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mbean -E java.lang:<span class=\"built_in\">type</span>=Threading PeakThreadCount|ThreadCount|DaemonThreadCount</span><br></pre></td></tr></table></figure>\n\n<p>查看内存池：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mbean -E java.lang:name=*,<span class=\"built_in\">type</span>=MemoryPool Name|Usage|Type | grep <span class=\"string\">&quot; HEAP&quot;</span> -A3 -B1</span><br></pre></td></tr></table></figure>\n\n<h4><span id=\"使用-i命令实时监控\">使用<code>-i</code>命令实时监控</span></h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mbean -i 1000 java.lang:<span class=\"built_in\">type</span>=Threading *Count</span><br></pre></td></tr></table></figure>\n\n<h2><span id=\"更多信息\">更多信息</span></h2><p>在“mbean”中，我们演示了了Arthas的mbean命令。如果有更多的技巧或者使用疑问，欢迎在Issue里提出。</p>\n<ul>\n<li>Issues: <a href=\"https://github.com/alibaba/arthas/issues\">https://github.com/alibaba/arthas/issues</a></li>\n<li>文档： <a href=\"https://arthas.aliyun.com/doc\">https://arthas.aliyun.com/doc</a></li>\n</ul>\n<p>如果您在使用Arthas，请让我们知道。您的使用对我们非常重要：<a href=\"https://github.com/alibaba/arthas/issues/111\">查看</a></p>\n<p>文章拷贝来源：<a href=\"https://start.aliyun.com/course?spm=a2ck6.17690074.0.0.28bc2e7dHTphXs&amp;id=PaiFAkJM\">https://start.aliyun.com/course?spm=a2ck6.17690074.0.0.28bc2e7dHTphXs&amp;id=PaiFAkJM</a></p>\n","site":{"data":{}},"excerpt":"","more":"<!-- toc -->\n\n<ul>\n<li><a href=\"#arthas-demo\">Arthas demo</a></li>\n<li><a href=\"#%E5%90%AF%E5%8A%A8arthas-boot\">启动arthas-boot</a></li>\n<li><a href=\"#mbean%E5%91%BD%E4%BB%A4\">mbean命令</a><ul>\n<li><a href=\"#%E5%8F%82%E6%95%B0%E8%AF%B4%E6%98%8E\">参数说明</a></li>\n</ul>\n<ul>\n<li><a href=\"#%E4%BD%BF%E7%94%A8%E5%8F%82%E8%80%83\">使用参考</a><ul>\n<li><a href=\"#%E5%88%97%E5%87%BA%E6%89%80%E6%9C%89-mbean-%E7%9A%84%E5%90%8D%E7%A7%B0\">列出所有 Mbean 的名称</a></li>\n<li><a href=\"#%E6%9F%A5%E7%9C%8B-mbean-%E7%9A%84%E5%85%83%E4%BF%A1%E6%81%AF\">查看 Mbean 的元信息</a></li>\n<li><a href=\"#%E6%9F%A5%E7%9C%8Bmbean%E5%B1%9E%E6%80%A7%E4%BF%A1%E6%81%AF\">查看mbean属性信息</a></li>\n<li><a href=\"#mbean%E7%9A%84name%E6%94%AF%E6%8C%81%E9%80%9A%E9%85%8D%E7%AC%A6%E5%8C%B9%E9%85%8D\">mbean的name支持通配符匹配</a></li>\n<li><a href=\"#%E5%A4%9A%E5%B1%9E%E6%80%A7%E5%90%8D%E7%A7%B0%E7%9A%84%E5%8C%B9%E9%85%8D\">多属性名称的匹配</a></li>\n<li><a href=\"#%E9%80%9A%E9%85%8D%E7%AC%A6%E5%8C%B9%E9%85%8D%E7%89%B9%E5%AE%9A%E7%9A%84%E5%B1%9E%E6%80%A7%E5%AD%97%E6%AE%B5\">通配符匹配特定的属性字段</a></li>\n<li><a href=\"#%E4%BD%BF%E7%94%A8-e%E5%91%BD%E4%BB%A4%E5%88%87%E6%8D%A2%E4%B8%BA%E6%AD%A3%E5%88%99%E5%8C%B9%E9%85%8D\">使用<code>-E</code>命令切换为正则匹配</a></li>\n<li><a href=\"#%E4%BD%BF%E7%94%A8-i%E5%91%BD%E4%BB%A4%E5%AE%9E%E6%97%B6%E7%9B%91%E6%8E%A7\">使用<code>-i</code>命令实时监控</a></li>\n</ul>\n</li>\n</ul>\n</li>\n<li><a href=\"#%E6%9B%B4%E5%A4%9A%E4%BF%A1%E6%81%AF\">更多信息</a></li>\n</ul>\n<!-- tocstop -->\n\n<p><img src=\"/jlynet.github.io/2021/08/07/Java%E8%AF%8A%E6%96%AD%E5%B7%A5%E5%85%B7Arthas%E9%AB%98%E7%BA%A7%E5%91%BD%E4%BB%A4%E6%95%99%E7%A8%8B/Arthasmbean%E5%91%BD%E4%BB%A4/arthas.png\" alt=\"Arthas\"></p>\n<p><code>Arthas</code> 是Alibaba开源的Java诊断工具，深受开发者喜爱。在线排查问题，无需重启；动态跟踪Java代码；实时监控JVM状态。</p>\n<p><code>Arthas</code> 支持JDK 6+，支持Linux/Mac/Windows，采用命令行交互模式，同时提供丰富的 <code>Tab</code> 自动补全功能，进一步方便进行问题的定位和诊断。</p>\n<p>当你遇到以下类似问题而束手无策时，Arthas可以帮助你解决：</p>\n<ul>\n<li>这个类从哪个 jar 包加载的？为什么会报各种类相关的 Exception？</li>\n<li>我改的代码为什么没有执行到？难道是我没 commit？分支搞错了？</li>\n<li>遇到问题无法在线上 debug，难道只能通过加日志再重新发布吗？</li>\n<li>线上遇到某个用户的数据处理有问题，但线上同样无法 debug，线下无法重现！</li>\n<li>是否有一个全局视角来查看系统的运行状况？</li>\n<li>有什么办法可以监控到JVM的实时运行状态？</li>\n<li>怎么快速定位应用的热点，生成火焰图？</li>\n</ul>\n<p>本教程会以一个简单的应用为例，演示mbean命令。</p>\n<ul>\n<li>Github: <a href=\"https://github.com/alibaba/arthas\">https://github.com/alibaba/arthas</a></li>\n<li>文档: <a href=\"https://arthas.aliyun.com/doc/\">https://arthas.aliyun.com/doc/</a></li>\n</ul>\n<h2 id=\"Arthas-demo\"><a href=\"#Arthas-demo\" class=\"headerlink\" title=\"Arthas demo\"></a>Arthas demo</h2><p>下载<code>arthas-demo.jar</code>，再用<code>java -jar</code>命令启动：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wget https://arthas.aliyun.com/arthas-demo.jar;java -jar arthas-demo.jar</span><br></pre></td></tr></table></figure>\n\n<p><code>arthas-demo</code>是一个很简单的程序，它随机生成整数，再执行因式分解，把结果打印出来。如果生成的随机数是负数，则会打印提示信息。</p>\n<h2 id=\"启动arthas-boot\"><a href=\"#启动arthas-boot\" class=\"headerlink\" title=\"启动arthas-boot\"></a>启动arthas-boot</h2><p>在新的<code>Terminal 2</code>里，下载<code>arthas-boot.jar</code>，再用<code>java -jar</code>命令启动：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wget https://arthas.aliyun.com/arthas-boot.jar;java -jar arthas-boot.jar</span><br></pre></td></tr></table></figure>\n\n<p><code>arthas-boot</code>是<code>Arthas</code>的启动程序，它启动后，会列出所有的Java进程，用户可以选择需要诊断的目标进程。</p>\n<p>选择第一个进程，输入 <code>1</code> ，再<code>Enter/回车</code>：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1</span><br></pre></td></tr></table></figure>\n\n<p>Attach成功之后，会打印Arthas LOGO。输入 <code>help</code> 可以获取到更多的帮助信息。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">help</span></span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/jlynet.github.io/2021/08/07/Java%E8%AF%8A%E6%96%AD%E5%B7%A5%E5%85%B7Arthas%E9%AB%98%E7%BA%A7%E5%91%BD%E4%BB%A4%E6%95%99%E7%A8%8B/Arthasmbean%E5%91%BD%E4%BB%A4/O1CN01HzatXZ1RgccrlT90M_!!6000000002141-2-tps-529-244.png\" alt=\"Arthas Boot\"></p>\n<h2 id=\"mbean命令\"><a href=\"#mbean命令\" class=\"headerlink\" title=\"mbean命令\"></a>mbean命令</h2><p>查看 Mbean 的信息</p>\n<p>这个命令可以便捷的查看或监控 Mbean 的属性信息。</p>\n<h4 id=\"参数说明\"><a href=\"#参数说明\" class=\"headerlink\" title=\"参数说明\"></a>参数说明</h4><table>\n<thead>\n<tr>\n<th>参数名称</th>\n<th>参数说明</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>name-pattern</td>\n<td>名称表达式匹配</td>\n</tr>\n<tr>\n<td>attribute-pattern</td>\n<td>属性名表达式匹配</td>\n</tr>\n<tr>\n<td>[m]</td>\n<td>查看元信息</td>\n</tr>\n<tr>\n<td>[i:]</td>\n<td>刷新属性值的时间间隔 (ms)</td>\n</tr>\n<tr>\n<td>[n:]</td>\n<td>刷新属性值的次数</td>\n</tr>\n<tr>\n<td>[E]</td>\n<td>开启正则表达式匹配，默认为通配符匹配。仅对属性名有效</td>\n</tr>\n</tbody></table>\n<h3 id=\"使用参考\"><a href=\"#使用参考\" class=\"headerlink\" title=\"使用参考\"></a>使用参考</h3><h4 id=\"列出所有-Mbean-的名称\"><a href=\"#列出所有-Mbean-的名称\" class=\"headerlink\" title=\"列出所有 Mbean 的名称\"></a>列出所有 Mbean 的名称</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mbean</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"查看-Mbean-的元信息\"><a href=\"#查看-Mbean-的元信息\" class=\"headerlink\" title=\"查看 Mbean 的元信息\"></a>查看 Mbean 的元信息</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mbean -m java.lang:<span class=\"built_in\">type</span>=Threading</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"查看mbean属性信息\"><a href=\"#查看mbean属性信息\" class=\"headerlink\" title=\"查看mbean属性信息\"></a>查看mbean属性信息</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mbean java.lang:<span class=\"built_in\">type</span>=Threading </span><br></pre></td></tr></table></figure>\n\n<h4 id=\"mbean的name支持通配符匹配\"><a href=\"#mbean的name支持通配符匹配\" class=\"headerlink\" title=\"mbean的name支持通配符匹配\"></a>mbean的name支持通配符匹配</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mbean java.lang:<span class=\"built_in\">type</span>=Th*</span><br></pre></td></tr></table></figure>\n\n<p>注意：ObjectName 的匹配规则与正常的通配符存在差异，详细参见：<a href=\"https://docs.oracle.com/javase/8/docs/api/javax/management/ObjectName.html?is-external=true\">javax.management.ObjectName</a></p>\n<h4 id=\"多属性名称的匹配\"><a href=\"#多属性名称的匹配\" class=\"headerlink\" title=\"多属性名称的匹配\"></a>多属性名称的匹配</h4><p>查看内存池：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mbean java.lang:name=*,<span class=\"built_in\">type</span>=MemoryPool</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"通配符匹配特定的属性字段\"><a href=\"#通配符匹配特定的属性字段\" class=\"headerlink\" title=\"通配符匹配特定的属性字段\"></a>通配符匹配特定的属性字段</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mbean java.lang:<span class=\"built_in\">type</span>=Threading *Count</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"使用-E命令切换为正则匹配\"><a href=\"#使用-E命令切换为正则匹配\" class=\"headerlink\" title=\"使用-E命令切换为正则匹配\"></a>使用<code>-E</code>命令切换为正则匹配</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mbean -E java.lang:<span class=\"built_in\">type</span>=Threading PeakThreadCount|ThreadCount|DaemonThreadCount</span><br></pre></td></tr></table></figure>\n\n<p>查看内存池：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mbean -E java.lang:name=*,<span class=\"built_in\">type</span>=MemoryPool Name|Usage|Type | grep <span class=\"string\">&quot; HEAP&quot;</span> -A3 -B1</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"使用-i命令实时监控\"><a href=\"#使用-i命令实时监控\" class=\"headerlink\" title=\"使用-i命令实时监控\"></a>使用<code>-i</code>命令实时监控</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mbean -i 1000 java.lang:<span class=\"built_in\">type</span>=Threading *Count</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"更多信息\"><a href=\"#更多信息\" class=\"headerlink\" title=\"更多信息\"></a>更多信息</h2><p>在“mbean”中，我们演示了了Arthas的mbean命令。如果有更多的技巧或者使用疑问，欢迎在Issue里提出。</p>\n<ul>\n<li>Issues: <a href=\"https://github.com/alibaba/arthas/issues\">https://github.com/alibaba/arthas/issues</a></li>\n<li>文档： <a href=\"https://arthas.aliyun.com/doc\">https://arthas.aliyun.com/doc</a></li>\n</ul>\n<p>如果您在使用Arthas，请让我们知道。您的使用对我们非常重要：<a href=\"https://github.com/alibaba/arthas/issues/111\">查看</a></p>\n<p>文章拷贝来源：<a href=\"https://start.aliyun.com/course?spm=a2ck6.17690074.0.0.28bc2e7dHTphXs&amp;id=PaiFAkJM\">https://start.aliyun.com/course?spm=a2ck6.17690074.0.0.28bc2e7dHTphXs&amp;id=PaiFAkJM</a></p>\n"},{"title":"Arthas mc-redefine命令","date":"2021-08-07T01:51:43.000Z","_content":"\n<!-- toc -->\n\n![Arthas](arthas.png)\n\n`Arthas` 是Alibaba开源的Java诊断工具，深受开发者喜爱。在线排查问题，无需重启；动态跟踪Java代码；实时监控JVM状态。\n\n`Arthas` 支持JDK 6+，支持Linux/Mac/Windows，采用命令行交互模式，同时提供丰富的 `Tab` 自动补全功能，进一步方便进行问题的定位和诊断。\n\n当你遇到以下类似问题而束手无策时，Arthas可以帮助你解决：\n\n- 这个类从哪个 jar 包加载的？为什么会报各种类相关的 Exception？\n- 我改的代码为什么没有执行到？难道是我没 commit？分支搞错了？\n- 遇到问题无法在线上 debug，难道只能通过加日志再重新发布吗？\n- 线上遇到某个用户的数据处理有问题，但线上同样无法 debug，线下无法重现！\n- 是否有一个全局视角来查看系统的运行状况？\n- 有什么办法可以监控到JVM的实时运行状态？\n- 怎么快速定位应用的热点，生成火焰图？\n\n本教程会以一个普通的Spring Boot应用为例，演示mc-redefine命令。\n\n- Github: https://github.com/alibaba/arthas\n- 文档: https://arthas.aliyun.com/doc/\n\n## 启动demo\n\n下载`demo-arthas-spring-boot.jar`，再用`java -jar`命令启动：\n\n```bash\nwget https://code.aliyun.com/middleware-container/handsonLabExternedFiles/raw/master/demo-arthas-spring-boot.jar;java -jar demo-arthas-spring-boot.jar\n```\n\n`demo-arthas-spring-boot`是一个很简单的spring boot应用，源代码：[查看](https://github.com/hengyunabc/spring-boot-inside/tree/master/demo-arthas-spring-boot)\n\n启动之后，可以访问61000端口： 点击查看\n\n![Demo Web](O1CN010Qbzcz1ctPSWSZI6L_!!6000000003658-2-tps-333-182.png)\n\n## 启动arthas-boot\n\n在新的`Terminal 2`里，下载`arthas-boot.jar`，再用`java -jar`命令启动：\n\n```bash\nwget https://arthas.aliyun.com/arthas-boot.jar;java -jar arthas-boot.jar\n```\n\n`arthas-boot`是`Arthas`的启动程序，它启动后，会列出所有的Java进程，用户可以选择需要诊断的目标进程。\n\n选择第一个进程，输入 `1` ，再`Enter/回车`：\n\n```bash\n1\n```\n\nAttach成功之后，会打印Arthas LOGO。输入 `help` 可以获取到更多的帮助信息。\n\n```bash\nhelp\n```\n\n![Arthas Boot](O1CN01HzatXZ1RgccrlT90M_!!6000000002141-2-tps-529-244.png)\n\n## mc命令\n\n> Memory Compiler/内存编译器，编译`.java`文件生成`.class`。 可以通过`-c`/`--classLoaderClass`参数指定classloader，`-d`参数指定输出目录\n\n编译生成`.class`文件之后，可以结合`redefine`命令实现热更新代码。\n\n## redefine命令\n\n> 加载外部的`.class`文件，redefine jvm已加载的类。\n\n参考：[Instrumentation#redefineClasses](https://docs.oracle.com/javase/8/docs/api/java/lang/instrument/Instrumentation.html#redefineClasses-java.lang.instrument.ClassDefinition…-)\n\n#### 常见问题\n\n- redefine的class不能修改、添加、删除类的field和method，包括方法参数、方法名称及返回值\n- 如果mc失败，可以在本地开发环境编译好class文件，上传到目标系统，使用redefine热加载class\n- 目前redefine 和watch/trace/jad/tt等命令冲突，以后重新实现redefine功能会解决此问题\n\n> 注意， redefine后的原来的类不能恢复，redefine有可能失败（比如增加了新的field），参考jdk本身的文档。\n>\n> `reset`命令对`redefine`的类无效。如果想重置，需要`redefine`原始的字节码。\n>\n> `redefine`命令和`jad`/`watch`/`trace`/`monitor`/`tt`等命令会冲突。执行完`redefine`之后，如果再执行上面提到的命令，则会把`redefine`的字节码重置。 原因是jdk本身redefine和Retransform是不同的机制，同时使用两种机制来更新字节码，只有最后修改的会生效。\n\n#### 参数说明\n\n| 参数名称              | 参数说明                                   |\n| --------------------- | ------------------------------------------ |\n| [c:]                  | ClassLoader的hashcode                      |\n| `[classLoaderClass:]` | 指定执行表达式的 ClassLoader 的 class name |\n| [p:]                  | 外部的`.class`文件的完整路径，支持多个     |\n\n#### redefine的限制\n\n- 不允许新增加field/method\n- 正在跑的函数，没有退出不能生效。\n\n## 热更新代码\n\n下面介绍通过`jad`/`mc`/`redefine` 命令实现动态更新代码的功能。\n\n目前，访问 http://localhost:61000/user/0 ，会返回500异常：\n\n```bash\ncurl http://localhost:61000/user/0\n```\n\n```\n{\"timestamp\":1550223186170,\"status\":500,\"error\":\"Internal Server Error\",\"exception\":\"java.lang.IllegalArgumentException\",\"message\":\"id < 1\",\"path\":\"/user/0\"}\n```\n\n下面通过热更新代码，修改这个逻辑。\n\n#### jad反编译UserController\n\n```bash\njad --source-only com.example.demo.arthas.user.UserController > /tmp/UserController.java\n```\n\njad反编译的结果保存在 `/tmp/UserController.java`文件里了。\n\n再打开一个`Terminal 3`，然后用vim来编辑`/tmp/UserController.java`：\n\n```bash\nvim /tmp/UserController.java\n```\n\n比如当 user id 小于1时，也正常返回，不抛出异常：\n\n```java\n    @GetMapping(value={\"/user/{id}\"})\n    public User findUserById(@PathVariable Integer id) {\n        logger.info(\"id: {}\", (Object)id);\n        if (id != null && id < 1) {\n            return new User(id, \"name\" + id);\n            // throw new IllegalArgumentException(\"id < 1\");\n        }\n        return new User(id.intValue(), \"name\" + id);\n    }\n```\n\n#### sc查找加载UserController的ClassLoader\n\n```bash\nsc -d *UserController | grep classLoaderHash\n```\n\n```console\n$ sc -d *UserController | grep classLoaderHash\n classLoaderHash   1be6f5c3\n```\n\n可以发现是 spring boot `LaunchedURLClassLoader@1be6f5c3` 加载的。\n\n注意hashcode是变化的，需要先查看当前的ClassLoader信息，提取对应ClassLoader的hashcode。\n\n如果你使用`-c`，你需要手动输入hashcode：`-c <hashcode>`\n\n对于只有唯一实例的ClassLoader可以通过`--classLoaderClass`指定class name，使用起来更加方便.\n\n`--classLoaderClass` 的值是ClassLoader的类名，只有匹配到唯一的ClassLoader实例时才能工作，目的是方便输入通用命令，而`-c <hashcode>`是动态变化的。\n\n#### mc\n\n保存好`/tmp/UserController.java`之后，使用`mc`(Memory Compiler)命令来编译，并且通过`--classLoaderClass`参数指定ClassLoader：\n\n```bash\nmc --classLoaderClass org.springframework.boot.loader.LaunchedURLClassLoader /tmp/UserController.java -d /tmp\n```\n\n```console\n$ mc --classLoaderClass org.springframework.boot.loader.LaunchedURLClassLoader /tmp/UserController.java -d /tmp\nMemory compiler output:\n/tmp/com/example/demo/arthas/user/UserController.class\nAffect(row-cnt:1) cost in 346 ms\n```\n\n也可以通过`mc -c <classLoaderHash> /tmp/UserController.java -d /tmp`，使用`-c`参数指定ClassLoaderHash:\n\n```console\n$ mc -c 1be6f5c3 /tmp/UserController.java -d /tmp\n```\n\n#### redefine\n\n再使用`redefine`命令重新加载新编译好的`UserController.class`：\n\n```bash\nredefine /tmp/com/example/demo/arthas/user/UserController.class\n```\n\n```\n$ redefine /tmp/com/example/demo/arthas/user/UserController.class\nredefine success, size: 1\n```\n\n#### 热修改代码结果\n\n`redefine`成功之后，再次访问 user/0 ，结果是：\n\n```\n{\n  \"id\": 0,\n  \"name\": \"name0\"\n}\n```\n\n## 更多信息\n\n在“mc-redefine”中，我们演示了了Arthas的mc-redefine命令。如果有更多的技巧或者使用疑问，欢迎在Issue里提出。\n\n- Issues: https://github.com/alibaba/arthas/issues\n- 文档： https://arthas.aliyun.com/doc\n\n如果您在使用Arthas，请让我们知道。您的使用对我们非常重要：[查看](https://github.com/alibaba/arthas/issues/111)\n\n文章拷贝来源：https://start.aliyun.com/course?spm=a2ck6.17690074.0.0.28bc2e7dHTphXs&id=PaiFAkJM","source":"_posts/Java诊断工具Arthas高级命令教程/Arthasmc-redefine命令.md","raw":"---\ntitle: Arthas mc-redefine命令\ndate: 2021-08-07 09:51:43\ntags: ['Java 诊断工具 Arthas 高级命令教程']\n---\n\n<!-- toc -->\n\n![Arthas](arthas.png)\n\n`Arthas` 是Alibaba开源的Java诊断工具，深受开发者喜爱。在线排查问题，无需重启；动态跟踪Java代码；实时监控JVM状态。\n\n`Arthas` 支持JDK 6+，支持Linux/Mac/Windows，采用命令行交互模式，同时提供丰富的 `Tab` 自动补全功能，进一步方便进行问题的定位和诊断。\n\n当你遇到以下类似问题而束手无策时，Arthas可以帮助你解决：\n\n- 这个类从哪个 jar 包加载的？为什么会报各种类相关的 Exception？\n- 我改的代码为什么没有执行到？难道是我没 commit？分支搞错了？\n- 遇到问题无法在线上 debug，难道只能通过加日志再重新发布吗？\n- 线上遇到某个用户的数据处理有问题，但线上同样无法 debug，线下无法重现！\n- 是否有一个全局视角来查看系统的运行状况？\n- 有什么办法可以监控到JVM的实时运行状态？\n- 怎么快速定位应用的热点，生成火焰图？\n\n本教程会以一个普通的Spring Boot应用为例，演示mc-redefine命令。\n\n- Github: https://github.com/alibaba/arthas\n- 文档: https://arthas.aliyun.com/doc/\n\n## 启动demo\n\n下载`demo-arthas-spring-boot.jar`，再用`java -jar`命令启动：\n\n```bash\nwget https://code.aliyun.com/middleware-container/handsonLabExternedFiles/raw/master/demo-arthas-spring-boot.jar;java -jar demo-arthas-spring-boot.jar\n```\n\n`demo-arthas-spring-boot`是一个很简单的spring boot应用，源代码：[查看](https://github.com/hengyunabc/spring-boot-inside/tree/master/demo-arthas-spring-boot)\n\n启动之后，可以访问61000端口： 点击查看\n\n![Demo Web](O1CN010Qbzcz1ctPSWSZI6L_!!6000000003658-2-tps-333-182.png)\n\n## 启动arthas-boot\n\n在新的`Terminal 2`里，下载`arthas-boot.jar`，再用`java -jar`命令启动：\n\n```bash\nwget https://arthas.aliyun.com/arthas-boot.jar;java -jar arthas-boot.jar\n```\n\n`arthas-boot`是`Arthas`的启动程序，它启动后，会列出所有的Java进程，用户可以选择需要诊断的目标进程。\n\n选择第一个进程，输入 `1` ，再`Enter/回车`：\n\n```bash\n1\n```\n\nAttach成功之后，会打印Arthas LOGO。输入 `help` 可以获取到更多的帮助信息。\n\n```bash\nhelp\n```\n\n![Arthas Boot](O1CN01HzatXZ1RgccrlT90M_!!6000000002141-2-tps-529-244.png)\n\n## mc命令\n\n> Memory Compiler/内存编译器，编译`.java`文件生成`.class`。 可以通过`-c`/`--classLoaderClass`参数指定classloader，`-d`参数指定输出目录\n\n编译生成`.class`文件之后，可以结合`redefine`命令实现热更新代码。\n\n## redefine命令\n\n> 加载外部的`.class`文件，redefine jvm已加载的类。\n\n参考：[Instrumentation#redefineClasses](https://docs.oracle.com/javase/8/docs/api/java/lang/instrument/Instrumentation.html#redefineClasses-java.lang.instrument.ClassDefinition…-)\n\n#### 常见问题\n\n- redefine的class不能修改、添加、删除类的field和method，包括方法参数、方法名称及返回值\n- 如果mc失败，可以在本地开发环境编译好class文件，上传到目标系统，使用redefine热加载class\n- 目前redefine 和watch/trace/jad/tt等命令冲突，以后重新实现redefine功能会解决此问题\n\n> 注意， redefine后的原来的类不能恢复，redefine有可能失败（比如增加了新的field），参考jdk本身的文档。\n>\n> `reset`命令对`redefine`的类无效。如果想重置，需要`redefine`原始的字节码。\n>\n> `redefine`命令和`jad`/`watch`/`trace`/`monitor`/`tt`等命令会冲突。执行完`redefine`之后，如果再执行上面提到的命令，则会把`redefine`的字节码重置。 原因是jdk本身redefine和Retransform是不同的机制，同时使用两种机制来更新字节码，只有最后修改的会生效。\n\n#### 参数说明\n\n| 参数名称              | 参数说明                                   |\n| --------------------- | ------------------------------------------ |\n| [c:]                  | ClassLoader的hashcode                      |\n| `[classLoaderClass:]` | 指定执行表达式的 ClassLoader 的 class name |\n| [p:]                  | 外部的`.class`文件的完整路径，支持多个     |\n\n#### redefine的限制\n\n- 不允许新增加field/method\n- 正在跑的函数，没有退出不能生效。\n\n## 热更新代码\n\n下面介绍通过`jad`/`mc`/`redefine` 命令实现动态更新代码的功能。\n\n目前，访问 http://localhost:61000/user/0 ，会返回500异常：\n\n```bash\ncurl http://localhost:61000/user/0\n```\n\n```\n{\"timestamp\":1550223186170,\"status\":500,\"error\":\"Internal Server Error\",\"exception\":\"java.lang.IllegalArgumentException\",\"message\":\"id < 1\",\"path\":\"/user/0\"}\n```\n\n下面通过热更新代码，修改这个逻辑。\n\n#### jad反编译UserController\n\n```bash\njad --source-only com.example.demo.arthas.user.UserController > /tmp/UserController.java\n```\n\njad反编译的结果保存在 `/tmp/UserController.java`文件里了。\n\n再打开一个`Terminal 3`，然后用vim来编辑`/tmp/UserController.java`：\n\n```bash\nvim /tmp/UserController.java\n```\n\n比如当 user id 小于1时，也正常返回，不抛出异常：\n\n```java\n    @GetMapping(value={\"/user/{id}\"})\n    public User findUserById(@PathVariable Integer id) {\n        logger.info(\"id: {}\", (Object)id);\n        if (id != null && id < 1) {\n            return new User(id, \"name\" + id);\n            // throw new IllegalArgumentException(\"id < 1\");\n        }\n        return new User(id.intValue(), \"name\" + id);\n    }\n```\n\n#### sc查找加载UserController的ClassLoader\n\n```bash\nsc -d *UserController | grep classLoaderHash\n```\n\n```console\n$ sc -d *UserController | grep classLoaderHash\n classLoaderHash   1be6f5c3\n```\n\n可以发现是 spring boot `LaunchedURLClassLoader@1be6f5c3` 加载的。\n\n注意hashcode是变化的，需要先查看当前的ClassLoader信息，提取对应ClassLoader的hashcode。\n\n如果你使用`-c`，你需要手动输入hashcode：`-c <hashcode>`\n\n对于只有唯一实例的ClassLoader可以通过`--classLoaderClass`指定class name，使用起来更加方便.\n\n`--classLoaderClass` 的值是ClassLoader的类名，只有匹配到唯一的ClassLoader实例时才能工作，目的是方便输入通用命令，而`-c <hashcode>`是动态变化的。\n\n#### mc\n\n保存好`/tmp/UserController.java`之后，使用`mc`(Memory Compiler)命令来编译，并且通过`--classLoaderClass`参数指定ClassLoader：\n\n```bash\nmc --classLoaderClass org.springframework.boot.loader.LaunchedURLClassLoader /tmp/UserController.java -d /tmp\n```\n\n```console\n$ mc --classLoaderClass org.springframework.boot.loader.LaunchedURLClassLoader /tmp/UserController.java -d /tmp\nMemory compiler output:\n/tmp/com/example/demo/arthas/user/UserController.class\nAffect(row-cnt:1) cost in 346 ms\n```\n\n也可以通过`mc -c <classLoaderHash> /tmp/UserController.java -d /tmp`，使用`-c`参数指定ClassLoaderHash:\n\n```console\n$ mc -c 1be6f5c3 /tmp/UserController.java -d /tmp\n```\n\n#### redefine\n\n再使用`redefine`命令重新加载新编译好的`UserController.class`：\n\n```bash\nredefine /tmp/com/example/demo/arthas/user/UserController.class\n```\n\n```\n$ redefine /tmp/com/example/demo/arthas/user/UserController.class\nredefine success, size: 1\n```\n\n#### 热修改代码结果\n\n`redefine`成功之后，再次访问 user/0 ，结果是：\n\n```\n{\n  \"id\": 0,\n  \"name\": \"name0\"\n}\n```\n\n## 更多信息\n\n在“mc-redefine”中，我们演示了了Arthas的mc-redefine命令。如果有更多的技巧或者使用疑问，欢迎在Issue里提出。\n\n- Issues: https://github.com/alibaba/arthas/issues\n- 文档： https://arthas.aliyun.com/doc\n\n如果您在使用Arthas，请让我们知道。您的使用对我们非常重要：[查看](https://github.com/alibaba/arthas/issues/111)\n\n文章拷贝来源：https://start.aliyun.com/course?spm=a2ck6.17690074.0.0.28bc2e7dHTphXs&id=PaiFAkJM","slug":"Java诊断工具Arthas高级命令教程/Arthasmc-redefine命令","published":1,"updated":"2021-08-07T05:34:47.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cks1cgr6l0025fw5i38sg28yw","content":"<!-- toc -->\n\n<ul>\n<li><a href=\"#%E5%90%AF%E5%8A%A8demo\">启动demo</a></li>\n<li><a href=\"#%E5%90%AF%E5%8A%A8arthas-boot\">启动arthas-boot</a></li>\n<li><a href=\"#mc%E5%91%BD%E4%BB%A4\">mc命令</a></li>\n<li><a href=\"#redefine%E5%91%BD%E4%BB%A4\">redefine命令</a><ul>\n<li><a href=\"#%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98\">常见问题</a></li>\n<li><a href=\"#%E5%8F%82%E6%95%B0%E8%AF%B4%E6%98%8E\">参数说明</a></li>\n<li><a href=\"#redefine%E7%9A%84%E9%99%90%E5%88%B6\">redefine的限制</a></li>\n</ul>\n</li>\n<li><a href=\"#%E7%83%AD%E6%9B%B4%E6%96%B0%E4%BB%A3%E7%A0%81\">热更新代码</a><ul>\n<li><a href=\"#jad%E5%8F%8D%E7%BC%96%E8%AF%91usercontroller\">jad反编译UserController</a></li>\n<li><a href=\"#sc%E6%9F%A5%E6%89%BE%E5%8A%A0%E8%BD%BDusercontroller%E7%9A%84classloader\">sc查找加载UserController的ClassLoader</a></li>\n<li><a href=\"#mc\">mc</a></li>\n<li><a href=\"#redefine\">redefine</a></li>\n<li><a href=\"#%E7%83%AD%E4%BF%AE%E6%94%B9%E4%BB%A3%E7%A0%81%E7%BB%93%E6%9E%9C\">热修改代码结果</a></li>\n</ul>\n</li>\n<li><a href=\"#%E6%9B%B4%E5%A4%9A%E4%BF%A1%E6%81%AF\">更多信息</a></li>\n</ul>\n<!-- tocstop -->\n\n<p><img src=\"/jlynet.github.io/2021/08/07/Java%E8%AF%8A%E6%96%AD%E5%B7%A5%E5%85%B7Arthas%E9%AB%98%E7%BA%A7%E5%91%BD%E4%BB%A4%E6%95%99%E7%A8%8B/Arthasmc-redefine%E5%91%BD%E4%BB%A4/arthas.png\" alt=\"Arthas\"></p>\n<p><code>Arthas</code> 是Alibaba开源的Java诊断工具，深受开发者喜爱。在线排查问题，无需重启；动态跟踪Java代码；实时监控JVM状态。</p>\n<p><code>Arthas</code> 支持JDK 6+，支持Linux/Mac/Windows，采用命令行交互模式，同时提供丰富的 <code>Tab</code> 自动补全功能，进一步方便进行问题的定位和诊断。</p>\n<p>当你遇到以下类似问题而束手无策时，Arthas可以帮助你解决：</p>\n<ul>\n<li>这个类从哪个 jar 包加载的？为什么会报各种类相关的 Exception？</li>\n<li>我改的代码为什么没有执行到？难道是我没 commit？分支搞错了？</li>\n<li>遇到问题无法在线上 debug，难道只能通过加日志再重新发布吗？</li>\n<li>线上遇到某个用户的数据处理有问题，但线上同样无法 debug，线下无法重现！</li>\n<li>是否有一个全局视角来查看系统的运行状况？</li>\n<li>有什么办法可以监控到JVM的实时运行状态？</li>\n<li>怎么快速定位应用的热点，生成火焰图？</li>\n</ul>\n<p>本教程会以一个普通的Spring Boot应用为例，演示mc-redefine命令。</p>\n<ul>\n<li>Github: <a href=\"https://github.com/alibaba/arthas\">https://github.com/alibaba/arthas</a></li>\n<li>文档: <a href=\"https://arthas.aliyun.com/doc/\">https://arthas.aliyun.com/doc/</a></li>\n</ul>\n<h2><span id=\"启动demo\">启动demo</span></h2><p>下载<code>demo-arthas-spring-boot.jar</code>，再用<code>java -jar</code>命令启动：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wget https://code.aliyun.com/middleware-container/handsonLabExternedFiles/raw/master/demo-arthas-spring-boot.jar;java -jar demo-arthas-spring-boot.jar</span><br></pre></td></tr></table></figure>\n\n<p><code>demo-arthas-spring-boot</code>是一个很简单的spring boot应用，源代码：<a href=\"https://github.com/hengyunabc/spring-boot-inside/tree/master/demo-arthas-spring-boot\">查看</a></p>\n<p>启动之后，可以访问61000端口： 点击查看</p>\n<p><img src=\"/jlynet.github.io/2021/08/07/Java%E8%AF%8A%E6%96%AD%E5%B7%A5%E5%85%B7Arthas%E9%AB%98%E7%BA%A7%E5%91%BD%E4%BB%A4%E6%95%99%E7%A8%8B/Arthasmc-redefine%E5%91%BD%E4%BB%A4/O1CN010Qbzcz1ctPSWSZI6L_!!6000000003658-2-tps-333-182.png\" alt=\"Demo Web\"></p>\n<h2><span id=\"启动arthas-boot\">启动arthas-boot</span></h2><p>在新的<code>Terminal 2</code>里，下载<code>arthas-boot.jar</code>，再用<code>java -jar</code>命令启动：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wget https://arthas.aliyun.com/arthas-boot.jar;java -jar arthas-boot.jar</span><br></pre></td></tr></table></figure>\n\n<p><code>arthas-boot</code>是<code>Arthas</code>的启动程序，它启动后，会列出所有的Java进程，用户可以选择需要诊断的目标进程。</p>\n<p>选择第一个进程，输入 <code>1</code> ，再<code>Enter/回车</code>：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1</span><br></pre></td></tr></table></figure>\n\n<p>Attach成功之后，会打印Arthas LOGO。输入 <code>help</code> 可以获取到更多的帮助信息。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">help</span></span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/jlynet.github.io/2021/08/07/Java%E8%AF%8A%E6%96%AD%E5%B7%A5%E5%85%B7Arthas%E9%AB%98%E7%BA%A7%E5%91%BD%E4%BB%A4%E6%95%99%E7%A8%8B/Arthasmc-redefine%E5%91%BD%E4%BB%A4/O1CN01HzatXZ1RgccrlT90M_!!6000000002141-2-tps-529-244.png\" alt=\"Arthas Boot\"></p>\n<h2><span id=\"mc命令\">mc命令</span></h2><blockquote>\n<p>Memory Compiler/内存编译器，编译<code>.java</code>文件生成<code>.class</code>。 可以通过<code>-c</code>/<code>--classLoaderClass</code>参数指定classloader，<code>-d</code>参数指定输出目录</p>\n</blockquote>\n<p>编译生成<code>.class</code>文件之后，可以结合<code>redefine</code>命令实现热更新代码。</p>\n<h2><span id=\"redefine命令\">redefine命令</span></h2><blockquote>\n<p>加载外部的<code>.class</code>文件，redefine jvm已加载的类。</p>\n</blockquote>\n<p>参考：<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/instrument/Instrumentation.html#redefineClasses-java.lang.instrument.ClassDefinition%E2%80%A6-\">Instrumentation#redefineClasses</a></p>\n<h4><span id=\"常见问题\">常见问题</span></h4><ul>\n<li>redefine的class不能修改、添加、删除类的field和method，包括方法参数、方法名称及返回值</li>\n<li>如果mc失败，可以在本地开发环境编译好class文件，上传到目标系统，使用redefine热加载class</li>\n<li>目前redefine 和watch/trace/jad/tt等命令冲突，以后重新实现redefine功能会解决此问题</li>\n</ul>\n<blockquote>\n<p>注意， redefine后的原来的类不能恢复，redefine有可能失败（比如增加了新的field），参考jdk本身的文档。</p>\n<p><code>reset</code>命令对<code>redefine</code>的类无效。如果想重置，需要<code>redefine</code>原始的字节码。</p>\n<p><code>redefine</code>命令和<code>jad</code>/<code>watch</code>/<code>trace</code>/<code>monitor</code>/<code>tt</code>等命令会冲突。执行完<code>redefine</code>之后，如果再执行上面提到的命令，则会把<code>redefine</code>的字节码重置。 原因是jdk本身redefine和Retransform是不同的机制，同时使用两种机制来更新字节码，只有最后修改的会生效。</p>\n</blockquote>\n<h4><span id=\"参数说明\">参数说明</span></h4><table>\n<thead>\n<tr>\n<th>参数名称</th>\n<th>参数说明</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>[c:]</td>\n<td>ClassLoader的hashcode</td>\n</tr>\n<tr>\n<td><code>[classLoaderClass:]</code></td>\n<td>指定执行表达式的 ClassLoader 的 class name</td>\n</tr>\n<tr>\n<td>[p:]</td>\n<td>外部的<code>.class</code>文件的完整路径，支持多个</td>\n</tr>\n</tbody></table>\n<h4><span id=\"redefine的限制\">redefine的限制</span></h4><ul>\n<li>不允许新增加field/method</li>\n<li>正在跑的函数，没有退出不能生效。</li>\n</ul>\n<h2><span id=\"热更新代码\">热更新代码</span></h2><p>下面介绍通过<code>jad</code>/<code>mc</code>/<code>redefine</code> 命令实现动态更新代码的功能。</p>\n<p>目前，访问 <a href=\"http://localhost:61000/user/0\">http://localhost:61000/user/0</a> ，会返回500异常：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">curl http://localhost:61000/user/0</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;&quot;timestamp&quot;:1550223186170,&quot;status&quot;:500,&quot;error&quot;:&quot;Internal Server Error&quot;,&quot;exception&quot;:&quot;java.lang.IllegalArgumentException&quot;,&quot;message&quot;:&quot;id &lt; 1&quot;,&quot;path&quot;:&quot;/user/0&quot;&#125;</span><br></pre></td></tr></table></figure>\n\n<p>下面通过热更新代码，修改这个逻辑。</p>\n<h4><span id=\"jad反编译usercontroller\">jad反编译UserController</span></h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">jad --source-only com.example.demo.arthas.user.UserController &gt; /tmp/UserController.java</span><br></pre></td></tr></table></figure>\n\n<p>jad反编译的结果保存在 <code>/tmp/UserController.java</code>文件里了。</p>\n<p>再打开一个<code>Terminal 3</code>，然后用vim来编辑<code>/tmp/UserController.java</code>：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vim /tmp/UserController.java</span><br></pre></td></tr></table></figure>\n\n<p>比如当 user id 小于1时，也正常返回，不抛出异常：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@GetMapping(value=&#123;&quot;/user/&#123;id&#125;&quot;&#125;)</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> User <span class=\"title\">findUserById</span><span class=\"params\">(<span class=\"meta\">@PathVariable</span> Integer id)</span> </span>&#123;</span><br><span class=\"line\">    logger.info(<span class=\"string\">&quot;id: &#123;&#125;&quot;</span>, (Object)id);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (id != <span class=\"keyword\">null</span> &amp;&amp; id &lt; <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> User(id, <span class=\"string\">&quot;name&quot;</span> + id);</span><br><span class=\"line\">        <span class=\"comment\">// throw new IllegalArgumentException(&quot;id &lt; 1&quot;);</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> User(id.intValue(), <span class=\"string\">&quot;name&quot;</span> + id);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4><span id=\"sc查找加载usercontroller的classloader\">sc查找加载UserController的ClassLoader</span></h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sc -d *UserController | grep classLoaderHash</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight console\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> sc -d *UserController | grep classLoaderHash</span></span><br><span class=\"line\"> classLoaderHash   1be6f5c3</span><br></pre></td></tr></table></figure>\n\n<p>可以发现是 spring boot <code>LaunchedURLClassLoader@1be6f5c3</code> 加载的。</p>\n<p>注意hashcode是变化的，需要先查看当前的ClassLoader信息，提取对应ClassLoader的hashcode。</p>\n<p>如果你使用<code>-c</code>，你需要手动输入hashcode：<code>-c &lt;hashcode&gt;</code></p>\n<p>对于只有唯一实例的ClassLoader可以通过<code>--classLoaderClass</code>指定class name，使用起来更加方便.</p>\n<p><code>--classLoaderClass</code> 的值是ClassLoader的类名，只有匹配到唯一的ClassLoader实例时才能工作，目的是方便输入通用命令，而<code>-c &lt;hashcode&gt;</code>是动态变化的。</p>\n<h4><span id=\"mc\">mc</span></h4><p>保存好<code>/tmp/UserController.java</code>之后，使用<code>mc</code>(Memory Compiler)命令来编译，并且通过<code>--classLoaderClass</code>参数指定ClassLoader：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mc --classLoaderClass org.springframework.boot.loader.LaunchedURLClassLoader /tmp/UserController.java -d /tmp</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight console\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> mc --classLoaderClass org.springframework.boot.loader.LaunchedURLClassLoader /tmp/UserController.java -d /tmp</span></span><br><span class=\"line\">Memory compiler output:</span><br><span class=\"line\">/tmp/com/example/demo/arthas/user/UserController.class</span><br><span class=\"line\">Affect(row-cnt:1) cost in 346 ms</span><br></pre></td></tr></table></figure>\n\n<p>也可以通过<code>mc -c &lt;classLoaderHash&gt; /tmp/UserController.java -d /tmp</code>，使用<code>-c</code>参数指定ClassLoaderHash:</p>\n<figure class=\"highlight console\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> mc -c 1be6f5c3 /tmp/UserController.java -d /tmp</span></span><br></pre></td></tr></table></figure>\n\n<h4><span id=\"redefine\">redefine</span></h4><p>再使用<code>redefine</code>命令重新加载新编译好的<code>UserController.class</code>：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">redefine /tmp/com/example/demo/arthas/user/UserController.class</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ redefine /tmp/com/example/demo/arthas/user/UserController.class</span><br><span class=\"line\">redefine success, size: 1</span><br></pre></td></tr></table></figure>\n\n<h4><span id=\"热修改代码结果\">热修改代码结果</span></h4><p><code>redefine</code>成功之后，再次访问 user/0 ，结果是：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  &quot;id&quot;: 0,</span><br><span class=\"line\">  &quot;name&quot;: &quot;name0&quot;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2><span id=\"更多信息\">更多信息</span></h2><p>在“mc-redefine”中，我们演示了了Arthas的mc-redefine命令。如果有更多的技巧或者使用疑问，欢迎在Issue里提出。</p>\n<ul>\n<li>Issues: <a href=\"https://github.com/alibaba/arthas/issues\">https://github.com/alibaba/arthas/issues</a></li>\n<li>文档： <a href=\"https://arthas.aliyun.com/doc\">https://arthas.aliyun.com/doc</a></li>\n</ul>\n<p>如果您在使用Arthas，请让我们知道。您的使用对我们非常重要：<a href=\"https://github.com/alibaba/arthas/issues/111\">查看</a></p>\n<p>文章拷贝来源：<a href=\"https://start.aliyun.com/course?spm=a2ck6.17690074.0.0.28bc2e7dHTphXs&amp;id=PaiFAkJM\">https://start.aliyun.com/course?spm=a2ck6.17690074.0.0.28bc2e7dHTphXs&amp;id=PaiFAkJM</a></p>\n","site":{"data":{}},"excerpt":"","more":"<!-- toc -->\n\n<ul>\n<li><a href=\"#%E5%90%AF%E5%8A%A8demo\">启动demo</a></li>\n<li><a href=\"#%E5%90%AF%E5%8A%A8arthas-boot\">启动arthas-boot</a></li>\n<li><a href=\"#mc%E5%91%BD%E4%BB%A4\">mc命令</a></li>\n<li><a href=\"#redefine%E5%91%BD%E4%BB%A4\">redefine命令</a><ul>\n<li><a href=\"#%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98\">常见问题</a></li>\n<li><a href=\"#%E5%8F%82%E6%95%B0%E8%AF%B4%E6%98%8E\">参数说明</a></li>\n<li><a href=\"#redefine%E7%9A%84%E9%99%90%E5%88%B6\">redefine的限制</a></li>\n</ul>\n</li>\n<li><a href=\"#%E7%83%AD%E6%9B%B4%E6%96%B0%E4%BB%A3%E7%A0%81\">热更新代码</a><ul>\n<li><a href=\"#jad%E5%8F%8D%E7%BC%96%E8%AF%91usercontroller\">jad反编译UserController</a></li>\n<li><a href=\"#sc%E6%9F%A5%E6%89%BE%E5%8A%A0%E8%BD%BDusercontroller%E7%9A%84classloader\">sc查找加载UserController的ClassLoader</a></li>\n<li><a href=\"#mc\">mc</a></li>\n<li><a href=\"#redefine\">redefine</a></li>\n<li><a href=\"#%E7%83%AD%E4%BF%AE%E6%94%B9%E4%BB%A3%E7%A0%81%E7%BB%93%E6%9E%9C\">热修改代码结果</a></li>\n</ul>\n</li>\n<li><a href=\"#%E6%9B%B4%E5%A4%9A%E4%BF%A1%E6%81%AF\">更多信息</a></li>\n</ul>\n<!-- tocstop -->\n\n<p><img src=\"/jlynet.github.io/2021/08/07/Java%E8%AF%8A%E6%96%AD%E5%B7%A5%E5%85%B7Arthas%E9%AB%98%E7%BA%A7%E5%91%BD%E4%BB%A4%E6%95%99%E7%A8%8B/Arthasmc-redefine%E5%91%BD%E4%BB%A4/arthas.png\" alt=\"Arthas\"></p>\n<p><code>Arthas</code> 是Alibaba开源的Java诊断工具，深受开发者喜爱。在线排查问题，无需重启；动态跟踪Java代码；实时监控JVM状态。</p>\n<p><code>Arthas</code> 支持JDK 6+，支持Linux/Mac/Windows，采用命令行交互模式，同时提供丰富的 <code>Tab</code> 自动补全功能，进一步方便进行问题的定位和诊断。</p>\n<p>当你遇到以下类似问题而束手无策时，Arthas可以帮助你解决：</p>\n<ul>\n<li>这个类从哪个 jar 包加载的？为什么会报各种类相关的 Exception？</li>\n<li>我改的代码为什么没有执行到？难道是我没 commit？分支搞错了？</li>\n<li>遇到问题无法在线上 debug，难道只能通过加日志再重新发布吗？</li>\n<li>线上遇到某个用户的数据处理有问题，但线上同样无法 debug，线下无法重现！</li>\n<li>是否有一个全局视角来查看系统的运行状况？</li>\n<li>有什么办法可以监控到JVM的实时运行状态？</li>\n<li>怎么快速定位应用的热点，生成火焰图？</li>\n</ul>\n<p>本教程会以一个普通的Spring Boot应用为例，演示mc-redefine命令。</p>\n<ul>\n<li>Github: <a href=\"https://github.com/alibaba/arthas\">https://github.com/alibaba/arthas</a></li>\n<li>文档: <a href=\"https://arthas.aliyun.com/doc/\">https://arthas.aliyun.com/doc/</a></li>\n</ul>\n<h2 id=\"启动demo\"><a href=\"#启动demo\" class=\"headerlink\" title=\"启动demo\"></a>启动demo</h2><p>下载<code>demo-arthas-spring-boot.jar</code>，再用<code>java -jar</code>命令启动：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wget https://code.aliyun.com/middleware-container/handsonLabExternedFiles/raw/master/demo-arthas-spring-boot.jar;java -jar demo-arthas-spring-boot.jar</span><br></pre></td></tr></table></figure>\n\n<p><code>demo-arthas-spring-boot</code>是一个很简单的spring boot应用，源代码：<a href=\"https://github.com/hengyunabc/spring-boot-inside/tree/master/demo-arthas-spring-boot\">查看</a></p>\n<p>启动之后，可以访问61000端口： 点击查看</p>\n<p><img src=\"/jlynet.github.io/2021/08/07/Java%E8%AF%8A%E6%96%AD%E5%B7%A5%E5%85%B7Arthas%E9%AB%98%E7%BA%A7%E5%91%BD%E4%BB%A4%E6%95%99%E7%A8%8B/Arthasmc-redefine%E5%91%BD%E4%BB%A4/O1CN010Qbzcz1ctPSWSZI6L_!!6000000003658-2-tps-333-182.png\" alt=\"Demo Web\"></p>\n<h2 id=\"启动arthas-boot\"><a href=\"#启动arthas-boot\" class=\"headerlink\" title=\"启动arthas-boot\"></a>启动arthas-boot</h2><p>在新的<code>Terminal 2</code>里，下载<code>arthas-boot.jar</code>，再用<code>java -jar</code>命令启动：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wget https://arthas.aliyun.com/arthas-boot.jar;java -jar arthas-boot.jar</span><br></pre></td></tr></table></figure>\n\n<p><code>arthas-boot</code>是<code>Arthas</code>的启动程序，它启动后，会列出所有的Java进程，用户可以选择需要诊断的目标进程。</p>\n<p>选择第一个进程，输入 <code>1</code> ，再<code>Enter/回车</code>：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1</span><br></pre></td></tr></table></figure>\n\n<p>Attach成功之后，会打印Arthas LOGO。输入 <code>help</code> 可以获取到更多的帮助信息。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">help</span></span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/jlynet.github.io/2021/08/07/Java%E8%AF%8A%E6%96%AD%E5%B7%A5%E5%85%B7Arthas%E9%AB%98%E7%BA%A7%E5%91%BD%E4%BB%A4%E6%95%99%E7%A8%8B/Arthasmc-redefine%E5%91%BD%E4%BB%A4/O1CN01HzatXZ1RgccrlT90M_!!6000000002141-2-tps-529-244.png\" alt=\"Arthas Boot\"></p>\n<h2 id=\"mc命令\"><a href=\"#mc命令\" class=\"headerlink\" title=\"mc命令\"></a>mc命令</h2><blockquote>\n<p>Memory Compiler/内存编译器，编译<code>.java</code>文件生成<code>.class</code>。 可以通过<code>-c</code>/<code>--classLoaderClass</code>参数指定classloader，<code>-d</code>参数指定输出目录</p>\n</blockquote>\n<p>编译生成<code>.class</code>文件之后，可以结合<code>redefine</code>命令实现热更新代码。</p>\n<h2 id=\"redefine命令\"><a href=\"#redefine命令\" class=\"headerlink\" title=\"redefine命令\"></a>redefine命令</h2><blockquote>\n<p>加载外部的<code>.class</code>文件，redefine jvm已加载的类。</p>\n</blockquote>\n<p>参考：<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/instrument/Instrumentation.html#redefineClasses-java.lang.instrument.ClassDefinition%E2%80%A6-\">Instrumentation#redefineClasses</a></p>\n<h4 id=\"常见问题\"><a href=\"#常见问题\" class=\"headerlink\" title=\"常见问题\"></a>常见问题</h4><ul>\n<li>redefine的class不能修改、添加、删除类的field和method，包括方法参数、方法名称及返回值</li>\n<li>如果mc失败，可以在本地开发环境编译好class文件，上传到目标系统，使用redefine热加载class</li>\n<li>目前redefine 和watch/trace/jad/tt等命令冲突，以后重新实现redefine功能会解决此问题</li>\n</ul>\n<blockquote>\n<p>注意， redefine后的原来的类不能恢复，redefine有可能失败（比如增加了新的field），参考jdk本身的文档。</p>\n<p><code>reset</code>命令对<code>redefine</code>的类无效。如果想重置，需要<code>redefine</code>原始的字节码。</p>\n<p><code>redefine</code>命令和<code>jad</code>/<code>watch</code>/<code>trace</code>/<code>monitor</code>/<code>tt</code>等命令会冲突。执行完<code>redefine</code>之后，如果再执行上面提到的命令，则会把<code>redefine</code>的字节码重置。 原因是jdk本身redefine和Retransform是不同的机制，同时使用两种机制来更新字节码，只有最后修改的会生效。</p>\n</blockquote>\n<h4 id=\"参数说明\"><a href=\"#参数说明\" class=\"headerlink\" title=\"参数说明\"></a>参数说明</h4><table>\n<thead>\n<tr>\n<th>参数名称</th>\n<th>参数说明</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>[c:]</td>\n<td>ClassLoader的hashcode</td>\n</tr>\n<tr>\n<td><code>[classLoaderClass:]</code></td>\n<td>指定执行表达式的 ClassLoader 的 class name</td>\n</tr>\n<tr>\n<td>[p:]</td>\n<td>外部的<code>.class</code>文件的完整路径，支持多个</td>\n</tr>\n</tbody></table>\n<h4 id=\"redefine的限制\"><a href=\"#redefine的限制\" class=\"headerlink\" title=\"redefine的限制\"></a>redefine的限制</h4><ul>\n<li>不允许新增加field/method</li>\n<li>正在跑的函数，没有退出不能生效。</li>\n</ul>\n<h2 id=\"热更新代码\"><a href=\"#热更新代码\" class=\"headerlink\" title=\"热更新代码\"></a>热更新代码</h2><p>下面介绍通过<code>jad</code>/<code>mc</code>/<code>redefine</code> 命令实现动态更新代码的功能。</p>\n<p>目前，访问 <a href=\"http://localhost:61000/user/0\">http://localhost:61000/user/0</a> ，会返回500异常：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">curl http://localhost:61000/user/0</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;&quot;timestamp&quot;:1550223186170,&quot;status&quot;:500,&quot;error&quot;:&quot;Internal Server Error&quot;,&quot;exception&quot;:&quot;java.lang.IllegalArgumentException&quot;,&quot;message&quot;:&quot;id &lt; 1&quot;,&quot;path&quot;:&quot;/user/0&quot;&#125;</span><br></pre></td></tr></table></figure>\n\n<p>下面通过热更新代码，修改这个逻辑。</p>\n<h4 id=\"jad反编译UserController\"><a href=\"#jad反编译UserController\" class=\"headerlink\" title=\"jad反编译UserController\"></a>jad反编译UserController</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">jad --source-only com.example.demo.arthas.user.UserController &gt; /tmp/UserController.java</span><br></pre></td></tr></table></figure>\n\n<p>jad反编译的结果保存在 <code>/tmp/UserController.java</code>文件里了。</p>\n<p>再打开一个<code>Terminal 3</code>，然后用vim来编辑<code>/tmp/UserController.java</code>：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vim /tmp/UserController.java</span><br></pre></td></tr></table></figure>\n\n<p>比如当 user id 小于1时，也正常返回，不抛出异常：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@GetMapping(value=&#123;&quot;/user/&#123;id&#125;&quot;&#125;)</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> User <span class=\"title\">findUserById</span><span class=\"params\">(<span class=\"meta\">@PathVariable</span> Integer id)</span> </span>&#123;</span><br><span class=\"line\">    logger.info(<span class=\"string\">&quot;id: &#123;&#125;&quot;</span>, (Object)id);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (id != <span class=\"keyword\">null</span> &amp;&amp; id &lt; <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> User(id, <span class=\"string\">&quot;name&quot;</span> + id);</span><br><span class=\"line\">        <span class=\"comment\">// throw new IllegalArgumentException(&quot;id &lt; 1&quot;);</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> User(id.intValue(), <span class=\"string\">&quot;name&quot;</span> + id);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"sc查找加载UserController的ClassLoader\"><a href=\"#sc查找加载UserController的ClassLoader\" class=\"headerlink\" title=\"sc查找加载UserController的ClassLoader\"></a>sc查找加载UserController的ClassLoader</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sc -d *UserController | grep classLoaderHash</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight console\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> sc -d *UserController | grep classLoaderHash</span></span><br><span class=\"line\"> classLoaderHash   1be6f5c3</span><br></pre></td></tr></table></figure>\n\n<p>可以发现是 spring boot <code>LaunchedURLClassLoader@1be6f5c3</code> 加载的。</p>\n<p>注意hashcode是变化的，需要先查看当前的ClassLoader信息，提取对应ClassLoader的hashcode。</p>\n<p>如果你使用<code>-c</code>，你需要手动输入hashcode：<code>-c &lt;hashcode&gt;</code></p>\n<p>对于只有唯一实例的ClassLoader可以通过<code>--classLoaderClass</code>指定class name，使用起来更加方便.</p>\n<p><code>--classLoaderClass</code> 的值是ClassLoader的类名，只有匹配到唯一的ClassLoader实例时才能工作，目的是方便输入通用命令，而<code>-c &lt;hashcode&gt;</code>是动态变化的。</p>\n<h4 id=\"mc\"><a href=\"#mc\" class=\"headerlink\" title=\"mc\"></a>mc</h4><p>保存好<code>/tmp/UserController.java</code>之后，使用<code>mc</code>(Memory Compiler)命令来编译，并且通过<code>--classLoaderClass</code>参数指定ClassLoader：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mc --classLoaderClass org.springframework.boot.loader.LaunchedURLClassLoader /tmp/UserController.java -d /tmp</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight console\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> mc --classLoaderClass org.springframework.boot.loader.LaunchedURLClassLoader /tmp/UserController.java -d /tmp</span></span><br><span class=\"line\">Memory compiler output:</span><br><span class=\"line\">/tmp/com/example/demo/arthas/user/UserController.class</span><br><span class=\"line\">Affect(row-cnt:1) cost in 346 ms</span><br></pre></td></tr></table></figure>\n\n<p>也可以通过<code>mc -c &lt;classLoaderHash&gt; /tmp/UserController.java -d /tmp</code>，使用<code>-c</code>参数指定ClassLoaderHash:</p>\n<figure class=\"highlight console\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> mc -c 1be6f5c3 /tmp/UserController.java -d /tmp</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"redefine\"><a href=\"#redefine\" class=\"headerlink\" title=\"redefine\"></a>redefine</h4><p>再使用<code>redefine</code>命令重新加载新编译好的<code>UserController.class</code>：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">redefine /tmp/com/example/demo/arthas/user/UserController.class</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ redefine /tmp/com/example/demo/arthas/user/UserController.class</span><br><span class=\"line\">redefine success, size: 1</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"热修改代码结果\"><a href=\"#热修改代码结果\" class=\"headerlink\" title=\"热修改代码结果\"></a>热修改代码结果</h4><p><code>redefine</code>成功之后，再次访问 user/0 ，结果是：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  &quot;id&quot;: 0,</span><br><span class=\"line\">  &quot;name&quot;: &quot;name0&quot;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"更多信息\"><a href=\"#更多信息\" class=\"headerlink\" title=\"更多信息\"></a>更多信息</h2><p>在“mc-redefine”中，我们演示了了Arthas的mc-redefine命令。如果有更多的技巧或者使用疑问，欢迎在Issue里提出。</p>\n<ul>\n<li>Issues: <a href=\"https://github.com/alibaba/arthas/issues\">https://github.com/alibaba/arthas/issues</a></li>\n<li>文档： <a href=\"https://arthas.aliyun.com/doc\">https://arthas.aliyun.com/doc</a></li>\n</ul>\n<p>如果您在使用Arthas，请让我们知道。您的使用对我们非常重要：<a href=\"https://github.com/alibaba/arthas/issues/111\">查看</a></p>\n<p>文章拷贝来源：<a href=\"https://start.aliyun.com/course?spm=a2ck6.17690074.0.0.28bc2e7dHTphXs&amp;id=PaiFAkJM\">https://start.aliyun.com/course?spm=a2ck6.17690074.0.0.28bc2e7dHTphXs&amp;id=PaiFAkJM</a></p>\n"},{"title":"Arthas mc-retransform命令","date":"2021-08-07T01:51:40.000Z","_content":"\n<!-- toc -->\n\n![Arthas](arthas.png)\n\n`Arthas` 是Alibaba开源的Java诊断工具，深受开发者喜爱。在线排查问题，无需重启；动态跟踪Java代码；实时监控JVM状态。\n\n`Arthas` 支持JDK 6+，支持Linux/Mac/Windows，采用命令行交互模式，同时提供丰富的 `Tab` 自动补全功能，进一步方便进行问题的定位和诊断。\n\n当你遇到以下类似问题而束手无策时，Arthas可以帮助你解决：\n\n- 这个类从哪个 jar 包加载的？为什么会报各种类相关的 Exception？\n- 我改的代码为什么没有执行到？难道是我没 commit？分支搞错了？\n- 遇到问题无法在线上 debug，难道只能通过加日志再重新发布吗？\n- 线上遇到某个用户的数据处理有问题，但线上同样无法 debug，线下无法重现！\n- 是否有一个全局视角来查看系统的运行状况？\n- 有什么办法可以监控到JVM的实时运行状态？\n- 怎么快速定位应用的热点，生成火焰图？\n\n本教程会以一个普通的Spring Boot应用为例，演示mc-retransform命令。\n\n- Github: https://github.com/alibaba/arthas\n- 文档: https://arthas.aliyun.com/doc/\n\n## 启动demo\n\n下载`demo-arthas-spring-boot.jar`，再用`java -jar`命令启动：\n\n```bash\nwget https://code.aliyun.com/middleware-container/handsonLabExternedFiles/raw/master/demo-arthas-spring-boot.jar;java -jar demo-arthas-spring-boot.jar\n```\n\n`demo-arthas-spring-boot`是一个很简单的spring boot应用，源代码：[查看](https://github.com/hengyunabc/spring-boot-inside/tree/master/demo-arthas-spring-boot)\n\n启动之后，可以访问61000端口： 点击查看\n\n![Demo Web](O1CN010Qbzcz1ctPSWSZI6L_!!6000000003658-2-tps-333-182.png)\n\n## 启动arthas-boot\n\n在新的`Terminal 2`里，下载`arthas-boot.jar`，再用`java -jar`命令启动：\n\n```bash\nwget https://arthas.aliyun.com/arthas-boot.jar;java -jar arthas-boot.jar\n```\n\n`arthas-boot`是`Arthas`的启动程序，它启动后，会列出所有的Java进程，用户可以选择需要诊断的目标进程。\n\n选择第一个进程，输入 `1` ，再`Enter/回车`：\n\n```bash\n1\n```\n\nAttach成功之后，会打印Arthas LOGO。输入 `help` 可以获取到更多的帮助信息。\n\n```bash\nhelp\n```\n\n![Arthas Boot](O1CN01HzatXZ1RgccrlT90M_!!6000000002141-2-tps-529-244.png)\n\n## mc命令\n\n> Memory Compiler/内存编译器，编译`.java`文件生成`.class`。 可以通过`-c`/`--classLoaderClass`参数指定classloader，`-d`参数指定输出目录\n\n编译生成`.class`文件之后，可以结合`retransform`命令实现热更新代码。\n\n## retransform命令\n\n> 加载外部的`.class`文件，retransform jvm已加载的类。\n\n参考：[Instrumentation#retransformClasses](https://docs.oracle.com/javase/8/docs/api/java/lang/instrument/Instrumentation.html#retransformClasses-java.lang.Class…-)\n\n#### 参数说明\n\n| 参数名称              | 参数说明                                   |\n| --------------------- | ------------------------------------------ |\n| [c:]                  | ClassLoader的hashcode                      |\n| `[classLoaderClass:]` | 指定执行表达式的 ClassLoader 的 class name |\n| [p:]                  | 外部的`.class`文件的完整路径，支持多个     |\n\n#### retransform的限制\n\n- 不允许新增加field/method\n- 正在跑的函数，没有退出不能生效。\n\n## 热更新代码\n\n下面介绍通过`jad`/`mc`/`retransform` 命令实现动态更新代码的功能。\n\n目前，访问 http://localhost:61000/user/0 ，会返回500异常：\n\n```bash\ncurl http://localhost:61000/user/0\n```\n\n```\n{\"timestamp\":1550223186170,\"status\":500,\"error\":\"Internal Server Error\",\"exception\":\"java.lang.IllegalArgumentException\",\"message\":\"id < 1\",\"path\":\"/user/0\"}\n```\n\n下面通过热更新代码，修改这个逻辑。\n\n#### jad反编译UserController\n\n```bash\njad --source-only com.example.demo.arthas.user.UserController > /tmp/UserController.java\n```\n\njad反编译的结果保存在 `/tmp/UserController.java`文件里了。\n\n再打开一个`Terminal 3`，然后用vim来编辑`/tmp/UserController.java`：\n\n```bash\nvim /tmp/UserController.java\n```\n\n比如当 user id 小于1时，也正常返回，不抛出异常：\n\n```java\n    @GetMapping(value={\"/user/{id}\"})\n    public User findUserById(@PathVariable Integer id) {\n        logger.info(\"id: {}\", (Object)id);\n        if (id != null && id < 1) {\n            return new User(id, \"name\" + id);\n            // throw new IllegalArgumentException(\"id < 1\");\n        }\n        return new User(id.intValue(), \"name\" + id);\n    }\n```\n\n#### sc查找加载UserController的ClassLoader\n\n```bash\nsc -d *UserController | grep classLoaderHash\n```\n\n```console\n$ sc -d *UserController | grep classLoaderHash\n classLoaderHash   1be6f5c3\n```\n\n可以发现是 spring boot `LaunchedURLClassLoader@1be6f5c3` 加载的。\n\n注意hashcode是变化的，需要先查看当前的ClassLoader信息，提取对应ClassLoader的hashcode。\n\n如果你使用`-c`，你需要手动输入hashcode：`-c <hashcode>`\n\n对于只有唯一实例的ClassLoader可以通过`--classLoaderClass`指定class name，使用起来更加方便.\n\n`--classLoaderClass` 的值是ClassLoader的类名，只有匹配到唯一的ClassLoader实例时才能工作，目的是方便输入通用命令，而`-c <hashcode>`是动态变化的。\n\n#### mc\n\n保存好`/tmp/UserController.java`之后，使用`mc`(Memory Compiler)命令来编译，并且通过`--classLoaderClass`参数指定ClassLoader：\n\n```bash\nmc --classLoaderClass org.springframework.boot.loader.LaunchedURLClassLoader /tmp/UserController.java -d /tmp\n```\n\n```console\n$ mc --classLoaderClass org.springframework.boot.loader.LaunchedURLClassLoader /tmp/UserController.java -d /tmp\nMemory compiler output:\n/tmp/com/example/demo/arthas/user/UserController.class\nAffect(row-cnt:1) cost in 346 ms\n```\n\n也可以通过`mc -c <classLoaderHash> /tmp/UserController.java -d /tmp`，使用`-c`参数指定ClassLoaderHash:\n\n```console\n$ mc -c 1be6f5c3 /tmp/UserController.java -d /tmp\n```\n\n#### retransform\n\n再使用`retransform`命令重新加载新编译好的`UserController.class`：\n\n```bash\nretransform /tmp/com/example/demo/arthas/user/UserController.class\n```\n\n```\n$ retransform /tmp/com/example/demo/arthas/user/UserController.class\nretransform success, size: 1\n```\n\n#### 热修改代码结果\n\n`retransform`成功之后，再次访问 user/0 ，结果是：\n\n```\n{\n  \"id\": 0,\n  \"name\": \"name0\"\n}\n```\n\n## retransform命令更多说明\n\n> 加载外部的`.class`文件，retransform jvm已加载的类。\n\n参考：[Instrumentation#retransformClasses](https://docs.oracle.com/javase/8/docs/api/java/lang/instrument/Instrumentation.html#retransformClasses-java.lang.Class…-)\n\n#### 查看 retransform entry\n\n```bash\nretransform -l\n```\n\n```console\n$ retransform -l\nId              ClassName       TransformCount  LoaderHash      LoaderClassName\n1               com.example.dem 1               null            null\n                o.arthas.user.U\n                serController\n```\n\n- TransformCount 统计在 ClassFileTransformer#transform 函数里尝试返回 entry对应的 .class文件的次数，但并不表明transform一定成功。\n\n#### 删除指定 retransform entry\n\n```bash\nretransform -d 1\n```\n\n需要指定 id：\n\n```console\nretransform -d 1\n```\n\n#### 删除所有 retransform entry\n\n```bash\nretransform --deleteAll\n```\n\n```console\nretransform --deleteAll\n```\n\n#### 显式触发 retransform\n\n```bash\nretransform --classPattern com.example.demo.arthas.user.UserController\n```\n\n```console\n$ retransform --classPattern com.example.demo.arthas.user.UserController\nretransform success, size: 1, classes:\ncom.example.demo.arthas.user.UserController\n```\n\n> 注意：对于同一个类，当存在多个 retransform entry时，如果显式触发 retransform ，则最后添加的entry生效(id最大的)。\n\n#### 消除 retransform 的影响\n\n如果对某个类执行 retransform 之后，想消除影响，则需要：\n\n- 删除这个类对应的 retransform entry\n- 重新触发 retransform\n\n> 如果不清除掉所有的 retransform entry，并重新触发 retransform ，则arthas stop时，retransform过的类仍然生效。\n\n在上面删掉 retransform entry，再显式触发 retransform之后，可以用 `jad`命令来确认之前retransform的结果已经被消除了。\n\n再次访问 user/0 ，会抛出异常。\n\n## 更多信息\n\n在“mc-retransform”中，我们演示了了Arthas的mc-retransform命令。如果有更多的技巧或者使用疑问，欢迎在Issue里提出。\n\n- Issues: https://github.com/alibaba/arthas/issues\n- 文档： https://arthas.aliyun.com/doc\n\n如果您在使用Arthas，请让我们知道。您的使用对我们非常重要：[查看](https://github.com/alibaba/arthas/issues/111)\n\n文章拷贝来源：https://start.aliyun.com/course?spm=a2ck6.17690074.0.0.28bc2e7dHTphXs&id=PaiFAkJM","source":"_posts/Java诊断工具Arthas高级命令教程/Arthasmc-retransform命令.md","raw":"---\ntitle: Arthas mc-retransform命令\ndate: 2021-08-07 09:51:40\ntags: ['Java 诊断工具 Arthas 高级命令教程']\n---\n\n<!-- toc -->\n\n![Arthas](arthas.png)\n\n`Arthas` 是Alibaba开源的Java诊断工具，深受开发者喜爱。在线排查问题，无需重启；动态跟踪Java代码；实时监控JVM状态。\n\n`Arthas` 支持JDK 6+，支持Linux/Mac/Windows，采用命令行交互模式，同时提供丰富的 `Tab` 自动补全功能，进一步方便进行问题的定位和诊断。\n\n当你遇到以下类似问题而束手无策时，Arthas可以帮助你解决：\n\n- 这个类从哪个 jar 包加载的？为什么会报各种类相关的 Exception？\n- 我改的代码为什么没有执行到？难道是我没 commit？分支搞错了？\n- 遇到问题无法在线上 debug，难道只能通过加日志再重新发布吗？\n- 线上遇到某个用户的数据处理有问题，但线上同样无法 debug，线下无法重现！\n- 是否有一个全局视角来查看系统的运行状况？\n- 有什么办法可以监控到JVM的实时运行状态？\n- 怎么快速定位应用的热点，生成火焰图？\n\n本教程会以一个普通的Spring Boot应用为例，演示mc-retransform命令。\n\n- Github: https://github.com/alibaba/arthas\n- 文档: https://arthas.aliyun.com/doc/\n\n## 启动demo\n\n下载`demo-arthas-spring-boot.jar`，再用`java -jar`命令启动：\n\n```bash\nwget https://code.aliyun.com/middleware-container/handsonLabExternedFiles/raw/master/demo-arthas-spring-boot.jar;java -jar demo-arthas-spring-boot.jar\n```\n\n`demo-arthas-spring-boot`是一个很简单的spring boot应用，源代码：[查看](https://github.com/hengyunabc/spring-boot-inside/tree/master/demo-arthas-spring-boot)\n\n启动之后，可以访问61000端口： 点击查看\n\n![Demo Web](O1CN010Qbzcz1ctPSWSZI6L_!!6000000003658-2-tps-333-182.png)\n\n## 启动arthas-boot\n\n在新的`Terminal 2`里，下载`arthas-boot.jar`，再用`java -jar`命令启动：\n\n```bash\nwget https://arthas.aliyun.com/arthas-boot.jar;java -jar arthas-boot.jar\n```\n\n`arthas-boot`是`Arthas`的启动程序，它启动后，会列出所有的Java进程，用户可以选择需要诊断的目标进程。\n\n选择第一个进程，输入 `1` ，再`Enter/回车`：\n\n```bash\n1\n```\n\nAttach成功之后，会打印Arthas LOGO。输入 `help` 可以获取到更多的帮助信息。\n\n```bash\nhelp\n```\n\n![Arthas Boot](O1CN01HzatXZ1RgccrlT90M_!!6000000002141-2-tps-529-244.png)\n\n## mc命令\n\n> Memory Compiler/内存编译器，编译`.java`文件生成`.class`。 可以通过`-c`/`--classLoaderClass`参数指定classloader，`-d`参数指定输出目录\n\n编译生成`.class`文件之后，可以结合`retransform`命令实现热更新代码。\n\n## retransform命令\n\n> 加载外部的`.class`文件，retransform jvm已加载的类。\n\n参考：[Instrumentation#retransformClasses](https://docs.oracle.com/javase/8/docs/api/java/lang/instrument/Instrumentation.html#retransformClasses-java.lang.Class…-)\n\n#### 参数说明\n\n| 参数名称              | 参数说明                                   |\n| --------------------- | ------------------------------------------ |\n| [c:]                  | ClassLoader的hashcode                      |\n| `[classLoaderClass:]` | 指定执行表达式的 ClassLoader 的 class name |\n| [p:]                  | 外部的`.class`文件的完整路径，支持多个     |\n\n#### retransform的限制\n\n- 不允许新增加field/method\n- 正在跑的函数，没有退出不能生效。\n\n## 热更新代码\n\n下面介绍通过`jad`/`mc`/`retransform` 命令实现动态更新代码的功能。\n\n目前，访问 http://localhost:61000/user/0 ，会返回500异常：\n\n```bash\ncurl http://localhost:61000/user/0\n```\n\n```\n{\"timestamp\":1550223186170,\"status\":500,\"error\":\"Internal Server Error\",\"exception\":\"java.lang.IllegalArgumentException\",\"message\":\"id < 1\",\"path\":\"/user/0\"}\n```\n\n下面通过热更新代码，修改这个逻辑。\n\n#### jad反编译UserController\n\n```bash\njad --source-only com.example.demo.arthas.user.UserController > /tmp/UserController.java\n```\n\njad反编译的结果保存在 `/tmp/UserController.java`文件里了。\n\n再打开一个`Terminal 3`，然后用vim来编辑`/tmp/UserController.java`：\n\n```bash\nvim /tmp/UserController.java\n```\n\n比如当 user id 小于1时，也正常返回，不抛出异常：\n\n```java\n    @GetMapping(value={\"/user/{id}\"})\n    public User findUserById(@PathVariable Integer id) {\n        logger.info(\"id: {}\", (Object)id);\n        if (id != null && id < 1) {\n            return new User(id, \"name\" + id);\n            // throw new IllegalArgumentException(\"id < 1\");\n        }\n        return new User(id.intValue(), \"name\" + id);\n    }\n```\n\n#### sc查找加载UserController的ClassLoader\n\n```bash\nsc -d *UserController | grep classLoaderHash\n```\n\n```console\n$ sc -d *UserController | grep classLoaderHash\n classLoaderHash   1be6f5c3\n```\n\n可以发现是 spring boot `LaunchedURLClassLoader@1be6f5c3` 加载的。\n\n注意hashcode是变化的，需要先查看当前的ClassLoader信息，提取对应ClassLoader的hashcode。\n\n如果你使用`-c`，你需要手动输入hashcode：`-c <hashcode>`\n\n对于只有唯一实例的ClassLoader可以通过`--classLoaderClass`指定class name，使用起来更加方便.\n\n`--classLoaderClass` 的值是ClassLoader的类名，只有匹配到唯一的ClassLoader实例时才能工作，目的是方便输入通用命令，而`-c <hashcode>`是动态变化的。\n\n#### mc\n\n保存好`/tmp/UserController.java`之后，使用`mc`(Memory Compiler)命令来编译，并且通过`--classLoaderClass`参数指定ClassLoader：\n\n```bash\nmc --classLoaderClass org.springframework.boot.loader.LaunchedURLClassLoader /tmp/UserController.java -d /tmp\n```\n\n```console\n$ mc --classLoaderClass org.springframework.boot.loader.LaunchedURLClassLoader /tmp/UserController.java -d /tmp\nMemory compiler output:\n/tmp/com/example/demo/arthas/user/UserController.class\nAffect(row-cnt:1) cost in 346 ms\n```\n\n也可以通过`mc -c <classLoaderHash> /tmp/UserController.java -d /tmp`，使用`-c`参数指定ClassLoaderHash:\n\n```console\n$ mc -c 1be6f5c3 /tmp/UserController.java -d /tmp\n```\n\n#### retransform\n\n再使用`retransform`命令重新加载新编译好的`UserController.class`：\n\n```bash\nretransform /tmp/com/example/demo/arthas/user/UserController.class\n```\n\n```\n$ retransform /tmp/com/example/demo/arthas/user/UserController.class\nretransform success, size: 1\n```\n\n#### 热修改代码结果\n\n`retransform`成功之后，再次访问 user/0 ，结果是：\n\n```\n{\n  \"id\": 0,\n  \"name\": \"name0\"\n}\n```\n\n## retransform命令更多说明\n\n> 加载外部的`.class`文件，retransform jvm已加载的类。\n\n参考：[Instrumentation#retransformClasses](https://docs.oracle.com/javase/8/docs/api/java/lang/instrument/Instrumentation.html#retransformClasses-java.lang.Class…-)\n\n#### 查看 retransform entry\n\n```bash\nretransform -l\n```\n\n```console\n$ retransform -l\nId              ClassName       TransformCount  LoaderHash      LoaderClassName\n1               com.example.dem 1               null            null\n                o.arthas.user.U\n                serController\n```\n\n- TransformCount 统计在 ClassFileTransformer#transform 函数里尝试返回 entry对应的 .class文件的次数，但并不表明transform一定成功。\n\n#### 删除指定 retransform entry\n\n```bash\nretransform -d 1\n```\n\n需要指定 id：\n\n```console\nretransform -d 1\n```\n\n#### 删除所有 retransform entry\n\n```bash\nretransform --deleteAll\n```\n\n```console\nretransform --deleteAll\n```\n\n#### 显式触发 retransform\n\n```bash\nretransform --classPattern com.example.demo.arthas.user.UserController\n```\n\n```console\n$ retransform --classPattern com.example.demo.arthas.user.UserController\nretransform success, size: 1, classes:\ncom.example.demo.arthas.user.UserController\n```\n\n> 注意：对于同一个类，当存在多个 retransform entry时，如果显式触发 retransform ，则最后添加的entry生效(id最大的)。\n\n#### 消除 retransform 的影响\n\n如果对某个类执行 retransform 之后，想消除影响，则需要：\n\n- 删除这个类对应的 retransform entry\n- 重新触发 retransform\n\n> 如果不清除掉所有的 retransform entry，并重新触发 retransform ，则arthas stop时，retransform过的类仍然生效。\n\n在上面删掉 retransform entry，再显式触发 retransform之后，可以用 `jad`命令来确认之前retransform的结果已经被消除了。\n\n再次访问 user/0 ，会抛出异常。\n\n## 更多信息\n\n在“mc-retransform”中，我们演示了了Arthas的mc-retransform命令。如果有更多的技巧或者使用疑问，欢迎在Issue里提出。\n\n- Issues: https://github.com/alibaba/arthas/issues\n- 文档： https://arthas.aliyun.com/doc\n\n如果您在使用Arthas，请让我们知道。您的使用对我们非常重要：[查看](https://github.com/alibaba/arthas/issues/111)\n\n文章拷贝来源：https://start.aliyun.com/course?spm=a2ck6.17690074.0.0.28bc2e7dHTphXs&id=PaiFAkJM","slug":"Java诊断工具Arthas高级命令教程/Arthasmc-retransform命令","published":1,"updated":"2021-08-07T05:34:51.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cks1cgr6m0027fw5ie8ps3mzl","content":"<!-- toc -->\n\n<ul>\n<li><a href=\"#%E5%90%AF%E5%8A%A8demo\">启动demo</a></li>\n<li><a href=\"#%E5%90%AF%E5%8A%A8arthas-boot\">启动arthas-boot</a></li>\n<li><a href=\"#mc%E5%91%BD%E4%BB%A4\">mc命令</a></li>\n<li><a href=\"#retransform%E5%91%BD%E4%BB%A4\">retransform命令</a><ul>\n<li><a href=\"#%E5%8F%82%E6%95%B0%E8%AF%B4%E6%98%8E\">参数说明</a></li>\n<li><a href=\"#retransform%E7%9A%84%E9%99%90%E5%88%B6\">retransform的限制</a></li>\n</ul>\n</li>\n<li><a href=\"#%E7%83%AD%E6%9B%B4%E6%96%B0%E4%BB%A3%E7%A0%81\">热更新代码</a><ul>\n<li><a href=\"#jad%E5%8F%8D%E7%BC%96%E8%AF%91usercontroller\">jad反编译UserController</a></li>\n<li><a href=\"#sc%E6%9F%A5%E6%89%BE%E5%8A%A0%E8%BD%BDusercontroller%E7%9A%84classloader\">sc查找加载UserController的ClassLoader</a></li>\n<li><a href=\"#mc\">mc</a></li>\n<li><a href=\"#retransform\">retransform</a></li>\n<li><a href=\"#%E7%83%AD%E4%BF%AE%E6%94%B9%E4%BB%A3%E7%A0%81%E7%BB%93%E6%9E%9C\">热修改代码结果</a></li>\n</ul>\n</li>\n<li><a href=\"#retransform%E5%91%BD%E4%BB%A4%E6%9B%B4%E5%A4%9A%E8%AF%B4%E6%98%8E\">retransform命令更多说明</a><ul>\n<li><a href=\"#%E6%9F%A5%E7%9C%8B-retransform-entry\">查看 retransform entry</a></li>\n<li><a href=\"#%E5%88%A0%E9%99%A4%E6%8C%87%E5%AE%9A-retransform-entry\">删除指定 retransform entry</a></li>\n<li><a href=\"#%E5%88%A0%E9%99%A4%E6%89%80%E6%9C%89-retransform-entry\">删除所有 retransform entry</a></li>\n<li><a href=\"#%E6%98%BE%E5%BC%8F%E8%A7%A6%E5%8F%91-retransform\">显式触发 retransform</a></li>\n<li><a href=\"#%E6%B6%88%E9%99%A4-retransform-%E7%9A%84%E5%BD%B1%E5%93%8D\">消除 retransform 的影响</a></li>\n</ul>\n</li>\n<li><a href=\"#%E6%9B%B4%E5%A4%9A%E4%BF%A1%E6%81%AF\">更多信息</a></li>\n</ul>\n<!-- tocstop -->\n\n<p><img src=\"/jlynet.github.io/2021/08/07/Java%E8%AF%8A%E6%96%AD%E5%B7%A5%E5%85%B7Arthas%E9%AB%98%E7%BA%A7%E5%91%BD%E4%BB%A4%E6%95%99%E7%A8%8B/Arthasmc-retransform%E5%91%BD%E4%BB%A4/arthas.png\" alt=\"Arthas\"></p>\n<p><code>Arthas</code> 是Alibaba开源的Java诊断工具，深受开发者喜爱。在线排查问题，无需重启；动态跟踪Java代码；实时监控JVM状态。</p>\n<p><code>Arthas</code> 支持JDK 6+，支持Linux/Mac/Windows，采用命令行交互模式，同时提供丰富的 <code>Tab</code> 自动补全功能，进一步方便进行问题的定位和诊断。</p>\n<p>当你遇到以下类似问题而束手无策时，Arthas可以帮助你解决：</p>\n<ul>\n<li>这个类从哪个 jar 包加载的？为什么会报各种类相关的 Exception？</li>\n<li>我改的代码为什么没有执行到？难道是我没 commit？分支搞错了？</li>\n<li>遇到问题无法在线上 debug，难道只能通过加日志再重新发布吗？</li>\n<li>线上遇到某个用户的数据处理有问题，但线上同样无法 debug，线下无法重现！</li>\n<li>是否有一个全局视角来查看系统的运行状况？</li>\n<li>有什么办法可以监控到JVM的实时运行状态？</li>\n<li>怎么快速定位应用的热点，生成火焰图？</li>\n</ul>\n<p>本教程会以一个普通的Spring Boot应用为例，演示mc-retransform命令。</p>\n<ul>\n<li>Github: <a href=\"https://github.com/alibaba/arthas\">https://github.com/alibaba/arthas</a></li>\n<li>文档: <a href=\"https://arthas.aliyun.com/doc/\">https://arthas.aliyun.com/doc/</a></li>\n</ul>\n<h2><span id=\"启动demo\">启动demo</span></h2><p>下载<code>demo-arthas-spring-boot.jar</code>，再用<code>java -jar</code>命令启动：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wget https://code.aliyun.com/middleware-container/handsonLabExternedFiles/raw/master/demo-arthas-spring-boot.jar;java -jar demo-arthas-spring-boot.jar</span><br></pre></td></tr></table></figure>\n\n<p><code>demo-arthas-spring-boot</code>是一个很简单的spring boot应用，源代码：<a href=\"https://github.com/hengyunabc/spring-boot-inside/tree/master/demo-arthas-spring-boot\">查看</a></p>\n<p>启动之后，可以访问61000端口： 点击查看</p>\n<p><img src=\"/jlynet.github.io/2021/08/07/Java%E8%AF%8A%E6%96%AD%E5%B7%A5%E5%85%B7Arthas%E9%AB%98%E7%BA%A7%E5%91%BD%E4%BB%A4%E6%95%99%E7%A8%8B/Arthasmc-retransform%E5%91%BD%E4%BB%A4/O1CN010Qbzcz1ctPSWSZI6L_!!6000000003658-2-tps-333-182.png\" alt=\"Demo Web\"></p>\n<h2><span id=\"启动arthas-boot\">启动arthas-boot</span></h2><p>在新的<code>Terminal 2</code>里，下载<code>arthas-boot.jar</code>，再用<code>java -jar</code>命令启动：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wget https://arthas.aliyun.com/arthas-boot.jar;java -jar arthas-boot.jar</span><br></pre></td></tr></table></figure>\n\n<p><code>arthas-boot</code>是<code>Arthas</code>的启动程序，它启动后，会列出所有的Java进程，用户可以选择需要诊断的目标进程。</p>\n<p>选择第一个进程，输入 <code>1</code> ，再<code>Enter/回车</code>：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1</span><br></pre></td></tr></table></figure>\n\n<p>Attach成功之后，会打印Arthas LOGO。输入 <code>help</code> 可以获取到更多的帮助信息。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">help</span></span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/jlynet.github.io/2021/08/07/Java%E8%AF%8A%E6%96%AD%E5%B7%A5%E5%85%B7Arthas%E9%AB%98%E7%BA%A7%E5%91%BD%E4%BB%A4%E6%95%99%E7%A8%8B/Arthasmc-retransform%E5%91%BD%E4%BB%A4/O1CN01HzatXZ1RgccrlT90M_!!6000000002141-2-tps-529-244.png\" alt=\"Arthas Boot\"></p>\n<h2><span id=\"mc命令\">mc命令</span></h2><blockquote>\n<p>Memory Compiler/内存编译器，编译<code>.java</code>文件生成<code>.class</code>。 可以通过<code>-c</code>/<code>--classLoaderClass</code>参数指定classloader，<code>-d</code>参数指定输出目录</p>\n</blockquote>\n<p>编译生成<code>.class</code>文件之后，可以结合<code>retransform</code>命令实现热更新代码。</p>\n<h2><span id=\"retransform命令\">retransform命令</span></h2><blockquote>\n<p>加载外部的<code>.class</code>文件，retransform jvm已加载的类。</p>\n</blockquote>\n<p>参考：<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/instrument/Instrumentation.html#retransformClasses-java.lang.Class%E2%80%A6-\">Instrumentation#retransformClasses</a></p>\n<h4><span id=\"参数说明\">参数说明</span></h4><table>\n<thead>\n<tr>\n<th>参数名称</th>\n<th>参数说明</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>[c:]</td>\n<td>ClassLoader的hashcode</td>\n</tr>\n<tr>\n<td><code>[classLoaderClass:]</code></td>\n<td>指定执行表达式的 ClassLoader 的 class name</td>\n</tr>\n<tr>\n<td>[p:]</td>\n<td>外部的<code>.class</code>文件的完整路径，支持多个</td>\n</tr>\n</tbody></table>\n<h4><span id=\"retransform的限制\">retransform的限制</span></h4><ul>\n<li>不允许新增加field/method</li>\n<li>正在跑的函数，没有退出不能生效。</li>\n</ul>\n<h2><span id=\"热更新代码\">热更新代码</span></h2><p>下面介绍通过<code>jad</code>/<code>mc</code>/<code>retransform</code> 命令实现动态更新代码的功能。</p>\n<p>目前，访问 <a href=\"http://localhost:61000/user/0\">http://localhost:61000/user/0</a> ，会返回500异常：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">curl http://localhost:61000/user/0</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;&quot;timestamp&quot;:1550223186170,&quot;status&quot;:500,&quot;error&quot;:&quot;Internal Server Error&quot;,&quot;exception&quot;:&quot;java.lang.IllegalArgumentException&quot;,&quot;message&quot;:&quot;id &lt; 1&quot;,&quot;path&quot;:&quot;/user/0&quot;&#125;</span><br></pre></td></tr></table></figure>\n\n<p>下面通过热更新代码，修改这个逻辑。</p>\n<h4><span id=\"jad反编译usercontroller\">jad反编译UserController</span></h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">jad --source-only com.example.demo.arthas.user.UserController &gt; /tmp/UserController.java</span><br></pre></td></tr></table></figure>\n\n<p>jad反编译的结果保存在 <code>/tmp/UserController.java</code>文件里了。</p>\n<p>再打开一个<code>Terminal 3</code>，然后用vim来编辑<code>/tmp/UserController.java</code>：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vim /tmp/UserController.java</span><br></pre></td></tr></table></figure>\n\n<p>比如当 user id 小于1时，也正常返回，不抛出异常：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@GetMapping(value=&#123;&quot;/user/&#123;id&#125;&quot;&#125;)</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> User <span class=\"title\">findUserById</span><span class=\"params\">(<span class=\"meta\">@PathVariable</span> Integer id)</span> </span>&#123;</span><br><span class=\"line\">    logger.info(<span class=\"string\">&quot;id: &#123;&#125;&quot;</span>, (Object)id);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (id != <span class=\"keyword\">null</span> &amp;&amp; id &lt; <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> User(id, <span class=\"string\">&quot;name&quot;</span> + id);</span><br><span class=\"line\">        <span class=\"comment\">// throw new IllegalArgumentException(&quot;id &lt; 1&quot;);</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> User(id.intValue(), <span class=\"string\">&quot;name&quot;</span> + id);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4><span id=\"sc查找加载usercontroller的classloader\">sc查找加载UserController的ClassLoader</span></h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sc -d *UserController | grep classLoaderHash</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight console\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> sc -d *UserController | grep classLoaderHash</span></span><br><span class=\"line\"> classLoaderHash   1be6f5c3</span><br></pre></td></tr></table></figure>\n\n<p>可以发现是 spring boot <code>LaunchedURLClassLoader@1be6f5c3</code> 加载的。</p>\n<p>注意hashcode是变化的，需要先查看当前的ClassLoader信息，提取对应ClassLoader的hashcode。</p>\n<p>如果你使用<code>-c</code>，你需要手动输入hashcode：<code>-c &lt;hashcode&gt;</code></p>\n<p>对于只有唯一实例的ClassLoader可以通过<code>--classLoaderClass</code>指定class name，使用起来更加方便.</p>\n<p><code>--classLoaderClass</code> 的值是ClassLoader的类名，只有匹配到唯一的ClassLoader实例时才能工作，目的是方便输入通用命令，而<code>-c &lt;hashcode&gt;</code>是动态变化的。</p>\n<h4><span id=\"mc\">mc</span></h4><p>保存好<code>/tmp/UserController.java</code>之后，使用<code>mc</code>(Memory Compiler)命令来编译，并且通过<code>--classLoaderClass</code>参数指定ClassLoader：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mc --classLoaderClass org.springframework.boot.loader.LaunchedURLClassLoader /tmp/UserController.java -d /tmp</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight console\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> mc --classLoaderClass org.springframework.boot.loader.LaunchedURLClassLoader /tmp/UserController.java -d /tmp</span></span><br><span class=\"line\">Memory compiler output:</span><br><span class=\"line\">/tmp/com/example/demo/arthas/user/UserController.class</span><br><span class=\"line\">Affect(row-cnt:1) cost in 346 ms</span><br></pre></td></tr></table></figure>\n\n<p>也可以通过<code>mc -c &lt;classLoaderHash&gt; /tmp/UserController.java -d /tmp</code>，使用<code>-c</code>参数指定ClassLoaderHash:</p>\n<figure class=\"highlight console\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> mc -c 1be6f5c3 /tmp/UserController.java -d /tmp</span></span><br></pre></td></tr></table></figure>\n\n<h4><span id=\"retransform\">retransform</span></h4><p>再使用<code>retransform</code>命令重新加载新编译好的<code>UserController.class</code>：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">retransform /tmp/com/example/demo/arthas/user/UserController.class</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ retransform /tmp/com/example/demo/arthas/user/UserController.class</span><br><span class=\"line\">retransform success, size: 1</span><br></pre></td></tr></table></figure>\n\n<h4><span id=\"热修改代码结果\">热修改代码结果</span></h4><p><code>retransform</code>成功之后，再次访问 user/0 ，结果是：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  &quot;id&quot;: 0,</span><br><span class=\"line\">  &quot;name&quot;: &quot;name0&quot;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2><span id=\"retransform命令更多说明\">retransform命令更多说明</span></h2><blockquote>\n<p>加载外部的<code>.class</code>文件，retransform jvm已加载的类。</p>\n</blockquote>\n<p>参考：<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/instrument/Instrumentation.html#retransformClasses-java.lang.Class%E2%80%A6-\">Instrumentation#retransformClasses</a></p>\n<h4><span id=\"查看-retransform-entry\">查看 retransform entry</span></h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">retransform -l</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight console\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> retransform -l</span></span><br><span class=\"line\">Id              ClassName       TransformCount  LoaderHash      LoaderClassName</span><br><span class=\"line\">1               com.example.dem 1               null            null</span><br><span class=\"line\">                o.arthas.user.U</span><br><span class=\"line\">                serController</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>TransformCount 统计在 ClassFileTransformer#transform 函数里尝试返回 entry对应的 .class文件的次数，但并不表明transform一定成功。</li>\n</ul>\n<h4><span id=\"删除指定-retransform-entry\">删除指定 retransform entry</span></h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">retransform -d 1</span><br></pre></td></tr></table></figure>\n\n<p>需要指定 id：</p>\n<figure class=\"highlight console\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">retransform -d 1</span><br></pre></td></tr></table></figure>\n\n<h4><span id=\"删除所有-retransform-entry\">删除所有 retransform entry</span></h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">retransform --deleteAll</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight console\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">retransform --deleteAll</span><br></pre></td></tr></table></figure>\n\n<h4><span id=\"显式触发-retransform\">显式触发 retransform</span></h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">retransform --classPattern com.example.demo.arthas.user.UserController</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight console\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> retransform --classPattern com.example.demo.arthas.user.UserController</span></span><br><span class=\"line\">retransform success, size: 1, classes:</span><br><span class=\"line\">com.example.demo.arthas.user.UserController</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>注意：对于同一个类，当存在多个 retransform entry时，如果显式触发 retransform ，则最后添加的entry生效(id最大的)。</p>\n</blockquote>\n<h4><span id=\"消除-retransform-的影响\">消除 retransform 的影响</span></h4><p>如果对某个类执行 retransform 之后，想消除影响，则需要：</p>\n<ul>\n<li>删除这个类对应的 retransform entry</li>\n<li>重新触发 retransform</li>\n</ul>\n<blockquote>\n<p>如果不清除掉所有的 retransform entry，并重新触发 retransform ，则arthas stop时，retransform过的类仍然生效。</p>\n</blockquote>\n<p>在上面删掉 retransform entry，再显式触发 retransform之后，可以用 <code>jad</code>命令来确认之前retransform的结果已经被消除了。</p>\n<p>再次访问 user/0 ，会抛出异常。</p>\n<h2><span id=\"更多信息\">更多信息</span></h2><p>在“mc-retransform”中，我们演示了了Arthas的mc-retransform命令。如果有更多的技巧或者使用疑问，欢迎在Issue里提出。</p>\n<ul>\n<li>Issues: <a href=\"https://github.com/alibaba/arthas/issues\">https://github.com/alibaba/arthas/issues</a></li>\n<li>文档： <a href=\"https://arthas.aliyun.com/doc\">https://arthas.aliyun.com/doc</a></li>\n</ul>\n<p>如果您在使用Arthas，请让我们知道。您的使用对我们非常重要：<a href=\"https://github.com/alibaba/arthas/issues/111\">查看</a></p>\n<p>文章拷贝来源：<a href=\"https://start.aliyun.com/course?spm=a2ck6.17690074.0.0.28bc2e7dHTphXs&amp;id=PaiFAkJM\">https://start.aliyun.com/course?spm=a2ck6.17690074.0.0.28bc2e7dHTphXs&amp;id=PaiFAkJM</a></p>\n","site":{"data":{}},"excerpt":"","more":"<!-- toc -->\n\n<ul>\n<li><a href=\"#%E5%90%AF%E5%8A%A8demo\">启动demo</a></li>\n<li><a href=\"#%E5%90%AF%E5%8A%A8arthas-boot\">启动arthas-boot</a></li>\n<li><a href=\"#mc%E5%91%BD%E4%BB%A4\">mc命令</a></li>\n<li><a href=\"#retransform%E5%91%BD%E4%BB%A4\">retransform命令</a><ul>\n<li><a href=\"#%E5%8F%82%E6%95%B0%E8%AF%B4%E6%98%8E\">参数说明</a></li>\n<li><a href=\"#retransform%E7%9A%84%E9%99%90%E5%88%B6\">retransform的限制</a></li>\n</ul>\n</li>\n<li><a href=\"#%E7%83%AD%E6%9B%B4%E6%96%B0%E4%BB%A3%E7%A0%81\">热更新代码</a><ul>\n<li><a href=\"#jad%E5%8F%8D%E7%BC%96%E8%AF%91usercontroller\">jad反编译UserController</a></li>\n<li><a href=\"#sc%E6%9F%A5%E6%89%BE%E5%8A%A0%E8%BD%BDusercontroller%E7%9A%84classloader\">sc查找加载UserController的ClassLoader</a></li>\n<li><a href=\"#mc\">mc</a></li>\n<li><a href=\"#retransform\">retransform</a></li>\n<li><a href=\"#%E7%83%AD%E4%BF%AE%E6%94%B9%E4%BB%A3%E7%A0%81%E7%BB%93%E6%9E%9C\">热修改代码结果</a></li>\n</ul>\n</li>\n<li><a href=\"#retransform%E5%91%BD%E4%BB%A4%E6%9B%B4%E5%A4%9A%E8%AF%B4%E6%98%8E\">retransform命令更多说明</a><ul>\n<li><a href=\"#%E6%9F%A5%E7%9C%8B-retransform-entry\">查看 retransform entry</a></li>\n<li><a href=\"#%E5%88%A0%E9%99%A4%E6%8C%87%E5%AE%9A-retransform-entry\">删除指定 retransform entry</a></li>\n<li><a href=\"#%E5%88%A0%E9%99%A4%E6%89%80%E6%9C%89-retransform-entry\">删除所有 retransform entry</a></li>\n<li><a href=\"#%E6%98%BE%E5%BC%8F%E8%A7%A6%E5%8F%91-retransform\">显式触发 retransform</a></li>\n<li><a href=\"#%E6%B6%88%E9%99%A4-retransform-%E7%9A%84%E5%BD%B1%E5%93%8D\">消除 retransform 的影响</a></li>\n</ul>\n</li>\n<li><a href=\"#%E6%9B%B4%E5%A4%9A%E4%BF%A1%E6%81%AF\">更多信息</a></li>\n</ul>\n<!-- tocstop -->\n\n<p><img src=\"/jlynet.github.io/2021/08/07/Java%E8%AF%8A%E6%96%AD%E5%B7%A5%E5%85%B7Arthas%E9%AB%98%E7%BA%A7%E5%91%BD%E4%BB%A4%E6%95%99%E7%A8%8B/Arthasmc-retransform%E5%91%BD%E4%BB%A4/arthas.png\" alt=\"Arthas\"></p>\n<p><code>Arthas</code> 是Alibaba开源的Java诊断工具，深受开发者喜爱。在线排查问题，无需重启；动态跟踪Java代码；实时监控JVM状态。</p>\n<p><code>Arthas</code> 支持JDK 6+，支持Linux/Mac/Windows，采用命令行交互模式，同时提供丰富的 <code>Tab</code> 自动补全功能，进一步方便进行问题的定位和诊断。</p>\n<p>当你遇到以下类似问题而束手无策时，Arthas可以帮助你解决：</p>\n<ul>\n<li>这个类从哪个 jar 包加载的？为什么会报各种类相关的 Exception？</li>\n<li>我改的代码为什么没有执行到？难道是我没 commit？分支搞错了？</li>\n<li>遇到问题无法在线上 debug，难道只能通过加日志再重新发布吗？</li>\n<li>线上遇到某个用户的数据处理有问题，但线上同样无法 debug，线下无法重现！</li>\n<li>是否有一个全局视角来查看系统的运行状况？</li>\n<li>有什么办法可以监控到JVM的实时运行状态？</li>\n<li>怎么快速定位应用的热点，生成火焰图？</li>\n</ul>\n<p>本教程会以一个普通的Spring Boot应用为例，演示mc-retransform命令。</p>\n<ul>\n<li>Github: <a href=\"https://github.com/alibaba/arthas\">https://github.com/alibaba/arthas</a></li>\n<li>文档: <a href=\"https://arthas.aliyun.com/doc/\">https://arthas.aliyun.com/doc/</a></li>\n</ul>\n<h2 id=\"启动demo\"><a href=\"#启动demo\" class=\"headerlink\" title=\"启动demo\"></a>启动demo</h2><p>下载<code>demo-arthas-spring-boot.jar</code>，再用<code>java -jar</code>命令启动：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wget https://code.aliyun.com/middleware-container/handsonLabExternedFiles/raw/master/demo-arthas-spring-boot.jar;java -jar demo-arthas-spring-boot.jar</span><br></pre></td></tr></table></figure>\n\n<p><code>demo-arthas-spring-boot</code>是一个很简单的spring boot应用，源代码：<a href=\"https://github.com/hengyunabc/spring-boot-inside/tree/master/demo-arthas-spring-boot\">查看</a></p>\n<p>启动之后，可以访问61000端口： 点击查看</p>\n<p><img src=\"/jlynet.github.io/2021/08/07/Java%E8%AF%8A%E6%96%AD%E5%B7%A5%E5%85%B7Arthas%E9%AB%98%E7%BA%A7%E5%91%BD%E4%BB%A4%E6%95%99%E7%A8%8B/Arthasmc-retransform%E5%91%BD%E4%BB%A4/O1CN010Qbzcz1ctPSWSZI6L_!!6000000003658-2-tps-333-182.png\" alt=\"Demo Web\"></p>\n<h2 id=\"启动arthas-boot\"><a href=\"#启动arthas-boot\" class=\"headerlink\" title=\"启动arthas-boot\"></a>启动arthas-boot</h2><p>在新的<code>Terminal 2</code>里，下载<code>arthas-boot.jar</code>，再用<code>java -jar</code>命令启动：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wget https://arthas.aliyun.com/arthas-boot.jar;java -jar arthas-boot.jar</span><br></pre></td></tr></table></figure>\n\n<p><code>arthas-boot</code>是<code>Arthas</code>的启动程序，它启动后，会列出所有的Java进程，用户可以选择需要诊断的目标进程。</p>\n<p>选择第一个进程，输入 <code>1</code> ，再<code>Enter/回车</code>：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1</span><br></pre></td></tr></table></figure>\n\n<p>Attach成功之后，会打印Arthas LOGO。输入 <code>help</code> 可以获取到更多的帮助信息。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">help</span></span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/jlynet.github.io/2021/08/07/Java%E8%AF%8A%E6%96%AD%E5%B7%A5%E5%85%B7Arthas%E9%AB%98%E7%BA%A7%E5%91%BD%E4%BB%A4%E6%95%99%E7%A8%8B/Arthasmc-retransform%E5%91%BD%E4%BB%A4/O1CN01HzatXZ1RgccrlT90M_!!6000000002141-2-tps-529-244.png\" alt=\"Arthas Boot\"></p>\n<h2 id=\"mc命令\"><a href=\"#mc命令\" class=\"headerlink\" title=\"mc命令\"></a>mc命令</h2><blockquote>\n<p>Memory Compiler/内存编译器，编译<code>.java</code>文件生成<code>.class</code>。 可以通过<code>-c</code>/<code>--classLoaderClass</code>参数指定classloader，<code>-d</code>参数指定输出目录</p>\n</blockquote>\n<p>编译生成<code>.class</code>文件之后，可以结合<code>retransform</code>命令实现热更新代码。</p>\n<h2 id=\"retransform命令\"><a href=\"#retransform命令\" class=\"headerlink\" title=\"retransform命令\"></a>retransform命令</h2><blockquote>\n<p>加载外部的<code>.class</code>文件，retransform jvm已加载的类。</p>\n</blockquote>\n<p>参考：<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/instrument/Instrumentation.html#retransformClasses-java.lang.Class%E2%80%A6-\">Instrumentation#retransformClasses</a></p>\n<h4 id=\"参数说明\"><a href=\"#参数说明\" class=\"headerlink\" title=\"参数说明\"></a>参数说明</h4><table>\n<thead>\n<tr>\n<th>参数名称</th>\n<th>参数说明</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>[c:]</td>\n<td>ClassLoader的hashcode</td>\n</tr>\n<tr>\n<td><code>[classLoaderClass:]</code></td>\n<td>指定执行表达式的 ClassLoader 的 class name</td>\n</tr>\n<tr>\n<td>[p:]</td>\n<td>外部的<code>.class</code>文件的完整路径，支持多个</td>\n</tr>\n</tbody></table>\n<h4 id=\"retransform的限制\"><a href=\"#retransform的限制\" class=\"headerlink\" title=\"retransform的限制\"></a>retransform的限制</h4><ul>\n<li>不允许新增加field/method</li>\n<li>正在跑的函数，没有退出不能生效。</li>\n</ul>\n<h2 id=\"热更新代码\"><a href=\"#热更新代码\" class=\"headerlink\" title=\"热更新代码\"></a>热更新代码</h2><p>下面介绍通过<code>jad</code>/<code>mc</code>/<code>retransform</code> 命令实现动态更新代码的功能。</p>\n<p>目前，访问 <a href=\"http://localhost:61000/user/0\">http://localhost:61000/user/0</a> ，会返回500异常：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">curl http://localhost:61000/user/0</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;&quot;timestamp&quot;:1550223186170,&quot;status&quot;:500,&quot;error&quot;:&quot;Internal Server Error&quot;,&quot;exception&quot;:&quot;java.lang.IllegalArgumentException&quot;,&quot;message&quot;:&quot;id &lt; 1&quot;,&quot;path&quot;:&quot;/user/0&quot;&#125;</span><br></pre></td></tr></table></figure>\n\n<p>下面通过热更新代码，修改这个逻辑。</p>\n<h4 id=\"jad反编译UserController\"><a href=\"#jad反编译UserController\" class=\"headerlink\" title=\"jad反编译UserController\"></a>jad反编译UserController</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">jad --source-only com.example.demo.arthas.user.UserController &gt; /tmp/UserController.java</span><br></pre></td></tr></table></figure>\n\n<p>jad反编译的结果保存在 <code>/tmp/UserController.java</code>文件里了。</p>\n<p>再打开一个<code>Terminal 3</code>，然后用vim来编辑<code>/tmp/UserController.java</code>：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vim /tmp/UserController.java</span><br></pre></td></tr></table></figure>\n\n<p>比如当 user id 小于1时，也正常返回，不抛出异常：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@GetMapping(value=&#123;&quot;/user/&#123;id&#125;&quot;&#125;)</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> User <span class=\"title\">findUserById</span><span class=\"params\">(<span class=\"meta\">@PathVariable</span> Integer id)</span> </span>&#123;</span><br><span class=\"line\">    logger.info(<span class=\"string\">&quot;id: &#123;&#125;&quot;</span>, (Object)id);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (id != <span class=\"keyword\">null</span> &amp;&amp; id &lt; <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> User(id, <span class=\"string\">&quot;name&quot;</span> + id);</span><br><span class=\"line\">        <span class=\"comment\">// throw new IllegalArgumentException(&quot;id &lt; 1&quot;);</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> User(id.intValue(), <span class=\"string\">&quot;name&quot;</span> + id);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"sc查找加载UserController的ClassLoader\"><a href=\"#sc查找加载UserController的ClassLoader\" class=\"headerlink\" title=\"sc查找加载UserController的ClassLoader\"></a>sc查找加载UserController的ClassLoader</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sc -d *UserController | grep classLoaderHash</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight console\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> sc -d *UserController | grep classLoaderHash</span></span><br><span class=\"line\"> classLoaderHash   1be6f5c3</span><br></pre></td></tr></table></figure>\n\n<p>可以发现是 spring boot <code>LaunchedURLClassLoader@1be6f5c3</code> 加载的。</p>\n<p>注意hashcode是变化的，需要先查看当前的ClassLoader信息，提取对应ClassLoader的hashcode。</p>\n<p>如果你使用<code>-c</code>，你需要手动输入hashcode：<code>-c &lt;hashcode&gt;</code></p>\n<p>对于只有唯一实例的ClassLoader可以通过<code>--classLoaderClass</code>指定class name，使用起来更加方便.</p>\n<p><code>--classLoaderClass</code> 的值是ClassLoader的类名，只有匹配到唯一的ClassLoader实例时才能工作，目的是方便输入通用命令，而<code>-c &lt;hashcode&gt;</code>是动态变化的。</p>\n<h4 id=\"mc\"><a href=\"#mc\" class=\"headerlink\" title=\"mc\"></a>mc</h4><p>保存好<code>/tmp/UserController.java</code>之后，使用<code>mc</code>(Memory Compiler)命令来编译，并且通过<code>--classLoaderClass</code>参数指定ClassLoader：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mc --classLoaderClass org.springframework.boot.loader.LaunchedURLClassLoader /tmp/UserController.java -d /tmp</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight console\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> mc --classLoaderClass org.springframework.boot.loader.LaunchedURLClassLoader /tmp/UserController.java -d /tmp</span></span><br><span class=\"line\">Memory compiler output:</span><br><span class=\"line\">/tmp/com/example/demo/arthas/user/UserController.class</span><br><span class=\"line\">Affect(row-cnt:1) cost in 346 ms</span><br></pre></td></tr></table></figure>\n\n<p>也可以通过<code>mc -c &lt;classLoaderHash&gt; /tmp/UserController.java -d /tmp</code>，使用<code>-c</code>参数指定ClassLoaderHash:</p>\n<figure class=\"highlight console\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> mc -c 1be6f5c3 /tmp/UserController.java -d /tmp</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"retransform\"><a href=\"#retransform\" class=\"headerlink\" title=\"retransform\"></a>retransform</h4><p>再使用<code>retransform</code>命令重新加载新编译好的<code>UserController.class</code>：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">retransform /tmp/com/example/demo/arthas/user/UserController.class</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ retransform /tmp/com/example/demo/arthas/user/UserController.class</span><br><span class=\"line\">retransform success, size: 1</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"热修改代码结果\"><a href=\"#热修改代码结果\" class=\"headerlink\" title=\"热修改代码结果\"></a>热修改代码结果</h4><p><code>retransform</code>成功之后，再次访问 user/0 ，结果是：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  &quot;id&quot;: 0,</span><br><span class=\"line\">  &quot;name&quot;: &quot;name0&quot;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"retransform命令更多说明\"><a href=\"#retransform命令更多说明\" class=\"headerlink\" title=\"retransform命令更多说明\"></a>retransform命令更多说明</h2><blockquote>\n<p>加载外部的<code>.class</code>文件，retransform jvm已加载的类。</p>\n</blockquote>\n<p>参考：<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/instrument/Instrumentation.html#retransformClasses-java.lang.Class%E2%80%A6-\">Instrumentation#retransformClasses</a></p>\n<h4 id=\"查看-retransform-entry\"><a href=\"#查看-retransform-entry\" class=\"headerlink\" title=\"查看 retransform entry\"></a>查看 retransform entry</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">retransform -l</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight console\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> retransform -l</span></span><br><span class=\"line\">Id              ClassName       TransformCount  LoaderHash      LoaderClassName</span><br><span class=\"line\">1               com.example.dem 1               null            null</span><br><span class=\"line\">                o.arthas.user.U</span><br><span class=\"line\">                serController</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>TransformCount 统计在 ClassFileTransformer#transform 函数里尝试返回 entry对应的 .class文件的次数，但并不表明transform一定成功。</li>\n</ul>\n<h4 id=\"删除指定-retransform-entry\"><a href=\"#删除指定-retransform-entry\" class=\"headerlink\" title=\"删除指定 retransform entry\"></a>删除指定 retransform entry</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">retransform -d 1</span><br></pre></td></tr></table></figure>\n\n<p>需要指定 id：</p>\n<figure class=\"highlight console\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">retransform -d 1</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"删除所有-retransform-entry\"><a href=\"#删除所有-retransform-entry\" class=\"headerlink\" title=\"删除所有 retransform entry\"></a>删除所有 retransform entry</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">retransform --deleteAll</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight console\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">retransform --deleteAll</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"显式触发-retransform\"><a href=\"#显式触发-retransform\" class=\"headerlink\" title=\"显式触发 retransform\"></a>显式触发 retransform</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">retransform --classPattern com.example.demo.arthas.user.UserController</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight console\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> retransform --classPattern com.example.demo.arthas.user.UserController</span></span><br><span class=\"line\">retransform success, size: 1, classes:</span><br><span class=\"line\">com.example.demo.arthas.user.UserController</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>注意：对于同一个类，当存在多个 retransform entry时，如果显式触发 retransform ，则最后添加的entry生效(id最大的)。</p>\n</blockquote>\n<h4 id=\"消除-retransform-的影响\"><a href=\"#消除-retransform-的影响\" class=\"headerlink\" title=\"消除 retransform 的影响\"></a>消除 retransform 的影响</h4><p>如果对某个类执行 retransform 之后，想消除影响，则需要：</p>\n<ul>\n<li>删除这个类对应的 retransform entry</li>\n<li>重新触发 retransform</li>\n</ul>\n<blockquote>\n<p>如果不清除掉所有的 retransform entry，并重新触发 retransform ，则arthas stop时，retransform过的类仍然生效。</p>\n</blockquote>\n<p>在上面删掉 retransform entry，再显式触发 retransform之后，可以用 <code>jad</code>命令来确认之前retransform的结果已经被消除了。</p>\n<p>再次访问 user/0 ，会抛出异常。</p>\n<h2 id=\"更多信息\"><a href=\"#更多信息\" class=\"headerlink\" title=\"更多信息\"></a>更多信息</h2><p>在“mc-retransform”中，我们演示了了Arthas的mc-retransform命令。如果有更多的技巧或者使用疑问，欢迎在Issue里提出。</p>\n<ul>\n<li>Issues: <a href=\"https://github.com/alibaba/arthas/issues\">https://github.com/alibaba/arthas/issues</a></li>\n<li>文档： <a href=\"https://arthas.aliyun.com/doc\">https://arthas.aliyun.com/doc</a></li>\n</ul>\n<p>如果您在使用Arthas，请让我们知道。您的使用对我们非常重要：<a href=\"https://github.com/alibaba/arthas/issues/111\">查看</a></p>\n<p>文章拷贝来源：<a href=\"https://start.aliyun.com/course?spm=a2ck6.17690074.0.0.28bc2e7dHTphXs&amp;id=PaiFAkJM\">https://start.aliyun.com/course?spm=a2ck6.17690074.0.0.28bc2e7dHTphXs&amp;id=PaiFAkJM</a></p>\n"},{"title":"Arthas monitor命令","date":"2021-08-07T01:51:39.000Z","_content":"\n<!-- toc -->\n\n![Arthas](arthas.png)\n\n`Arthas` 是Alibaba开源的Java诊断工具，深受开发者喜爱。在线排查问题，无需重启；动态跟踪Java代码；实时监控JVM状态。\n\n`Arthas` 支持JDK 6+，支持Linux/Mac/Windows，采用命令行交互模式，同时提供丰富的 `Tab` 自动补全功能，进一步方便进行问题的定位和诊断。\n\n当你遇到以下类似问题而束手无策时，Arthas可以帮助你解决：\n\n- 这个类从哪个 jar 包加载的？为什么会报各种类相关的 Exception？\n- 我改的代码为什么没有执行到？难道是我没 commit？分支搞错了？\n- 遇到问题无法在线上 debug，难道只能通过加日志再重新发布吗？\n- 线上遇到某个用户的数据处理有问题，但线上同样无法 debug，线下无法重现！\n- 是否有一个全局视角来查看系统的运行状况？\n- 有什么办法可以监控到JVM的实时运行状态？\n- 怎么快速定位应用的热点，生成火焰图？\n\n本教程会以一个简单的应用为例，演示monitor命令。\n\n- Github: https://github.com/alibaba/arthas\n- 文档: https://arthas.aliyun.com/doc/\n\n## 启动arthas demo\n\n下载`arthas-demo.jar`，再用`java -jar`命令启动：\n\n```bash\nwget https://arthas.aliyun.com/arthas-demo.jar;java -jar arthas-demo.jar\n```\n\n`arthas-demo`是一个很简单的程序，它随机生成整数，再执行因式分解，把结果打印出来。如果生成的随机数是负数，则会打印提示信息。\n\n## 启动arthas-boot\n\n在新的`Terminal 2`里，下载`arthas-boot.jar`，再用`java -jar`命令启动：\n\n```bash\nwget https://arthas.aliyun.com/arthas-boot.jar;java -jar arthas-boot.jar\n```\n\n`arthas-boot`是`Arthas`的启动程序，它启动后，会列出所有的Java进程，用户可以选择需要诊断的目标进程。\n\n选择第一个进程，输入 `1` ，再`Enter/回车`：\n\n```bash\n1\n```\n\nAttach成功之后，会打印Arthas LOGO。输入 `help` 可以获取到更多的帮助信息。\n\n```bash\nhelp\n```\n\n![Arthas Boot](O1CN01HzatXZ1RgccrlT90M_!!6000000002141-2-tps-529-244.png)\n\n## monitor命令\n\n> 方法执行监控\n\n对匹配 `class-pattern`／`method-pattern`的类、方法的调用进行监控。\n\n`monitor` 命令是一个非实时返回命令.\n\n实时返回命令是输入之后立即返回，而非实时返回的命令，则是不断的等待目标 Java 进程返回信息，直到用户输入 `Ctrl+C` 为止。\n\n服务端是以任务的形式在后台跑任务，植入的代码随着任务的中止而不会被执行，所以任务关闭后，不会对原有性能产生太大影响，而且原则上，任何Arthas命令不会引起原有业务逻辑的改变。\n\n#### 监控的维度说明\n\n| 监控项    | 说明                       |\n| --------- | -------------------------- |\n| timestamp | 时间戳                     |\n| class     | Java类                     |\n| method    | 方法（构造方法、普通方法） |\n| total     | 调用次数                   |\n| success   | 成功次数                   |\n| fail      | 失败次数                   |\n| rt        | 平均RT                     |\n| fail-rate | 失败率                     |\n\n#### 参数说明\n\n方法拥有一个命名参数 `[c:]`，意思是统计周期（cycle of output），拥有一个整型的参数值\n\n| 参数名称         | 参数说明                             |\n| ---------------- | ------------------------------------ |\n| *class-pattern*  | 类名表达式匹配                       |\n| *method-pattern* | 方法名表达式匹配                     |\n| [E]              | 开启正则表达式匹配，默认为通配符匹配 |\n| `[c:]`           | 统计周期，默认值为120秒              |\n\n#### 使用参考\n\n```bash\nmonitor -c 5 demo.MathGame primeFactors\n```\n\n按`q`或者`Ctrl+c`退出\n\n```bash\nq\n```\n\n```console\n$ monitor -c 5 demo.MathGame primeFactors\nPress Ctrl+C to abort.\nAffect(class-cnt:1 , method-cnt:1) cost in 94 ms.\n timestamp            class          method        total  success  fail  avg-rt(ms)  fail-rate\n-----------------------------------------------------------------------------------------------\n 2018-12-03 19:06:38  demo.MathGame  primeFactors  5      1        4     1.15        80.00%\n\n timestamp            class          method        total  success  fail  avg-rt(ms)  fail-rate\n-----------------------------------------------------------------------------------------------\n 2018-12-03 19:06:43  demo.MathGame  primeFactors  5      3        2     42.29       40.00%\n\n timestamp            class          method        total  success  fail  avg-rt(ms)  fail-rate\n-----------------------------------------------------------------------------------------------\n 2018-12-03 19:06:48  demo.MathGame  primeFactors  5      3        2     67.92       40.00%\n\n timestamp            class          method        total  success  fail  avg-rt(ms)  fail-rate\n-----------------------------------------------------------------------------------------------\n 2018-12-03 19:06:53  demo.MathGame  primeFactors  5      2        3     0.25        60.00%\n\n timestamp            class          method        total  success  fail  avg-rt(ms)  fail-rate\n-----------------------------------------------------------------------------------------------\n 2018-12-03 19:06:58  demo.MathGame  primeFactors  1      1        0     0.45        0.00%\n\n timestamp            class          method        total  success  fail  avg-rt(ms)  fail-rate\n-----------------------------------------------------------------------------------------------\n 2018-12-03 19:07:03  demo.MathGame  primeFactors  2      2        0     3182.72     0.00%\n```\n\n## 更多信息\n\n在“monitor”中，我们演示了了Arthas的monitor命令。如果有更多的技巧或者使用疑问，欢迎在Issue里提出。\n\n- Issues: https://github.com/alibaba/arthas/issues\n- 文档： https://arthas.aliyun.com/doc\n\n如果您在使用Arthas，请让我们知道。您的使用对我们非常重要：[查看](https://github.com/alibaba/arthas/issues/111)\n\n文章拷贝来源：https://start.aliyun.com/course?spm=a2ck6.17690074.0.0.28bc2e7dHTphXs&id=PaiFAkJM","source":"_posts/Java诊断工具Arthas高级命令教程/Arthasmonitor命令.md","raw":"---\ntitle: Arthas monitor命令\ndate: 2021-08-07 09:51:39\ntags: ['Java 诊断工具 Arthas 高级命令教程']\n---\n\n<!-- toc -->\n\n![Arthas](arthas.png)\n\n`Arthas` 是Alibaba开源的Java诊断工具，深受开发者喜爱。在线排查问题，无需重启；动态跟踪Java代码；实时监控JVM状态。\n\n`Arthas` 支持JDK 6+，支持Linux/Mac/Windows，采用命令行交互模式，同时提供丰富的 `Tab` 自动补全功能，进一步方便进行问题的定位和诊断。\n\n当你遇到以下类似问题而束手无策时，Arthas可以帮助你解决：\n\n- 这个类从哪个 jar 包加载的？为什么会报各种类相关的 Exception？\n- 我改的代码为什么没有执行到？难道是我没 commit？分支搞错了？\n- 遇到问题无法在线上 debug，难道只能通过加日志再重新发布吗？\n- 线上遇到某个用户的数据处理有问题，但线上同样无法 debug，线下无法重现！\n- 是否有一个全局视角来查看系统的运行状况？\n- 有什么办法可以监控到JVM的实时运行状态？\n- 怎么快速定位应用的热点，生成火焰图？\n\n本教程会以一个简单的应用为例，演示monitor命令。\n\n- Github: https://github.com/alibaba/arthas\n- 文档: https://arthas.aliyun.com/doc/\n\n## 启动arthas demo\n\n下载`arthas-demo.jar`，再用`java -jar`命令启动：\n\n```bash\nwget https://arthas.aliyun.com/arthas-demo.jar;java -jar arthas-demo.jar\n```\n\n`arthas-demo`是一个很简单的程序，它随机生成整数，再执行因式分解，把结果打印出来。如果生成的随机数是负数，则会打印提示信息。\n\n## 启动arthas-boot\n\n在新的`Terminal 2`里，下载`arthas-boot.jar`，再用`java -jar`命令启动：\n\n```bash\nwget https://arthas.aliyun.com/arthas-boot.jar;java -jar arthas-boot.jar\n```\n\n`arthas-boot`是`Arthas`的启动程序，它启动后，会列出所有的Java进程，用户可以选择需要诊断的目标进程。\n\n选择第一个进程，输入 `1` ，再`Enter/回车`：\n\n```bash\n1\n```\n\nAttach成功之后，会打印Arthas LOGO。输入 `help` 可以获取到更多的帮助信息。\n\n```bash\nhelp\n```\n\n![Arthas Boot](O1CN01HzatXZ1RgccrlT90M_!!6000000002141-2-tps-529-244.png)\n\n## monitor命令\n\n> 方法执行监控\n\n对匹配 `class-pattern`／`method-pattern`的类、方法的调用进行监控。\n\n`monitor` 命令是一个非实时返回命令.\n\n实时返回命令是输入之后立即返回，而非实时返回的命令，则是不断的等待目标 Java 进程返回信息，直到用户输入 `Ctrl+C` 为止。\n\n服务端是以任务的形式在后台跑任务，植入的代码随着任务的中止而不会被执行，所以任务关闭后，不会对原有性能产生太大影响，而且原则上，任何Arthas命令不会引起原有业务逻辑的改变。\n\n#### 监控的维度说明\n\n| 监控项    | 说明                       |\n| --------- | -------------------------- |\n| timestamp | 时间戳                     |\n| class     | Java类                     |\n| method    | 方法（构造方法、普通方法） |\n| total     | 调用次数                   |\n| success   | 成功次数                   |\n| fail      | 失败次数                   |\n| rt        | 平均RT                     |\n| fail-rate | 失败率                     |\n\n#### 参数说明\n\n方法拥有一个命名参数 `[c:]`，意思是统计周期（cycle of output），拥有一个整型的参数值\n\n| 参数名称         | 参数说明                             |\n| ---------------- | ------------------------------------ |\n| *class-pattern*  | 类名表达式匹配                       |\n| *method-pattern* | 方法名表达式匹配                     |\n| [E]              | 开启正则表达式匹配，默认为通配符匹配 |\n| `[c:]`           | 统计周期，默认值为120秒              |\n\n#### 使用参考\n\n```bash\nmonitor -c 5 demo.MathGame primeFactors\n```\n\n按`q`或者`Ctrl+c`退出\n\n```bash\nq\n```\n\n```console\n$ monitor -c 5 demo.MathGame primeFactors\nPress Ctrl+C to abort.\nAffect(class-cnt:1 , method-cnt:1) cost in 94 ms.\n timestamp            class          method        total  success  fail  avg-rt(ms)  fail-rate\n-----------------------------------------------------------------------------------------------\n 2018-12-03 19:06:38  demo.MathGame  primeFactors  5      1        4     1.15        80.00%\n\n timestamp            class          method        total  success  fail  avg-rt(ms)  fail-rate\n-----------------------------------------------------------------------------------------------\n 2018-12-03 19:06:43  demo.MathGame  primeFactors  5      3        2     42.29       40.00%\n\n timestamp            class          method        total  success  fail  avg-rt(ms)  fail-rate\n-----------------------------------------------------------------------------------------------\n 2018-12-03 19:06:48  demo.MathGame  primeFactors  5      3        2     67.92       40.00%\n\n timestamp            class          method        total  success  fail  avg-rt(ms)  fail-rate\n-----------------------------------------------------------------------------------------------\n 2018-12-03 19:06:53  demo.MathGame  primeFactors  5      2        3     0.25        60.00%\n\n timestamp            class          method        total  success  fail  avg-rt(ms)  fail-rate\n-----------------------------------------------------------------------------------------------\n 2018-12-03 19:06:58  demo.MathGame  primeFactors  1      1        0     0.45        0.00%\n\n timestamp            class          method        total  success  fail  avg-rt(ms)  fail-rate\n-----------------------------------------------------------------------------------------------\n 2018-12-03 19:07:03  demo.MathGame  primeFactors  2      2        0     3182.72     0.00%\n```\n\n## 更多信息\n\n在“monitor”中，我们演示了了Arthas的monitor命令。如果有更多的技巧或者使用疑问，欢迎在Issue里提出。\n\n- Issues: https://github.com/alibaba/arthas/issues\n- 文档： https://arthas.aliyun.com/doc\n\n如果您在使用Arthas，请让我们知道。您的使用对我们非常重要：[查看](https://github.com/alibaba/arthas/issues/111)\n\n文章拷贝来源：https://start.aliyun.com/course?spm=a2ck6.17690074.0.0.28bc2e7dHTphXs&id=PaiFAkJM","slug":"Java诊断工具Arthas高级命令教程/Arthasmonitor命令","published":1,"updated":"2021-08-07T05:34:55.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cks1cgr6n0029fw5ihjc7fjo0","content":"<!-- toc -->\n\n<ul>\n<li><a href=\"#%E5%90%AF%E5%8A%A8arthas-demo\">启动arthas demo</a></li>\n<li><a href=\"#%E5%90%AF%E5%8A%A8arthas-boot\">启动arthas-boot</a></li>\n<li><a href=\"#monitor%E5%91%BD%E4%BB%A4\">monitor命令</a><ul>\n<li><a href=\"#%E7%9B%91%E6%8E%A7%E7%9A%84%E7%BB%B4%E5%BA%A6%E8%AF%B4%E6%98%8E\">监控的维度说明</a></li>\n<li><a href=\"#%E5%8F%82%E6%95%B0%E8%AF%B4%E6%98%8E\">参数说明</a></li>\n<li><a href=\"#%E4%BD%BF%E7%94%A8%E5%8F%82%E8%80%83\">使用参考</a></li>\n</ul>\n</li>\n<li><a href=\"#%E6%9B%B4%E5%A4%9A%E4%BF%A1%E6%81%AF\">更多信息</a></li>\n</ul>\n<!-- tocstop -->\n\n<p><img src=\"/jlynet.github.io/2021/08/07/Java%E8%AF%8A%E6%96%AD%E5%B7%A5%E5%85%B7Arthas%E9%AB%98%E7%BA%A7%E5%91%BD%E4%BB%A4%E6%95%99%E7%A8%8B/Arthasmonitor%E5%91%BD%E4%BB%A4/arthas.png\" alt=\"Arthas\"></p>\n<p><code>Arthas</code> 是Alibaba开源的Java诊断工具，深受开发者喜爱。在线排查问题，无需重启；动态跟踪Java代码；实时监控JVM状态。</p>\n<p><code>Arthas</code> 支持JDK 6+，支持Linux/Mac/Windows，采用命令行交互模式，同时提供丰富的 <code>Tab</code> 自动补全功能，进一步方便进行问题的定位和诊断。</p>\n<p>当你遇到以下类似问题而束手无策时，Arthas可以帮助你解决：</p>\n<ul>\n<li>这个类从哪个 jar 包加载的？为什么会报各种类相关的 Exception？</li>\n<li>我改的代码为什么没有执行到？难道是我没 commit？分支搞错了？</li>\n<li>遇到问题无法在线上 debug，难道只能通过加日志再重新发布吗？</li>\n<li>线上遇到某个用户的数据处理有问题，但线上同样无法 debug，线下无法重现！</li>\n<li>是否有一个全局视角来查看系统的运行状况？</li>\n<li>有什么办法可以监控到JVM的实时运行状态？</li>\n<li>怎么快速定位应用的热点，生成火焰图？</li>\n</ul>\n<p>本教程会以一个简单的应用为例，演示monitor命令。</p>\n<ul>\n<li>Github: <a href=\"https://github.com/alibaba/arthas\">https://github.com/alibaba/arthas</a></li>\n<li>文档: <a href=\"https://arthas.aliyun.com/doc/\">https://arthas.aliyun.com/doc/</a></li>\n</ul>\n<h2><span id=\"启动arthas-demo\">启动arthas demo</span></h2><p>下载<code>arthas-demo.jar</code>，再用<code>java -jar</code>命令启动：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wget https://arthas.aliyun.com/arthas-demo.jar;java -jar arthas-demo.jar</span><br></pre></td></tr></table></figure>\n\n<p><code>arthas-demo</code>是一个很简单的程序，它随机生成整数，再执行因式分解，把结果打印出来。如果生成的随机数是负数，则会打印提示信息。</p>\n<h2><span id=\"启动arthas-boot\">启动arthas-boot</span></h2><p>在新的<code>Terminal 2</code>里，下载<code>arthas-boot.jar</code>，再用<code>java -jar</code>命令启动：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wget https://arthas.aliyun.com/arthas-boot.jar;java -jar arthas-boot.jar</span><br></pre></td></tr></table></figure>\n\n<p><code>arthas-boot</code>是<code>Arthas</code>的启动程序，它启动后，会列出所有的Java进程，用户可以选择需要诊断的目标进程。</p>\n<p>选择第一个进程，输入 <code>1</code> ，再<code>Enter/回车</code>：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1</span><br></pre></td></tr></table></figure>\n\n<p>Attach成功之后，会打印Arthas LOGO。输入 <code>help</code> 可以获取到更多的帮助信息。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">help</span></span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/jlynet.github.io/2021/08/07/Java%E8%AF%8A%E6%96%AD%E5%B7%A5%E5%85%B7Arthas%E9%AB%98%E7%BA%A7%E5%91%BD%E4%BB%A4%E6%95%99%E7%A8%8B/Arthasmonitor%E5%91%BD%E4%BB%A4/O1CN01HzatXZ1RgccrlT90M_!!6000000002141-2-tps-529-244.png\" alt=\"Arthas Boot\"></p>\n<h2><span id=\"monitor命令\">monitor命令</span></h2><blockquote>\n<p>方法执行监控</p>\n</blockquote>\n<p>对匹配 <code>class-pattern</code>／<code>method-pattern</code>的类、方法的调用进行监控。</p>\n<p><code>monitor</code> 命令是一个非实时返回命令.</p>\n<p>实时返回命令是输入之后立即返回，而非实时返回的命令，则是不断的等待目标 Java 进程返回信息，直到用户输入 <code>Ctrl+C</code> 为止。</p>\n<p>服务端是以任务的形式在后台跑任务，植入的代码随着任务的中止而不会被执行，所以任务关闭后，不会对原有性能产生太大影响，而且原则上，任何Arthas命令不会引起原有业务逻辑的改变。</p>\n<h4><span id=\"监控的维度说明\">监控的维度说明</span></h4><table>\n<thead>\n<tr>\n<th>监控项</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>timestamp</td>\n<td>时间戳</td>\n</tr>\n<tr>\n<td>class</td>\n<td>Java类</td>\n</tr>\n<tr>\n<td>method</td>\n<td>方法（构造方法、普通方法）</td>\n</tr>\n<tr>\n<td>total</td>\n<td>调用次数</td>\n</tr>\n<tr>\n<td>success</td>\n<td>成功次数</td>\n</tr>\n<tr>\n<td>fail</td>\n<td>失败次数</td>\n</tr>\n<tr>\n<td>rt</td>\n<td>平均RT</td>\n</tr>\n<tr>\n<td>fail-rate</td>\n<td>失败率</td>\n</tr>\n</tbody></table>\n<h4><span id=\"参数说明\">参数说明</span></h4><p>方法拥有一个命名参数 <code>[c:]</code>，意思是统计周期（cycle of output），拥有一个整型的参数值</p>\n<table>\n<thead>\n<tr>\n<th>参数名称</th>\n<th>参数说明</th>\n</tr>\n</thead>\n<tbody><tr>\n<td><em>class-pattern</em></td>\n<td>类名表达式匹配</td>\n</tr>\n<tr>\n<td><em>method-pattern</em></td>\n<td>方法名表达式匹配</td>\n</tr>\n<tr>\n<td>[E]</td>\n<td>开启正则表达式匹配，默认为通配符匹配</td>\n</tr>\n<tr>\n<td><code>[c:]</code></td>\n<td>统计周期，默认值为120秒</td>\n</tr>\n</tbody></table>\n<h4><span id=\"使用参考\">使用参考</span></h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">monitor -c 5 demo.MathGame primeFactors</span><br></pre></td></tr></table></figure>\n\n<p>按<code>q</code>或者<code>Ctrl+c</code>退出</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">q</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight console\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> monitor -c 5 demo.MathGame primeFactors</span></span><br><span class=\"line\">Press Ctrl+C to abort.</span><br><span class=\"line\">Affect(class-cnt:1 , method-cnt:1) cost in 94 ms.</span><br><span class=\"line\"> timestamp            class          method        total  success  fail  avg-rt(ms)  fail-rate</span><br><span class=\"line\">-----------------------------------------------------------------------------------------------</span><br><span class=\"line\"> 2018-12-03 19:06:38  demo.MathGame  primeFactors  5      1        4     1.15        80.00%</span><br><span class=\"line\"></span><br><span class=\"line\"> timestamp            class          method        total  success  fail  avg-rt(ms)  fail-rate</span><br><span class=\"line\">-----------------------------------------------------------------------------------------------</span><br><span class=\"line\"> 2018-12-03 19:06:43  demo.MathGame  primeFactors  5      3        2     42.29       40.00%</span><br><span class=\"line\"></span><br><span class=\"line\"> timestamp            class          method        total  success  fail  avg-rt(ms)  fail-rate</span><br><span class=\"line\">-----------------------------------------------------------------------------------------------</span><br><span class=\"line\"> 2018-12-03 19:06:48  demo.MathGame  primeFactors  5      3        2     67.92       40.00%</span><br><span class=\"line\"></span><br><span class=\"line\"> timestamp            class          method        total  success  fail  avg-rt(ms)  fail-rate</span><br><span class=\"line\">-----------------------------------------------------------------------------------------------</span><br><span class=\"line\"> 2018-12-03 19:06:53  demo.MathGame  primeFactors  5      2        3     0.25        60.00%</span><br><span class=\"line\"></span><br><span class=\"line\"> timestamp            class          method        total  success  fail  avg-rt(ms)  fail-rate</span><br><span class=\"line\">-----------------------------------------------------------------------------------------------</span><br><span class=\"line\"> 2018-12-03 19:06:58  demo.MathGame  primeFactors  1      1        0     0.45        0.00%</span><br><span class=\"line\"></span><br><span class=\"line\"> timestamp            class          method        total  success  fail  avg-rt(ms)  fail-rate</span><br><span class=\"line\">-----------------------------------------------------------------------------------------------</span><br><span class=\"line\"> 2018-12-03 19:07:03  demo.MathGame  primeFactors  2      2        0     3182.72     0.00%</span><br></pre></td></tr></table></figure>\n\n<h2><span id=\"更多信息\">更多信息</span></h2><p>在“monitor”中，我们演示了了Arthas的monitor命令。如果有更多的技巧或者使用疑问，欢迎在Issue里提出。</p>\n<ul>\n<li>Issues: <a href=\"https://github.com/alibaba/arthas/issues\">https://github.com/alibaba/arthas/issues</a></li>\n<li>文档： <a href=\"https://arthas.aliyun.com/doc\">https://arthas.aliyun.com/doc</a></li>\n</ul>\n<p>如果您在使用Arthas，请让我们知道。您的使用对我们非常重要：<a href=\"https://github.com/alibaba/arthas/issues/111\">查看</a></p>\n<p>文章拷贝来源：<a href=\"https://start.aliyun.com/course?spm=a2ck6.17690074.0.0.28bc2e7dHTphXs&amp;id=PaiFAkJM\">https://start.aliyun.com/course?spm=a2ck6.17690074.0.0.28bc2e7dHTphXs&amp;id=PaiFAkJM</a></p>\n","site":{"data":{}},"excerpt":"","more":"<!-- toc -->\n\n<ul>\n<li><a href=\"#%E5%90%AF%E5%8A%A8arthas-demo\">启动arthas demo</a></li>\n<li><a href=\"#%E5%90%AF%E5%8A%A8arthas-boot\">启动arthas-boot</a></li>\n<li><a href=\"#monitor%E5%91%BD%E4%BB%A4\">monitor命令</a><ul>\n<li><a href=\"#%E7%9B%91%E6%8E%A7%E7%9A%84%E7%BB%B4%E5%BA%A6%E8%AF%B4%E6%98%8E\">监控的维度说明</a></li>\n<li><a href=\"#%E5%8F%82%E6%95%B0%E8%AF%B4%E6%98%8E\">参数说明</a></li>\n<li><a href=\"#%E4%BD%BF%E7%94%A8%E5%8F%82%E8%80%83\">使用参考</a></li>\n</ul>\n</li>\n<li><a href=\"#%E6%9B%B4%E5%A4%9A%E4%BF%A1%E6%81%AF\">更多信息</a></li>\n</ul>\n<!-- tocstop -->\n\n<p><img src=\"/jlynet.github.io/2021/08/07/Java%E8%AF%8A%E6%96%AD%E5%B7%A5%E5%85%B7Arthas%E9%AB%98%E7%BA%A7%E5%91%BD%E4%BB%A4%E6%95%99%E7%A8%8B/Arthasmonitor%E5%91%BD%E4%BB%A4/arthas.png\" alt=\"Arthas\"></p>\n<p><code>Arthas</code> 是Alibaba开源的Java诊断工具，深受开发者喜爱。在线排查问题，无需重启；动态跟踪Java代码；实时监控JVM状态。</p>\n<p><code>Arthas</code> 支持JDK 6+，支持Linux/Mac/Windows，采用命令行交互模式，同时提供丰富的 <code>Tab</code> 自动补全功能，进一步方便进行问题的定位和诊断。</p>\n<p>当你遇到以下类似问题而束手无策时，Arthas可以帮助你解决：</p>\n<ul>\n<li>这个类从哪个 jar 包加载的？为什么会报各种类相关的 Exception？</li>\n<li>我改的代码为什么没有执行到？难道是我没 commit？分支搞错了？</li>\n<li>遇到问题无法在线上 debug，难道只能通过加日志再重新发布吗？</li>\n<li>线上遇到某个用户的数据处理有问题，但线上同样无法 debug，线下无法重现！</li>\n<li>是否有一个全局视角来查看系统的运行状况？</li>\n<li>有什么办法可以监控到JVM的实时运行状态？</li>\n<li>怎么快速定位应用的热点，生成火焰图？</li>\n</ul>\n<p>本教程会以一个简单的应用为例，演示monitor命令。</p>\n<ul>\n<li>Github: <a href=\"https://github.com/alibaba/arthas\">https://github.com/alibaba/arthas</a></li>\n<li>文档: <a href=\"https://arthas.aliyun.com/doc/\">https://arthas.aliyun.com/doc/</a></li>\n</ul>\n<h2 id=\"启动arthas-demo\"><a href=\"#启动arthas-demo\" class=\"headerlink\" title=\"启动arthas demo\"></a>启动arthas demo</h2><p>下载<code>arthas-demo.jar</code>，再用<code>java -jar</code>命令启动：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wget https://arthas.aliyun.com/arthas-demo.jar;java -jar arthas-demo.jar</span><br></pre></td></tr></table></figure>\n\n<p><code>arthas-demo</code>是一个很简单的程序，它随机生成整数，再执行因式分解，把结果打印出来。如果生成的随机数是负数，则会打印提示信息。</p>\n<h2 id=\"启动arthas-boot\"><a href=\"#启动arthas-boot\" class=\"headerlink\" title=\"启动arthas-boot\"></a>启动arthas-boot</h2><p>在新的<code>Terminal 2</code>里，下载<code>arthas-boot.jar</code>，再用<code>java -jar</code>命令启动：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wget https://arthas.aliyun.com/arthas-boot.jar;java -jar arthas-boot.jar</span><br></pre></td></tr></table></figure>\n\n<p><code>arthas-boot</code>是<code>Arthas</code>的启动程序，它启动后，会列出所有的Java进程，用户可以选择需要诊断的目标进程。</p>\n<p>选择第一个进程，输入 <code>1</code> ，再<code>Enter/回车</code>：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1</span><br></pre></td></tr></table></figure>\n\n<p>Attach成功之后，会打印Arthas LOGO。输入 <code>help</code> 可以获取到更多的帮助信息。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">help</span></span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/jlynet.github.io/2021/08/07/Java%E8%AF%8A%E6%96%AD%E5%B7%A5%E5%85%B7Arthas%E9%AB%98%E7%BA%A7%E5%91%BD%E4%BB%A4%E6%95%99%E7%A8%8B/Arthasmonitor%E5%91%BD%E4%BB%A4/O1CN01HzatXZ1RgccrlT90M_!!6000000002141-2-tps-529-244.png\" alt=\"Arthas Boot\"></p>\n<h2 id=\"monitor命令\"><a href=\"#monitor命令\" class=\"headerlink\" title=\"monitor命令\"></a>monitor命令</h2><blockquote>\n<p>方法执行监控</p>\n</blockquote>\n<p>对匹配 <code>class-pattern</code>／<code>method-pattern</code>的类、方法的调用进行监控。</p>\n<p><code>monitor</code> 命令是一个非实时返回命令.</p>\n<p>实时返回命令是输入之后立即返回，而非实时返回的命令，则是不断的等待目标 Java 进程返回信息，直到用户输入 <code>Ctrl+C</code> 为止。</p>\n<p>服务端是以任务的形式在后台跑任务，植入的代码随着任务的中止而不会被执行，所以任务关闭后，不会对原有性能产生太大影响，而且原则上，任何Arthas命令不会引起原有业务逻辑的改变。</p>\n<h4 id=\"监控的维度说明\"><a href=\"#监控的维度说明\" class=\"headerlink\" title=\"监控的维度说明\"></a>监控的维度说明</h4><table>\n<thead>\n<tr>\n<th>监控项</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>timestamp</td>\n<td>时间戳</td>\n</tr>\n<tr>\n<td>class</td>\n<td>Java类</td>\n</tr>\n<tr>\n<td>method</td>\n<td>方法（构造方法、普通方法）</td>\n</tr>\n<tr>\n<td>total</td>\n<td>调用次数</td>\n</tr>\n<tr>\n<td>success</td>\n<td>成功次数</td>\n</tr>\n<tr>\n<td>fail</td>\n<td>失败次数</td>\n</tr>\n<tr>\n<td>rt</td>\n<td>平均RT</td>\n</tr>\n<tr>\n<td>fail-rate</td>\n<td>失败率</td>\n</tr>\n</tbody></table>\n<h4 id=\"参数说明\"><a href=\"#参数说明\" class=\"headerlink\" title=\"参数说明\"></a>参数说明</h4><p>方法拥有一个命名参数 <code>[c:]</code>，意思是统计周期（cycle of output），拥有一个整型的参数值</p>\n<table>\n<thead>\n<tr>\n<th>参数名称</th>\n<th>参数说明</th>\n</tr>\n</thead>\n<tbody><tr>\n<td><em>class-pattern</em></td>\n<td>类名表达式匹配</td>\n</tr>\n<tr>\n<td><em>method-pattern</em></td>\n<td>方法名表达式匹配</td>\n</tr>\n<tr>\n<td>[E]</td>\n<td>开启正则表达式匹配，默认为通配符匹配</td>\n</tr>\n<tr>\n<td><code>[c:]</code></td>\n<td>统计周期，默认值为120秒</td>\n</tr>\n</tbody></table>\n<h4 id=\"使用参考\"><a href=\"#使用参考\" class=\"headerlink\" title=\"使用参考\"></a>使用参考</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">monitor -c 5 demo.MathGame primeFactors</span><br></pre></td></tr></table></figure>\n\n<p>按<code>q</code>或者<code>Ctrl+c</code>退出</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">q</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight console\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> monitor -c 5 demo.MathGame primeFactors</span></span><br><span class=\"line\">Press Ctrl+C to abort.</span><br><span class=\"line\">Affect(class-cnt:1 , method-cnt:1) cost in 94 ms.</span><br><span class=\"line\"> timestamp            class          method        total  success  fail  avg-rt(ms)  fail-rate</span><br><span class=\"line\">-----------------------------------------------------------------------------------------------</span><br><span class=\"line\"> 2018-12-03 19:06:38  demo.MathGame  primeFactors  5      1        4     1.15        80.00%</span><br><span class=\"line\"></span><br><span class=\"line\"> timestamp            class          method        total  success  fail  avg-rt(ms)  fail-rate</span><br><span class=\"line\">-----------------------------------------------------------------------------------------------</span><br><span class=\"line\"> 2018-12-03 19:06:43  demo.MathGame  primeFactors  5      3        2     42.29       40.00%</span><br><span class=\"line\"></span><br><span class=\"line\"> timestamp            class          method        total  success  fail  avg-rt(ms)  fail-rate</span><br><span class=\"line\">-----------------------------------------------------------------------------------------------</span><br><span class=\"line\"> 2018-12-03 19:06:48  demo.MathGame  primeFactors  5      3        2     67.92       40.00%</span><br><span class=\"line\"></span><br><span class=\"line\"> timestamp            class          method        total  success  fail  avg-rt(ms)  fail-rate</span><br><span class=\"line\">-----------------------------------------------------------------------------------------------</span><br><span class=\"line\"> 2018-12-03 19:06:53  demo.MathGame  primeFactors  5      2        3     0.25        60.00%</span><br><span class=\"line\"></span><br><span class=\"line\"> timestamp            class          method        total  success  fail  avg-rt(ms)  fail-rate</span><br><span class=\"line\">-----------------------------------------------------------------------------------------------</span><br><span class=\"line\"> 2018-12-03 19:06:58  demo.MathGame  primeFactors  1      1        0     0.45        0.00%</span><br><span class=\"line\"></span><br><span class=\"line\"> timestamp            class          method        total  success  fail  avg-rt(ms)  fail-rate</span><br><span class=\"line\">-----------------------------------------------------------------------------------------------</span><br><span class=\"line\"> 2018-12-03 19:07:03  demo.MathGame  primeFactors  2      2        0     3182.72     0.00%</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"更多信息\"><a href=\"#更多信息\" class=\"headerlink\" title=\"更多信息\"></a>更多信息</h2><p>在“monitor”中，我们演示了了Arthas的monitor命令。如果有更多的技巧或者使用疑问，欢迎在Issue里提出。</p>\n<ul>\n<li>Issues: <a href=\"https://github.com/alibaba/arthas/issues\">https://github.com/alibaba/arthas/issues</a></li>\n<li>文档： <a href=\"https://arthas.aliyun.com/doc\">https://arthas.aliyun.com/doc</a></li>\n</ul>\n<p>如果您在使用Arthas，请让我们知道。您的使用对我们非常重要：<a href=\"https://github.com/alibaba/arthas/issues/111\">查看</a></p>\n<p>文章拷贝来源：<a href=\"https://start.aliyun.com/course?spm=a2ck6.17690074.0.0.28bc2e7dHTphXs&amp;id=PaiFAkJM\">https://start.aliyun.com/course?spm=a2ck6.17690074.0.0.28bc2e7dHTphXs&amp;id=PaiFAkJM</a></p>\n"},{"title":"Arthas ognl","date":"2021-08-07T01:51:30.000Z","_content":"\n<!-- toc -->\n\n![Arthas](arthas.png)\n\n`Arthas` 是Alibaba开源的Java诊断工具，深受开发者喜爱。在线排查问题，无需重启；动态跟踪Java代码；实时监控JVM状态。\n\n`Arthas` 支持JDK 6+，支持Linux/Mac/Windows，采用命令行交互模式，同时提供丰富的 `Tab` 自动补全功能，进一步方便进行问题的定位和诊断。\n\n当你遇到以下类似问题而束手无策时，Arthas可以帮助你解决：\n\n- 这个类从哪个 jar 包加载的？为什么会报各种类相关的 Exception？\n- 我改的代码为什么没有执行到？难道是我没 commit？分支搞错了？\n- 遇到问题无法在线上 debug，难道只能通过加日志再重新发布吗？\n- 线上遇到某个用户的数据处理有问题，但线上同样无法 debug，线下无法重现！\n- 是否有一个全局视角来查看系统的运行状况？\n- 有什么办法可以监控到JVM的实时运行状态？\n- 怎么快速定位应用的热点，生成火焰图？\n\n本教程会以一个普通的Spring Boot应用为例，演示ognl命令。\n\n- Github: https://github.com/alibaba/arthas\n- 文档: https://arthas.aliyun.com/doc/\n\n## 启动demo\n\n下载`demo-arthas-spring-boot.jar`，再用`java -jar`命令启动：\n\n```bash\nwget https://code.aliyun.com/middleware-container/handsonLabExternedFiles/raw/master/demo-arthas-spring-boot.jar;java -jar demo-arthas-spring-boot.jar\n```\n\n`demo-arthas-spring-boot`是一个很简单的spring boot应用，源代码：[查看](https://github.com/hengyunabc/spring-boot-inside/tree/master/demo-arthas-spring-boot)\n\n启动之后，可以访问61000端口： 点击查看\n\n![Demo Web](O1CN010Qbzcz1ctPSWSZI6L_!!6000000003658-2-tps-333-182.png)\n\n## 启动arthas-boot，help命令\n\n在新的`Terminal 2`里，下载`arthas-boot.jar`，再用`java -jar`命令启动：\n\n```bash\nwget https://arthas.aliyun.com/arthas-boot.jar;java -jar arthas-boot.jar\n```\n\n`arthas-boot`是`Arthas`的启动程序，它启动后，会列出所有的Java进程，用户可以选择需要诊断的目标进程。\n\n选择第一个进程，输入 `1` ，再`Enter/回车`：\n\n```bash\n1\n```\n\nAttach成功之后，会打印Arthas LOGO。输入 `help` 可以获取到更多的帮助信息。\n\n```bash\nhelp\n```\n\n![Arthas Boot](O1CN01HzatXZ1RgccrlT90M_!!6000000002141-2-tps-529-244.png)\n\n## Ognl详解\n\n在Arthas里，有一个单独的`ognl`命令，可以动态执行代码。 查看用法：`ognl --help`\n\n```bash\nognl --help\n```\n\n#### 调用static函数\n\n```bash\nognl '@java.lang.System@out.println(\"hello ognl\")'\n```\n\n可以检查`Terminal 1`里的进程输出，可以发现打印出了`hello ognl`。\n\n#### 查找UserController的ClassLoader\n\n```bash\nsc -d com.example.demo.arthas.user.UserController | grep classLoaderHash\n```\n\n```console\n$ sc -d com.example.demo.arthas.user.UserController | grep classLoaderHash\n classLoaderHash   1be6f5c3\n```\n\n注意hashcode是变化的，需要先查看当前的ClassLoader信息，提取对应ClassLoader的hashcode。\n\n如果你使用`-c`，你需要手动输入hashcode：`-c <hashcode>`\n\n```console\n$ ognl -c 1be6f5c3 @com.example.demo.arthas.user.UserController@logger\n```\n\n对于只有唯一实例的ClassLoader可以通过`--classLoaderClass`指定class name，使用起来更加方便：\n\n```console\n$ ognl --classLoaderClass org.springframework.boot.loader.LaunchedURLClassLoader  @org.springframework.boot.SpringApplication@logger\n@Slf4jLocationAwareLog[\n    FQCN=@String[org.apache.commons.logging.LogAdapter$Slf4jLocationAwareLog],\n    name=@String[org.springframework.boot.SpringApplication],\n    logger=@Logger[Logger[org.springframework.boot.SpringApplication]],\n]\n```\n\n`--classLoaderClass` 的值是ClassLoader的类名，只有匹配到唯一的ClassLoader实例时才能工作，目的是方便输入通用命令，而`-c <hashcode>`是动态变化的。\n\n#### 获取静态类的静态字段\n\n获取`UserController`类里的`logger`字段：\n\n```bash\nognl --classLoaderClass org.springframework.boot.loader.LaunchedURLClassLoader @com.example.demo.arthas.user.UserController@logger\n```\n\n还可以通过`-x`参数控制返回值的展开层数。比如：\n\n```bash\nognl --classLoaderClass org.springframework.boot.loader.LaunchedURLClassLoader -x 2 @com.example.demo.arthas.user.UserController@logger\n```\n\n#### 执行多行表达式，赋值给临时变量，返回一个List\n\n```bash\nognl '#value1=@System@getProperty(\"java.home\"), #value2=@System@getProperty(\"java.runtime.name\"), {#value1, #value2}'\n```\n\n```console\n$ ognl '#value1=@System@getProperty(\"java.home\"), #value2=@System@getProperty(\"java.runtime.name\"), {#value1, #value2}'\n@ArrayList[\n    @String[/Library/Java/JavaVirtualMachines/jdk1.8.0_162.jdk/Contents/Home/jre],\n    @String[Java(TM) SE Runtime Environment],\n]\n```\n\n#### 更多\n\n在Arthas里`ognl`表达式是很重要的功能，在很多命令里都可以使用`ognl`表达式。\n\n一些更复杂的用法，可以参考：\n\n- OGNL特殊用法请参考：https://github.com/alibaba/arthas/issues/71\n- OGNL表达式官方指南：https://commons.apache.org/proper/commons-ognl/language-guide.html\n\n## 案例: 动态更新应用Logger Level\n\n在这个案例里，动态修改应用的Logger Level。\n\n#### 查找UserController的ClassLoader\n\n```bash\nsc -d com.example.demo.arthas.user.UserController | grep classLoaderHash\n```\n\n```console\n$ sc -d com.example.demo.arthas.user.UserController | grep classLoaderHash\n classLoaderHash   1be6f5c3\n```\n\n#### 用ognl获取logger\n\n```bash\nognl --classLoaderClass org.springframework.boot.loader.LaunchedURLClassLoader '@com.example.demo.arthas.user.UserController@logger'\n```\n\n```console\n$ ognl --classLoaderClass org.springframework.boot.loader.LaunchedURLClassLoader '@com.example.demo.arthas.user.UserController@logger'\n@Logger[\n    serialVersionUID=@Long[5454405123156820674],\n    FQCN=@String[ch.qos.logback.classic.Logger],\n    name=@String[com.example.demo.arthas.user.UserController],\n    level=null,\n    effectiveLevelInt=@Integer[20000],\n    parent=@Logger[Logger[com.example.demo.arthas.user]],\n    childrenList=null,\n    aai=null,\n    additive=@Boolean[true],\n    loggerContext=@LoggerContext[ch.qos.logback.classic.LoggerContext[default]],\n]\n```\n\n可以知道`UserController@logger`实际使用的是logback。可以看到`level=null`，则说明实际最终的level是从`root` logger里来的。\n\n#### 单独设置UserController的logger level\n\n```bash\nognl --classLoaderClass org.springframework.boot.loader.LaunchedURLClassLoader '@com.example.demo.arthas.user.UserController@logger.setLevel(@ch.qos.logback.classic.Level@DEBUG)'\n```\n\n再次获取`UserController@logger`，可以发现已经是`DEBUG`了：\n\n```bash\nognl --classLoaderClass org.springframework.boot.loader.LaunchedURLClassLoader '@com.example.demo.arthas.user.UserController@logger'\n```\n\n```console\n$ ognl --classLoaderClass org.springframework.boot.loader.LaunchedURLClassLoader '@com.example.demo.arthas.user.UserController@logger'\n@Logger[\n    serialVersionUID=@Long[5454405123156820674],\n    FQCN=@String[ch.qos.logback.classic.Logger],\n    name=@String[com.example.demo.arthas.user.UserController],\n    level=@Level[DEBUG],\n    effectiveLevelInt=@Integer[10000],\n    parent=@Logger[Logger[com.example.demo.arthas.user]],\n    childrenList=null,\n    aai=null,\n    additive=@Boolean[true],\n    loggerContext=@LoggerContext[ch.qos.logback.classic.LoggerContext[default]],\n]\n```\n\n#### 修改logback的全局logger level\n\n通过获取`root` logger，可以修改全局的logger level：\n\n```bash\nognl --classLoaderClass org.springframework.boot.loader.LaunchedURLClassLoader '@org.slf4j.LoggerFactory@getLogger(\"root\").setLevel(@ch.qos.logback.classic.Level@DEBUG)'\n```\n\n## 案例: 排查logger冲突问题\n\n在这个案例里，展示排查logger冲突的方法。\n\n#### 确认应用使用的logger系统\n\n以`UserController`为例，它使用的是slf4j api，但实际使用到的logger系统是logback。\n\n```bash\nognl --classLoaderClass org.springframework.boot.loader.LaunchedURLClassLoader '@com.example.demo.arthas.user.UserController@logger'\n```\n\n```console\n$ ognl --classLoaderClass org.springframework.boot.loader.LaunchedURLClassLoader '@com.example.demo.arthas.user.UserController@logger'\n@Logger[\n    serialVersionUID=@Long[5454405123156820674],\n    FQCN=@String[ch.qos.logback.classic.Logger],\n    name=@String[com.example.demo.arthas.user.UserController],\n    level=null,\n    effectiveLevelInt=@Integer[20000],\n    parent=@Logger[Logger[com.example.demo.arthas.user]],\n    childrenList=null,\n    aai=null,\n    additive=@Boolean[true],\n    loggerContext=@LoggerContext[ch.qos.logback.classic.LoggerContext[default]],\n]\n```\n\n#### 获取logback实际加载的配置文件\n\n```bash\nognl --classLoaderClass org.springframework.boot.loader.LaunchedURLClassLoader '#map1=@org.slf4j.LoggerFactory@getLogger(\"root\").loggerContext.objectMap, #map1.get(\"CONFIGURATION_WATCH_LIST\")'\n```\n\n#### 使用classloader命令查找可能存在的logger配置文件\n\n```bash\nclassloader --classLoaderClass org.springframework.boot.loader.LaunchedURLClassLoader -r logback-spring.xml\n```\n\n```\n$ classloader --classLoaderClass org.springframework.boot.loader.LaunchedURLClassLoader -r logback-spring.xml\n jar:file:/Users/hengyunabc/code/java/spring-boot-inside/demo-arthas-spring-boot/target/demo-arthas-spring-boot-0.0.1-SNAPSHOT.jar!/BOOT-INF/classes!/logback-spring.xml\n\nAffect(row-cnt:1) cost in 13 ms.\n```\n\n可以知道加载的配置的具体来源。\n\n可以尝试加载容易冲突的文件：\n\n```bash\nclassloader --classLoaderClass org.springframework.boot.loader.LaunchedURLClassLoader -r logback.xml\n```\n\n```bash\nclassloader --classLoaderClass org.springframework.boot.loader.LaunchedURLClassLoader -r log4j.properties\n```\n\n## 更多信息\n\n在“ognl”中，我们演示了了Arthas的ognl命令。如果有更多的技巧或者使用疑问，欢迎在Issue里提出。\n\n- Issues: https://github.com/alibaba/arthas/issues\n- 文档： https://arthas.aliyun.com/doc\n\n如果您在使用Arthas，请让我们知道。您的使用对我们非常重要：[查看](https://github.com/alibaba/arthas/issues/111)\n\n文章拷贝来源：https://start.aliyun.com/course?spm=a2ck6.17690074.0.0.28bc2e7dHTphXs&id=PaiFAkJM","source":"_posts/Java诊断工具Arthas高级命令教程/Arthasognl命令.md","raw":"---\ntitle: Arthas ognl\ndate: 2021-08-07 09:51:30\ntags: ['Java 诊断工具 Arthas 高级命令教程']\n---\n\n<!-- toc -->\n\n![Arthas](arthas.png)\n\n`Arthas` 是Alibaba开源的Java诊断工具，深受开发者喜爱。在线排查问题，无需重启；动态跟踪Java代码；实时监控JVM状态。\n\n`Arthas` 支持JDK 6+，支持Linux/Mac/Windows，采用命令行交互模式，同时提供丰富的 `Tab` 自动补全功能，进一步方便进行问题的定位和诊断。\n\n当你遇到以下类似问题而束手无策时，Arthas可以帮助你解决：\n\n- 这个类从哪个 jar 包加载的？为什么会报各种类相关的 Exception？\n- 我改的代码为什么没有执行到？难道是我没 commit？分支搞错了？\n- 遇到问题无法在线上 debug，难道只能通过加日志再重新发布吗？\n- 线上遇到某个用户的数据处理有问题，但线上同样无法 debug，线下无法重现！\n- 是否有一个全局视角来查看系统的运行状况？\n- 有什么办法可以监控到JVM的实时运行状态？\n- 怎么快速定位应用的热点，生成火焰图？\n\n本教程会以一个普通的Spring Boot应用为例，演示ognl命令。\n\n- Github: https://github.com/alibaba/arthas\n- 文档: https://arthas.aliyun.com/doc/\n\n## 启动demo\n\n下载`demo-arthas-spring-boot.jar`，再用`java -jar`命令启动：\n\n```bash\nwget https://code.aliyun.com/middleware-container/handsonLabExternedFiles/raw/master/demo-arthas-spring-boot.jar;java -jar demo-arthas-spring-boot.jar\n```\n\n`demo-arthas-spring-boot`是一个很简单的spring boot应用，源代码：[查看](https://github.com/hengyunabc/spring-boot-inside/tree/master/demo-arthas-spring-boot)\n\n启动之后，可以访问61000端口： 点击查看\n\n![Demo Web](O1CN010Qbzcz1ctPSWSZI6L_!!6000000003658-2-tps-333-182.png)\n\n## 启动arthas-boot，help命令\n\n在新的`Terminal 2`里，下载`arthas-boot.jar`，再用`java -jar`命令启动：\n\n```bash\nwget https://arthas.aliyun.com/arthas-boot.jar;java -jar arthas-boot.jar\n```\n\n`arthas-boot`是`Arthas`的启动程序，它启动后，会列出所有的Java进程，用户可以选择需要诊断的目标进程。\n\n选择第一个进程，输入 `1` ，再`Enter/回车`：\n\n```bash\n1\n```\n\nAttach成功之后，会打印Arthas LOGO。输入 `help` 可以获取到更多的帮助信息。\n\n```bash\nhelp\n```\n\n![Arthas Boot](O1CN01HzatXZ1RgccrlT90M_!!6000000002141-2-tps-529-244.png)\n\n## Ognl详解\n\n在Arthas里，有一个单独的`ognl`命令，可以动态执行代码。 查看用法：`ognl --help`\n\n```bash\nognl --help\n```\n\n#### 调用static函数\n\n```bash\nognl '@java.lang.System@out.println(\"hello ognl\")'\n```\n\n可以检查`Terminal 1`里的进程输出，可以发现打印出了`hello ognl`。\n\n#### 查找UserController的ClassLoader\n\n```bash\nsc -d com.example.demo.arthas.user.UserController | grep classLoaderHash\n```\n\n```console\n$ sc -d com.example.demo.arthas.user.UserController | grep classLoaderHash\n classLoaderHash   1be6f5c3\n```\n\n注意hashcode是变化的，需要先查看当前的ClassLoader信息，提取对应ClassLoader的hashcode。\n\n如果你使用`-c`，你需要手动输入hashcode：`-c <hashcode>`\n\n```console\n$ ognl -c 1be6f5c3 @com.example.demo.arthas.user.UserController@logger\n```\n\n对于只有唯一实例的ClassLoader可以通过`--classLoaderClass`指定class name，使用起来更加方便：\n\n```console\n$ ognl --classLoaderClass org.springframework.boot.loader.LaunchedURLClassLoader  @org.springframework.boot.SpringApplication@logger\n@Slf4jLocationAwareLog[\n    FQCN=@String[org.apache.commons.logging.LogAdapter$Slf4jLocationAwareLog],\n    name=@String[org.springframework.boot.SpringApplication],\n    logger=@Logger[Logger[org.springframework.boot.SpringApplication]],\n]\n```\n\n`--classLoaderClass` 的值是ClassLoader的类名，只有匹配到唯一的ClassLoader实例时才能工作，目的是方便输入通用命令，而`-c <hashcode>`是动态变化的。\n\n#### 获取静态类的静态字段\n\n获取`UserController`类里的`logger`字段：\n\n```bash\nognl --classLoaderClass org.springframework.boot.loader.LaunchedURLClassLoader @com.example.demo.arthas.user.UserController@logger\n```\n\n还可以通过`-x`参数控制返回值的展开层数。比如：\n\n```bash\nognl --classLoaderClass org.springframework.boot.loader.LaunchedURLClassLoader -x 2 @com.example.demo.arthas.user.UserController@logger\n```\n\n#### 执行多行表达式，赋值给临时变量，返回一个List\n\n```bash\nognl '#value1=@System@getProperty(\"java.home\"), #value2=@System@getProperty(\"java.runtime.name\"), {#value1, #value2}'\n```\n\n```console\n$ ognl '#value1=@System@getProperty(\"java.home\"), #value2=@System@getProperty(\"java.runtime.name\"), {#value1, #value2}'\n@ArrayList[\n    @String[/Library/Java/JavaVirtualMachines/jdk1.8.0_162.jdk/Contents/Home/jre],\n    @String[Java(TM) SE Runtime Environment],\n]\n```\n\n#### 更多\n\n在Arthas里`ognl`表达式是很重要的功能，在很多命令里都可以使用`ognl`表达式。\n\n一些更复杂的用法，可以参考：\n\n- OGNL特殊用法请参考：https://github.com/alibaba/arthas/issues/71\n- OGNL表达式官方指南：https://commons.apache.org/proper/commons-ognl/language-guide.html\n\n## 案例: 动态更新应用Logger Level\n\n在这个案例里，动态修改应用的Logger Level。\n\n#### 查找UserController的ClassLoader\n\n```bash\nsc -d com.example.demo.arthas.user.UserController | grep classLoaderHash\n```\n\n```console\n$ sc -d com.example.demo.arthas.user.UserController | grep classLoaderHash\n classLoaderHash   1be6f5c3\n```\n\n#### 用ognl获取logger\n\n```bash\nognl --classLoaderClass org.springframework.boot.loader.LaunchedURLClassLoader '@com.example.demo.arthas.user.UserController@logger'\n```\n\n```console\n$ ognl --classLoaderClass org.springframework.boot.loader.LaunchedURLClassLoader '@com.example.demo.arthas.user.UserController@logger'\n@Logger[\n    serialVersionUID=@Long[5454405123156820674],\n    FQCN=@String[ch.qos.logback.classic.Logger],\n    name=@String[com.example.demo.arthas.user.UserController],\n    level=null,\n    effectiveLevelInt=@Integer[20000],\n    parent=@Logger[Logger[com.example.demo.arthas.user]],\n    childrenList=null,\n    aai=null,\n    additive=@Boolean[true],\n    loggerContext=@LoggerContext[ch.qos.logback.classic.LoggerContext[default]],\n]\n```\n\n可以知道`UserController@logger`实际使用的是logback。可以看到`level=null`，则说明实际最终的level是从`root` logger里来的。\n\n#### 单独设置UserController的logger level\n\n```bash\nognl --classLoaderClass org.springframework.boot.loader.LaunchedURLClassLoader '@com.example.demo.arthas.user.UserController@logger.setLevel(@ch.qos.logback.classic.Level@DEBUG)'\n```\n\n再次获取`UserController@logger`，可以发现已经是`DEBUG`了：\n\n```bash\nognl --classLoaderClass org.springframework.boot.loader.LaunchedURLClassLoader '@com.example.demo.arthas.user.UserController@logger'\n```\n\n```console\n$ ognl --classLoaderClass org.springframework.boot.loader.LaunchedURLClassLoader '@com.example.demo.arthas.user.UserController@logger'\n@Logger[\n    serialVersionUID=@Long[5454405123156820674],\n    FQCN=@String[ch.qos.logback.classic.Logger],\n    name=@String[com.example.demo.arthas.user.UserController],\n    level=@Level[DEBUG],\n    effectiveLevelInt=@Integer[10000],\n    parent=@Logger[Logger[com.example.demo.arthas.user]],\n    childrenList=null,\n    aai=null,\n    additive=@Boolean[true],\n    loggerContext=@LoggerContext[ch.qos.logback.classic.LoggerContext[default]],\n]\n```\n\n#### 修改logback的全局logger level\n\n通过获取`root` logger，可以修改全局的logger level：\n\n```bash\nognl --classLoaderClass org.springframework.boot.loader.LaunchedURLClassLoader '@org.slf4j.LoggerFactory@getLogger(\"root\").setLevel(@ch.qos.logback.classic.Level@DEBUG)'\n```\n\n## 案例: 排查logger冲突问题\n\n在这个案例里，展示排查logger冲突的方法。\n\n#### 确认应用使用的logger系统\n\n以`UserController`为例，它使用的是slf4j api，但实际使用到的logger系统是logback。\n\n```bash\nognl --classLoaderClass org.springframework.boot.loader.LaunchedURLClassLoader '@com.example.demo.arthas.user.UserController@logger'\n```\n\n```console\n$ ognl --classLoaderClass org.springframework.boot.loader.LaunchedURLClassLoader '@com.example.demo.arthas.user.UserController@logger'\n@Logger[\n    serialVersionUID=@Long[5454405123156820674],\n    FQCN=@String[ch.qos.logback.classic.Logger],\n    name=@String[com.example.demo.arthas.user.UserController],\n    level=null,\n    effectiveLevelInt=@Integer[20000],\n    parent=@Logger[Logger[com.example.demo.arthas.user]],\n    childrenList=null,\n    aai=null,\n    additive=@Boolean[true],\n    loggerContext=@LoggerContext[ch.qos.logback.classic.LoggerContext[default]],\n]\n```\n\n#### 获取logback实际加载的配置文件\n\n```bash\nognl --classLoaderClass org.springframework.boot.loader.LaunchedURLClassLoader '#map1=@org.slf4j.LoggerFactory@getLogger(\"root\").loggerContext.objectMap, #map1.get(\"CONFIGURATION_WATCH_LIST\")'\n```\n\n#### 使用classloader命令查找可能存在的logger配置文件\n\n```bash\nclassloader --classLoaderClass org.springframework.boot.loader.LaunchedURLClassLoader -r logback-spring.xml\n```\n\n```\n$ classloader --classLoaderClass org.springframework.boot.loader.LaunchedURLClassLoader -r logback-spring.xml\n jar:file:/Users/hengyunabc/code/java/spring-boot-inside/demo-arthas-spring-boot/target/demo-arthas-spring-boot-0.0.1-SNAPSHOT.jar!/BOOT-INF/classes!/logback-spring.xml\n\nAffect(row-cnt:1) cost in 13 ms.\n```\n\n可以知道加载的配置的具体来源。\n\n可以尝试加载容易冲突的文件：\n\n```bash\nclassloader --classLoaderClass org.springframework.boot.loader.LaunchedURLClassLoader -r logback.xml\n```\n\n```bash\nclassloader --classLoaderClass org.springframework.boot.loader.LaunchedURLClassLoader -r log4j.properties\n```\n\n## 更多信息\n\n在“ognl”中，我们演示了了Arthas的ognl命令。如果有更多的技巧或者使用疑问，欢迎在Issue里提出。\n\n- Issues: https://github.com/alibaba/arthas/issues\n- 文档： https://arthas.aliyun.com/doc\n\n如果您在使用Arthas，请让我们知道。您的使用对我们非常重要：[查看](https://github.com/alibaba/arthas/issues/111)\n\n文章拷贝来源：https://start.aliyun.com/course?spm=a2ck6.17690074.0.0.28bc2e7dHTphXs&id=PaiFAkJM","slug":"Java诊断工具Arthas高级命令教程/Arthasognl命令","published":1,"updated":"2021-08-07T05:34:59.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cks1cgr6o002bfw5iek4ahvub","content":"<!-- toc -->\n\n<ul>\n<li><a href=\"#%E5%90%AF%E5%8A%A8demo\">启动demo</a></li>\n<li><a href=\"#%E5%90%AF%E5%8A%A8arthas-boothelp%E5%91%BD%E4%BB%A4\">启动arthas-boot，help命令</a></li>\n<li><a href=\"#ognl%E8%AF%A6%E8%A7%A3\">Ognl详解</a><ul>\n<li><a href=\"#%E8%B0%83%E7%94%A8static%E5%87%BD%E6%95%B0\">调用static函数</a></li>\n<li><a href=\"#%E6%9F%A5%E6%89%BEusercontroller%E7%9A%84classloader\">查找UserController的ClassLoader</a></li>\n<li><a href=\"#%E8%8E%B7%E5%8F%96%E9%9D%99%E6%80%81%E7%B1%BB%E7%9A%84%E9%9D%99%E6%80%81%E5%AD%97%E6%AE%B5\">获取静态类的静态字段</a></li>\n<li><a href=\"#%E6%89%A7%E8%A1%8C%E5%A4%9A%E8%A1%8C%E8%A1%A8%E8%BE%BE%E5%BC%8F%E8%B5%8B%E5%80%BC%E7%BB%99%E4%B8%B4%E6%97%B6%E5%8F%98%E9%87%8F%E8%BF%94%E5%9B%9E%E4%B8%80%E4%B8%AAlist\">执行多行表达式，赋值给临时变量，返回一个List</a></li>\n<li><a href=\"#%E6%9B%B4%E5%A4%9A\">更多</a></li>\n</ul>\n</li>\n<li><a href=\"#%E6%A1%88%E4%BE%8B-%E5%8A%A8%E6%80%81%E6%9B%B4%E6%96%B0%E5%BA%94%E7%94%A8logger-level\">案例: 动态更新应用Logger Level</a><ul>\n<li><a href=\"#%E6%9F%A5%E6%89%BEusercontroller%E7%9A%84classloader-1\">查找UserController的ClassLoader</a></li>\n<li><a href=\"#%E7%94%A8ognl%E8%8E%B7%E5%8F%96logger\">用ognl获取logger</a></li>\n<li><a href=\"#%E5%8D%95%E7%8B%AC%E8%AE%BE%E7%BD%AEusercontroller%E7%9A%84logger-level\">单独设置UserController的logger level</a></li>\n<li><a href=\"#%E4%BF%AE%E6%94%B9logback%E7%9A%84%E5%85%A8%E5%B1%80logger-level\">修改logback的全局logger level</a></li>\n</ul>\n</li>\n<li><a href=\"#%E6%A1%88%E4%BE%8B-%E6%8E%92%E6%9F%A5logger%E5%86%B2%E7%AA%81%E9%97%AE%E9%A2%98\">案例: 排查logger冲突问题</a><ul>\n<li><a href=\"#%E7%A1%AE%E8%AE%A4%E5%BA%94%E7%94%A8%E4%BD%BF%E7%94%A8%E7%9A%84logger%E7%B3%BB%E7%BB%9F\">确认应用使用的logger系统</a></li>\n<li><a href=\"#%E8%8E%B7%E5%8F%96logback%E5%AE%9E%E9%99%85%E5%8A%A0%E8%BD%BD%E7%9A%84%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6\">获取logback实际加载的配置文件</a></li>\n<li><a href=\"#%E4%BD%BF%E7%94%A8classloader%E5%91%BD%E4%BB%A4%E6%9F%A5%E6%89%BE%E5%8F%AF%E8%83%BD%E5%AD%98%E5%9C%A8%E7%9A%84logger%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6\">使用classloader命令查找可能存在的logger配置文件</a></li>\n</ul>\n</li>\n<li><a href=\"#%E6%9B%B4%E5%A4%9A%E4%BF%A1%E6%81%AF\">更多信息</a></li>\n</ul>\n<!-- tocstop -->\n\n<p><img src=\"/jlynet.github.io/2021/08/07/Java%E8%AF%8A%E6%96%AD%E5%B7%A5%E5%85%B7Arthas%E9%AB%98%E7%BA%A7%E5%91%BD%E4%BB%A4%E6%95%99%E7%A8%8B/Arthasognl%E5%91%BD%E4%BB%A4/arthas.png\" alt=\"Arthas\"></p>\n<p><code>Arthas</code> 是Alibaba开源的Java诊断工具，深受开发者喜爱。在线排查问题，无需重启；动态跟踪Java代码；实时监控JVM状态。</p>\n<p><code>Arthas</code> 支持JDK 6+，支持Linux/Mac/Windows，采用命令行交互模式，同时提供丰富的 <code>Tab</code> 自动补全功能，进一步方便进行问题的定位和诊断。</p>\n<p>当你遇到以下类似问题而束手无策时，Arthas可以帮助你解决：</p>\n<ul>\n<li>这个类从哪个 jar 包加载的？为什么会报各种类相关的 Exception？</li>\n<li>我改的代码为什么没有执行到？难道是我没 commit？分支搞错了？</li>\n<li>遇到问题无法在线上 debug，难道只能通过加日志再重新发布吗？</li>\n<li>线上遇到某个用户的数据处理有问题，但线上同样无法 debug，线下无法重现！</li>\n<li>是否有一个全局视角来查看系统的运行状况？</li>\n<li>有什么办法可以监控到JVM的实时运行状态？</li>\n<li>怎么快速定位应用的热点，生成火焰图？</li>\n</ul>\n<p>本教程会以一个普通的Spring Boot应用为例，演示ognl命令。</p>\n<ul>\n<li>Github: <a href=\"https://github.com/alibaba/arthas\">https://github.com/alibaba/arthas</a></li>\n<li>文档: <a href=\"https://arthas.aliyun.com/doc/\">https://arthas.aliyun.com/doc/</a></li>\n</ul>\n<h2><span id=\"启动demo\">启动demo</span></h2><p>下载<code>demo-arthas-spring-boot.jar</code>，再用<code>java -jar</code>命令启动：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wget https://code.aliyun.com/middleware-container/handsonLabExternedFiles/raw/master/demo-arthas-spring-boot.jar;java -jar demo-arthas-spring-boot.jar</span><br></pre></td></tr></table></figure>\n\n<p><code>demo-arthas-spring-boot</code>是一个很简单的spring boot应用，源代码：<a href=\"https://github.com/hengyunabc/spring-boot-inside/tree/master/demo-arthas-spring-boot\">查看</a></p>\n<p>启动之后，可以访问61000端口： 点击查看</p>\n<p><img src=\"/jlynet.github.io/2021/08/07/Java%E8%AF%8A%E6%96%AD%E5%B7%A5%E5%85%B7Arthas%E9%AB%98%E7%BA%A7%E5%91%BD%E4%BB%A4%E6%95%99%E7%A8%8B/Arthasognl%E5%91%BD%E4%BB%A4/O1CN010Qbzcz1ctPSWSZI6L_!!6000000003658-2-tps-333-182.png\" alt=\"Demo Web\"></p>\n<h2><span id=\"启动arthas-boothelp命令\">启动arthas-boot，help命令</span></h2><p>在新的<code>Terminal 2</code>里，下载<code>arthas-boot.jar</code>，再用<code>java -jar</code>命令启动：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wget https://arthas.aliyun.com/arthas-boot.jar;java -jar arthas-boot.jar</span><br></pre></td></tr></table></figure>\n\n<p><code>arthas-boot</code>是<code>Arthas</code>的启动程序，它启动后，会列出所有的Java进程，用户可以选择需要诊断的目标进程。</p>\n<p>选择第一个进程，输入 <code>1</code> ，再<code>Enter/回车</code>：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1</span><br></pre></td></tr></table></figure>\n\n<p>Attach成功之后，会打印Arthas LOGO。输入 <code>help</code> 可以获取到更多的帮助信息。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">help</span></span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/jlynet.github.io/2021/08/07/Java%E8%AF%8A%E6%96%AD%E5%B7%A5%E5%85%B7Arthas%E9%AB%98%E7%BA%A7%E5%91%BD%E4%BB%A4%E6%95%99%E7%A8%8B/Arthasognl%E5%91%BD%E4%BB%A4/O1CN01HzatXZ1RgccrlT90M_!!6000000002141-2-tps-529-244.png\" alt=\"Arthas Boot\"></p>\n<h2><span id=\"ognl详解\">Ognl详解</span></h2><p>在Arthas里，有一个单独的<code>ognl</code>命令，可以动态执行代码。 查看用法：<code>ognl --help</code></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ognl --<span class=\"built_in\">help</span></span><br></pre></td></tr></table></figure>\n\n<h4><span id=\"调用static函数\">调用static函数</span></h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ognl <span class=\"string\">&#x27;@java.lang.System@out.println(&quot;hello ognl&quot;)&#x27;</span></span><br></pre></td></tr></table></figure>\n\n<p>可以检查<code>Terminal 1</code>里的进程输出，可以发现打印出了<code>hello ognl</code>。</p>\n<h4><span id=\"查找usercontroller的classloader\">查找UserController的ClassLoader</span></h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sc -d com.example.demo.arthas.user.UserController | grep classLoaderHash</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight console\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> sc -d com.example.demo.arthas.user.UserController | grep classLoaderHash</span></span><br><span class=\"line\"> classLoaderHash   1be6f5c3</span><br></pre></td></tr></table></figure>\n\n<p>注意hashcode是变化的，需要先查看当前的ClassLoader信息，提取对应ClassLoader的hashcode。</p>\n<p>如果你使用<code>-c</code>，你需要手动输入hashcode：<code>-c &lt;hashcode&gt;</code></p>\n<figure class=\"highlight console\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> ognl -c 1be6f5c3 @com.example.demo.arthas.user.UserController@logger</span></span><br></pre></td></tr></table></figure>\n\n<p>对于只有唯一实例的ClassLoader可以通过<code>--classLoaderClass</code>指定class name，使用起来更加方便：</p>\n<figure class=\"highlight console\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> ognl --classLoaderClass org.springframework.boot.loader.LaunchedURLClassLoader  @org.springframework.boot.SpringApplication@logger</span></span><br><span class=\"line\">@Slf4jLocationAwareLog[</span><br><span class=\"line\">    FQCN=@String[org.apache.commons.logging.LogAdapter$Slf4jLocationAwareLog],</span><br><span class=\"line\">    name=@String[org.springframework.boot.SpringApplication],</span><br><span class=\"line\">    logger=@Logger[Logger[org.springframework.boot.SpringApplication]],</span><br><span class=\"line\">]</span><br></pre></td></tr></table></figure>\n\n<p><code>--classLoaderClass</code> 的值是ClassLoader的类名，只有匹配到唯一的ClassLoader实例时才能工作，目的是方便输入通用命令，而<code>-c &lt;hashcode&gt;</code>是动态变化的。</p>\n<h4><span id=\"获取静态类的静态字段\">获取静态类的静态字段</span></h4><p>获取<code>UserController</code>类里的<code>logger</code>字段：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ognl --classLoaderClass org.springframework.boot.loader.LaunchedURLClassLoader @com.example.demo.arthas.user.UserController@logger</span><br></pre></td></tr></table></figure>\n\n<p>还可以通过<code>-x</code>参数控制返回值的展开层数。比如：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ognl --classLoaderClass org.springframework.boot.loader.LaunchedURLClassLoader -x 2 @com.example.demo.arthas.user.UserController@logger</span><br></pre></td></tr></table></figure>\n\n<h4><span id=\"执行多行表达式赋值给临时变量返回一个list\">执行多行表达式，赋值给临时变量，返回一个List</span></h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ognl <span class=\"string\">&#x27;#value1=@System@getProperty(&quot;java.home&quot;), #value2=@System@getProperty(&quot;java.runtime.name&quot;), &#123;#value1, #value2&#125;&#x27;</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight console\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> ognl <span class=\"string\">&#x27;#value1=@System@getProperty(&quot;java.home&quot;), #value2=@System@getProperty(&quot;java.runtime.name&quot;), &#123;#value1, #value2&#125;&#x27;</span></span></span><br><span class=\"line\">@ArrayList[</span><br><span class=\"line\">    @String[/Library/Java/JavaVirtualMachines/jdk1.8.0_162.jdk/Contents/Home/jre],</span><br><span class=\"line\">    @String[Java(TM) SE Runtime Environment],</span><br><span class=\"line\">]</span><br></pre></td></tr></table></figure>\n\n<h4><span id=\"更多\">更多</span></h4><p>在Arthas里<code>ognl</code>表达式是很重要的功能，在很多命令里都可以使用<code>ognl</code>表达式。</p>\n<p>一些更复杂的用法，可以参考：</p>\n<ul>\n<li>OGNL特殊用法请参考：<a href=\"https://github.com/alibaba/arthas/issues/71\">https://github.com/alibaba/arthas/issues/71</a></li>\n<li>OGNL表达式官方指南：<a href=\"https://commons.apache.org/proper/commons-ognl/language-guide.html\">https://commons.apache.org/proper/commons-ognl/language-guide.html</a></li>\n</ul>\n<h2><span id=\"案例-动态更新应用logger-level\">案例: 动态更新应用Logger Level</span></h2><p>在这个案例里，动态修改应用的Logger Level。</p>\n<h4><span id=\"查找usercontroller的classloader\">查找UserController的ClassLoader</span></h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sc -d com.example.demo.arthas.user.UserController | grep classLoaderHash</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight console\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> sc -d com.example.demo.arthas.user.UserController | grep classLoaderHash</span></span><br><span class=\"line\"> classLoaderHash   1be6f5c3</span><br></pre></td></tr></table></figure>\n\n<h4><span id=\"用ognl获取logger\">用ognl获取logger</span></h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ognl --classLoaderClass org.springframework.boot.loader.LaunchedURLClassLoader <span class=\"string\">&#x27;@com.example.demo.arthas.user.UserController@logger&#x27;</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight console\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> ognl --classLoaderClass org.springframework.boot.loader.LaunchedURLClassLoader <span class=\"string\">&#x27;@com.example.demo.arthas.user.UserController@logger&#x27;</span></span></span><br><span class=\"line\">@Logger[</span><br><span class=\"line\">    serialVersionUID=@Long[5454405123156820674],</span><br><span class=\"line\">    FQCN=@String[ch.qos.logback.classic.Logger],</span><br><span class=\"line\">    name=@String[com.example.demo.arthas.user.UserController],</span><br><span class=\"line\">    level=null,</span><br><span class=\"line\">    effectiveLevelInt=@Integer[20000],</span><br><span class=\"line\">    parent=@Logger[Logger[com.example.demo.arthas.user]],</span><br><span class=\"line\">    childrenList=null,</span><br><span class=\"line\">    aai=null,</span><br><span class=\"line\">    additive=@Boolean[true],</span><br><span class=\"line\">    loggerContext=@LoggerContext[ch.qos.logback.classic.LoggerContext[default]],</span><br><span class=\"line\">]</span><br></pre></td></tr></table></figure>\n\n<p>可以知道<code>UserController@logger</code>实际使用的是logback。可以看到<code>level=null</code>，则说明实际最终的level是从<code>root</code> logger里来的。</p>\n<h4><span id=\"单独设置usercontroller的logger-level\">单独设置UserController的logger level</span></h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ognl --classLoaderClass org.springframework.boot.loader.LaunchedURLClassLoader <span class=\"string\">&#x27;@com.example.demo.arthas.user.UserController@logger.setLevel(@ch.qos.logback.classic.Level@DEBUG)&#x27;</span></span><br></pre></td></tr></table></figure>\n\n<p>再次获取<code>UserController@logger</code>，可以发现已经是<code>DEBUG</code>了：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ognl --classLoaderClass org.springframework.boot.loader.LaunchedURLClassLoader <span class=\"string\">&#x27;@com.example.demo.arthas.user.UserController@logger&#x27;</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight console\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> ognl --classLoaderClass org.springframework.boot.loader.LaunchedURLClassLoader <span class=\"string\">&#x27;@com.example.demo.arthas.user.UserController@logger&#x27;</span></span></span><br><span class=\"line\">@Logger[</span><br><span class=\"line\">    serialVersionUID=@Long[5454405123156820674],</span><br><span class=\"line\">    FQCN=@String[ch.qos.logback.classic.Logger],</span><br><span class=\"line\">    name=@String[com.example.demo.arthas.user.UserController],</span><br><span class=\"line\">    level=@Level[DEBUG],</span><br><span class=\"line\">    effectiveLevelInt=@Integer[10000],</span><br><span class=\"line\">    parent=@Logger[Logger[com.example.demo.arthas.user]],</span><br><span class=\"line\">    childrenList=null,</span><br><span class=\"line\">    aai=null,</span><br><span class=\"line\">    additive=@Boolean[true],</span><br><span class=\"line\">    loggerContext=@LoggerContext[ch.qos.logback.classic.LoggerContext[default]],</span><br><span class=\"line\">]</span><br></pre></td></tr></table></figure>\n\n<h4><span id=\"修改logback的全局logger-level\">修改logback的全局logger level</span></h4><p>通过获取<code>root</code> logger，可以修改全局的logger level：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ognl --classLoaderClass org.springframework.boot.loader.LaunchedURLClassLoader <span class=\"string\">&#x27;@org.slf4j.LoggerFactory@getLogger(&quot;root&quot;).setLevel(@ch.qos.logback.classic.Level@DEBUG)&#x27;</span></span><br></pre></td></tr></table></figure>\n\n<h2><span id=\"案例-排查logger冲突问题\">案例: 排查logger冲突问题</span></h2><p>在这个案例里，展示排查logger冲突的方法。</p>\n<h4><span id=\"确认应用使用的logger系统\">确认应用使用的logger系统</span></h4><p>以<code>UserController</code>为例，它使用的是slf4j api，但实际使用到的logger系统是logback。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ognl --classLoaderClass org.springframework.boot.loader.LaunchedURLClassLoader <span class=\"string\">&#x27;@com.example.demo.arthas.user.UserController@logger&#x27;</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight console\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> ognl --classLoaderClass org.springframework.boot.loader.LaunchedURLClassLoader <span class=\"string\">&#x27;@com.example.demo.arthas.user.UserController@logger&#x27;</span></span></span><br><span class=\"line\">@Logger[</span><br><span class=\"line\">    serialVersionUID=@Long[5454405123156820674],</span><br><span class=\"line\">    FQCN=@String[ch.qos.logback.classic.Logger],</span><br><span class=\"line\">    name=@String[com.example.demo.arthas.user.UserController],</span><br><span class=\"line\">    level=null,</span><br><span class=\"line\">    effectiveLevelInt=@Integer[20000],</span><br><span class=\"line\">    parent=@Logger[Logger[com.example.demo.arthas.user]],</span><br><span class=\"line\">    childrenList=null,</span><br><span class=\"line\">    aai=null,</span><br><span class=\"line\">    additive=@Boolean[true],</span><br><span class=\"line\">    loggerContext=@LoggerContext[ch.qos.logback.classic.LoggerContext[default]],</span><br><span class=\"line\">]</span><br></pre></td></tr></table></figure>\n\n<h4><span id=\"获取logback实际加载的配置文件\">获取logback实际加载的配置文件</span></h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ognl --classLoaderClass org.springframework.boot.loader.LaunchedURLClassLoader <span class=\"string\">&#x27;#map1=@org.slf4j.LoggerFactory@getLogger(&quot;root&quot;).loggerContext.objectMap, #map1.get(&quot;CONFIGURATION_WATCH_LIST&quot;)&#x27;</span></span><br></pre></td></tr></table></figure>\n\n<h4><span id=\"使用classloader命令查找可能存在的logger配置文件\">使用classloader命令查找可能存在的logger配置文件</span></h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">classloader --classLoaderClass org.springframework.boot.loader.LaunchedURLClassLoader -r logback-spring.xml</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ classloader --classLoaderClass org.springframework.boot.loader.LaunchedURLClassLoader -r logback-spring.xml</span><br><span class=\"line\"> jar:file:/Users/hengyunabc/code/java/spring-boot-inside/demo-arthas-spring-boot/target/demo-arthas-spring-boot-0.0.1-SNAPSHOT.jar!/BOOT-INF/classes!/logback-spring.xml</span><br><span class=\"line\"></span><br><span class=\"line\">Affect(row-cnt:1) cost in 13 ms.</span><br></pre></td></tr></table></figure>\n\n<p>可以知道加载的配置的具体来源。</p>\n<p>可以尝试加载容易冲突的文件：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">classloader --classLoaderClass org.springframework.boot.loader.LaunchedURLClassLoader -r logback.xml</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">classloader --classLoaderClass org.springframework.boot.loader.LaunchedURLClassLoader -r log4j.properties</span><br></pre></td></tr></table></figure>\n\n<h2><span id=\"更多信息\">更多信息</span></h2><p>在“ognl”中，我们演示了了Arthas的ognl命令。如果有更多的技巧或者使用疑问，欢迎在Issue里提出。</p>\n<ul>\n<li>Issues: <a href=\"https://github.com/alibaba/arthas/issues\">https://github.com/alibaba/arthas/issues</a></li>\n<li>文档： <a href=\"https://arthas.aliyun.com/doc\">https://arthas.aliyun.com/doc</a></li>\n</ul>\n<p>如果您在使用Arthas，请让我们知道。您的使用对我们非常重要：<a href=\"https://github.com/alibaba/arthas/issues/111\">查看</a></p>\n<p>文章拷贝来源：<a href=\"https://start.aliyun.com/course?spm=a2ck6.17690074.0.0.28bc2e7dHTphXs&amp;id=PaiFAkJM\">https://start.aliyun.com/course?spm=a2ck6.17690074.0.0.28bc2e7dHTphXs&amp;id=PaiFAkJM</a></p>\n","site":{"data":{}},"excerpt":"","more":"<!-- toc -->\n\n<ul>\n<li><a href=\"#%E5%90%AF%E5%8A%A8demo\">启动demo</a></li>\n<li><a href=\"#%E5%90%AF%E5%8A%A8arthas-boothelp%E5%91%BD%E4%BB%A4\">启动arthas-boot，help命令</a></li>\n<li><a href=\"#ognl%E8%AF%A6%E8%A7%A3\">Ognl详解</a><ul>\n<li><a href=\"#%E8%B0%83%E7%94%A8static%E5%87%BD%E6%95%B0\">调用static函数</a></li>\n<li><a href=\"#%E6%9F%A5%E6%89%BEusercontroller%E7%9A%84classloader\">查找UserController的ClassLoader</a></li>\n<li><a href=\"#%E8%8E%B7%E5%8F%96%E9%9D%99%E6%80%81%E7%B1%BB%E7%9A%84%E9%9D%99%E6%80%81%E5%AD%97%E6%AE%B5\">获取静态类的静态字段</a></li>\n<li><a href=\"#%E6%89%A7%E8%A1%8C%E5%A4%9A%E8%A1%8C%E8%A1%A8%E8%BE%BE%E5%BC%8F%E8%B5%8B%E5%80%BC%E7%BB%99%E4%B8%B4%E6%97%B6%E5%8F%98%E9%87%8F%E8%BF%94%E5%9B%9E%E4%B8%80%E4%B8%AAlist\">执行多行表达式，赋值给临时变量，返回一个List</a></li>\n<li><a href=\"#%E6%9B%B4%E5%A4%9A\">更多</a></li>\n</ul>\n</li>\n<li><a href=\"#%E6%A1%88%E4%BE%8B-%E5%8A%A8%E6%80%81%E6%9B%B4%E6%96%B0%E5%BA%94%E7%94%A8logger-level\">案例: 动态更新应用Logger Level</a><ul>\n<li><a href=\"#%E6%9F%A5%E6%89%BEusercontroller%E7%9A%84classloader-1\">查找UserController的ClassLoader</a></li>\n<li><a href=\"#%E7%94%A8ognl%E8%8E%B7%E5%8F%96logger\">用ognl获取logger</a></li>\n<li><a href=\"#%E5%8D%95%E7%8B%AC%E8%AE%BE%E7%BD%AEusercontroller%E7%9A%84logger-level\">单独设置UserController的logger level</a></li>\n<li><a href=\"#%E4%BF%AE%E6%94%B9logback%E7%9A%84%E5%85%A8%E5%B1%80logger-level\">修改logback的全局logger level</a></li>\n</ul>\n</li>\n<li><a href=\"#%E6%A1%88%E4%BE%8B-%E6%8E%92%E6%9F%A5logger%E5%86%B2%E7%AA%81%E9%97%AE%E9%A2%98\">案例: 排查logger冲突问题</a><ul>\n<li><a href=\"#%E7%A1%AE%E8%AE%A4%E5%BA%94%E7%94%A8%E4%BD%BF%E7%94%A8%E7%9A%84logger%E7%B3%BB%E7%BB%9F\">确认应用使用的logger系统</a></li>\n<li><a href=\"#%E8%8E%B7%E5%8F%96logback%E5%AE%9E%E9%99%85%E5%8A%A0%E8%BD%BD%E7%9A%84%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6\">获取logback实际加载的配置文件</a></li>\n<li><a href=\"#%E4%BD%BF%E7%94%A8classloader%E5%91%BD%E4%BB%A4%E6%9F%A5%E6%89%BE%E5%8F%AF%E8%83%BD%E5%AD%98%E5%9C%A8%E7%9A%84logger%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6\">使用classloader命令查找可能存在的logger配置文件</a></li>\n</ul>\n</li>\n<li><a href=\"#%E6%9B%B4%E5%A4%9A%E4%BF%A1%E6%81%AF\">更多信息</a></li>\n</ul>\n<!-- tocstop -->\n\n<p><img src=\"/jlynet.github.io/2021/08/07/Java%E8%AF%8A%E6%96%AD%E5%B7%A5%E5%85%B7Arthas%E9%AB%98%E7%BA%A7%E5%91%BD%E4%BB%A4%E6%95%99%E7%A8%8B/Arthasognl%E5%91%BD%E4%BB%A4/arthas.png\" alt=\"Arthas\"></p>\n<p><code>Arthas</code> 是Alibaba开源的Java诊断工具，深受开发者喜爱。在线排查问题，无需重启；动态跟踪Java代码；实时监控JVM状态。</p>\n<p><code>Arthas</code> 支持JDK 6+，支持Linux/Mac/Windows，采用命令行交互模式，同时提供丰富的 <code>Tab</code> 自动补全功能，进一步方便进行问题的定位和诊断。</p>\n<p>当你遇到以下类似问题而束手无策时，Arthas可以帮助你解决：</p>\n<ul>\n<li>这个类从哪个 jar 包加载的？为什么会报各种类相关的 Exception？</li>\n<li>我改的代码为什么没有执行到？难道是我没 commit？分支搞错了？</li>\n<li>遇到问题无法在线上 debug，难道只能通过加日志再重新发布吗？</li>\n<li>线上遇到某个用户的数据处理有问题，但线上同样无法 debug，线下无法重现！</li>\n<li>是否有一个全局视角来查看系统的运行状况？</li>\n<li>有什么办法可以监控到JVM的实时运行状态？</li>\n<li>怎么快速定位应用的热点，生成火焰图？</li>\n</ul>\n<p>本教程会以一个普通的Spring Boot应用为例，演示ognl命令。</p>\n<ul>\n<li>Github: <a href=\"https://github.com/alibaba/arthas\">https://github.com/alibaba/arthas</a></li>\n<li>文档: <a href=\"https://arthas.aliyun.com/doc/\">https://arthas.aliyun.com/doc/</a></li>\n</ul>\n<h2 id=\"启动demo\"><a href=\"#启动demo\" class=\"headerlink\" title=\"启动demo\"></a>启动demo</h2><p>下载<code>demo-arthas-spring-boot.jar</code>，再用<code>java -jar</code>命令启动：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wget https://code.aliyun.com/middleware-container/handsonLabExternedFiles/raw/master/demo-arthas-spring-boot.jar;java -jar demo-arthas-spring-boot.jar</span><br></pre></td></tr></table></figure>\n\n<p><code>demo-arthas-spring-boot</code>是一个很简单的spring boot应用，源代码：<a href=\"https://github.com/hengyunabc/spring-boot-inside/tree/master/demo-arthas-spring-boot\">查看</a></p>\n<p>启动之后，可以访问61000端口： 点击查看</p>\n<p><img src=\"/jlynet.github.io/2021/08/07/Java%E8%AF%8A%E6%96%AD%E5%B7%A5%E5%85%B7Arthas%E9%AB%98%E7%BA%A7%E5%91%BD%E4%BB%A4%E6%95%99%E7%A8%8B/Arthasognl%E5%91%BD%E4%BB%A4/O1CN010Qbzcz1ctPSWSZI6L_!!6000000003658-2-tps-333-182.png\" alt=\"Demo Web\"></p>\n<h2 id=\"启动arthas-boot，help命令\"><a href=\"#启动arthas-boot，help命令\" class=\"headerlink\" title=\"启动arthas-boot，help命令\"></a>启动arthas-boot，help命令</h2><p>在新的<code>Terminal 2</code>里，下载<code>arthas-boot.jar</code>，再用<code>java -jar</code>命令启动：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wget https://arthas.aliyun.com/arthas-boot.jar;java -jar arthas-boot.jar</span><br></pre></td></tr></table></figure>\n\n<p><code>arthas-boot</code>是<code>Arthas</code>的启动程序，它启动后，会列出所有的Java进程，用户可以选择需要诊断的目标进程。</p>\n<p>选择第一个进程，输入 <code>1</code> ，再<code>Enter/回车</code>：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1</span><br></pre></td></tr></table></figure>\n\n<p>Attach成功之后，会打印Arthas LOGO。输入 <code>help</code> 可以获取到更多的帮助信息。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">help</span></span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/jlynet.github.io/2021/08/07/Java%E8%AF%8A%E6%96%AD%E5%B7%A5%E5%85%B7Arthas%E9%AB%98%E7%BA%A7%E5%91%BD%E4%BB%A4%E6%95%99%E7%A8%8B/Arthasognl%E5%91%BD%E4%BB%A4/O1CN01HzatXZ1RgccrlT90M_!!6000000002141-2-tps-529-244.png\" alt=\"Arthas Boot\"></p>\n<h2 id=\"Ognl详解\"><a href=\"#Ognl详解\" class=\"headerlink\" title=\"Ognl详解\"></a>Ognl详解</h2><p>在Arthas里，有一个单独的<code>ognl</code>命令，可以动态执行代码。 查看用法：<code>ognl --help</code></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ognl --<span class=\"built_in\">help</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"调用static函数\"><a href=\"#调用static函数\" class=\"headerlink\" title=\"调用static函数\"></a>调用static函数</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ognl <span class=\"string\">&#x27;@java.lang.System@out.println(&quot;hello ognl&quot;)&#x27;</span></span><br></pre></td></tr></table></figure>\n\n<p>可以检查<code>Terminal 1</code>里的进程输出，可以发现打印出了<code>hello ognl</code>。</p>\n<h4 id=\"查找UserController的ClassLoader\"><a href=\"#查找UserController的ClassLoader\" class=\"headerlink\" title=\"查找UserController的ClassLoader\"></a>查找UserController的ClassLoader</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sc -d com.example.demo.arthas.user.UserController | grep classLoaderHash</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight console\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> sc -d com.example.demo.arthas.user.UserController | grep classLoaderHash</span></span><br><span class=\"line\"> classLoaderHash   1be6f5c3</span><br></pre></td></tr></table></figure>\n\n<p>注意hashcode是变化的，需要先查看当前的ClassLoader信息，提取对应ClassLoader的hashcode。</p>\n<p>如果你使用<code>-c</code>，你需要手动输入hashcode：<code>-c &lt;hashcode&gt;</code></p>\n<figure class=\"highlight console\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> ognl -c 1be6f5c3 @com.example.demo.arthas.user.UserController@logger</span></span><br></pre></td></tr></table></figure>\n\n<p>对于只有唯一实例的ClassLoader可以通过<code>--classLoaderClass</code>指定class name，使用起来更加方便：</p>\n<figure class=\"highlight console\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> ognl --classLoaderClass org.springframework.boot.loader.LaunchedURLClassLoader  @org.springframework.boot.SpringApplication@logger</span></span><br><span class=\"line\">@Slf4jLocationAwareLog[</span><br><span class=\"line\">    FQCN=@String[org.apache.commons.logging.LogAdapter$Slf4jLocationAwareLog],</span><br><span class=\"line\">    name=@String[org.springframework.boot.SpringApplication],</span><br><span class=\"line\">    logger=@Logger[Logger[org.springframework.boot.SpringApplication]],</span><br><span class=\"line\">]</span><br></pre></td></tr></table></figure>\n\n<p><code>--classLoaderClass</code> 的值是ClassLoader的类名，只有匹配到唯一的ClassLoader实例时才能工作，目的是方便输入通用命令，而<code>-c &lt;hashcode&gt;</code>是动态变化的。</p>\n<h4 id=\"获取静态类的静态字段\"><a href=\"#获取静态类的静态字段\" class=\"headerlink\" title=\"获取静态类的静态字段\"></a>获取静态类的静态字段</h4><p>获取<code>UserController</code>类里的<code>logger</code>字段：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ognl --classLoaderClass org.springframework.boot.loader.LaunchedURLClassLoader @com.example.demo.arthas.user.UserController@logger</span><br></pre></td></tr></table></figure>\n\n<p>还可以通过<code>-x</code>参数控制返回值的展开层数。比如：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ognl --classLoaderClass org.springframework.boot.loader.LaunchedURLClassLoader -x 2 @com.example.demo.arthas.user.UserController@logger</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"执行多行表达式，赋值给临时变量，返回一个List\"><a href=\"#执行多行表达式，赋值给临时变量，返回一个List\" class=\"headerlink\" title=\"执行多行表达式，赋值给临时变量，返回一个List\"></a>执行多行表达式，赋值给临时变量，返回一个List</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ognl <span class=\"string\">&#x27;#value1=@System@getProperty(&quot;java.home&quot;), #value2=@System@getProperty(&quot;java.runtime.name&quot;), &#123;#value1, #value2&#125;&#x27;</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight console\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> ognl <span class=\"string\">&#x27;#value1=@System@getProperty(&quot;java.home&quot;), #value2=@System@getProperty(&quot;java.runtime.name&quot;), &#123;#value1, #value2&#125;&#x27;</span></span></span><br><span class=\"line\">@ArrayList[</span><br><span class=\"line\">    @String[/Library/Java/JavaVirtualMachines/jdk1.8.0_162.jdk/Contents/Home/jre],</span><br><span class=\"line\">    @String[Java(TM) SE Runtime Environment],</span><br><span class=\"line\">]</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"更多\"><a href=\"#更多\" class=\"headerlink\" title=\"更多\"></a>更多</h4><p>在Arthas里<code>ognl</code>表达式是很重要的功能，在很多命令里都可以使用<code>ognl</code>表达式。</p>\n<p>一些更复杂的用法，可以参考：</p>\n<ul>\n<li>OGNL特殊用法请参考：<a href=\"https://github.com/alibaba/arthas/issues/71\">https://github.com/alibaba/arthas/issues/71</a></li>\n<li>OGNL表达式官方指南：<a href=\"https://commons.apache.org/proper/commons-ognl/language-guide.html\">https://commons.apache.org/proper/commons-ognl/language-guide.html</a></li>\n</ul>\n<h2 id=\"案例-动态更新应用Logger-Level\"><a href=\"#案例-动态更新应用Logger-Level\" class=\"headerlink\" title=\"案例: 动态更新应用Logger Level\"></a>案例: 动态更新应用Logger Level</h2><p>在这个案例里，动态修改应用的Logger Level。</p>\n<h4 id=\"查找UserController的ClassLoader-1\"><a href=\"#查找UserController的ClassLoader-1\" class=\"headerlink\" title=\"查找UserController的ClassLoader\"></a>查找UserController的ClassLoader</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sc -d com.example.demo.arthas.user.UserController | grep classLoaderHash</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight console\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> sc -d com.example.demo.arthas.user.UserController | grep classLoaderHash</span></span><br><span class=\"line\"> classLoaderHash   1be6f5c3</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"用ognl获取logger\"><a href=\"#用ognl获取logger\" class=\"headerlink\" title=\"用ognl获取logger\"></a>用ognl获取logger</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ognl --classLoaderClass org.springframework.boot.loader.LaunchedURLClassLoader <span class=\"string\">&#x27;@com.example.demo.arthas.user.UserController@logger&#x27;</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight console\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> ognl --classLoaderClass org.springframework.boot.loader.LaunchedURLClassLoader <span class=\"string\">&#x27;@com.example.demo.arthas.user.UserController@logger&#x27;</span></span></span><br><span class=\"line\">@Logger[</span><br><span class=\"line\">    serialVersionUID=@Long[5454405123156820674],</span><br><span class=\"line\">    FQCN=@String[ch.qos.logback.classic.Logger],</span><br><span class=\"line\">    name=@String[com.example.demo.arthas.user.UserController],</span><br><span class=\"line\">    level=null,</span><br><span class=\"line\">    effectiveLevelInt=@Integer[20000],</span><br><span class=\"line\">    parent=@Logger[Logger[com.example.demo.arthas.user]],</span><br><span class=\"line\">    childrenList=null,</span><br><span class=\"line\">    aai=null,</span><br><span class=\"line\">    additive=@Boolean[true],</span><br><span class=\"line\">    loggerContext=@LoggerContext[ch.qos.logback.classic.LoggerContext[default]],</span><br><span class=\"line\">]</span><br></pre></td></tr></table></figure>\n\n<p>可以知道<code>UserController@logger</code>实际使用的是logback。可以看到<code>level=null</code>，则说明实际最终的level是从<code>root</code> logger里来的。</p>\n<h4 id=\"单独设置UserController的logger-level\"><a href=\"#单独设置UserController的logger-level\" class=\"headerlink\" title=\"单独设置UserController的logger level\"></a>单独设置UserController的logger level</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ognl --classLoaderClass org.springframework.boot.loader.LaunchedURLClassLoader <span class=\"string\">&#x27;@com.example.demo.arthas.user.UserController@logger.setLevel(@ch.qos.logback.classic.Level@DEBUG)&#x27;</span></span><br></pre></td></tr></table></figure>\n\n<p>再次获取<code>UserController@logger</code>，可以发现已经是<code>DEBUG</code>了：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ognl --classLoaderClass org.springframework.boot.loader.LaunchedURLClassLoader <span class=\"string\">&#x27;@com.example.demo.arthas.user.UserController@logger&#x27;</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight console\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> ognl --classLoaderClass org.springframework.boot.loader.LaunchedURLClassLoader <span class=\"string\">&#x27;@com.example.demo.arthas.user.UserController@logger&#x27;</span></span></span><br><span class=\"line\">@Logger[</span><br><span class=\"line\">    serialVersionUID=@Long[5454405123156820674],</span><br><span class=\"line\">    FQCN=@String[ch.qos.logback.classic.Logger],</span><br><span class=\"line\">    name=@String[com.example.demo.arthas.user.UserController],</span><br><span class=\"line\">    level=@Level[DEBUG],</span><br><span class=\"line\">    effectiveLevelInt=@Integer[10000],</span><br><span class=\"line\">    parent=@Logger[Logger[com.example.demo.arthas.user]],</span><br><span class=\"line\">    childrenList=null,</span><br><span class=\"line\">    aai=null,</span><br><span class=\"line\">    additive=@Boolean[true],</span><br><span class=\"line\">    loggerContext=@LoggerContext[ch.qos.logback.classic.LoggerContext[default]],</span><br><span class=\"line\">]</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"修改logback的全局logger-level\"><a href=\"#修改logback的全局logger-level\" class=\"headerlink\" title=\"修改logback的全局logger level\"></a>修改logback的全局logger level</h4><p>通过获取<code>root</code> logger，可以修改全局的logger level：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ognl --classLoaderClass org.springframework.boot.loader.LaunchedURLClassLoader <span class=\"string\">&#x27;@org.slf4j.LoggerFactory@getLogger(&quot;root&quot;).setLevel(@ch.qos.logback.classic.Level@DEBUG)&#x27;</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"案例-排查logger冲突问题\"><a href=\"#案例-排查logger冲突问题\" class=\"headerlink\" title=\"案例: 排查logger冲突问题\"></a>案例: 排查logger冲突问题</h2><p>在这个案例里，展示排查logger冲突的方法。</p>\n<h4 id=\"确认应用使用的logger系统\"><a href=\"#确认应用使用的logger系统\" class=\"headerlink\" title=\"确认应用使用的logger系统\"></a>确认应用使用的logger系统</h4><p>以<code>UserController</code>为例，它使用的是slf4j api，但实际使用到的logger系统是logback。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ognl --classLoaderClass org.springframework.boot.loader.LaunchedURLClassLoader <span class=\"string\">&#x27;@com.example.demo.arthas.user.UserController@logger&#x27;</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight console\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> ognl --classLoaderClass org.springframework.boot.loader.LaunchedURLClassLoader <span class=\"string\">&#x27;@com.example.demo.arthas.user.UserController@logger&#x27;</span></span></span><br><span class=\"line\">@Logger[</span><br><span class=\"line\">    serialVersionUID=@Long[5454405123156820674],</span><br><span class=\"line\">    FQCN=@String[ch.qos.logback.classic.Logger],</span><br><span class=\"line\">    name=@String[com.example.demo.arthas.user.UserController],</span><br><span class=\"line\">    level=null,</span><br><span class=\"line\">    effectiveLevelInt=@Integer[20000],</span><br><span class=\"line\">    parent=@Logger[Logger[com.example.demo.arthas.user]],</span><br><span class=\"line\">    childrenList=null,</span><br><span class=\"line\">    aai=null,</span><br><span class=\"line\">    additive=@Boolean[true],</span><br><span class=\"line\">    loggerContext=@LoggerContext[ch.qos.logback.classic.LoggerContext[default]],</span><br><span class=\"line\">]</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"获取logback实际加载的配置文件\"><a href=\"#获取logback实际加载的配置文件\" class=\"headerlink\" title=\"获取logback实际加载的配置文件\"></a>获取logback实际加载的配置文件</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ognl --classLoaderClass org.springframework.boot.loader.LaunchedURLClassLoader <span class=\"string\">&#x27;#map1=@org.slf4j.LoggerFactory@getLogger(&quot;root&quot;).loggerContext.objectMap, #map1.get(&quot;CONFIGURATION_WATCH_LIST&quot;)&#x27;</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"使用classloader命令查找可能存在的logger配置文件\"><a href=\"#使用classloader命令查找可能存在的logger配置文件\" class=\"headerlink\" title=\"使用classloader命令查找可能存在的logger配置文件\"></a>使用classloader命令查找可能存在的logger配置文件</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">classloader --classLoaderClass org.springframework.boot.loader.LaunchedURLClassLoader -r logback-spring.xml</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ classloader --classLoaderClass org.springframework.boot.loader.LaunchedURLClassLoader -r logback-spring.xml</span><br><span class=\"line\"> jar:file:/Users/hengyunabc/code/java/spring-boot-inside/demo-arthas-spring-boot/target/demo-arthas-spring-boot-0.0.1-SNAPSHOT.jar!/BOOT-INF/classes!/logback-spring.xml</span><br><span class=\"line\"></span><br><span class=\"line\">Affect(row-cnt:1) cost in 13 ms.</span><br></pre></td></tr></table></figure>\n\n<p>可以知道加载的配置的具体来源。</p>\n<p>可以尝试加载容易冲突的文件：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">classloader --classLoaderClass org.springframework.boot.loader.LaunchedURLClassLoader -r logback.xml</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">classloader --classLoaderClass org.springframework.boot.loader.LaunchedURLClassLoader -r log4j.properties</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"更多信息\"><a href=\"#更多信息\" class=\"headerlink\" title=\"更多信息\"></a>更多信息</h2><p>在“ognl”中，我们演示了了Arthas的ognl命令。如果有更多的技巧或者使用疑问，欢迎在Issue里提出。</p>\n<ul>\n<li>Issues: <a href=\"https://github.com/alibaba/arthas/issues\">https://github.com/alibaba/arthas/issues</a></li>\n<li>文档： <a href=\"https://arthas.aliyun.com/doc\">https://arthas.aliyun.com/doc</a></li>\n</ul>\n<p>如果您在使用Arthas，请让我们知道。您的使用对我们非常重要：<a href=\"https://github.com/alibaba/arthas/issues/111\">查看</a></p>\n<p>文章拷贝来源：<a href=\"https://start.aliyun.com/course?spm=a2ck6.17690074.0.0.28bc2e7dHTphXs&amp;id=PaiFAkJM\">https://start.aliyun.com/course?spm=a2ck6.17690074.0.0.28bc2e7dHTphXs&amp;id=PaiFAkJM</a></p>\n"},{"title":"Arthas perfcounter命令","date":"2021-08-07T01:51:30.000Z","_content":"\n<!-- toc -->\n\n![Arthas](arthas.png)\n\n`Arthas` 是Alibaba开源的Java诊断工具，深受开发者喜爱。在线排查问题，无需重启；动态跟踪Java代码；实时监控JVM状态。\n\n`Arthas` 支持JDK 6+，支持Linux/Mac/Windows，采用命令行交互模式，同时提供丰富的 `Tab` 自动补全功能，进一步方便进行问题的定位和诊断。\n\n当你遇到以下类似问题而束手无策时，Arthas可以帮助你解决：\n\n- 这个类从哪个 jar 包加载的？为什么会报各种类相关的 Exception？\n- 我改的代码为什么没有执行到？难道是我没 commit？分支搞错了？\n- 遇到问题无法在线上 debug，难道只能通过加日志再重新发布吗？\n- 线上遇到某个用户的数据处理有问题，但线上同样无法 debug，线下无法重现！\n- 是否有一个全局视角来查看系统的运行状况？\n- 有什么办法可以监控到JVM的实时运行状态？\n- 怎么快速定位应用的热点，生成火焰图？\n\n本教程会以一个简单的应用为例，演示perfcounter命令。\n\n- Github: https://github.com/alibaba/arthas\n- 文档: https://arthas.aliyun.com/doc/\n\n## Arthas demo\n\n下载`arthas-demo.jar`，再用`java -jar`命令启动：\n\n```bash\nwget https://arthas.aliyun.com/arthas-demo.jar;java -jar arthas-demo.jar\n```\n\n`arthas-demo`是一个很简单的程序，它随机生成整数，再执行因式分解，把结果打印出来。如果生成的随机数是负数，则会打印提示信息。\n\n## 启动arthas-boot\n\n在新的`Terminal 2`里，下载`arthas-boot.jar`，再用`java -jar`命令启动：\n\n```bash\nwget https://arthas.aliyun.com/arthas-boot.jar;java -jar arthas-boot.jar\n```\n\n`arthas-boot`是`Arthas`的启动程序，它启动后，会列出所有的Java进程，用户可以选择需要诊断的目标进程。\n\n选择第一个进程，输入 `1` ，再`Enter/回车`：\n\n```bash\n1\n```\n\nAttach成功之后，会打印Arthas LOGO。输入 `help` 可以获取到更多的帮助信息。\n\n```bash\nhelp\n```\n\n![Arthas Boot](O1CN01HzatXZ1RgccrlT90M_!!6000000002141-2-tps-529-244.png)\n\n## perfcounter命令\n\n查看当前JVM的 Perf Counter信息\n\n```bash\nperfcounter -h\n```\n\n```console\n USAGE:\n   perfcounter [-d] [-h]\n\n SUMMARY:\n   Display the perf counter information.\n\n Examples:\n   perfcounter\n   perfcounter -d\n\n WIKI:\n   https://arthas.aliyun.com/doc/perfcounter\n\n OPTIONS:\n -d, --details                        print all perf counter details\n -h, --help                           this help\n```\n\n### 使用参考\n\n```bash\nperfcounter\n```\n\n```console\n$ perfcounter\n java.ci.totalTime                            2325637411\n java.cls.loadedClasses                       3403\n java.cls.sharedLoadedClasses                 0\n java.cls.sharedUnloadedClasses               0\n java.cls.unloadedClasses                     0\n java.property.java.version                   11.0.4\n java.property.java.vm.info                   mixed mode\n java.property.java.vm.name                   OpenJDK 64-Bit Server VM\n```\n\n可以用-d参数打印更多信息：\n\n```bash\nperfcounter -d\n```\n\n```console\n$ perfcounter -d\n Name                                   Variability   Units        Value\n---------------------------------------------------------------------------------\n java.ci.totalTime                      Monotonic     Ticks        3242526906\n java.cls.loadedClasses                 Monotonic     Events       3404\n java.cls.sharedLoadedClasses           Monotonic     Events       0\n java.cls.sharedUnloadedClasses         Monotonic     Events       0\n java.cls.unloadedClasses               Monotonic     Events       0\n```\n\n### 备注: 对于jdk9以上的应用\n\n如果没有打印出信息，应用在启动时，加下面的参数：\n\n```\n--add-opens java.base/jdk.internal.perf=ALL-UNNAMED --add-exports java.base/jdk.internal.perf=ALL-UNNAMED\n```\n\n## 更多信息\n\n在“perfcounter”中，我们演示了了Arthas的perfcounter命令。如果有更多的技巧或者使用疑问，欢迎在Issue里提出。\n\n- Issues: https://github.com/alibaba/arthas/issues\n- 文档： https://arthas.aliyun.com/doc\n\n如果您在使用Arthas，请让我们知道。您的使用对我们非常重要：[查看](https://github.com/alibaba/arthas/issues/111)\n\n文章拷贝来源：https://start.aliyun.com/course?spm=a2ck6.17690074.0.0.28bc2e7dHTphXs&id=PaiFAkJM","source":"_posts/Java诊断工具Arthas高级命令教程/Arthasperfcounter命令.md","raw":"---\ntitle: Arthas perfcounter命令\ndate: 2021-08-07 09:51:30\ntags: ['Java 诊断工具 Arthas 高级命令教程']\n---\n\n<!-- toc -->\n\n![Arthas](arthas.png)\n\n`Arthas` 是Alibaba开源的Java诊断工具，深受开发者喜爱。在线排查问题，无需重启；动态跟踪Java代码；实时监控JVM状态。\n\n`Arthas` 支持JDK 6+，支持Linux/Mac/Windows，采用命令行交互模式，同时提供丰富的 `Tab` 自动补全功能，进一步方便进行问题的定位和诊断。\n\n当你遇到以下类似问题而束手无策时，Arthas可以帮助你解决：\n\n- 这个类从哪个 jar 包加载的？为什么会报各种类相关的 Exception？\n- 我改的代码为什么没有执行到？难道是我没 commit？分支搞错了？\n- 遇到问题无法在线上 debug，难道只能通过加日志再重新发布吗？\n- 线上遇到某个用户的数据处理有问题，但线上同样无法 debug，线下无法重现！\n- 是否有一个全局视角来查看系统的运行状况？\n- 有什么办法可以监控到JVM的实时运行状态？\n- 怎么快速定位应用的热点，生成火焰图？\n\n本教程会以一个简单的应用为例，演示perfcounter命令。\n\n- Github: https://github.com/alibaba/arthas\n- 文档: https://arthas.aliyun.com/doc/\n\n## Arthas demo\n\n下载`arthas-demo.jar`，再用`java -jar`命令启动：\n\n```bash\nwget https://arthas.aliyun.com/arthas-demo.jar;java -jar arthas-demo.jar\n```\n\n`arthas-demo`是一个很简单的程序，它随机生成整数，再执行因式分解，把结果打印出来。如果生成的随机数是负数，则会打印提示信息。\n\n## 启动arthas-boot\n\n在新的`Terminal 2`里，下载`arthas-boot.jar`，再用`java -jar`命令启动：\n\n```bash\nwget https://arthas.aliyun.com/arthas-boot.jar;java -jar arthas-boot.jar\n```\n\n`arthas-boot`是`Arthas`的启动程序，它启动后，会列出所有的Java进程，用户可以选择需要诊断的目标进程。\n\n选择第一个进程，输入 `1` ，再`Enter/回车`：\n\n```bash\n1\n```\n\nAttach成功之后，会打印Arthas LOGO。输入 `help` 可以获取到更多的帮助信息。\n\n```bash\nhelp\n```\n\n![Arthas Boot](O1CN01HzatXZ1RgccrlT90M_!!6000000002141-2-tps-529-244.png)\n\n## perfcounter命令\n\n查看当前JVM的 Perf Counter信息\n\n```bash\nperfcounter -h\n```\n\n```console\n USAGE:\n   perfcounter [-d] [-h]\n\n SUMMARY:\n   Display the perf counter information.\n\n Examples:\n   perfcounter\n   perfcounter -d\n\n WIKI:\n   https://arthas.aliyun.com/doc/perfcounter\n\n OPTIONS:\n -d, --details                        print all perf counter details\n -h, --help                           this help\n```\n\n### 使用参考\n\n```bash\nperfcounter\n```\n\n```console\n$ perfcounter\n java.ci.totalTime                            2325637411\n java.cls.loadedClasses                       3403\n java.cls.sharedLoadedClasses                 0\n java.cls.sharedUnloadedClasses               0\n java.cls.unloadedClasses                     0\n java.property.java.version                   11.0.4\n java.property.java.vm.info                   mixed mode\n java.property.java.vm.name                   OpenJDK 64-Bit Server VM\n```\n\n可以用-d参数打印更多信息：\n\n```bash\nperfcounter -d\n```\n\n```console\n$ perfcounter -d\n Name                                   Variability   Units        Value\n---------------------------------------------------------------------------------\n java.ci.totalTime                      Monotonic     Ticks        3242526906\n java.cls.loadedClasses                 Monotonic     Events       3404\n java.cls.sharedLoadedClasses           Monotonic     Events       0\n java.cls.sharedUnloadedClasses         Monotonic     Events       0\n java.cls.unloadedClasses               Monotonic     Events       0\n```\n\n### 备注: 对于jdk9以上的应用\n\n如果没有打印出信息，应用在启动时，加下面的参数：\n\n```\n--add-opens java.base/jdk.internal.perf=ALL-UNNAMED --add-exports java.base/jdk.internal.perf=ALL-UNNAMED\n```\n\n## 更多信息\n\n在“perfcounter”中，我们演示了了Arthas的perfcounter命令。如果有更多的技巧或者使用疑问，欢迎在Issue里提出。\n\n- Issues: https://github.com/alibaba/arthas/issues\n- 文档： https://arthas.aliyun.com/doc\n\n如果您在使用Arthas，请让我们知道。您的使用对我们非常重要：[查看](https://github.com/alibaba/arthas/issues/111)\n\n文章拷贝来源：https://start.aliyun.com/course?spm=a2ck6.17690074.0.0.28bc2e7dHTphXs&id=PaiFAkJM","slug":"Java诊断工具Arthas高级命令教程/Arthasperfcounter命令","published":1,"updated":"2021-08-07T05:35:03.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cks1cgr6q002dfw5iefxifzwy","content":"<!-- toc -->\n\n<ul>\n<li><a href=\"#arthas-demo\">Arthas demo</a></li>\n<li><a href=\"#%E5%90%AF%E5%8A%A8arthas-boot\">启动arthas-boot</a></li>\n<li><a href=\"#perfcounter%E5%91%BD%E4%BB%A4\">perfcounter命令</a><ul>\n<li><a href=\"#%E4%BD%BF%E7%94%A8%E5%8F%82%E8%80%83\">使用参考</a></li>\n<li><a href=\"#%E5%A4%87%E6%B3%A8-%E5%AF%B9%E4%BA%8Ejdk9%E4%BB%A5%E4%B8%8A%E7%9A%84%E5%BA%94%E7%94%A8\">备注: 对于jdk9以上的应用</a></li>\n</ul>\n</li>\n<li><a href=\"#%E6%9B%B4%E5%A4%9A%E4%BF%A1%E6%81%AF\">更多信息</a></li>\n</ul>\n<!-- tocstop -->\n\n<p><img src=\"/jlynet.github.io/2021/08/07/Java%E8%AF%8A%E6%96%AD%E5%B7%A5%E5%85%B7Arthas%E9%AB%98%E7%BA%A7%E5%91%BD%E4%BB%A4%E6%95%99%E7%A8%8B/Arthasperfcounter%E5%91%BD%E4%BB%A4/arthas.png\" alt=\"Arthas\"></p>\n<p><code>Arthas</code> 是Alibaba开源的Java诊断工具，深受开发者喜爱。在线排查问题，无需重启；动态跟踪Java代码；实时监控JVM状态。</p>\n<p><code>Arthas</code> 支持JDK 6+，支持Linux/Mac/Windows，采用命令行交互模式，同时提供丰富的 <code>Tab</code> 自动补全功能，进一步方便进行问题的定位和诊断。</p>\n<p>当你遇到以下类似问题而束手无策时，Arthas可以帮助你解决：</p>\n<ul>\n<li>这个类从哪个 jar 包加载的？为什么会报各种类相关的 Exception？</li>\n<li>我改的代码为什么没有执行到？难道是我没 commit？分支搞错了？</li>\n<li>遇到问题无法在线上 debug，难道只能通过加日志再重新发布吗？</li>\n<li>线上遇到某个用户的数据处理有问题，但线上同样无法 debug，线下无法重现！</li>\n<li>是否有一个全局视角来查看系统的运行状况？</li>\n<li>有什么办法可以监控到JVM的实时运行状态？</li>\n<li>怎么快速定位应用的热点，生成火焰图？</li>\n</ul>\n<p>本教程会以一个简单的应用为例，演示perfcounter命令。</p>\n<ul>\n<li>Github: <a href=\"https://github.com/alibaba/arthas\">https://github.com/alibaba/arthas</a></li>\n<li>文档: <a href=\"https://arthas.aliyun.com/doc/\">https://arthas.aliyun.com/doc/</a></li>\n</ul>\n<h2><span id=\"arthas-demo\">Arthas demo</span></h2><p>下载<code>arthas-demo.jar</code>，再用<code>java -jar</code>命令启动：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wget https://arthas.aliyun.com/arthas-demo.jar;java -jar arthas-demo.jar</span><br></pre></td></tr></table></figure>\n\n<p><code>arthas-demo</code>是一个很简单的程序，它随机生成整数，再执行因式分解，把结果打印出来。如果生成的随机数是负数，则会打印提示信息。</p>\n<h2><span id=\"启动arthas-boot\">启动arthas-boot</span></h2><p>在新的<code>Terminal 2</code>里，下载<code>arthas-boot.jar</code>，再用<code>java -jar</code>命令启动：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wget https://arthas.aliyun.com/arthas-boot.jar;java -jar arthas-boot.jar</span><br></pre></td></tr></table></figure>\n\n<p><code>arthas-boot</code>是<code>Arthas</code>的启动程序，它启动后，会列出所有的Java进程，用户可以选择需要诊断的目标进程。</p>\n<p>选择第一个进程，输入 <code>1</code> ，再<code>Enter/回车</code>：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1</span><br></pre></td></tr></table></figure>\n\n<p>Attach成功之后，会打印Arthas LOGO。输入 <code>help</code> 可以获取到更多的帮助信息。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">help</span></span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/jlynet.github.io/2021/08/07/Java%E8%AF%8A%E6%96%AD%E5%B7%A5%E5%85%B7Arthas%E9%AB%98%E7%BA%A7%E5%91%BD%E4%BB%A4%E6%95%99%E7%A8%8B/Arthasperfcounter%E5%91%BD%E4%BB%A4/O1CN01HzatXZ1RgccrlT90M_!!6000000002141-2-tps-529-244.png\" alt=\"Arthas Boot\"></p>\n<h2><span id=\"perfcounter命令\">perfcounter命令</span></h2><p>查看当前JVM的 Perf Counter信息</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">perfcounter -h</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight console\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">USAGE:</span><br><span class=\"line\">  perfcounter [-d] [-h]</span><br><span class=\"line\"></span><br><span class=\"line\">SUMMARY:</span><br><span class=\"line\">  Display the perf counter information.</span><br><span class=\"line\"></span><br><span class=\"line\">Examples:</span><br><span class=\"line\">  perfcounter</span><br><span class=\"line\">  perfcounter -d</span><br><span class=\"line\"></span><br><span class=\"line\">WIKI:</span><br><span class=\"line\">  https://arthas.aliyun.com/doc/perfcounter</span><br><span class=\"line\"></span><br><span class=\"line\">OPTIONS:</span><br><span class=\"line\">-d, --details                        print all perf counter details</span><br><span class=\"line\">-h, --help                           this help</span><br></pre></td></tr></table></figure>\n\n<h3><span id=\"使用参考\">使用参考</span></h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">perfcounter</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight console\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> perfcounter</span></span><br><span class=\"line\"> java.ci.totalTime                            2325637411</span><br><span class=\"line\"> java.cls.loadedClasses                       3403</span><br><span class=\"line\"> java.cls.sharedLoadedClasses                 0</span><br><span class=\"line\"> java.cls.sharedUnloadedClasses               0</span><br><span class=\"line\"> java.cls.unloadedClasses                     0</span><br><span class=\"line\"> java.property.java.version                   11.0.4</span><br><span class=\"line\"> java.property.java.vm.info                   mixed mode</span><br><span class=\"line\"> java.property.java.vm.name                   OpenJDK 64-Bit Server VM</span><br></pre></td></tr></table></figure>\n\n<p>可以用-d参数打印更多信息：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">perfcounter -d</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight console\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> perfcounter -d</span></span><br><span class=\"line\"> Name                                   Variability   Units        Value</span><br><span class=\"line\">---------------------------------------------------------------------------------</span><br><span class=\"line\"> java.ci.totalTime                      Monotonic     Ticks        3242526906</span><br><span class=\"line\"> java.cls.loadedClasses                 Monotonic     Events       3404</span><br><span class=\"line\"> java.cls.sharedLoadedClasses           Monotonic     Events       0</span><br><span class=\"line\"> java.cls.sharedUnloadedClasses         Monotonic     Events       0</span><br><span class=\"line\"> java.cls.unloadedClasses               Monotonic     Events       0</span><br></pre></td></tr></table></figure>\n\n<h3><span id=\"备注-对于jdk9以上的应用\">备注: 对于jdk9以上的应用</span></h3><p>如果没有打印出信息，应用在启动时，加下面的参数：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">--add-opens java.base/jdk.internal.perf=ALL-UNNAMED --add-exports java.base/jdk.internal.perf=ALL-UNNAMED</span><br></pre></td></tr></table></figure>\n\n<h2><span id=\"更多信息\">更多信息</span></h2><p>在“perfcounter”中，我们演示了了Arthas的perfcounter命令。如果有更多的技巧或者使用疑问，欢迎在Issue里提出。</p>\n<ul>\n<li>Issues: <a href=\"https://github.com/alibaba/arthas/issues\">https://github.com/alibaba/arthas/issues</a></li>\n<li>文档： <a href=\"https://arthas.aliyun.com/doc\">https://arthas.aliyun.com/doc</a></li>\n</ul>\n<p>如果您在使用Arthas，请让我们知道。您的使用对我们非常重要：<a href=\"https://github.com/alibaba/arthas/issues/111\">查看</a></p>\n<p>文章拷贝来源：<a href=\"https://start.aliyun.com/course?spm=a2ck6.17690074.0.0.28bc2e7dHTphXs&amp;id=PaiFAkJM\">https://start.aliyun.com/course?spm=a2ck6.17690074.0.0.28bc2e7dHTphXs&amp;id=PaiFAkJM</a></p>\n","site":{"data":{}},"excerpt":"","more":"<!-- toc -->\n\n<ul>\n<li><a href=\"#arthas-demo\">Arthas demo</a></li>\n<li><a href=\"#%E5%90%AF%E5%8A%A8arthas-boot\">启动arthas-boot</a></li>\n<li><a href=\"#perfcounter%E5%91%BD%E4%BB%A4\">perfcounter命令</a><ul>\n<li><a href=\"#%E4%BD%BF%E7%94%A8%E5%8F%82%E8%80%83\">使用参考</a></li>\n<li><a href=\"#%E5%A4%87%E6%B3%A8-%E5%AF%B9%E4%BA%8Ejdk9%E4%BB%A5%E4%B8%8A%E7%9A%84%E5%BA%94%E7%94%A8\">备注: 对于jdk9以上的应用</a></li>\n</ul>\n</li>\n<li><a href=\"#%E6%9B%B4%E5%A4%9A%E4%BF%A1%E6%81%AF\">更多信息</a></li>\n</ul>\n<!-- tocstop -->\n\n<p><img src=\"/jlynet.github.io/2021/08/07/Java%E8%AF%8A%E6%96%AD%E5%B7%A5%E5%85%B7Arthas%E9%AB%98%E7%BA%A7%E5%91%BD%E4%BB%A4%E6%95%99%E7%A8%8B/Arthasperfcounter%E5%91%BD%E4%BB%A4/arthas.png\" alt=\"Arthas\"></p>\n<p><code>Arthas</code> 是Alibaba开源的Java诊断工具，深受开发者喜爱。在线排查问题，无需重启；动态跟踪Java代码；实时监控JVM状态。</p>\n<p><code>Arthas</code> 支持JDK 6+，支持Linux/Mac/Windows，采用命令行交互模式，同时提供丰富的 <code>Tab</code> 自动补全功能，进一步方便进行问题的定位和诊断。</p>\n<p>当你遇到以下类似问题而束手无策时，Arthas可以帮助你解决：</p>\n<ul>\n<li>这个类从哪个 jar 包加载的？为什么会报各种类相关的 Exception？</li>\n<li>我改的代码为什么没有执行到？难道是我没 commit？分支搞错了？</li>\n<li>遇到问题无法在线上 debug，难道只能通过加日志再重新发布吗？</li>\n<li>线上遇到某个用户的数据处理有问题，但线上同样无法 debug，线下无法重现！</li>\n<li>是否有一个全局视角来查看系统的运行状况？</li>\n<li>有什么办法可以监控到JVM的实时运行状态？</li>\n<li>怎么快速定位应用的热点，生成火焰图？</li>\n</ul>\n<p>本教程会以一个简单的应用为例，演示perfcounter命令。</p>\n<ul>\n<li>Github: <a href=\"https://github.com/alibaba/arthas\">https://github.com/alibaba/arthas</a></li>\n<li>文档: <a href=\"https://arthas.aliyun.com/doc/\">https://arthas.aliyun.com/doc/</a></li>\n</ul>\n<h2 id=\"Arthas-demo\"><a href=\"#Arthas-demo\" class=\"headerlink\" title=\"Arthas demo\"></a>Arthas demo</h2><p>下载<code>arthas-demo.jar</code>，再用<code>java -jar</code>命令启动：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wget https://arthas.aliyun.com/arthas-demo.jar;java -jar arthas-demo.jar</span><br></pre></td></tr></table></figure>\n\n<p><code>arthas-demo</code>是一个很简单的程序，它随机生成整数，再执行因式分解，把结果打印出来。如果生成的随机数是负数，则会打印提示信息。</p>\n<h2 id=\"启动arthas-boot\"><a href=\"#启动arthas-boot\" class=\"headerlink\" title=\"启动arthas-boot\"></a>启动arthas-boot</h2><p>在新的<code>Terminal 2</code>里，下载<code>arthas-boot.jar</code>，再用<code>java -jar</code>命令启动：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wget https://arthas.aliyun.com/arthas-boot.jar;java -jar arthas-boot.jar</span><br></pre></td></tr></table></figure>\n\n<p><code>arthas-boot</code>是<code>Arthas</code>的启动程序，它启动后，会列出所有的Java进程，用户可以选择需要诊断的目标进程。</p>\n<p>选择第一个进程，输入 <code>1</code> ，再<code>Enter/回车</code>：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1</span><br></pre></td></tr></table></figure>\n\n<p>Attach成功之后，会打印Arthas LOGO。输入 <code>help</code> 可以获取到更多的帮助信息。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">help</span></span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/jlynet.github.io/2021/08/07/Java%E8%AF%8A%E6%96%AD%E5%B7%A5%E5%85%B7Arthas%E9%AB%98%E7%BA%A7%E5%91%BD%E4%BB%A4%E6%95%99%E7%A8%8B/Arthasperfcounter%E5%91%BD%E4%BB%A4/O1CN01HzatXZ1RgccrlT90M_!!6000000002141-2-tps-529-244.png\" alt=\"Arthas Boot\"></p>\n<h2 id=\"perfcounter命令\"><a href=\"#perfcounter命令\" class=\"headerlink\" title=\"perfcounter命令\"></a>perfcounter命令</h2><p>查看当前JVM的 Perf Counter信息</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">perfcounter -h</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight console\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">USAGE:</span><br><span class=\"line\">  perfcounter [-d] [-h]</span><br><span class=\"line\"></span><br><span class=\"line\">SUMMARY:</span><br><span class=\"line\">  Display the perf counter information.</span><br><span class=\"line\"></span><br><span class=\"line\">Examples:</span><br><span class=\"line\">  perfcounter</span><br><span class=\"line\">  perfcounter -d</span><br><span class=\"line\"></span><br><span class=\"line\">WIKI:</span><br><span class=\"line\">  https://arthas.aliyun.com/doc/perfcounter</span><br><span class=\"line\"></span><br><span class=\"line\">OPTIONS:</span><br><span class=\"line\">-d, --details                        print all perf counter details</span><br><span class=\"line\">-h, --help                           this help</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"使用参考\"><a href=\"#使用参考\" class=\"headerlink\" title=\"使用参考\"></a>使用参考</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">perfcounter</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight console\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> perfcounter</span></span><br><span class=\"line\"> java.ci.totalTime                            2325637411</span><br><span class=\"line\"> java.cls.loadedClasses                       3403</span><br><span class=\"line\"> java.cls.sharedLoadedClasses                 0</span><br><span class=\"line\"> java.cls.sharedUnloadedClasses               0</span><br><span class=\"line\"> java.cls.unloadedClasses                     0</span><br><span class=\"line\"> java.property.java.version                   11.0.4</span><br><span class=\"line\"> java.property.java.vm.info                   mixed mode</span><br><span class=\"line\"> java.property.java.vm.name                   OpenJDK 64-Bit Server VM</span><br></pre></td></tr></table></figure>\n\n<p>可以用-d参数打印更多信息：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">perfcounter -d</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight console\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> perfcounter -d</span></span><br><span class=\"line\"> Name                                   Variability   Units        Value</span><br><span class=\"line\">---------------------------------------------------------------------------------</span><br><span class=\"line\"> java.ci.totalTime                      Monotonic     Ticks        3242526906</span><br><span class=\"line\"> java.cls.loadedClasses                 Monotonic     Events       3404</span><br><span class=\"line\"> java.cls.sharedLoadedClasses           Monotonic     Events       0</span><br><span class=\"line\"> java.cls.sharedUnloadedClasses         Monotonic     Events       0</span><br><span class=\"line\"> java.cls.unloadedClasses               Monotonic     Events       0</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"备注-对于jdk9以上的应用\"><a href=\"#备注-对于jdk9以上的应用\" class=\"headerlink\" title=\"备注: 对于jdk9以上的应用\"></a>备注: 对于jdk9以上的应用</h3><p>如果没有打印出信息，应用在启动时，加下面的参数：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">--add-opens java.base/jdk.internal.perf=ALL-UNNAMED --add-exports java.base/jdk.internal.perf=ALL-UNNAMED</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"更多信息\"><a href=\"#更多信息\" class=\"headerlink\" title=\"更多信息\"></a>更多信息</h2><p>在“perfcounter”中，我们演示了了Arthas的perfcounter命令。如果有更多的技巧或者使用疑问，欢迎在Issue里提出。</p>\n<ul>\n<li>Issues: <a href=\"https://github.com/alibaba/arthas/issues\">https://github.com/alibaba/arthas/issues</a></li>\n<li>文档： <a href=\"https://arthas.aliyun.com/doc\">https://arthas.aliyun.com/doc</a></li>\n</ul>\n<p>如果您在使用Arthas，请让我们知道。您的使用对我们非常重要：<a href=\"https://github.com/alibaba/arthas/issues/111\">查看</a></p>\n<p>文章拷贝来源：<a href=\"https://start.aliyun.com/course?spm=a2ck6.17690074.0.0.28bc2e7dHTphXs&amp;id=PaiFAkJM\">https://start.aliyun.com/course?spm=a2ck6.17690074.0.0.28bc2e7dHTphXs&amp;id=PaiFAkJM</a></p>\n"},{"title":"Arthas profiler命令","date":"2021-08-07T01:51:39.000Z","_content":"\n<!-- toc -->\n\n![Arthas](arthas.png)\n\n`Arthas` 是Alibaba开源的Java诊断工具，深受开发者喜爱。在线排查问题，无需重启；动态跟踪Java代码；实时监控JVM状态。\n\n`Arthas` 支持JDK 6+，支持Linux/Mac/Windows，采用命令行交互模式，同时提供丰富的 `Tab` 自动补全功能，进一步方便进行问题的定位和诊断。\n\n当你遇到以下类似问题而束手无策时，Arthas可以帮助你解决：\n\n- 这个类从哪个 jar 包加载的？为什么会报各种类相关的 Exception？\n- 我改的代码为什么没有执行到？难道是我没 commit？分支搞错了？\n- 遇到问题无法在线上 debug，难道只能通过加日志再重新发布吗？\n- 线上遇到某个用户的数据处理有问题，但线上同样无法 debug，线下无法重现！\n- 是否有一个全局视角来查看系统的运行状况？\n- 有什么办法可以监控到JVM的实时运行状态？\n- 怎么快速定位应用的热点，生成火焰图？\n\n本教程会以一个简单的应用为例，演示profiler命令。\n\n- Github: https://github.com/alibaba/arthas\n- 文档: https://arthas.aliyun.com/doc/\n\n## 启动arthas demo\n\n下载`arthas-demo.jar`，再用`java -jar`命令启动：\n\n```bash\nwget https://arthas.aliyun.com/arthas-demo.jar;java -jar arthas-demo.jar\n```\n\n`arthas-demo`是一个很简单的程序，它随机生成整数，再执行因式分解，把结果打印出来。如果生成的随机数是负数，则会打印提示信息。\n\n## 启动arthas-boot\n\n在新的`Terminal 2`里，下载`arthas-boot.jar`，再用`java -jar`命令启动：\n\n```bash\nwget https://arthas.aliyun.com/arthas-boot.jar;java -jar arthas-boot.jar\n```\n\n`arthas-boot`是`Arthas`的启动程序，它启动后，会列出所有的Java进程，用户可以选择需要诊断的目标进程。\n\n选择第一个进程，输入 `1` ，再`Enter/回车`：\n\n```bash\n1\n```\n\nAttach成功之后，会打印Arthas LOGO。输入 `help` 可以获取到更多的帮助信息。\n\n```bash\nhelp\n```\n\n![Arthas Boot](O1CN01HzatXZ1RgccrlT90M_!!6000000002141-2-tps-529-244.png)\n\n## profiler命令\n\n> 使用[async-profiler](https://github.com/jvm-profiling-tools/async-profiler)生成火焰图\n\n`profiler` 命令支持生成应用热点的火焰图。本质上是通过不断的采样，然后把收集到的采样结果生成火焰图。\n\n```\nprofiler` 命令基本运行结构是 `profiler action [actionArg]\n```\n\n#### 参数说明\n\n| 参数名称    | 参数说明                                                     |\n| ----------- | ------------------------------------------------------------ |\n| *action*    | 要执行的操作                                                 |\n| *actionArg* | 属性名模式                                                   |\n| [i:]        | 采样间隔（单位：ns）（默认值：10'000'000，即10 ms）          |\n| [f:]        | 将输出转储到指定路径                                         |\n| [d:]        | 运行评测指定秒                                               |\n| [e:]        | 要跟踪哪个事件（cpu, alloc, lock, cache-misses等），默认是cpu |\n\n#### 查看所有支持的action\n\n```bash\nprofiler actions\n```\n\n```console\n$ profiler actions\nSupported Actions: [resume, dumpCollapsed, getSamples, start, list, execute, version, stop, load, dumpFlat, actions, dumpTraces, status]\n```\n\n#### 查看版本\n\n```bash\nprofiler version\n```\n\n```console\n$ profiler version\nAsync-profiler 1.6 built on Sep  9 2019\nCopyright 2019 Andrei Pangin\n```\n\n#### 启动profiler\n\n```bash\nprofiler start -e itimer\n```\n\n```\n$ profiler start -e itimer\nStarted [itimer] profiling\n```\n\n> 默认情况下，生成的是cpu的火焰图，即event为`cpu`。可以用`--event`参数来指定。 因为katacoda环境不支持perf_events，所以这里使用`-e itimer`参数指定event为itimer\n\n#### 获取已采集的sample的数量\n\n```bash\nprofiler getSamples\n```\n\n```\n$ profiler getSamples\n23\n```\n\n#### 查看profiler状态\n\n```bash\nprofiler status\n```\n\n```console\n$ profiler status\n[itimer] profiling is running for 4 seconds\n```\n\n可以查看当前profiler在采样哪种`event`和采样时间。\n\n#### 停止profiler\n\n##### 生成svg格式结果\n\n```bash\nprofiler stop\n```\n\n```\n$ profiler stop\nprofiler output file: /tmp/demo/arthas-output/20191125-135546.svg\nOK\n```\n\n默认情况下，生成的结果保存到应用的`工作目录`下的`arthas-output`目录。可以通过 `--file`参数来指定输出结果路径。比如：\n\n```bash\nprofiler stop --file /tmp/output.svg\n```\n\n```console\n$ profiler stop --file /tmp/output.svg\nprofiler output file: /tmp/output.svg\nOK\n```\n\n##### 生成html格式结果\n\n默认情况下，结果文件是`svg`格式，如果想生成`html`格式，可以用`--format`参数指定：\n\n```bash\nprofiler stop --format html\n```\n\n```console\n$ profiler stop --format html\nprofiler output file: /tmp/test/arthas-output/20191125-143329.html\nOK\n```\n\n或者在`--file`参数里用文件名指名格式。比如`--file /tmp/result.html` 。\n\n```bash\nprofiler stop --file /tmp/result.html\n```\n\n#### 通过浏览器查看arthas-output下面的profiler结果\n\n默认情况下，arthas使用8563http端口，则可以打开： 目录下面的profiler结果：\n\n![img](arthas-output.png)\n\n点击可以查看具体的结果：\n\n![img](arthas-output-svg.png)\n\n> 如果是chrome浏览器，可能需要多次刷新。\n\n#### profiler支持的events\n\n```bash\nprofiler list\n```\n\n在不同的平台，不同的OS下面，支持的events各有不同。比如在macos下面：\n\n```console\n$ profiler list\nBasic events:\n  cpu\n  alloc\n  lock\n  wall\n  itimer\n```\n\n在linux下面\n\n```console\n$ profiler list\nBasic events:\n  cpu\n  alloc\n  lock\n  wall\n  itimer\nPerf events:\n  page-faults\n  context-switches\n  cycles\n  instructions\n  cache-references\n  cache-misses\n  branches\n  branch-misses\n  bus-cycles\n  L1-dcache-load-misses\n  LLC-load-misses\n  dTLB-load-misses\n  mem:breakpoint\n  trace:tracepoint\n```\n\n如果遇到OS本身的权限/配置问题，然后缺少部分event，可以参考`async-profiler`本身文档：[async-profiler](https://github.com/jvm-profiling-tools/async-profiler)\n\n可以用`--event`参数指定要采样的事件，比如对`alloc`事件进入采样：\n\n```bash\nprofiler start --event alloc\n```\n\n```console\n$ profiler start --event alloc\n```\n\n#### 恢复采样\n\n```bash\nprofiler resume\n```\n\n```console\n$ profiler resume\nStarted [cpu] profiling\n```\n\n`start`和`resume`的区别是：`start`是新开始采样，`resume`会保留上次`stop`时的数据。\n\n通过执行`profiler getSamples`可以查看samples的数量来验证。\n\n#### 使用`execute`来执行复杂的命令\n\n比如开始采样：\n\n```bash\nprofiler execute 'start,framebuf=5000000'\n```\n\n```console\nprofiler execute 'start,framebuf=5000000'\n```\n\n停止采样，并保存到指定文件里：\n\n```bash\nprofiler execute 'stop,file=/tmp/result.svg'\n```\n\n```console\nprofiler execute 'stop,file=/tmp/result.svg'\n```\n\n具体的格式参考： [arguments.cpp](https://github.com/jvm-profiling-tools/async-profiler/blob/v1.8.1/src/arguments.cpp#L50)\n\n## 更多信息\n\n在“profiler”中，我们演示了了Arthas的profiler命令。如果有更多的技巧或者使用疑问，欢迎在Issue里提出。\n\n- Issues: https://github.com/alibaba/arthas/issues\n- 文档： https://arthas.aliyun.com/doc\n\n如果您在使用Arthas，请让我们知道。您的使用对我们非常重要：[查看](https://github.com/alibaba/arthas/issues/111)\n\n文章拷贝来源：https://start.aliyun.com/course?spm=a2ck6.17690074.0.0.28bc2e7dHTphXs&id=PaiFAkJM","source":"_posts/Java诊断工具Arthas高级命令教程/Arthasprofiler命令.md","raw":"---\ntitle: Arthas profiler命令\ndate: 2021-08-07 09:51:39\ntags: ['Java 诊断工具 Arthas 高级命令教程']\n---\n\n<!-- toc -->\n\n![Arthas](arthas.png)\n\n`Arthas` 是Alibaba开源的Java诊断工具，深受开发者喜爱。在线排查问题，无需重启；动态跟踪Java代码；实时监控JVM状态。\n\n`Arthas` 支持JDK 6+，支持Linux/Mac/Windows，采用命令行交互模式，同时提供丰富的 `Tab` 自动补全功能，进一步方便进行问题的定位和诊断。\n\n当你遇到以下类似问题而束手无策时，Arthas可以帮助你解决：\n\n- 这个类从哪个 jar 包加载的？为什么会报各种类相关的 Exception？\n- 我改的代码为什么没有执行到？难道是我没 commit？分支搞错了？\n- 遇到问题无法在线上 debug，难道只能通过加日志再重新发布吗？\n- 线上遇到某个用户的数据处理有问题，但线上同样无法 debug，线下无法重现！\n- 是否有一个全局视角来查看系统的运行状况？\n- 有什么办法可以监控到JVM的实时运行状态？\n- 怎么快速定位应用的热点，生成火焰图？\n\n本教程会以一个简单的应用为例，演示profiler命令。\n\n- Github: https://github.com/alibaba/arthas\n- 文档: https://arthas.aliyun.com/doc/\n\n## 启动arthas demo\n\n下载`arthas-demo.jar`，再用`java -jar`命令启动：\n\n```bash\nwget https://arthas.aliyun.com/arthas-demo.jar;java -jar arthas-demo.jar\n```\n\n`arthas-demo`是一个很简单的程序，它随机生成整数，再执行因式分解，把结果打印出来。如果生成的随机数是负数，则会打印提示信息。\n\n## 启动arthas-boot\n\n在新的`Terminal 2`里，下载`arthas-boot.jar`，再用`java -jar`命令启动：\n\n```bash\nwget https://arthas.aliyun.com/arthas-boot.jar;java -jar arthas-boot.jar\n```\n\n`arthas-boot`是`Arthas`的启动程序，它启动后，会列出所有的Java进程，用户可以选择需要诊断的目标进程。\n\n选择第一个进程，输入 `1` ，再`Enter/回车`：\n\n```bash\n1\n```\n\nAttach成功之后，会打印Arthas LOGO。输入 `help` 可以获取到更多的帮助信息。\n\n```bash\nhelp\n```\n\n![Arthas Boot](O1CN01HzatXZ1RgccrlT90M_!!6000000002141-2-tps-529-244.png)\n\n## profiler命令\n\n> 使用[async-profiler](https://github.com/jvm-profiling-tools/async-profiler)生成火焰图\n\n`profiler` 命令支持生成应用热点的火焰图。本质上是通过不断的采样，然后把收集到的采样结果生成火焰图。\n\n```\nprofiler` 命令基本运行结构是 `profiler action [actionArg]\n```\n\n#### 参数说明\n\n| 参数名称    | 参数说明                                                     |\n| ----------- | ------------------------------------------------------------ |\n| *action*    | 要执行的操作                                                 |\n| *actionArg* | 属性名模式                                                   |\n| [i:]        | 采样间隔（单位：ns）（默认值：10'000'000，即10 ms）          |\n| [f:]        | 将输出转储到指定路径                                         |\n| [d:]        | 运行评测指定秒                                               |\n| [e:]        | 要跟踪哪个事件（cpu, alloc, lock, cache-misses等），默认是cpu |\n\n#### 查看所有支持的action\n\n```bash\nprofiler actions\n```\n\n```console\n$ profiler actions\nSupported Actions: [resume, dumpCollapsed, getSamples, start, list, execute, version, stop, load, dumpFlat, actions, dumpTraces, status]\n```\n\n#### 查看版本\n\n```bash\nprofiler version\n```\n\n```console\n$ profiler version\nAsync-profiler 1.6 built on Sep  9 2019\nCopyright 2019 Andrei Pangin\n```\n\n#### 启动profiler\n\n```bash\nprofiler start -e itimer\n```\n\n```\n$ profiler start -e itimer\nStarted [itimer] profiling\n```\n\n> 默认情况下，生成的是cpu的火焰图，即event为`cpu`。可以用`--event`参数来指定。 因为katacoda环境不支持perf_events，所以这里使用`-e itimer`参数指定event为itimer\n\n#### 获取已采集的sample的数量\n\n```bash\nprofiler getSamples\n```\n\n```\n$ profiler getSamples\n23\n```\n\n#### 查看profiler状态\n\n```bash\nprofiler status\n```\n\n```console\n$ profiler status\n[itimer] profiling is running for 4 seconds\n```\n\n可以查看当前profiler在采样哪种`event`和采样时间。\n\n#### 停止profiler\n\n##### 生成svg格式结果\n\n```bash\nprofiler stop\n```\n\n```\n$ profiler stop\nprofiler output file: /tmp/demo/arthas-output/20191125-135546.svg\nOK\n```\n\n默认情况下，生成的结果保存到应用的`工作目录`下的`arthas-output`目录。可以通过 `--file`参数来指定输出结果路径。比如：\n\n```bash\nprofiler stop --file /tmp/output.svg\n```\n\n```console\n$ profiler stop --file /tmp/output.svg\nprofiler output file: /tmp/output.svg\nOK\n```\n\n##### 生成html格式结果\n\n默认情况下，结果文件是`svg`格式，如果想生成`html`格式，可以用`--format`参数指定：\n\n```bash\nprofiler stop --format html\n```\n\n```console\n$ profiler stop --format html\nprofiler output file: /tmp/test/arthas-output/20191125-143329.html\nOK\n```\n\n或者在`--file`参数里用文件名指名格式。比如`--file /tmp/result.html` 。\n\n```bash\nprofiler stop --file /tmp/result.html\n```\n\n#### 通过浏览器查看arthas-output下面的profiler结果\n\n默认情况下，arthas使用8563http端口，则可以打开： 目录下面的profiler结果：\n\n![img](arthas-output.png)\n\n点击可以查看具体的结果：\n\n![img](arthas-output-svg.png)\n\n> 如果是chrome浏览器，可能需要多次刷新。\n\n#### profiler支持的events\n\n```bash\nprofiler list\n```\n\n在不同的平台，不同的OS下面，支持的events各有不同。比如在macos下面：\n\n```console\n$ profiler list\nBasic events:\n  cpu\n  alloc\n  lock\n  wall\n  itimer\n```\n\n在linux下面\n\n```console\n$ profiler list\nBasic events:\n  cpu\n  alloc\n  lock\n  wall\n  itimer\nPerf events:\n  page-faults\n  context-switches\n  cycles\n  instructions\n  cache-references\n  cache-misses\n  branches\n  branch-misses\n  bus-cycles\n  L1-dcache-load-misses\n  LLC-load-misses\n  dTLB-load-misses\n  mem:breakpoint\n  trace:tracepoint\n```\n\n如果遇到OS本身的权限/配置问题，然后缺少部分event，可以参考`async-profiler`本身文档：[async-profiler](https://github.com/jvm-profiling-tools/async-profiler)\n\n可以用`--event`参数指定要采样的事件，比如对`alloc`事件进入采样：\n\n```bash\nprofiler start --event alloc\n```\n\n```console\n$ profiler start --event alloc\n```\n\n#### 恢复采样\n\n```bash\nprofiler resume\n```\n\n```console\n$ profiler resume\nStarted [cpu] profiling\n```\n\n`start`和`resume`的区别是：`start`是新开始采样，`resume`会保留上次`stop`时的数据。\n\n通过执行`profiler getSamples`可以查看samples的数量来验证。\n\n#### 使用`execute`来执行复杂的命令\n\n比如开始采样：\n\n```bash\nprofiler execute 'start,framebuf=5000000'\n```\n\n```console\nprofiler execute 'start,framebuf=5000000'\n```\n\n停止采样，并保存到指定文件里：\n\n```bash\nprofiler execute 'stop,file=/tmp/result.svg'\n```\n\n```console\nprofiler execute 'stop,file=/tmp/result.svg'\n```\n\n具体的格式参考： [arguments.cpp](https://github.com/jvm-profiling-tools/async-profiler/blob/v1.8.1/src/arguments.cpp#L50)\n\n## 更多信息\n\n在“profiler”中，我们演示了了Arthas的profiler命令。如果有更多的技巧或者使用疑问，欢迎在Issue里提出。\n\n- Issues: https://github.com/alibaba/arthas/issues\n- 文档： https://arthas.aliyun.com/doc\n\n如果您在使用Arthas，请让我们知道。您的使用对我们非常重要：[查看](https://github.com/alibaba/arthas/issues/111)\n\n文章拷贝来源：https://start.aliyun.com/course?spm=a2ck6.17690074.0.0.28bc2e7dHTphXs&id=PaiFAkJM","slug":"Java诊断工具Arthas高级命令教程/Arthasprofiler命令","published":1,"updated":"2021-08-07T05:35:07.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cks1cgr6r002ffw5idnbngf27","content":"<!-- toc -->\n\n<ul>\n<li><a href=\"#%E5%90%AF%E5%8A%A8arthas-demo\">启动arthas demo</a></li>\n<li><a href=\"#%E5%90%AF%E5%8A%A8arthas-boot\">启动arthas-boot</a></li>\n<li><a href=\"#profiler%E5%91%BD%E4%BB%A4\">profiler命令</a><ul>\n<li><a href=\"#%E5%8F%82%E6%95%B0%E8%AF%B4%E6%98%8E\">参数说明</a></li>\n<li><a href=\"#%E6%9F%A5%E7%9C%8B%E6%89%80%E6%9C%89%E6%94%AF%E6%8C%81%E7%9A%84action\">查看所有支持的action</a></li>\n<li><a href=\"#%E6%9F%A5%E7%9C%8B%E7%89%88%E6%9C%AC\">查看版本</a></li>\n<li><a href=\"#%E5%90%AF%E5%8A%A8profiler\">启动profiler</a></li>\n<li><a href=\"#%E8%8E%B7%E5%8F%96%E5%B7%B2%E9%87%87%E9%9B%86%E7%9A%84sample%E7%9A%84%E6%95%B0%E9%87%8F\">获取已采集的sample的数量</a></li>\n<li><a href=\"#%E6%9F%A5%E7%9C%8Bprofiler%E7%8A%B6%E6%80%81\">查看profiler状态</a></li>\n<li><a href=\"#%E5%81%9C%E6%AD%A2profiler\">停止profiler</a><ul>\n<li><a href=\"#%E7%94%9F%E6%88%90svg%E6%A0%BC%E5%BC%8F%E7%BB%93%E6%9E%9C\">生成svg格式结果</a></li>\n<li><a href=\"#%E7%94%9F%E6%88%90html%E6%A0%BC%E5%BC%8F%E7%BB%93%E6%9E%9C\">生成html格式结果</a></li>\n</ul>\n</li>\n<li><a href=\"#%E9%80%9A%E8%BF%87%E6%B5%8F%E8%A7%88%E5%99%A8%E6%9F%A5%E7%9C%8Barthas-output%E4%B8%8B%E9%9D%A2%E7%9A%84profiler%E7%BB%93%E6%9E%9C\">通过浏览器查看arthas-output下面的profiler结果</a></li>\n<li><a href=\"#profiler%E6%94%AF%E6%8C%81%E7%9A%84events\">profiler支持的events</a></li>\n<li><a href=\"#%E6%81%A2%E5%A4%8D%E9%87%87%E6%A0%B7\">恢复采样</a></li>\n<li><a href=\"#%E4%BD%BF%E7%94%A8execute%E6%9D%A5%E6%89%A7%E8%A1%8C%E5%A4%8D%E6%9D%82%E7%9A%84%E5%91%BD%E4%BB%A4\">使用<code>execute</code>来执行复杂的命令</a></li>\n</ul>\n</li>\n<li><a href=\"#%E6%9B%B4%E5%A4%9A%E4%BF%A1%E6%81%AF\">更多信息</a></li>\n</ul>\n<!-- tocstop -->\n\n<p><img src=\"/jlynet.github.io/2021/08/07/Java%E8%AF%8A%E6%96%AD%E5%B7%A5%E5%85%B7Arthas%E9%AB%98%E7%BA%A7%E5%91%BD%E4%BB%A4%E6%95%99%E7%A8%8B/Arthasprofiler%E5%91%BD%E4%BB%A4/arthas.png\" alt=\"Arthas\"></p>\n<p><code>Arthas</code> 是Alibaba开源的Java诊断工具，深受开发者喜爱。在线排查问题，无需重启；动态跟踪Java代码；实时监控JVM状态。</p>\n<p><code>Arthas</code> 支持JDK 6+，支持Linux/Mac/Windows，采用命令行交互模式，同时提供丰富的 <code>Tab</code> 自动补全功能，进一步方便进行问题的定位和诊断。</p>\n<p>当你遇到以下类似问题而束手无策时，Arthas可以帮助你解决：</p>\n<ul>\n<li>这个类从哪个 jar 包加载的？为什么会报各种类相关的 Exception？</li>\n<li>我改的代码为什么没有执行到？难道是我没 commit？分支搞错了？</li>\n<li>遇到问题无法在线上 debug，难道只能通过加日志再重新发布吗？</li>\n<li>线上遇到某个用户的数据处理有问题，但线上同样无法 debug，线下无法重现！</li>\n<li>是否有一个全局视角来查看系统的运行状况？</li>\n<li>有什么办法可以监控到JVM的实时运行状态？</li>\n<li>怎么快速定位应用的热点，生成火焰图？</li>\n</ul>\n<p>本教程会以一个简单的应用为例，演示profiler命令。</p>\n<ul>\n<li>Github: <a href=\"https://github.com/alibaba/arthas\">https://github.com/alibaba/arthas</a></li>\n<li>文档: <a href=\"https://arthas.aliyun.com/doc/\">https://arthas.aliyun.com/doc/</a></li>\n</ul>\n<h2><span id=\"启动arthas-demo\">启动arthas demo</span></h2><p>下载<code>arthas-demo.jar</code>，再用<code>java -jar</code>命令启动：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wget https://arthas.aliyun.com/arthas-demo.jar;java -jar arthas-demo.jar</span><br></pre></td></tr></table></figure>\n\n<p><code>arthas-demo</code>是一个很简单的程序，它随机生成整数，再执行因式分解，把结果打印出来。如果生成的随机数是负数，则会打印提示信息。</p>\n<h2><span id=\"启动arthas-boot\">启动arthas-boot</span></h2><p>在新的<code>Terminal 2</code>里，下载<code>arthas-boot.jar</code>，再用<code>java -jar</code>命令启动：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wget https://arthas.aliyun.com/arthas-boot.jar;java -jar arthas-boot.jar</span><br></pre></td></tr></table></figure>\n\n<p><code>arthas-boot</code>是<code>Arthas</code>的启动程序，它启动后，会列出所有的Java进程，用户可以选择需要诊断的目标进程。</p>\n<p>选择第一个进程，输入 <code>1</code> ，再<code>Enter/回车</code>：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1</span><br></pre></td></tr></table></figure>\n\n<p>Attach成功之后，会打印Arthas LOGO。输入 <code>help</code> 可以获取到更多的帮助信息。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">help</span></span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/jlynet.github.io/2021/08/07/Java%E8%AF%8A%E6%96%AD%E5%B7%A5%E5%85%B7Arthas%E9%AB%98%E7%BA%A7%E5%91%BD%E4%BB%A4%E6%95%99%E7%A8%8B/Arthasprofiler%E5%91%BD%E4%BB%A4/O1CN01HzatXZ1RgccrlT90M_!!6000000002141-2-tps-529-244.png\" alt=\"Arthas Boot\"></p>\n<h2><span id=\"profiler命令\">profiler命令</span></h2><blockquote>\n<p>使用<a href=\"https://github.com/jvm-profiling-tools/async-profiler\">async-profiler</a>生成火焰图</p>\n</blockquote>\n<p><code>profiler</code> 命令支持生成应用热点的火焰图。本质上是通过不断的采样，然后把收集到的采样结果生成火焰图。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">profiler` 命令基本运行结构是 `profiler action [actionArg]</span><br></pre></td></tr></table></figure>\n\n<h4><span id=\"参数说明\">参数说明</span></h4><table>\n<thead>\n<tr>\n<th>参数名称</th>\n<th>参数说明</th>\n</tr>\n</thead>\n<tbody><tr>\n<td><em>action</em></td>\n<td>要执行的操作</td>\n</tr>\n<tr>\n<td><em>actionArg</em></td>\n<td>属性名模式</td>\n</tr>\n<tr>\n<td>[i:]</td>\n<td>采样间隔（单位：ns）（默认值：10’000’000，即10 ms）</td>\n</tr>\n<tr>\n<td>[f:]</td>\n<td>将输出转储到指定路径</td>\n</tr>\n<tr>\n<td>[d:]</td>\n<td>运行评测指定秒</td>\n</tr>\n<tr>\n<td>[e:]</td>\n<td>要跟踪哪个事件（cpu, alloc, lock, cache-misses等），默认是cpu</td>\n</tr>\n</tbody></table>\n<h4><span id=\"查看所有支持的action\">查看所有支持的action</span></h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">profiler actions</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight console\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> profiler actions</span></span><br><span class=\"line\">Supported Actions: [resume, dumpCollapsed, getSamples, start, list, execute, version, stop, load, dumpFlat, actions, dumpTraces, status]</span><br></pre></td></tr></table></figure>\n\n<h4><span id=\"查看版本\">查看版本</span></h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">profiler version</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight console\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> profiler version</span></span><br><span class=\"line\">Async-profiler 1.6 built on Sep  9 2019</span><br><span class=\"line\">Copyright 2019 Andrei Pangin</span><br></pre></td></tr></table></figure>\n\n<h4><span id=\"启动profiler\">启动profiler</span></h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">profiler start -e itimer</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ profiler start -e itimer</span><br><span class=\"line\">Started [itimer] profiling</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>默认情况下，生成的是cpu的火焰图，即event为<code>cpu</code>。可以用<code>--event</code>参数来指定。 因为katacoda环境不支持perf_events，所以这里使用<code>-e itimer</code>参数指定event为itimer</p>\n</blockquote>\n<h4><span id=\"获取已采集的sample的数量\">获取已采集的sample的数量</span></h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">profiler getSamples</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ profiler getSamples</span><br><span class=\"line\">23</span><br></pre></td></tr></table></figure>\n\n<h4><span id=\"查看profiler状态\">查看profiler状态</span></h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">profiler status</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight console\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> profiler status</span></span><br><span class=\"line\">[itimer] profiling is running for 4 seconds</span><br></pre></td></tr></table></figure>\n\n<p>可以查看当前profiler在采样哪种<code>event</code>和采样时间。</p>\n<h4><span id=\"停止profiler\">停止profiler</span></h4><h5><span id=\"生成svg格式结果\">生成svg格式结果</span></h5><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">profiler stop</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ profiler stop</span><br><span class=\"line\">profiler output file: /tmp/demo/arthas-output/20191125-135546.svg</span><br><span class=\"line\">OK</span><br></pre></td></tr></table></figure>\n\n<p>默认情况下，生成的结果保存到应用的<code>工作目录</code>下的<code>arthas-output</code>目录。可以通过 <code>--file</code>参数来指定输出结果路径。比如：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">profiler stop --file /tmp/output.svg</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight console\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> profiler stop --file /tmp/output.svg</span></span><br><span class=\"line\">profiler output file: /tmp/output.svg</span><br><span class=\"line\">OK</span><br></pre></td></tr></table></figure>\n\n<h5><span id=\"生成html格式结果\">生成html格式结果</span></h5><p>默认情况下，结果文件是<code>svg</code>格式，如果想生成<code>html</code>格式，可以用<code>--format</code>参数指定：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">profiler stop --format html</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight console\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> profiler stop --format html</span></span><br><span class=\"line\">profiler output file: /tmp/test/arthas-output/20191125-143329.html</span><br><span class=\"line\">OK</span><br></pre></td></tr></table></figure>\n\n<p>或者在<code>--file</code>参数里用文件名指名格式。比如<code>--file /tmp/result.html</code> 。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">profiler stop --file /tmp/result.html</span><br></pre></td></tr></table></figure>\n\n<h4><span id=\"通过浏览器查看arthas-output下面的profiler结果\">通过浏览器查看arthas-output下面的profiler结果</span></h4><p>默认情况下，arthas使用8563http端口，则可以打开： 目录下面的profiler结果：</p>\n<p><img src=\"/jlynet.github.io/2021/08/07/Java%E8%AF%8A%E6%96%AD%E5%B7%A5%E5%85%B7Arthas%E9%AB%98%E7%BA%A7%E5%91%BD%E4%BB%A4%E6%95%99%E7%A8%8B/Arthasprofiler%E5%91%BD%E4%BB%A4/arthas-output.png\" alt=\"img\"></p>\n<p>点击可以查看具体的结果：</p>\n<p><img src=\"/jlynet.github.io/2021/08/07/Java%E8%AF%8A%E6%96%AD%E5%B7%A5%E5%85%B7Arthas%E9%AB%98%E7%BA%A7%E5%91%BD%E4%BB%A4%E6%95%99%E7%A8%8B/Arthasprofiler%E5%91%BD%E4%BB%A4/arthas-output-svg.png\" alt=\"img\"></p>\n<blockquote>\n<p>如果是chrome浏览器，可能需要多次刷新。</p>\n</blockquote>\n<h4><span id=\"profiler支持的events\">profiler支持的events</span></h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">profiler list</span><br></pre></td></tr></table></figure>\n\n<p>在不同的平台，不同的OS下面，支持的events各有不同。比如在macos下面：</p>\n<figure class=\"highlight console\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> profiler list</span></span><br><span class=\"line\">Basic events:</span><br><span class=\"line\">  cpu</span><br><span class=\"line\">  alloc</span><br><span class=\"line\">  lock</span><br><span class=\"line\">  wall</span><br><span class=\"line\">  itimer</span><br></pre></td></tr></table></figure>\n\n<p>在linux下面</p>\n<figure class=\"highlight console\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> profiler list</span></span><br><span class=\"line\">Basic events:</span><br><span class=\"line\">  cpu</span><br><span class=\"line\">  alloc</span><br><span class=\"line\">  lock</span><br><span class=\"line\">  wall</span><br><span class=\"line\">  itimer</span><br><span class=\"line\">Perf events:</span><br><span class=\"line\">  page-faults</span><br><span class=\"line\">  context-switches</span><br><span class=\"line\">  cycles</span><br><span class=\"line\">  instructions</span><br><span class=\"line\">  cache-references</span><br><span class=\"line\">  cache-misses</span><br><span class=\"line\">  branches</span><br><span class=\"line\">  branch-misses</span><br><span class=\"line\">  bus-cycles</span><br><span class=\"line\">  L1-dcache-load-misses</span><br><span class=\"line\">  LLC-load-misses</span><br><span class=\"line\">  dTLB-load-misses</span><br><span class=\"line\">  mem:breakpoint</span><br><span class=\"line\">  trace:tracepoint</span><br></pre></td></tr></table></figure>\n\n<p>如果遇到OS本身的权限/配置问题，然后缺少部分event，可以参考<code>async-profiler</code>本身文档：<a href=\"https://github.com/jvm-profiling-tools/async-profiler\">async-profiler</a></p>\n<p>可以用<code>--event</code>参数指定要采样的事件，比如对<code>alloc</code>事件进入采样：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">profiler start --event alloc</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight console\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> profiler start --event alloc</span></span><br></pre></td></tr></table></figure>\n\n<h4><span id=\"恢复采样\">恢复采样</span></h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">profiler resume</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight console\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> profiler resume</span></span><br><span class=\"line\">Started [cpu] profiling</span><br></pre></td></tr></table></figure>\n\n<p><code>start</code>和<code>resume</code>的区别是：<code>start</code>是新开始采样，<code>resume</code>会保留上次<code>stop</code>时的数据。</p>\n<p>通过执行<code>profiler getSamples</code>可以查看samples的数量来验证。</p>\n<h4><span id=\"使用execute来执行复杂的命令\">使用<code>execute</code>来执行复杂的命令</span></h4><p>比如开始采样：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">profiler execute <span class=\"string\">&#x27;start,framebuf=5000000&#x27;</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight console\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">profiler execute &#x27;start,framebuf=5000000&#x27;</span><br></pre></td></tr></table></figure>\n\n<p>停止采样，并保存到指定文件里：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">profiler execute <span class=\"string\">&#x27;stop,file=/tmp/result.svg&#x27;</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight console\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">profiler execute &#x27;stop,file=/tmp/result.svg&#x27;</span><br></pre></td></tr></table></figure>\n\n<p>具体的格式参考： <a href=\"https://github.com/jvm-profiling-tools/async-profiler/blob/v1.8.1/src/arguments.cpp#L50\">arguments.cpp</a></p>\n<h2><span id=\"更多信息\">更多信息</span></h2><p>在“profiler”中，我们演示了了Arthas的profiler命令。如果有更多的技巧或者使用疑问，欢迎在Issue里提出。</p>\n<ul>\n<li>Issues: <a href=\"https://github.com/alibaba/arthas/issues\">https://github.com/alibaba/arthas/issues</a></li>\n<li>文档： <a href=\"https://arthas.aliyun.com/doc\">https://arthas.aliyun.com/doc</a></li>\n</ul>\n<p>如果您在使用Arthas，请让我们知道。您的使用对我们非常重要：<a href=\"https://github.com/alibaba/arthas/issues/111\">查看</a></p>\n<p>文章拷贝来源：<a href=\"https://start.aliyun.com/course?spm=a2ck6.17690074.0.0.28bc2e7dHTphXs&amp;id=PaiFAkJM\">https://start.aliyun.com/course?spm=a2ck6.17690074.0.0.28bc2e7dHTphXs&amp;id=PaiFAkJM</a></p>\n","site":{"data":{}},"excerpt":"","more":"<!-- toc -->\n\n<ul>\n<li><a href=\"#%E5%90%AF%E5%8A%A8arthas-demo\">启动arthas demo</a></li>\n<li><a href=\"#%E5%90%AF%E5%8A%A8arthas-boot\">启动arthas-boot</a></li>\n<li><a href=\"#profiler%E5%91%BD%E4%BB%A4\">profiler命令</a><ul>\n<li><a href=\"#%E5%8F%82%E6%95%B0%E8%AF%B4%E6%98%8E\">参数说明</a></li>\n<li><a href=\"#%E6%9F%A5%E7%9C%8B%E6%89%80%E6%9C%89%E6%94%AF%E6%8C%81%E7%9A%84action\">查看所有支持的action</a></li>\n<li><a href=\"#%E6%9F%A5%E7%9C%8B%E7%89%88%E6%9C%AC\">查看版本</a></li>\n<li><a href=\"#%E5%90%AF%E5%8A%A8profiler\">启动profiler</a></li>\n<li><a href=\"#%E8%8E%B7%E5%8F%96%E5%B7%B2%E9%87%87%E9%9B%86%E7%9A%84sample%E7%9A%84%E6%95%B0%E9%87%8F\">获取已采集的sample的数量</a></li>\n<li><a href=\"#%E6%9F%A5%E7%9C%8Bprofiler%E7%8A%B6%E6%80%81\">查看profiler状态</a></li>\n<li><a href=\"#%E5%81%9C%E6%AD%A2profiler\">停止profiler</a><ul>\n<li><a href=\"#%E7%94%9F%E6%88%90svg%E6%A0%BC%E5%BC%8F%E7%BB%93%E6%9E%9C\">生成svg格式结果</a></li>\n<li><a href=\"#%E7%94%9F%E6%88%90html%E6%A0%BC%E5%BC%8F%E7%BB%93%E6%9E%9C\">生成html格式结果</a></li>\n</ul>\n</li>\n<li><a href=\"#%E9%80%9A%E8%BF%87%E6%B5%8F%E8%A7%88%E5%99%A8%E6%9F%A5%E7%9C%8Barthas-output%E4%B8%8B%E9%9D%A2%E7%9A%84profiler%E7%BB%93%E6%9E%9C\">通过浏览器查看arthas-output下面的profiler结果</a></li>\n<li><a href=\"#profiler%E6%94%AF%E6%8C%81%E7%9A%84events\">profiler支持的events</a></li>\n<li><a href=\"#%E6%81%A2%E5%A4%8D%E9%87%87%E6%A0%B7\">恢复采样</a></li>\n<li><a href=\"#%E4%BD%BF%E7%94%A8execute%E6%9D%A5%E6%89%A7%E8%A1%8C%E5%A4%8D%E6%9D%82%E7%9A%84%E5%91%BD%E4%BB%A4\">使用<code>execute</code>来执行复杂的命令</a></li>\n</ul>\n</li>\n<li><a href=\"#%E6%9B%B4%E5%A4%9A%E4%BF%A1%E6%81%AF\">更多信息</a></li>\n</ul>\n<!-- tocstop -->\n\n<p><img src=\"/jlynet.github.io/2021/08/07/Java%E8%AF%8A%E6%96%AD%E5%B7%A5%E5%85%B7Arthas%E9%AB%98%E7%BA%A7%E5%91%BD%E4%BB%A4%E6%95%99%E7%A8%8B/Arthasprofiler%E5%91%BD%E4%BB%A4/arthas.png\" alt=\"Arthas\"></p>\n<p><code>Arthas</code> 是Alibaba开源的Java诊断工具，深受开发者喜爱。在线排查问题，无需重启；动态跟踪Java代码；实时监控JVM状态。</p>\n<p><code>Arthas</code> 支持JDK 6+，支持Linux/Mac/Windows，采用命令行交互模式，同时提供丰富的 <code>Tab</code> 自动补全功能，进一步方便进行问题的定位和诊断。</p>\n<p>当你遇到以下类似问题而束手无策时，Arthas可以帮助你解决：</p>\n<ul>\n<li>这个类从哪个 jar 包加载的？为什么会报各种类相关的 Exception？</li>\n<li>我改的代码为什么没有执行到？难道是我没 commit？分支搞错了？</li>\n<li>遇到问题无法在线上 debug，难道只能通过加日志再重新发布吗？</li>\n<li>线上遇到某个用户的数据处理有问题，但线上同样无法 debug，线下无法重现！</li>\n<li>是否有一个全局视角来查看系统的运行状况？</li>\n<li>有什么办法可以监控到JVM的实时运行状态？</li>\n<li>怎么快速定位应用的热点，生成火焰图？</li>\n</ul>\n<p>本教程会以一个简单的应用为例，演示profiler命令。</p>\n<ul>\n<li>Github: <a href=\"https://github.com/alibaba/arthas\">https://github.com/alibaba/arthas</a></li>\n<li>文档: <a href=\"https://arthas.aliyun.com/doc/\">https://arthas.aliyun.com/doc/</a></li>\n</ul>\n<h2 id=\"启动arthas-demo\"><a href=\"#启动arthas-demo\" class=\"headerlink\" title=\"启动arthas demo\"></a>启动arthas demo</h2><p>下载<code>arthas-demo.jar</code>，再用<code>java -jar</code>命令启动：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wget https://arthas.aliyun.com/arthas-demo.jar;java -jar arthas-demo.jar</span><br></pre></td></tr></table></figure>\n\n<p><code>arthas-demo</code>是一个很简单的程序，它随机生成整数，再执行因式分解，把结果打印出来。如果生成的随机数是负数，则会打印提示信息。</p>\n<h2 id=\"启动arthas-boot\"><a href=\"#启动arthas-boot\" class=\"headerlink\" title=\"启动arthas-boot\"></a>启动arthas-boot</h2><p>在新的<code>Terminal 2</code>里，下载<code>arthas-boot.jar</code>，再用<code>java -jar</code>命令启动：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wget https://arthas.aliyun.com/arthas-boot.jar;java -jar arthas-boot.jar</span><br></pre></td></tr></table></figure>\n\n<p><code>arthas-boot</code>是<code>Arthas</code>的启动程序，它启动后，会列出所有的Java进程，用户可以选择需要诊断的目标进程。</p>\n<p>选择第一个进程，输入 <code>1</code> ，再<code>Enter/回车</code>：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1</span><br></pre></td></tr></table></figure>\n\n<p>Attach成功之后，会打印Arthas LOGO。输入 <code>help</code> 可以获取到更多的帮助信息。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">help</span></span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/jlynet.github.io/2021/08/07/Java%E8%AF%8A%E6%96%AD%E5%B7%A5%E5%85%B7Arthas%E9%AB%98%E7%BA%A7%E5%91%BD%E4%BB%A4%E6%95%99%E7%A8%8B/Arthasprofiler%E5%91%BD%E4%BB%A4/O1CN01HzatXZ1RgccrlT90M_!!6000000002141-2-tps-529-244.png\" alt=\"Arthas Boot\"></p>\n<h2 id=\"profiler命令\"><a href=\"#profiler命令\" class=\"headerlink\" title=\"profiler命令\"></a>profiler命令</h2><blockquote>\n<p>使用<a href=\"https://github.com/jvm-profiling-tools/async-profiler\">async-profiler</a>生成火焰图</p>\n</blockquote>\n<p><code>profiler</code> 命令支持生成应用热点的火焰图。本质上是通过不断的采样，然后把收集到的采样结果生成火焰图。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">profiler` 命令基本运行结构是 `profiler action [actionArg]</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"参数说明\"><a href=\"#参数说明\" class=\"headerlink\" title=\"参数说明\"></a>参数说明</h4><table>\n<thead>\n<tr>\n<th>参数名称</th>\n<th>参数说明</th>\n</tr>\n</thead>\n<tbody><tr>\n<td><em>action</em></td>\n<td>要执行的操作</td>\n</tr>\n<tr>\n<td><em>actionArg</em></td>\n<td>属性名模式</td>\n</tr>\n<tr>\n<td>[i:]</td>\n<td>采样间隔（单位：ns）（默认值：10’000’000，即10 ms）</td>\n</tr>\n<tr>\n<td>[f:]</td>\n<td>将输出转储到指定路径</td>\n</tr>\n<tr>\n<td>[d:]</td>\n<td>运行评测指定秒</td>\n</tr>\n<tr>\n<td>[e:]</td>\n<td>要跟踪哪个事件（cpu, alloc, lock, cache-misses等），默认是cpu</td>\n</tr>\n</tbody></table>\n<h4 id=\"查看所有支持的action\"><a href=\"#查看所有支持的action\" class=\"headerlink\" title=\"查看所有支持的action\"></a>查看所有支持的action</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">profiler actions</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight console\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> profiler actions</span></span><br><span class=\"line\">Supported Actions: [resume, dumpCollapsed, getSamples, start, list, execute, version, stop, load, dumpFlat, actions, dumpTraces, status]</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"查看版本\"><a href=\"#查看版本\" class=\"headerlink\" title=\"查看版本\"></a>查看版本</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">profiler version</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight console\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> profiler version</span></span><br><span class=\"line\">Async-profiler 1.6 built on Sep  9 2019</span><br><span class=\"line\">Copyright 2019 Andrei Pangin</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"启动profiler\"><a href=\"#启动profiler\" class=\"headerlink\" title=\"启动profiler\"></a>启动profiler</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">profiler start -e itimer</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ profiler start -e itimer</span><br><span class=\"line\">Started [itimer] profiling</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>默认情况下，生成的是cpu的火焰图，即event为<code>cpu</code>。可以用<code>--event</code>参数来指定。 因为katacoda环境不支持perf_events，所以这里使用<code>-e itimer</code>参数指定event为itimer</p>\n</blockquote>\n<h4 id=\"获取已采集的sample的数量\"><a href=\"#获取已采集的sample的数量\" class=\"headerlink\" title=\"获取已采集的sample的数量\"></a>获取已采集的sample的数量</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">profiler getSamples</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ profiler getSamples</span><br><span class=\"line\">23</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"查看profiler状态\"><a href=\"#查看profiler状态\" class=\"headerlink\" title=\"查看profiler状态\"></a>查看profiler状态</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">profiler status</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight console\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> profiler status</span></span><br><span class=\"line\">[itimer] profiling is running for 4 seconds</span><br></pre></td></tr></table></figure>\n\n<p>可以查看当前profiler在采样哪种<code>event</code>和采样时间。</p>\n<h4 id=\"停止profiler\"><a href=\"#停止profiler\" class=\"headerlink\" title=\"停止profiler\"></a>停止profiler</h4><h5 id=\"生成svg格式结果\"><a href=\"#生成svg格式结果\" class=\"headerlink\" title=\"生成svg格式结果\"></a>生成svg格式结果</h5><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">profiler stop</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ profiler stop</span><br><span class=\"line\">profiler output file: /tmp/demo/arthas-output/20191125-135546.svg</span><br><span class=\"line\">OK</span><br></pre></td></tr></table></figure>\n\n<p>默认情况下，生成的结果保存到应用的<code>工作目录</code>下的<code>arthas-output</code>目录。可以通过 <code>--file</code>参数来指定输出结果路径。比如：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">profiler stop --file /tmp/output.svg</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight console\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> profiler stop --file /tmp/output.svg</span></span><br><span class=\"line\">profiler output file: /tmp/output.svg</span><br><span class=\"line\">OK</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"生成html格式结果\"><a href=\"#生成html格式结果\" class=\"headerlink\" title=\"生成html格式结果\"></a>生成html格式结果</h5><p>默认情况下，结果文件是<code>svg</code>格式，如果想生成<code>html</code>格式，可以用<code>--format</code>参数指定：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">profiler stop --format html</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight console\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> profiler stop --format html</span></span><br><span class=\"line\">profiler output file: /tmp/test/arthas-output/20191125-143329.html</span><br><span class=\"line\">OK</span><br></pre></td></tr></table></figure>\n\n<p>或者在<code>--file</code>参数里用文件名指名格式。比如<code>--file /tmp/result.html</code> 。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">profiler stop --file /tmp/result.html</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"通过浏览器查看arthas-output下面的profiler结果\"><a href=\"#通过浏览器查看arthas-output下面的profiler结果\" class=\"headerlink\" title=\"通过浏览器查看arthas-output下面的profiler结果\"></a>通过浏览器查看arthas-output下面的profiler结果</h4><p>默认情况下，arthas使用8563http端口，则可以打开： 目录下面的profiler结果：</p>\n<p><img src=\"/jlynet.github.io/2021/08/07/Java%E8%AF%8A%E6%96%AD%E5%B7%A5%E5%85%B7Arthas%E9%AB%98%E7%BA%A7%E5%91%BD%E4%BB%A4%E6%95%99%E7%A8%8B/Arthasprofiler%E5%91%BD%E4%BB%A4/arthas-output.png\" alt=\"img\"></p>\n<p>点击可以查看具体的结果：</p>\n<p><img src=\"/jlynet.github.io/2021/08/07/Java%E8%AF%8A%E6%96%AD%E5%B7%A5%E5%85%B7Arthas%E9%AB%98%E7%BA%A7%E5%91%BD%E4%BB%A4%E6%95%99%E7%A8%8B/Arthasprofiler%E5%91%BD%E4%BB%A4/arthas-output-svg.png\" alt=\"img\"></p>\n<blockquote>\n<p>如果是chrome浏览器，可能需要多次刷新。</p>\n</blockquote>\n<h4 id=\"profiler支持的events\"><a href=\"#profiler支持的events\" class=\"headerlink\" title=\"profiler支持的events\"></a>profiler支持的events</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">profiler list</span><br></pre></td></tr></table></figure>\n\n<p>在不同的平台，不同的OS下面，支持的events各有不同。比如在macos下面：</p>\n<figure class=\"highlight console\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> profiler list</span></span><br><span class=\"line\">Basic events:</span><br><span class=\"line\">  cpu</span><br><span class=\"line\">  alloc</span><br><span class=\"line\">  lock</span><br><span class=\"line\">  wall</span><br><span class=\"line\">  itimer</span><br></pre></td></tr></table></figure>\n\n<p>在linux下面</p>\n<figure class=\"highlight console\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> profiler list</span></span><br><span class=\"line\">Basic events:</span><br><span class=\"line\">  cpu</span><br><span class=\"line\">  alloc</span><br><span class=\"line\">  lock</span><br><span class=\"line\">  wall</span><br><span class=\"line\">  itimer</span><br><span class=\"line\">Perf events:</span><br><span class=\"line\">  page-faults</span><br><span class=\"line\">  context-switches</span><br><span class=\"line\">  cycles</span><br><span class=\"line\">  instructions</span><br><span class=\"line\">  cache-references</span><br><span class=\"line\">  cache-misses</span><br><span class=\"line\">  branches</span><br><span class=\"line\">  branch-misses</span><br><span class=\"line\">  bus-cycles</span><br><span class=\"line\">  L1-dcache-load-misses</span><br><span class=\"line\">  LLC-load-misses</span><br><span class=\"line\">  dTLB-load-misses</span><br><span class=\"line\">  mem:breakpoint</span><br><span class=\"line\">  trace:tracepoint</span><br></pre></td></tr></table></figure>\n\n<p>如果遇到OS本身的权限/配置问题，然后缺少部分event，可以参考<code>async-profiler</code>本身文档：<a href=\"https://github.com/jvm-profiling-tools/async-profiler\">async-profiler</a></p>\n<p>可以用<code>--event</code>参数指定要采样的事件，比如对<code>alloc</code>事件进入采样：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">profiler start --event alloc</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight console\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> profiler start --event alloc</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"恢复采样\"><a href=\"#恢复采样\" class=\"headerlink\" title=\"恢复采样\"></a>恢复采样</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">profiler resume</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight console\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> profiler resume</span></span><br><span class=\"line\">Started [cpu] profiling</span><br></pre></td></tr></table></figure>\n\n<p><code>start</code>和<code>resume</code>的区别是：<code>start</code>是新开始采样，<code>resume</code>会保留上次<code>stop</code>时的数据。</p>\n<p>通过执行<code>profiler getSamples</code>可以查看samples的数量来验证。</p>\n<h4 id=\"使用execute来执行复杂的命令\"><a href=\"#使用execute来执行复杂的命令\" class=\"headerlink\" title=\"使用execute来执行复杂的命令\"></a>使用<code>execute</code>来执行复杂的命令</h4><p>比如开始采样：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">profiler execute <span class=\"string\">&#x27;start,framebuf=5000000&#x27;</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight console\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">profiler execute &#x27;start,framebuf=5000000&#x27;</span><br></pre></td></tr></table></figure>\n\n<p>停止采样，并保存到指定文件里：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">profiler execute <span class=\"string\">&#x27;stop,file=/tmp/result.svg&#x27;</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight console\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">profiler execute &#x27;stop,file=/tmp/result.svg&#x27;</span><br></pre></td></tr></table></figure>\n\n<p>具体的格式参考： <a href=\"https://github.com/jvm-profiling-tools/async-profiler/blob/v1.8.1/src/arguments.cpp#L50\">arguments.cpp</a></p>\n<h2 id=\"更多信息\"><a href=\"#更多信息\" class=\"headerlink\" title=\"更多信息\"></a>更多信息</h2><p>在“profiler”中，我们演示了了Arthas的profiler命令。如果有更多的技巧或者使用疑问，欢迎在Issue里提出。</p>\n<ul>\n<li>Issues: <a href=\"https://github.com/alibaba/arthas/issues\">https://github.com/alibaba/arthas/issues</a></li>\n<li>文档： <a href=\"https://arthas.aliyun.com/doc\">https://arthas.aliyun.com/doc</a></li>\n</ul>\n<p>如果您在使用Arthas，请让我们知道。您的使用对我们非常重要：<a href=\"https://github.com/alibaba/arthas/issues/111\">查看</a></p>\n<p>文章拷贝来源：<a href=\"https://start.aliyun.com/course?spm=a2ck6.17690074.0.0.28bc2e7dHTphXs&amp;id=PaiFAkJM\">https://start.aliyun.com/course?spm=a2ck6.17690074.0.0.28bc2e7dHTphXs&amp;id=PaiFAkJM</a></p>\n"},{"title":"Arthas sc命令","date":"2021-08-07T01:51:42.000Z","_content":"\n<!-- toc -->\n\n![Arthas](arthas.png)\n\n`Arthas` 是Alibaba开源的Java诊断工具，深受开发者喜爱。在线排查问题，无需重启；动态跟踪Java代码；实时监控JVM状态。\n\n`Arthas` 支持JDK 6+，支持Linux/Mac/Windows，采用命令行交互模式，同时提供丰富的 `Tab` 自动补全功能，进一步方便进行问题的定位和诊断。\n\n当你遇到以下类似问题而束手无策时，Arthas可以帮助你解决：\n\n- 这个类从哪个 jar 包加载的？为什么会报各种类相关的 Exception？\n- 我改的代码为什么没有执行到？难道是我没 commit？分支搞错了？\n- 遇到问题无法在线上 debug，难道只能通过加日志再重新发布吗？\n- 线上遇到某个用户的数据处理有问题，但线上同样无法 debug，线下无法重现！\n- 是否有一个全局视角来查看系统的运行状况？\n- 有什么办法可以监控到JVM的实时运行状态？\n- 怎么快速定位应用的热点，生成火焰图？\n\n本教程会以一个简单的应用为例，演示sc命令。\n\n- Github: https://github.com/alibaba/arthas\n- 文档: https://arthas.aliyun.com/doc/\n\n## 启动arthas demo\n\n下载`arthas-demo.jar`，再用`java -jar`命令启动：\n\n```bash\nwget https://arthas.aliyun.com/arthas-demo.jar;java -jar arthas-demo.jar\n```\n\n`arthas-demo`是一个很简单的程序，它随机生成整数，再执行因式分解，把结果打印出来。如果生成的随机数是负数，则会打印提示信息。\n\n## 启动arthas-boot\n\n在新的`Terminal 2`里，下载`arthas-boot.jar`，再用`java -jar`命令启动：\n\n```bash\nwget https://arthas.aliyun.com/arthas-boot.jar;java -jar arthas-boot.jar\n```\n\n`arthas-boot`是`Arthas`的启动程序，它启动后，会列出所有的Java进程，用户可以选择需要诊断的目标进程。\n\n选择第一个进程，输入 `1` ，再`Enter/回车`：\n\n```bash\n1\n```\n\nAttach成功之后，会打印Arthas LOGO。输入 `help` 可以获取到更多的帮助信息。\n\n```bash\nhelp\n```\n\n![Arthas Boot](O1CN01HzatXZ1RgccrlT90M_!!6000000002141-2-tps-529-244.png)\n\n## sc命令\n\n> 查看JVM已加载的类信息\n\n“Search-Class” 的简写，这个命令能搜索出所有已经加载到 JVM 中的 Class 信息，这个命令支持的参数有 `[d]`、`[E]`、`[f]` 和 `[x:]`。\n\n## 参数说明\n\n#### 参数说明\n\n| 参数名称              | 参数说明                                                     |\n| --------------------- | ------------------------------------------------------------ |\n| *class-pattern*       | 类名表达式匹配                                               |\n| *method-pattern*      | 方法名表达式匹配                                             |\n| [d]                   | 输出当前类的详细信息，包括这个类所加载的原始文件来源、类的声明、加载的ClassLoader等详细信息。 如果一个类被多个ClassLoader所加载，则会出现多次 |\n| [E]                   | 开启正则表达式匹配，默认为通配符匹配                         |\n| [f]                   | 输出当前类的成员变量信息（需要配合参数-d一起使用）           |\n| [x:]                  | 指定输出静态变量时属性的遍历深度，默认为 0，即直接使用 `toString` 输出 |\n| `[c:]`                | 指定class的 ClassLoader 的 hashcode                          |\n| `[classLoaderClass:]` | 指定执行表达式的 ClassLoader 的 class name                   |\n| `[n:]`                | 具有详细信息的匹配类的最大数量（默认为100）                  |\n\n> class-pattern支持全限定名，如com.taobao.test.AAA，也支持com/taobao/test/AAA这样的格式，这样，我们从异常堆栈里面把类名拷贝过来的时候，不需要在手动把`/`替换为`.`啦。\n>\n> sc 默认开启了子类匹配功能，也就是说所有当前类的子类也会被搜索出来，想要精确的匹配，请打开`options disable-sub-class true`开关\n\n#### 使用参考\n\n- 模糊搜索\n\n  `sc demo.*`\n\n```bash\nsc demo.*\n```\n\n```console\n  $ sc demo.*\n  demo.MathGame\n  Affect(row-cnt:1) cost in 55 ms.\n```\n\n- 打印类的详细信息\n\n  `sc -d demo.MathGame`\n\n```bash\nsc -d demo.MathGame\n```\n\n```console\n  $ sc -d demo.MathGame\n  class-info        demo.MathGame\n  code-source       /private/tmp/arthas-demo.jar\n  name              demo.MathGame\n  isInterface       false\n  isAnnotation      false\n  isEnum            false\n  isAnonymousClass  false\n  isArray           false\n  isLocalClass      false\n  isMemberClass     false\n  isPrimitive       false\n  isSynthetic       false\n  simple-name       MathGame\n  modifier          public\n  annotation\n  interfaces\n  super-class       +-java.lang.Object\n  class-loader      +-sun.misc.Launcher$AppClassLoader@3d4eac69\n                      +-sun.misc.Launcher$ExtClassLoader@66350f69\n  classLoaderHash   3d4eac69\n\n  Affect(row-cnt:1) cost in 875 ms.\n```\n\n- 指定classLoader\n\n注意hashcode是变化的，需要先查看当前的ClassLoader信息，提取对应ClassLoader的hashcode。\n\n如果你使用`-c`，你需要手动输入hashcode：`-c <hashcode>`\n\n```console\n$ sc -c 3d4eac69 -d demo*\n```\n\n对于只有唯一实例的ClassLoader可以通过`--classLoaderClass`指定class name，使用起来更加方便：\n\n```bash\nsc --classLoaderClass sun.misc.Launcher$AppClassLoader -d demo*\n```\n\n- 注: 这里classLoaderClass 在 java 8 是 sun.misc.Launcher$AppClassLoader，而java 11的classloader是jdk.internal.loader.ClassLoaders$AppClassLoader，katacoda目前环境是java8。\n\n`--classLoaderClass` 的值是ClassLoader的类名，只有匹配到唯一的ClassLoader实例时才能工作，目的是方便输入通用命令，而`-c <hashcode>`是动态变化的。\n\n- 打印出类的Field信息\n\n  `sc -d -f demo.MathGame`\n\n```bash\nsc -d -f demo.MathGame\n```\n\n```console\n  $ sc -d -f demo.MathGame\n  class-info        demo.MathGame\n  code-source       /private/tmp/arthas-demo.jar\n  name              demo.MathGame\n  isInterface       false\n  isAnnotation      false\n  isEnum            false\n  isAnonymousClass  false\n  isArray           false\n  isLocalClass      false\n  isMemberClass     false\n  isPrimitive       false\n  isSynthetic       false\n  simple-name       MathGame\n  modifier          public\n  annotation\n  interfaces\n  super-class       +-java.lang.Object\n  class-loader      +-sun.misc.Launcher$AppClassLoader@3d4eac69\n                      +-sun.misc.Launcher$ExtClassLoader@66350f69\n  classLoaderHash   3d4eac69\n  fields            modifierprivate,static\n                    type    java.util.Random\n                    name    random\n                    value   java.util.Random@522b4\n                            08a\n\n                    modifierprivate\n                    type    int\n                    name    illegalArgumentCount\n  Affect(row-cnt:1) cost in 19 ms.\n```\n\n## 更多信息\n\n在“sc”中，我们演示了了Arthas的sc命令。如果有更多的技巧或者使用疑问，欢迎在Issue里提出。\n\n- Issues: https://github.com/alibaba/arthas/issues\n- 文档： https://arthas.aliyun.com/doc\n\n如果您在使用Arthas，请让我们知道。您的使用对我们非常重要：[查看](https://github.com/alibaba/arthas/issues/111)\n\n文章拷贝来源：https://start.aliyun.com/course?spm=a2ck6.17690074.0.0.28bc2e7dHTphXs&id=PaiFAkJM","source":"_posts/Java诊断工具Arthas高级命令教程/Arthassc命令.md","raw":"---\ntitle: Arthas sc命令\ndate: 2021-08-07 09:51:42\ntags: ['Java 诊断工具 Arthas 高级命令教程']\n---\n\n<!-- toc -->\n\n![Arthas](arthas.png)\n\n`Arthas` 是Alibaba开源的Java诊断工具，深受开发者喜爱。在线排查问题，无需重启；动态跟踪Java代码；实时监控JVM状态。\n\n`Arthas` 支持JDK 6+，支持Linux/Mac/Windows，采用命令行交互模式，同时提供丰富的 `Tab` 自动补全功能，进一步方便进行问题的定位和诊断。\n\n当你遇到以下类似问题而束手无策时，Arthas可以帮助你解决：\n\n- 这个类从哪个 jar 包加载的？为什么会报各种类相关的 Exception？\n- 我改的代码为什么没有执行到？难道是我没 commit？分支搞错了？\n- 遇到问题无法在线上 debug，难道只能通过加日志再重新发布吗？\n- 线上遇到某个用户的数据处理有问题，但线上同样无法 debug，线下无法重现！\n- 是否有一个全局视角来查看系统的运行状况？\n- 有什么办法可以监控到JVM的实时运行状态？\n- 怎么快速定位应用的热点，生成火焰图？\n\n本教程会以一个简单的应用为例，演示sc命令。\n\n- Github: https://github.com/alibaba/arthas\n- 文档: https://arthas.aliyun.com/doc/\n\n## 启动arthas demo\n\n下载`arthas-demo.jar`，再用`java -jar`命令启动：\n\n```bash\nwget https://arthas.aliyun.com/arthas-demo.jar;java -jar arthas-demo.jar\n```\n\n`arthas-demo`是一个很简单的程序，它随机生成整数，再执行因式分解，把结果打印出来。如果生成的随机数是负数，则会打印提示信息。\n\n## 启动arthas-boot\n\n在新的`Terminal 2`里，下载`arthas-boot.jar`，再用`java -jar`命令启动：\n\n```bash\nwget https://arthas.aliyun.com/arthas-boot.jar;java -jar arthas-boot.jar\n```\n\n`arthas-boot`是`Arthas`的启动程序，它启动后，会列出所有的Java进程，用户可以选择需要诊断的目标进程。\n\n选择第一个进程，输入 `1` ，再`Enter/回车`：\n\n```bash\n1\n```\n\nAttach成功之后，会打印Arthas LOGO。输入 `help` 可以获取到更多的帮助信息。\n\n```bash\nhelp\n```\n\n![Arthas Boot](O1CN01HzatXZ1RgccrlT90M_!!6000000002141-2-tps-529-244.png)\n\n## sc命令\n\n> 查看JVM已加载的类信息\n\n“Search-Class” 的简写，这个命令能搜索出所有已经加载到 JVM 中的 Class 信息，这个命令支持的参数有 `[d]`、`[E]`、`[f]` 和 `[x:]`。\n\n## 参数说明\n\n#### 参数说明\n\n| 参数名称              | 参数说明                                                     |\n| --------------------- | ------------------------------------------------------------ |\n| *class-pattern*       | 类名表达式匹配                                               |\n| *method-pattern*      | 方法名表达式匹配                                             |\n| [d]                   | 输出当前类的详细信息，包括这个类所加载的原始文件来源、类的声明、加载的ClassLoader等详细信息。 如果一个类被多个ClassLoader所加载，则会出现多次 |\n| [E]                   | 开启正则表达式匹配，默认为通配符匹配                         |\n| [f]                   | 输出当前类的成员变量信息（需要配合参数-d一起使用）           |\n| [x:]                  | 指定输出静态变量时属性的遍历深度，默认为 0，即直接使用 `toString` 输出 |\n| `[c:]`                | 指定class的 ClassLoader 的 hashcode                          |\n| `[classLoaderClass:]` | 指定执行表达式的 ClassLoader 的 class name                   |\n| `[n:]`                | 具有详细信息的匹配类的最大数量（默认为100）                  |\n\n> class-pattern支持全限定名，如com.taobao.test.AAA，也支持com/taobao/test/AAA这样的格式，这样，我们从异常堆栈里面把类名拷贝过来的时候，不需要在手动把`/`替换为`.`啦。\n>\n> sc 默认开启了子类匹配功能，也就是说所有当前类的子类也会被搜索出来，想要精确的匹配，请打开`options disable-sub-class true`开关\n\n#### 使用参考\n\n- 模糊搜索\n\n  `sc demo.*`\n\n```bash\nsc demo.*\n```\n\n```console\n  $ sc demo.*\n  demo.MathGame\n  Affect(row-cnt:1) cost in 55 ms.\n```\n\n- 打印类的详细信息\n\n  `sc -d demo.MathGame`\n\n```bash\nsc -d demo.MathGame\n```\n\n```console\n  $ sc -d demo.MathGame\n  class-info        demo.MathGame\n  code-source       /private/tmp/arthas-demo.jar\n  name              demo.MathGame\n  isInterface       false\n  isAnnotation      false\n  isEnum            false\n  isAnonymousClass  false\n  isArray           false\n  isLocalClass      false\n  isMemberClass     false\n  isPrimitive       false\n  isSynthetic       false\n  simple-name       MathGame\n  modifier          public\n  annotation\n  interfaces\n  super-class       +-java.lang.Object\n  class-loader      +-sun.misc.Launcher$AppClassLoader@3d4eac69\n                      +-sun.misc.Launcher$ExtClassLoader@66350f69\n  classLoaderHash   3d4eac69\n\n  Affect(row-cnt:1) cost in 875 ms.\n```\n\n- 指定classLoader\n\n注意hashcode是变化的，需要先查看当前的ClassLoader信息，提取对应ClassLoader的hashcode。\n\n如果你使用`-c`，你需要手动输入hashcode：`-c <hashcode>`\n\n```console\n$ sc -c 3d4eac69 -d demo*\n```\n\n对于只有唯一实例的ClassLoader可以通过`--classLoaderClass`指定class name，使用起来更加方便：\n\n```bash\nsc --classLoaderClass sun.misc.Launcher$AppClassLoader -d demo*\n```\n\n- 注: 这里classLoaderClass 在 java 8 是 sun.misc.Launcher$AppClassLoader，而java 11的classloader是jdk.internal.loader.ClassLoaders$AppClassLoader，katacoda目前环境是java8。\n\n`--classLoaderClass` 的值是ClassLoader的类名，只有匹配到唯一的ClassLoader实例时才能工作，目的是方便输入通用命令，而`-c <hashcode>`是动态变化的。\n\n- 打印出类的Field信息\n\n  `sc -d -f demo.MathGame`\n\n```bash\nsc -d -f demo.MathGame\n```\n\n```console\n  $ sc -d -f demo.MathGame\n  class-info        demo.MathGame\n  code-source       /private/tmp/arthas-demo.jar\n  name              demo.MathGame\n  isInterface       false\n  isAnnotation      false\n  isEnum            false\n  isAnonymousClass  false\n  isArray           false\n  isLocalClass      false\n  isMemberClass     false\n  isPrimitive       false\n  isSynthetic       false\n  simple-name       MathGame\n  modifier          public\n  annotation\n  interfaces\n  super-class       +-java.lang.Object\n  class-loader      +-sun.misc.Launcher$AppClassLoader@3d4eac69\n                      +-sun.misc.Launcher$ExtClassLoader@66350f69\n  classLoaderHash   3d4eac69\n  fields            modifierprivate,static\n                    type    java.util.Random\n                    name    random\n                    value   java.util.Random@522b4\n                            08a\n\n                    modifierprivate\n                    type    int\n                    name    illegalArgumentCount\n  Affect(row-cnt:1) cost in 19 ms.\n```\n\n## 更多信息\n\n在“sc”中，我们演示了了Arthas的sc命令。如果有更多的技巧或者使用疑问，欢迎在Issue里提出。\n\n- Issues: https://github.com/alibaba/arthas/issues\n- 文档： https://arthas.aliyun.com/doc\n\n如果您在使用Arthas，请让我们知道。您的使用对我们非常重要：[查看](https://github.com/alibaba/arthas/issues/111)\n\n文章拷贝来源：https://start.aliyun.com/course?spm=a2ck6.17690074.0.0.28bc2e7dHTphXs&id=PaiFAkJM","slug":"Java诊断工具Arthas高级命令教程/Arthassc命令","published":1,"updated":"2021-08-07T05:35:11.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cks1cgr6t002hfw5ibxtf2oib","content":"<!-- toc -->\n\n<ul>\n<li><a href=\"#%E5%90%AF%E5%8A%A8arthas-demo\">启动arthas demo</a></li>\n<li><a href=\"#%E5%90%AF%E5%8A%A8arthas-boot\">启动arthas-boot</a></li>\n<li><a href=\"#sc%E5%91%BD%E4%BB%A4\">sc命令</a></li>\n<li><a href=\"#%E5%8F%82%E6%95%B0%E8%AF%B4%E6%98%8E\">参数说明</a><ul>\n<li><a href=\"#%E5%8F%82%E6%95%B0%E8%AF%B4%E6%98%8E-1\">参数说明</a></li>\n<li><a href=\"#%E4%BD%BF%E7%94%A8%E5%8F%82%E8%80%83\">使用参考</a></li>\n</ul>\n</li>\n<li><a href=\"#%E6%9B%B4%E5%A4%9A%E4%BF%A1%E6%81%AF\">更多信息</a></li>\n</ul>\n<!-- tocstop -->\n\n<p><img src=\"/jlynet.github.io/2021/08/07/Java%E8%AF%8A%E6%96%AD%E5%B7%A5%E5%85%B7Arthas%E9%AB%98%E7%BA%A7%E5%91%BD%E4%BB%A4%E6%95%99%E7%A8%8B/Arthassc%E5%91%BD%E4%BB%A4/arthas.png\" alt=\"Arthas\"></p>\n<p><code>Arthas</code> 是Alibaba开源的Java诊断工具，深受开发者喜爱。在线排查问题，无需重启；动态跟踪Java代码；实时监控JVM状态。</p>\n<p><code>Arthas</code> 支持JDK 6+，支持Linux/Mac/Windows，采用命令行交互模式，同时提供丰富的 <code>Tab</code> 自动补全功能，进一步方便进行问题的定位和诊断。</p>\n<p>当你遇到以下类似问题而束手无策时，Arthas可以帮助你解决：</p>\n<ul>\n<li>这个类从哪个 jar 包加载的？为什么会报各种类相关的 Exception？</li>\n<li>我改的代码为什么没有执行到？难道是我没 commit？分支搞错了？</li>\n<li>遇到问题无法在线上 debug，难道只能通过加日志再重新发布吗？</li>\n<li>线上遇到某个用户的数据处理有问题，但线上同样无法 debug，线下无法重现！</li>\n<li>是否有一个全局视角来查看系统的运行状况？</li>\n<li>有什么办法可以监控到JVM的实时运行状态？</li>\n<li>怎么快速定位应用的热点，生成火焰图？</li>\n</ul>\n<p>本教程会以一个简单的应用为例，演示sc命令。</p>\n<ul>\n<li>Github: <a href=\"https://github.com/alibaba/arthas\">https://github.com/alibaba/arthas</a></li>\n<li>文档: <a href=\"https://arthas.aliyun.com/doc/\">https://arthas.aliyun.com/doc/</a></li>\n</ul>\n<h2><span id=\"启动arthas-demo\">启动arthas demo</span></h2><p>下载<code>arthas-demo.jar</code>，再用<code>java -jar</code>命令启动：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wget https://arthas.aliyun.com/arthas-demo.jar;java -jar arthas-demo.jar</span><br></pre></td></tr></table></figure>\n\n<p><code>arthas-demo</code>是一个很简单的程序，它随机生成整数，再执行因式分解，把结果打印出来。如果生成的随机数是负数，则会打印提示信息。</p>\n<h2><span id=\"启动arthas-boot\">启动arthas-boot</span></h2><p>在新的<code>Terminal 2</code>里，下载<code>arthas-boot.jar</code>，再用<code>java -jar</code>命令启动：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wget https://arthas.aliyun.com/arthas-boot.jar;java -jar arthas-boot.jar</span><br></pre></td></tr></table></figure>\n\n<p><code>arthas-boot</code>是<code>Arthas</code>的启动程序，它启动后，会列出所有的Java进程，用户可以选择需要诊断的目标进程。</p>\n<p>选择第一个进程，输入 <code>1</code> ，再<code>Enter/回车</code>：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1</span><br></pre></td></tr></table></figure>\n\n<p>Attach成功之后，会打印Arthas LOGO。输入 <code>help</code> 可以获取到更多的帮助信息。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">help</span></span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/jlynet.github.io/2021/08/07/Java%E8%AF%8A%E6%96%AD%E5%B7%A5%E5%85%B7Arthas%E9%AB%98%E7%BA%A7%E5%91%BD%E4%BB%A4%E6%95%99%E7%A8%8B/Arthassc%E5%91%BD%E4%BB%A4/O1CN01HzatXZ1RgccrlT90M_!!6000000002141-2-tps-529-244.png\" alt=\"Arthas Boot\"></p>\n<h2><span id=\"sc命令\">sc命令</span></h2><blockquote>\n<p>查看JVM已加载的类信息</p>\n</blockquote>\n<p>“Search-Class” 的简写，这个命令能搜索出所有已经加载到 JVM 中的 Class 信息，这个命令支持的参数有 <code>[d]</code>、<code>[E]</code>、<code>[f]</code> 和 <code>[x:]</code>。</p>\n<h2><span id=\"参数说明\">参数说明</span></h2><h4><span id=\"参数说明\">参数说明</span></h4><table>\n<thead>\n<tr>\n<th>参数名称</th>\n<th>参数说明</th>\n</tr>\n</thead>\n<tbody><tr>\n<td><em>class-pattern</em></td>\n<td>类名表达式匹配</td>\n</tr>\n<tr>\n<td><em>method-pattern</em></td>\n<td>方法名表达式匹配</td>\n</tr>\n<tr>\n<td>[d]</td>\n<td>输出当前类的详细信息，包括这个类所加载的原始文件来源、类的声明、加载的ClassLoader等详细信息。 如果一个类被多个ClassLoader所加载，则会出现多次</td>\n</tr>\n<tr>\n<td>[E]</td>\n<td>开启正则表达式匹配，默认为通配符匹配</td>\n</tr>\n<tr>\n<td>[f]</td>\n<td>输出当前类的成员变量信息（需要配合参数-d一起使用）</td>\n</tr>\n<tr>\n<td>[x:]</td>\n<td>指定输出静态变量时属性的遍历深度，默认为 0，即直接使用 <code>toString</code> 输出</td>\n</tr>\n<tr>\n<td><code>[c:]</code></td>\n<td>指定class的 ClassLoader 的 hashcode</td>\n</tr>\n<tr>\n<td><code>[classLoaderClass:]</code></td>\n<td>指定执行表达式的 ClassLoader 的 class name</td>\n</tr>\n<tr>\n<td><code>[n:]</code></td>\n<td>具有详细信息的匹配类的最大数量（默认为100）</td>\n</tr>\n</tbody></table>\n<blockquote>\n<p>class-pattern支持全限定名，如com.taobao.test.AAA，也支持com/taobao/test/AAA这样的格式，这样，我们从异常堆栈里面把类名拷贝过来的时候，不需要在手动把<code>/</code>替换为<code>.</code>啦。</p>\n<p>sc 默认开启了子类匹配功能，也就是说所有当前类的子类也会被搜索出来，想要精确的匹配，请打开<code>options disable-sub-class true</code>开关</p>\n</blockquote>\n<h4><span id=\"使用参考\">使用参考</span></h4><ul>\n<li><p>模糊搜索</p>\n<p><code>sc demo.*</code></p>\n</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sc demo.*</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight console\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> sc demo.*</span></span><br><span class=\"line\">demo.MathGame</span><br><span class=\"line\">Affect(row-cnt:1) cost in 55 ms.</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><p>打印类的详细信息</p>\n<p><code>sc -d demo.MathGame</code></p>\n</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sc -d demo.MathGame</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight console\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> sc -d demo.MathGame</span></span><br><span class=\"line\">class-info        demo.MathGame</span><br><span class=\"line\">code-source       /private/tmp/arthas-demo.jar</span><br><span class=\"line\">name              demo.MathGame</span><br><span class=\"line\">isInterface       false</span><br><span class=\"line\">isAnnotation      false</span><br><span class=\"line\">isEnum            false</span><br><span class=\"line\">isAnonymousClass  false</span><br><span class=\"line\">isArray           false</span><br><span class=\"line\">isLocalClass      false</span><br><span class=\"line\">isMemberClass     false</span><br><span class=\"line\">isPrimitive       false</span><br><span class=\"line\">isSynthetic       false</span><br><span class=\"line\">simple-name       MathGame</span><br><span class=\"line\">modifier          public</span><br><span class=\"line\">annotation</span><br><span class=\"line\">interfaces</span><br><span class=\"line\">super-class       +-java.lang.Object</span><br><span class=\"line\">class-loader      +-sun.misc.Launcher$AppClassLoader@3d4eac69</span><br><span class=\"line\">                    +-sun.misc.Launcher$ExtClassLoader@66350f69</span><br><span class=\"line\">classLoaderHash   3d4eac69</span><br><span class=\"line\"></span><br><span class=\"line\">Affect(row-cnt:1) cost in 875 ms.</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>指定classLoader</li>\n</ul>\n<p>注意hashcode是变化的，需要先查看当前的ClassLoader信息，提取对应ClassLoader的hashcode。</p>\n<p>如果你使用<code>-c</code>，你需要手动输入hashcode：<code>-c &lt;hashcode&gt;</code></p>\n<figure class=\"highlight console\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> sc -c 3d4eac69 -d demo*</span></span><br></pre></td></tr></table></figure>\n\n<p>对于只有唯一实例的ClassLoader可以通过<code>--classLoaderClass</code>指定class name，使用起来更加方便：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sc --classLoaderClass sun.misc.Launcher<span class=\"variable\">$AppClassLoader</span> -d demo*</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>注: 这里classLoaderClass 在 java 8 是 sun.misc.Launcher$AppClassLoader，而java 11的classloader是jdk.internal.loader.ClassLoaders$AppClassLoader，katacoda目前环境是java8。</li>\n</ul>\n<p><code>--classLoaderClass</code> 的值是ClassLoader的类名，只有匹配到唯一的ClassLoader实例时才能工作，目的是方便输入通用命令，而<code>-c &lt;hashcode&gt;</code>是动态变化的。</p>\n<ul>\n<li><p>打印出类的Field信息</p>\n<p><code>sc -d -f demo.MathGame</code></p>\n</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sc -d -f demo.MathGame</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight console\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> sc -d -f demo.MathGame</span></span><br><span class=\"line\">class-info        demo.MathGame</span><br><span class=\"line\">code-source       /private/tmp/arthas-demo.jar</span><br><span class=\"line\">name              demo.MathGame</span><br><span class=\"line\">isInterface       false</span><br><span class=\"line\">isAnnotation      false</span><br><span class=\"line\">isEnum            false</span><br><span class=\"line\">isAnonymousClass  false</span><br><span class=\"line\">isArray           false</span><br><span class=\"line\">isLocalClass      false</span><br><span class=\"line\">isMemberClass     false</span><br><span class=\"line\">isPrimitive       false</span><br><span class=\"line\">isSynthetic       false</span><br><span class=\"line\">simple-name       MathGame</span><br><span class=\"line\">modifier          public</span><br><span class=\"line\">annotation</span><br><span class=\"line\">interfaces</span><br><span class=\"line\">super-class       +-java.lang.Object</span><br><span class=\"line\">class-loader      +-sun.misc.Launcher$AppClassLoader@3d4eac69</span><br><span class=\"line\">                    +-sun.misc.Launcher$ExtClassLoader@66350f69</span><br><span class=\"line\">classLoaderHash   3d4eac69</span><br><span class=\"line\">fields            modifierprivate,static</span><br><span class=\"line\">                  type    java.util.Random</span><br><span class=\"line\">                  name    random</span><br><span class=\"line\">                  value   java.util.Random@522b4</span><br><span class=\"line\">                          08a</span><br><span class=\"line\"></span><br><span class=\"line\">                  modifierprivate</span><br><span class=\"line\">                  type    int</span><br><span class=\"line\">                  name    illegalArgumentCount</span><br><span class=\"line\">Affect(row-cnt:1) cost in 19 ms.</span><br></pre></td></tr></table></figure>\n\n<h2><span id=\"更多信息\">更多信息</span></h2><p>在“sc”中，我们演示了了Arthas的sc命令。如果有更多的技巧或者使用疑问，欢迎在Issue里提出。</p>\n<ul>\n<li>Issues: <a href=\"https://github.com/alibaba/arthas/issues\">https://github.com/alibaba/arthas/issues</a></li>\n<li>文档： <a href=\"https://arthas.aliyun.com/doc\">https://arthas.aliyun.com/doc</a></li>\n</ul>\n<p>如果您在使用Arthas，请让我们知道。您的使用对我们非常重要：<a href=\"https://github.com/alibaba/arthas/issues/111\">查看</a></p>\n<p>文章拷贝来源：<a href=\"https://start.aliyun.com/course?spm=a2ck6.17690074.0.0.28bc2e7dHTphXs&amp;id=PaiFAkJM\">https://start.aliyun.com/course?spm=a2ck6.17690074.0.0.28bc2e7dHTphXs&amp;id=PaiFAkJM</a></p>\n","site":{"data":{}},"excerpt":"","more":"<!-- toc -->\n\n<ul>\n<li><a href=\"#%E5%90%AF%E5%8A%A8arthas-demo\">启动arthas demo</a></li>\n<li><a href=\"#%E5%90%AF%E5%8A%A8arthas-boot\">启动arthas-boot</a></li>\n<li><a href=\"#sc%E5%91%BD%E4%BB%A4\">sc命令</a></li>\n<li><a href=\"#%E5%8F%82%E6%95%B0%E8%AF%B4%E6%98%8E\">参数说明</a><ul>\n<li><a href=\"#%E5%8F%82%E6%95%B0%E8%AF%B4%E6%98%8E-1\">参数说明</a></li>\n<li><a href=\"#%E4%BD%BF%E7%94%A8%E5%8F%82%E8%80%83\">使用参考</a></li>\n</ul>\n</li>\n<li><a href=\"#%E6%9B%B4%E5%A4%9A%E4%BF%A1%E6%81%AF\">更多信息</a></li>\n</ul>\n<!-- tocstop -->\n\n<p><img src=\"/jlynet.github.io/2021/08/07/Java%E8%AF%8A%E6%96%AD%E5%B7%A5%E5%85%B7Arthas%E9%AB%98%E7%BA%A7%E5%91%BD%E4%BB%A4%E6%95%99%E7%A8%8B/Arthassc%E5%91%BD%E4%BB%A4/arthas.png\" alt=\"Arthas\"></p>\n<p><code>Arthas</code> 是Alibaba开源的Java诊断工具，深受开发者喜爱。在线排查问题，无需重启；动态跟踪Java代码；实时监控JVM状态。</p>\n<p><code>Arthas</code> 支持JDK 6+，支持Linux/Mac/Windows，采用命令行交互模式，同时提供丰富的 <code>Tab</code> 自动补全功能，进一步方便进行问题的定位和诊断。</p>\n<p>当你遇到以下类似问题而束手无策时，Arthas可以帮助你解决：</p>\n<ul>\n<li>这个类从哪个 jar 包加载的？为什么会报各种类相关的 Exception？</li>\n<li>我改的代码为什么没有执行到？难道是我没 commit？分支搞错了？</li>\n<li>遇到问题无法在线上 debug，难道只能通过加日志再重新发布吗？</li>\n<li>线上遇到某个用户的数据处理有问题，但线上同样无法 debug，线下无法重现！</li>\n<li>是否有一个全局视角来查看系统的运行状况？</li>\n<li>有什么办法可以监控到JVM的实时运行状态？</li>\n<li>怎么快速定位应用的热点，生成火焰图？</li>\n</ul>\n<p>本教程会以一个简单的应用为例，演示sc命令。</p>\n<ul>\n<li>Github: <a href=\"https://github.com/alibaba/arthas\">https://github.com/alibaba/arthas</a></li>\n<li>文档: <a href=\"https://arthas.aliyun.com/doc/\">https://arthas.aliyun.com/doc/</a></li>\n</ul>\n<h2 id=\"启动arthas-demo\"><a href=\"#启动arthas-demo\" class=\"headerlink\" title=\"启动arthas demo\"></a>启动arthas demo</h2><p>下载<code>arthas-demo.jar</code>，再用<code>java -jar</code>命令启动：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wget https://arthas.aliyun.com/arthas-demo.jar;java -jar arthas-demo.jar</span><br></pre></td></tr></table></figure>\n\n<p><code>arthas-demo</code>是一个很简单的程序，它随机生成整数，再执行因式分解，把结果打印出来。如果生成的随机数是负数，则会打印提示信息。</p>\n<h2 id=\"启动arthas-boot\"><a href=\"#启动arthas-boot\" class=\"headerlink\" title=\"启动arthas-boot\"></a>启动arthas-boot</h2><p>在新的<code>Terminal 2</code>里，下载<code>arthas-boot.jar</code>，再用<code>java -jar</code>命令启动：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wget https://arthas.aliyun.com/arthas-boot.jar;java -jar arthas-boot.jar</span><br></pre></td></tr></table></figure>\n\n<p><code>arthas-boot</code>是<code>Arthas</code>的启动程序，它启动后，会列出所有的Java进程，用户可以选择需要诊断的目标进程。</p>\n<p>选择第一个进程，输入 <code>1</code> ，再<code>Enter/回车</code>：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1</span><br></pre></td></tr></table></figure>\n\n<p>Attach成功之后，会打印Arthas LOGO。输入 <code>help</code> 可以获取到更多的帮助信息。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">help</span></span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/jlynet.github.io/2021/08/07/Java%E8%AF%8A%E6%96%AD%E5%B7%A5%E5%85%B7Arthas%E9%AB%98%E7%BA%A7%E5%91%BD%E4%BB%A4%E6%95%99%E7%A8%8B/Arthassc%E5%91%BD%E4%BB%A4/O1CN01HzatXZ1RgccrlT90M_!!6000000002141-2-tps-529-244.png\" alt=\"Arthas Boot\"></p>\n<h2 id=\"sc命令\"><a href=\"#sc命令\" class=\"headerlink\" title=\"sc命令\"></a>sc命令</h2><blockquote>\n<p>查看JVM已加载的类信息</p>\n</blockquote>\n<p>“Search-Class” 的简写，这个命令能搜索出所有已经加载到 JVM 中的 Class 信息，这个命令支持的参数有 <code>[d]</code>、<code>[E]</code>、<code>[f]</code> 和 <code>[x:]</code>。</p>\n<h2 id=\"参数说明\"><a href=\"#参数说明\" class=\"headerlink\" title=\"参数说明\"></a>参数说明</h2><h4 id=\"参数说明-1\"><a href=\"#参数说明-1\" class=\"headerlink\" title=\"参数说明\"></a>参数说明</h4><table>\n<thead>\n<tr>\n<th>参数名称</th>\n<th>参数说明</th>\n</tr>\n</thead>\n<tbody><tr>\n<td><em>class-pattern</em></td>\n<td>类名表达式匹配</td>\n</tr>\n<tr>\n<td><em>method-pattern</em></td>\n<td>方法名表达式匹配</td>\n</tr>\n<tr>\n<td>[d]</td>\n<td>输出当前类的详细信息，包括这个类所加载的原始文件来源、类的声明、加载的ClassLoader等详细信息。 如果一个类被多个ClassLoader所加载，则会出现多次</td>\n</tr>\n<tr>\n<td>[E]</td>\n<td>开启正则表达式匹配，默认为通配符匹配</td>\n</tr>\n<tr>\n<td>[f]</td>\n<td>输出当前类的成员变量信息（需要配合参数-d一起使用）</td>\n</tr>\n<tr>\n<td>[x:]</td>\n<td>指定输出静态变量时属性的遍历深度，默认为 0，即直接使用 <code>toString</code> 输出</td>\n</tr>\n<tr>\n<td><code>[c:]</code></td>\n<td>指定class的 ClassLoader 的 hashcode</td>\n</tr>\n<tr>\n<td><code>[classLoaderClass:]</code></td>\n<td>指定执行表达式的 ClassLoader 的 class name</td>\n</tr>\n<tr>\n<td><code>[n:]</code></td>\n<td>具有详细信息的匹配类的最大数量（默认为100）</td>\n</tr>\n</tbody></table>\n<blockquote>\n<p>class-pattern支持全限定名，如com.taobao.test.AAA，也支持com/taobao/test/AAA这样的格式，这样，我们从异常堆栈里面把类名拷贝过来的时候，不需要在手动把<code>/</code>替换为<code>.</code>啦。</p>\n<p>sc 默认开启了子类匹配功能，也就是说所有当前类的子类也会被搜索出来，想要精确的匹配，请打开<code>options disable-sub-class true</code>开关</p>\n</blockquote>\n<h4 id=\"使用参考\"><a href=\"#使用参考\" class=\"headerlink\" title=\"使用参考\"></a>使用参考</h4><ul>\n<li><p>模糊搜索</p>\n<p><code>sc demo.*</code></p>\n</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sc demo.*</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight console\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> sc demo.*</span></span><br><span class=\"line\">demo.MathGame</span><br><span class=\"line\">Affect(row-cnt:1) cost in 55 ms.</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><p>打印类的详细信息</p>\n<p><code>sc -d demo.MathGame</code></p>\n</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sc -d demo.MathGame</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight console\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> sc -d demo.MathGame</span></span><br><span class=\"line\">class-info        demo.MathGame</span><br><span class=\"line\">code-source       /private/tmp/arthas-demo.jar</span><br><span class=\"line\">name              demo.MathGame</span><br><span class=\"line\">isInterface       false</span><br><span class=\"line\">isAnnotation      false</span><br><span class=\"line\">isEnum            false</span><br><span class=\"line\">isAnonymousClass  false</span><br><span class=\"line\">isArray           false</span><br><span class=\"line\">isLocalClass      false</span><br><span class=\"line\">isMemberClass     false</span><br><span class=\"line\">isPrimitive       false</span><br><span class=\"line\">isSynthetic       false</span><br><span class=\"line\">simple-name       MathGame</span><br><span class=\"line\">modifier          public</span><br><span class=\"line\">annotation</span><br><span class=\"line\">interfaces</span><br><span class=\"line\">super-class       +-java.lang.Object</span><br><span class=\"line\">class-loader      +-sun.misc.Launcher$AppClassLoader@3d4eac69</span><br><span class=\"line\">                    +-sun.misc.Launcher$ExtClassLoader@66350f69</span><br><span class=\"line\">classLoaderHash   3d4eac69</span><br><span class=\"line\"></span><br><span class=\"line\">Affect(row-cnt:1) cost in 875 ms.</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>指定classLoader</li>\n</ul>\n<p>注意hashcode是变化的，需要先查看当前的ClassLoader信息，提取对应ClassLoader的hashcode。</p>\n<p>如果你使用<code>-c</code>，你需要手动输入hashcode：<code>-c &lt;hashcode&gt;</code></p>\n<figure class=\"highlight console\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> sc -c 3d4eac69 -d demo*</span></span><br></pre></td></tr></table></figure>\n\n<p>对于只有唯一实例的ClassLoader可以通过<code>--classLoaderClass</code>指定class name，使用起来更加方便：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sc --classLoaderClass sun.misc.Launcher<span class=\"variable\">$AppClassLoader</span> -d demo*</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>注: 这里classLoaderClass 在 java 8 是 sun.misc.Launcher$AppClassLoader，而java 11的classloader是jdk.internal.loader.ClassLoaders$AppClassLoader，katacoda目前环境是java8。</li>\n</ul>\n<p><code>--classLoaderClass</code> 的值是ClassLoader的类名，只有匹配到唯一的ClassLoader实例时才能工作，目的是方便输入通用命令，而<code>-c &lt;hashcode&gt;</code>是动态变化的。</p>\n<ul>\n<li><p>打印出类的Field信息</p>\n<p><code>sc -d -f demo.MathGame</code></p>\n</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sc -d -f demo.MathGame</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight console\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> sc -d -f demo.MathGame</span></span><br><span class=\"line\">class-info        demo.MathGame</span><br><span class=\"line\">code-source       /private/tmp/arthas-demo.jar</span><br><span class=\"line\">name              demo.MathGame</span><br><span class=\"line\">isInterface       false</span><br><span class=\"line\">isAnnotation      false</span><br><span class=\"line\">isEnum            false</span><br><span class=\"line\">isAnonymousClass  false</span><br><span class=\"line\">isArray           false</span><br><span class=\"line\">isLocalClass      false</span><br><span class=\"line\">isMemberClass     false</span><br><span class=\"line\">isPrimitive       false</span><br><span class=\"line\">isSynthetic       false</span><br><span class=\"line\">simple-name       MathGame</span><br><span class=\"line\">modifier          public</span><br><span class=\"line\">annotation</span><br><span class=\"line\">interfaces</span><br><span class=\"line\">super-class       +-java.lang.Object</span><br><span class=\"line\">class-loader      +-sun.misc.Launcher$AppClassLoader@3d4eac69</span><br><span class=\"line\">                    +-sun.misc.Launcher$ExtClassLoader@66350f69</span><br><span class=\"line\">classLoaderHash   3d4eac69</span><br><span class=\"line\">fields            modifierprivate,static</span><br><span class=\"line\">                  type    java.util.Random</span><br><span class=\"line\">                  name    random</span><br><span class=\"line\">                  value   java.util.Random@522b4</span><br><span class=\"line\">                          08a</span><br><span class=\"line\"></span><br><span class=\"line\">                  modifierprivate</span><br><span class=\"line\">                  type    int</span><br><span class=\"line\">                  name    illegalArgumentCount</span><br><span class=\"line\">Affect(row-cnt:1) cost in 19 ms.</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"更多信息\"><a href=\"#更多信息\" class=\"headerlink\" title=\"更多信息\"></a>更多信息</h2><p>在“sc”中，我们演示了了Arthas的sc命令。如果有更多的技巧或者使用疑问，欢迎在Issue里提出。</p>\n<ul>\n<li>Issues: <a href=\"https://github.com/alibaba/arthas/issues\">https://github.com/alibaba/arthas/issues</a></li>\n<li>文档： <a href=\"https://arthas.aliyun.com/doc\">https://arthas.aliyun.com/doc</a></li>\n</ul>\n<p>如果您在使用Arthas，请让我们知道。您的使用对我们非常重要：<a href=\"https://github.com/alibaba/arthas/issues/111\">查看</a></p>\n<p>文章拷贝来源：<a href=\"https://start.aliyun.com/course?spm=a2ck6.17690074.0.0.28bc2e7dHTphXs&amp;id=PaiFAkJM\">https://start.aliyun.com/course?spm=a2ck6.17690074.0.0.28bc2e7dHTphXs&amp;id=PaiFAkJM</a></p>\n"},{"title":"Arthas sm命令","date":"2021-08-07T01:51:41.000Z","_content":"\n<!-- toc -->\n\n![Arthas](arthas.png)\n\n`Arthas` 是Alibaba开源的Java诊断工具，深受开发者喜爱。在线排查问题，无需重启；动态跟踪Java代码；实时监控JVM状态。\n\n`Arthas` 支持JDK 6+，支持Linux/Mac/Windows，采用命令行交互模式，同时提供丰富的 `Tab` 自动补全功能，进一步方便进行问题的定位和诊断。\n\n当你遇到以下类似问题而束手无策时，Arthas可以帮助你解决：\n\n- 这个类从哪个 jar 包加载的？为什么会报各种类相关的 Exception？\n- 我改的代码为什么没有执行到？难道是我没 commit？分支搞错了？\n- 遇到问题无法在线上 debug，难道只能通过加日志再重新发布吗？\n- 线上遇到某个用户的数据处理有问题，但线上同样无法 debug，线下无法重现！\n- 是否有一个全局视角来查看系统的运行状况？\n- 有什么办法可以监控到JVM的实时运行状态？\n- 怎么快速定位应用的热点，生成火焰图？\n\n本教程会以一个简单的应用为例，演示sm命令。\n\n- Github: https://github.com/alibaba/arthas\n- 文档: https://arthas.aliyun.com/doc/\n\n## 启动arthas demo\n\n下载`arthas-demo.jar`，再用`java -jar`命令启动：\n\n```bash\nwget https://arthas.aliyun.com/arthas-demo.jar;java -jar arthas-demo.jar\n```\n\n`arthas-demo`是一个很简单的程序，它随机生成整数，再执行因式分解，把结果打印出来。如果生成的随机数是负数，则会打印提示信息。\n\n## 启动arthas-boot\n\n在新的`Terminal 2`里，下载`arthas-boot.jar`，再用`java -jar`命令启动：\n\n```bash\nwget https://arthas.aliyun.com/arthas-boot.jar;java -jar arthas-boot.jar\n```\n\n`arthas-boot`是`Arthas`的启动程序，它启动后，会列出所有的Java进程，用户可以选择需要诊断的目标进程。\n\n选择第一个进程，输入 `1` ，再`Enter/回车`：\n\n```bash\n1\n```\n\nAttach成功之后，会打印Arthas LOGO。输入 `help` 可以获取到更多的帮助信息。\n\n```bash\nhelp\n```\n\n![Arthas Boot](O1CN01HzatXZ1RgccrlT90M_!!6000000002141-2-tps-529-244.png)\n\n## sm命令\n\n> 查看已加载类的方法信息\n\n“Search-Method” 的简写，这个命令能搜索出所有已经加载了 Class 信息的方法信息。\n\n`sm` 命令只能看到由当前类所声明 (declaring) 的方法，父类则无法看到。\n\n#### 参数说明\n\n| 参数名称              | 参数说明                                    |\n| --------------------- | ------------------------------------------- |\n| *class-pattern*       | 类名表达式匹配                              |\n| *method-pattern*      | 方法名表达式匹配                            |\n| [d]                   | 展示每个方法的详细信息                      |\n| [E]                   | 开启正则表达式匹配，默认为通配符匹配        |\n| `[c:]`                | 指定class的 ClassLoader 的 hashcode         |\n| `[classLoaderClass:]` | 指定执行表达式的 ClassLoader 的 class name  |\n| `[n:]`                | 具有详细信息的匹配类的最大数量（默认为100） |\n\n#### 使用参考\n\n- 查找`java.lang.String`类的具体方法\n\n```bash\nsm java.lang.String\n```\n\n```console\n$ sm java.lang.String\njava.lang.String-><init>\njava.lang.String->equals\njava.lang.String->toString\njava.lang.String->hashCode\njava.lang.String->compareTo\njava.lang.String->indexOf\njava.lang.String->valueOf\njava.lang.String->checkBounds\njava.lang.String->length\njava.lang.String->isEmpty\njava.lang.String->charAt\njava.lang.String->codePointAt\njava.lang.String->codePointBefore\njava.lang.String->codePointCount\njava.lang.String->offsetByCodePoints\njava.lang.String->getChars\njava.lang.String->getBytes\njava.lang.String->contentEquals\njava.lang.String->nonSyncContentEquals\njava.lang.String->equalsIgnoreCase\njava.lang.String->compareToIgnoreCase\njava.lang.String->regionMatches\njava.lang.String->startsWith\njava.lang.String->endsWith\njava.lang.String->indexOfSupplementary\njava.lang.String->lastIndexOf\njava.lang.String->lastIndexOfSupplementary\njava.lang.String->substring\njava.lang.String->subSequence\njava.lang.String->concat\njava.lang.String->replace\njava.lang.String->matches\njava.lang.String->contains\njava.lang.String->replaceFirst\njava.lang.String->replaceAll\njava.lang.String->split\njava.lang.String->join\njava.lang.String->toLowerCase\njava.lang.String->toUpperCase\njava.lang.String->trim\njava.lang.String->toCharArray\njava.lang.String->format\njava.lang.String->copyValueOf\njava.lang.String->intern\nAffect(row-cnt:44) cost in 1342 ms.\n```\n\n- 指定ClassLoader\n\n查找ClassLoaderHash：\n\n```bash\nsc -d demo.MathGame | grep classLoaderHash\n```\n\n```console\n$ sc -d demo.MathGame | grep classLoaderHash\n classLoaderHash   70dea4e\n```\n\n- 指定classLoader\n\n注意hashcode是变化的，需要先查看当前的ClassLoader信息，提取对应ClassLoader的hashcode。\n\n如果你使用`-c`，你需要手动输入hashcode：`-c <hashcode>`\n\n```console\n$ sm -c 70dea4e demo.MathGame\n```\n\n对于只有唯一实例的ClassLoader可以通过`--classLoaderClass`指定class name，使用起来更加方便：\n\n```bash\nsm --classLoaderClass sun.misc.Launcher$AppClassLoader demo.MathGame\n```\n\n```console\n$ sm --classLoaderClass sun.misc.Launcher$AppClassLoader demo.MathGame\ndemo.MathGame <init>()V\ndemo.MathGame primeFactors(I)Ljava/util/List;\ndemo.MathGame main([Ljava/lang/String;)V\ndemo.MathGame run()V\ndemo.MathGame print(ILjava/util/List;)V\nAffect(row-cnt:5) cost in 2 ms.\n```\n\n- 注: 这里classLoaderClass 在 java 8 是 sun.misc.Launcher$AppClassLoader，而java 11的classloader是jdk.internal.loader.ClassLoaders$AppClassLoader，katacoda目前环境是java8。\n\n`--classLoaderClass` 的值是ClassLoader的类名，只有匹配到唯一的ClassLoader实例时才能工作，目的是方便输入通用命令，而`-c <hashcode>`是动态变化的。\n\n- 查找`java.lang.String#toString`函数并打印详细信息\n\n```bash\nsm -d java.lang.String toString\n```\n\n```console\n$ sm -d java.lang.String toString\n declaring-class  java.lang.String\n method-name      toString\n modifier         public\n annotation\n parameters\n return           java.lang.String\n exceptions\n\nAffect(row-cnt:1) cost in 3 ms.\n```\n\n## 更多信息\n\n在“sm”中，我们演示了了Arthas的sm命令。如果有更多的技巧或者使用疑问，欢迎在Issue里提出。\n\n- Issues: https://github.com/alibaba/arthas/issues\n- 文档： https://arthas.aliyun.com/doc\n\n如果您在使用Arthas，请让我们知道。您的使用对我们非常重要：[查看](https://github.com/alibaba/arthas/issues/111)\n\n文章拷贝来源：https://start.aliyun.com/course?spm=a2ck6.17690074.0.0.28bc2e7dHTphXs&id=PaiFAkJM","source":"_posts/Java诊断工具Arthas高级命令教程/Arthassm命令.md","raw":"---\ntitle: Arthas sm命令\ndate: 2021-08-07 09:51:41\ntags: ['Java 诊断工具 Arthas 高级命令教程']\n---\n\n<!-- toc -->\n\n![Arthas](arthas.png)\n\n`Arthas` 是Alibaba开源的Java诊断工具，深受开发者喜爱。在线排查问题，无需重启；动态跟踪Java代码；实时监控JVM状态。\n\n`Arthas` 支持JDK 6+，支持Linux/Mac/Windows，采用命令行交互模式，同时提供丰富的 `Tab` 自动补全功能，进一步方便进行问题的定位和诊断。\n\n当你遇到以下类似问题而束手无策时，Arthas可以帮助你解决：\n\n- 这个类从哪个 jar 包加载的？为什么会报各种类相关的 Exception？\n- 我改的代码为什么没有执行到？难道是我没 commit？分支搞错了？\n- 遇到问题无法在线上 debug，难道只能通过加日志再重新发布吗？\n- 线上遇到某个用户的数据处理有问题，但线上同样无法 debug，线下无法重现！\n- 是否有一个全局视角来查看系统的运行状况？\n- 有什么办法可以监控到JVM的实时运行状态？\n- 怎么快速定位应用的热点，生成火焰图？\n\n本教程会以一个简单的应用为例，演示sm命令。\n\n- Github: https://github.com/alibaba/arthas\n- 文档: https://arthas.aliyun.com/doc/\n\n## 启动arthas demo\n\n下载`arthas-demo.jar`，再用`java -jar`命令启动：\n\n```bash\nwget https://arthas.aliyun.com/arthas-demo.jar;java -jar arthas-demo.jar\n```\n\n`arthas-demo`是一个很简单的程序，它随机生成整数，再执行因式分解，把结果打印出来。如果生成的随机数是负数，则会打印提示信息。\n\n## 启动arthas-boot\n\n在新的`Terminal 2`里，下载`arthas-boot.jar`，再用`java -jar`命令启动：\n\n```bash\nwget https://arthas.aliyun.com/arthas-boot.jar;java -jar arthas-boot.jar\n```\n\n`arthas-boot`是`Arthas`的启动程序，它启动后，会列出所有的Java进程，用户可以选择需要诊断的目标进程。\n\n选择第一个进程，输入 `1` ，再`Enter/回车`：\n\n```bash\n1\n```\n\nAttach成功之后，会打印Arthas LOGO。输入 `help` 可以获取到更多的帮助信息。\n\n```bash\nhelp\n```\n\n![Arthas Boot](O1CN01HzatXZ1RgccrlT90M_!!6000000002141-2-tps-529-244.png)\n\n## sm命令\n\n> 查看已加载类的方法信息\n\n“Search-Method” 的简写，这个命令能搜索出所有已经加载了 Class 信息的方法信息。\n\n`sm` 命令只能看到由当前类所声明 (declaring) 的方法，父类则无法看到。\n\n#### 参数说明\n\n| 参数名称              | 参数说明                                    |\n| --------------------- | ------------------------------------------- |\n| *class-pattern*       | 类名表达式匹配                              |\n| *method-pattern*      | 方法名表达式匹配                            |\n| [d]                   | 展示每个方法的详细信息                      |\n| [E]                   | 开启正则表达式匹配，默认为通配符匹配        |\n| `[c:]`                | 指定class的 ClassLoader 的 hashcode         |\n| `[classLoaderClass:]` | 指定执行表达式的 ClassLoader 的 class name  |\n| `[n:]`                | 具有详细信息的匹配类的最大数量（默认为100） |\n\n#### 使用参考\n\n- 查找`java.lang.String`类的具体方法\n\n```bash\nsm java.lang.String\n```\n\n```console\n$ sm java.lang.String\njava.lang.String-><init>\njava.lang.String->equals\njava.lang.String->toString\njava.lang.String->hashCode\njava.lang.String->compareTo\njava.lang.String->indexOf\njava.lang.String->valueOf\njava.lang.String->checkBounds\njava.lang.String->length\njava.lang.String->isEmpty\njava.lang.String->charAt\njava.lang.String->codePointAt\njava.lang.String->codePointBefore\njava.lang.String->codePointCount\njava.lang.String->offsetByCodePoints\njava.lang.String->getChars\njava.lang.String->getBytes\njava.lang.String->contentEquals\njava.lang.String->nonSyncContentEquals\njava.lang.String->equalsIgnoreCase\njava.lang.String->compareToIgnoreCase\njava.lang.String->regionMatches\njava.lang.String->startsWith\njava.lang.String->endsWith\njava.lang.String->indexOfSupplementary\njava.lang.String->lastIndexOf\njava.lang.String->lastIndexOfSupplementary\njava.lang.String->substring\njava.lang.String->subSequence\njava.lang.String->concat\njava.lang.String->replace\njava.lang.String->matches\njava.lang.String->contains\njava.lang.String->replaceFirst\njava.lang.String->replaceAll\njava.lang.String->split\njava.lang.String->join\njava.lang.String->toLowerCase\njava.lang.String->toUpperCase\njava.lang.String->trim\njava.lang.String->toCharArray\njava.lang.String->format\njava.lang.String->copyValueOf\njava.lang.String->intern\nAffect(row-cnt:44) cost in 1342 ms.\n```\n\n- 指定ClassLoader\n\n查找ClassLoaderHash：\n\n```bash\nsc -d demo.MathGame | grep classLoaderHash\n```\n\n```console\n$ sc -d demo.MathGame | grep classLoaderHash\n classLoaderHash   70dea4e\n```\n\n- 指定classLoader\n\n注意hashcode是变化的，需要先查看当前的ClassLoader信息，提取对应ClassLoader的hashcode。\n\n如果你使用`-c`，你需要手动输入hashcode：`-c <hashcode>`\n\n```console\n$ sm -c 70dea4e demo.MathGame\n```\n\n对于只有唯一实例的ClassLoader可以通过`--classLoaderClass`指定class name，使用起来更加方便：\n\n```bash\nsm --classLoaderClass sun.misc.Launcher$AppClassLoader demo.MathGame\n```\n\n```console\n$ sm --classLoaderClass sun.misc.Launcher$AppClassLoader demo.MathGame\ndemo.MathGame <init>()V\ndemo.MathGame primeFactors(I)Ljava/util/List;\ndemo.MathGame main([Ljava/lang/String;)V\ndemo.MathGame run()V\ndemo.MathGame print(ILjava/util/List;)V\nAffect(row-cnt:5) cost in 2 ms.\n```\n\n- 注: 这里classLoaderClass 在 java 8 是 sun.misc.Launcher$AppClassLoader，而java 11的classloader是jdk.internal.loader.ClassLoaders$AppClassLoader，katacoda目前环境是java8。\n\n`--classLoaderClass` 的值是ClassLoader的类名，只有匹配到唯一的ClassLoader实例时才能工作，目的是方便输入通用命令，而`-c <hashcode>`是动态变化的。\n\n- 查找`java.lang.String#toString`函数并打印详细信息\n\n```bash\nsm -d java.lang.String toString\n```\n\n```console\n$ sm -d java.lang.String toString\n declaring-class  java.lang.String\n method-name      toString\n modifier         public\n annotation\n parameters\n return           java.lang.String\n exceptions\n\nAffect(row-cnt:1) cost in 3 ms.\n```\n\n## 更多信息\n\n在“sm”中，我们演示了了Arthas的sm命令。如果有更多的技巧或者使用疑问，欢迎在Issue里提出。\n\n- Issues: https://github.com/alibaba/arthas/issues\n- 文档： https://arthas.aliyun.com/doc\n\n如果您在使用Arthas，请让我们知道。您的使用对我们非常重要：[查看](https://github.com/alibaba/arthas/issues/111)\n\n文章拷贝来源：https://start.aliyun.com/course?spm=a2ck6.17690074.0.0.28bc2e7dHTphXs&id=PaiFAkJM","slug":"Java诊断工具Arthas高级命令教程/Arthassm命令","published":1,"updated":"2021-08-07T05:35:15.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cks1cgr6u002jfw5idn5pb89n","content":"<!-- toc -->\n\n<ul>\n<li><a href=\"#%E5%90%AF%E5%8A%A8arthas-demo\">启动arthas demo</a></li>\n<li><a href=\"#%E5%90%AF%E5%8A%A8arthas-boot\">启动arthas-boot</a></li>\n<li><a href=\"#sm%E5%91%BD%E4%BB%A4\">sm命令</a><ul>\n<li><a href=\"#%E5%8F%82%E6%95%B0%E8%AF%B4%E6%98%8E\">参数说明</a></li>\n<li><a href=\"#%E4%BD%BF%E7%94%A8%E5%8F%82%E8%80%83\">使用参考</a></li>\n</ul>\n</li>\n<li><a href=\"#%E6%9B%B4%E5%A4%9A%E4%BF%A1%E6%81%AF\">更多信息</a></li>\n</ul>\n<!-- tocstop -->\n\n<p><img src=\"/jlynet.github.io/2021/08/07/Java%E8%AF%8A%E6%96%AD%E5%B7%A5%E5%85%B7Arthas%E9%AB%98%E7%BA%A7%E5%91%BD%E4%BB%A4%E6%95%99%E7%A8%8B/Arthassm%E5%91%BD%E4%BB%A4/arthas.png\" alt=\"Arthas\"></p>\n<p><code>Arthas</code> 是Alibaba开源的Java诊断工具，深受开发者喜爱。在线排查问题，无需重启；动态跟踪Java代码；实时监控JVM状态。</p>\n<p><code>Arthas</code> 支持JDK 6+，支持Linux/Mac/Windows，采用命令行交互模式，同时提供丰富的 <code>Tab</code> 自动补全功能，进一步方便进行问题的定位和诊断。</p>\n<p>当你遇到以下类似问题而束手无策时，Arthas可以帮助你解决：</p>\n<ul>\n<li>这个类从哪个 jar 包加载的？为什么会报各种类相关的 Exception？</li>\n<li>我改的代码为什么没有执行到？难道是我没 commit？分支搞错了？</li>\n<li>遇到问题无法在线上 debug，难道只能通过加日志再重新发布吗？</li>\n<li>线上遇到某个用户的数据处理有问题，但线上同样无法 debug，线下无法重现！</li>\n<li>是否有一个全局视角来查看系统的运行状况？</li>\n<li>有什么办法可以监控到JVM的实时运行状态？</li>\n<li>怎么快速定位应用的热点，生成火焰图？</li>\n</ul>\n<p>本教程会以一个简单的应用为例，演示sm命令。</p>\n<ul>\n<li>Github: <a href=\"https://github.com/alibaba/arthas\">https://github.com/alibaba/arthas</a></li>\n<li>文档: <a href=\"https://arthas.aliyun.com/doc/\">https://arthas.aliyun.com/doc/</a></li>\n</ul>\n<h2><span id=\"启动arthas-demo\">启动arthas demo</span></h2><p>下载<code>arthas-demo.jar</code>，再用<code>java -jar</code>命令启动：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wget https://arthas.aliyun.com/arthas-demo.jar;java -jar arthas-demo.jar</span><br></pre></td></tr></table></figure>\n\n<p><code>arthas-demo</code>是一个很简单的程序，它随机生成整数，再执行因式分解，把结果打印出来。如果生成的随机数是负数，则会打印提示信息。</p>\n<h2><span id=\"启动arthas-boot\">启动arthas-boot</span></h2><p>在新的<code>Terminal 2</code>里，下载<code>arthas-boot.jar</code>，再用<code>java -jar</code>命令启动：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wget https://arthas.aliyun.com/arthas-boot.jar;java -jar arthas-boot.jar</span><br></pre></td></tr></table></figure>\n\n<p><code>arthas-boot</code>是<code>Arthas</code>的启动程序，它启动后，会列出所有的Java进程，用户可以选择需要诊断的目标进程。</p>\n<p>选择第一个进程，输入 <code>1</code> ，再<code>Enter/回车</code>：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1</span><br></pre></td></tr></table></figure>\n\n<p>Attach成功之后，会打印Arthas LOGO。输入 <code>help</code> 可以获取到更多的帮助信息。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">help</span></span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/jlynet.github.io/2021/08/07/Java%E8%AF%8A%E6%96%AD%E5%B7%A5%E5%85%B7Arthas%E9%AB%98%E7%BA%A7%E5%91%BD%E4%BB%A4%E6%95%99%E7%A8%8B/Arthassm%E5%91%BD%E4%BB%A4/O1CN01HzatXZ1RgccrlT90M_!!6000000002141-2-tps-529-244.png\" alt=\"Arthas Boot\"></p>\n<h2><span id=\"sm命令\">sm命令</span></h2><blockquote>\n<p>查看已加载类的方法信息</p>\n</blockquote>\n<p>“Search-Method” 的简写，这个命令能搜索出所有已经加载了 Class 信息的方法信息。</p>\n<p><code>sm</code> 命令只能看到由当前类所声明 (declaring) 的方法，父类则无法看到。</p>\n<h4><span id=\"参数说明\">参数说明</span></h4><table>\n<thead>\n<tr>\n<th>参数名称</th>\n<th>参数说明</th>\n</tr>\n</thead>\n<tbody><tr>\n<td><em>class-pattern</em></td>\n<td>类名表达式匹配</td>\n</tr>\n<tr>\n<td><em>method-pattern</em></td>\n<td>方法名表达式匹配</td>\n</tr>\n<tr>\n<td>[d]</td>\n<td>展示每个方法的详细信息</td>\n</tr>\n<tr>\n<td>[E]</td>\n<td>开启正则表达式匹配，默认为通配符匹配</td>\n</tr>\n<tr>\n<td><code>[c:]</code></td>\n<td>指定class的 ClassLoader 的 hashcode</td>\n</tr>\n<tr>\n<td><code>[classLoaderClass:]</code></td>\n<td>指定执行表达式的 ClassLoader 的 class name</td>\n</tr>\n<tr>\n<td><code>[n:]</code></td>\n<td>具有详细信息的匹配类的最大数量（默认为100）</td>\n</tr>\n</tbody></table>\n<h4><span id=\"使用参考\">使用参考</span></h4><ul>\n<li>查找<code>java.lang.String</code>类的具体方法</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sm java.lang.String</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight console\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> sm java.lang.String</span></span><br><span class=\"line\">java.lang.String-&gt;&lt;init&gt;</span><br><span class=\"line\">java.lang.String-&gt;equals</span><br><span class=\"line\">java.lang.String-&gt;toString</span><br><span class=\"line\">java.lang.String-&gt;hashCode</span><br><span class=\"line\">java.lang.String-&gt;compareTo</span><br><span class=\"line\">java.lang.String-&gt;indexOf</span><br><span class=\"line\">java.lang.String-&gt;valueOf</span><br><span class=\"line\">java.lang.String-&gt;checkBounds</span><br><span class=\"line\">java.lang.String-&gt;length</span><br><span class=\"line\">java.lang.String-&gt;isEmpty</span><br><span class=\"line\">java.lang.String-&gt;charAt</span><br><span class=\"line\">java.lang.String-&gt;codePointAt</span><br><span class=\"line\">java.lang.String-&gt;codePointBefore</span><br><span class=\"line\">java.lang.String-&gt;codePointCount</span><br><span class=\"line\">java.lang.String-&gt;offsetByCodePoints</span><br><span class=\"line\">java.lang.String-&gt;getChars</span><br><span class=\"line\">java.lang.String-&gt;getBytes</span><br><span class=\"line\">java.lang.String-&gt;contentEquals</span><br><span class=\"line\">java.lang.String-&gt;nonSyncContentEquals</span><br><span class=\"line\">java.lang.String-&gt;equalsIgnoreCase</span><br><span class=\"line\">java.lang.String-&gt;compareToIgnoreCase</span><br><span class=\"line\">java.lang.String-&gt;regionMatches</span><br><span class=\"line\">java.lang.String-&gt;startsWith</span><br><span class=\"line\">java.lang.String-&gt;endsWith</span><br><span class=\"line\">java.lang.String-&gt;indexOfSupplementary</span><br><span class=\"line\">java.lang.String-&gt;lastIndexOf</span><br><span class=\"line\">java.lang.String-&gt;lastIndexOfSupplementary</span><br><span class=\"line\">java.lang.String-&gt;substring</span><br><span class=\"line\">java.lang.String-&gt;subSequence</span><br><span class=\"line\">java.lang.String-&gt;concat</span><br><span class=\"line\">java.lang.String-&gt;replace</span><br><span class=\"line\">java.lang.String-&gt;matches</span><br><span class=\"line\">java.lang.String-&gt;contains</span><br><span class=\"line\">java.lang.String-&gt;replaceFirst</span><br><span class=\"line\">java.lang.String-&gt;replaceAll</span><br><span class=\"line\">java.lang.String-&gt;split</span><br><span class=\"line\">java.lang.String-&gt;join</span><br><span class=\"line\">java.lang.String-&gt;toLowerCase</span><br><span class=\"line\">java.lang.String-&gt;toUpperCase</span><br><span class=\"line\">java.lang.String-&gt;trim</span><br><span class=\"line\">java.lang.String-&gt;toCharArray</span><br><span class=\"line\">java.lang.String-&gt;format</span><br><span class=\"line\">java.lang.String-&gt;copyValueOf</span><br><span class=\"line\">java.lang.String-&gt;intern</span><br><span class=\"line\">Affect(row-cnt:44) cost in 1342 ms.</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>指定ClassLoader</li>\n</ul>\n<p>查找ClassLoaderHash：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sc -d demo.MathGame | grep classLoaderHash</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight console\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> sc -d demo.MathGame | grep classLoaderHash</span></span><br><span class=\"line\"> classLoaderHash   70dea4e</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>指定classLoader</li>\n</ul>\n<p>注意hashcode是变化的，需要先查看当前的ClassLoader信息，提取对应ClassLoader的hashcode。</p>\n<p>如果你使用<code>-c</code>，你需要手动输入hashcode：<code>-c &lt;hashcode&gt;</code></p>\n<figure class=\"highlight console\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> sm -c 70dea4e demo.MathGame</span></span><br></pre></td></tr></table></figure>\n\n<p>对于只有唯一实例的ClassLoader可以通过<code>--classLoaderClass</code>指定class name，使用起来更加方便：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sm --classLoaderClass sun.misc.Launcher<span class=\"variable\">$AppClassLoader</span> demo.MathGame</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight console\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> sm --classLoaderClass sun.misc.Launcher<span class=\"variable\">$AppClassLoader</span> demo.MathGame</span></span><br><span class=\"line\">demo.MathGame &lt;init&gt;()V</span><br><span class=\"line\">demo.MathGame primeFactors(I)Ljava/util/List;</span><br><span class=\"line\">demo.MathGame main([Ljava/lang/String;)V</span><br><span class=\"line\">demo.MathGame run()V</span><br><span class=\"line\">demo.MathGame print(ILjava/util/List;)V</span><br><span class=\"line\">Affect(row-cnt:5) cost in 2 ms.</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>注: 这里classLoaderClass 在 java 8 是 sun.misc.Launcher$AppClassLoader，而java 11的classloader是jdk.internal.loader.ClassLoaders$AppClassLoader，katacoda目前环境是java8。</li>\n</ul>\n<p><code>--classLoaderClass</code> 的值是ClassLoader的类名，只有匹配到唯一的ClassLoader实例时才能工作，目的是方便输入通用命令，而<code>-c &lt;hashcode&gt;</code>是动态变化的。</p>\n<ul>\n<li>查找<code>java.lang.String#toString</code>函数并打印详细信息</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sm -d java.lang.String toString</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight console\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> sm -d java.lang.String toString</span></span><br><span class=\"line\"> declaring-class  java.lang.String</span><br><span class=\"line\"> method-name      toString</span><br><span class=\"line\"> modifier         public</span><br><span class=\"line\"> annotation</span><br><span class=\"line\"> parameters</span><br><span class=\"line\"> return           java.lang.String</span><br><span class=\"line\"> exceptions</span><br><span class=\"line\"></span><br><span class=\"line\">Affect(row-cnt:1) cost in 3 ms.</span><br></pre></td></tr></table></figure>\n\n<h2><span id=\"更多信息\">更多信息</span></h2><p>在“sm”中，我们演示了了Arthas的sm命令。如果有更多的技巧或者使用疑问，欢迎在Issue里提出。</p>\n<ul>\n<li>Issues: <a href=\"https://github.com/alibaba/arthas/issues\">https://github.com/alibaba/arthas/issues</a></li>\n<li>文档： <a href=\"https://arthas.aliyun.com/doc\">https://arthas.aliyun.com/doc</a></li>\n</ul>\n<p>如果您在使用Arthas，请让我们知道。您的使用对我们非常重要：<a href=\"https://github.com/alibaba/arthas/issues/111\">查看</a></p>\n<p>文章拷贝来源：<a href=\"https://start.aliyun.com/course?spm=a2ck6.17690074.0.0.28bc2e7dHTphXs&amp;id=PaiFAkJM\">https://start.aliyun.com/course?spm=a2ck6.17690074.0.0.28bc2e7dHTphXs&amp;id=PaiFAkJM</a></p>\n","site":{"data":{}},"excerpt":"","more":"<!-- toc -->\n\n<ul>\n<li><a href=\"#%E5%90%AF%E5%8A%A8arthas-demo\">启动arthas demo</a></li>\n<li><a href=\"#%E5%90%AF%E5%8A%A8arthas-boot\">启动arthas-boot</a></li>\n<li><a href=\"#sm%E5%91%BD%E4%BB%A4\">sm命令</a><ul>\n<li><a href=\"#%E5%8F%82%E6%95%B0%E8%AF%B4%E6%98%8E\">参数说明</a></li>\n<li><a href=\"#%E4%BD%BF%E7%94%A8%E5%8F%82%E8%80%83\">使用参考</a></li>\n</ul>\n</li>\n<li><a href=\"#%E6%9B%B4%E5%A4%9A%E4%BF%A1%E6%81%AF\">更多信息</a></li>\n</ul>\n<!-- tocstop -->\n\n<p><img src=\"/jlynet.github.io/2021/08/07/Java%E8%AF%8A%E6%96%AD%E5%B7%A5%E5%85%B7Arthas%E9%AB%98%E7%BA%A7%E5%91%BD%E4%BB%A4%E6%95%99%E7%A8%8B/Arthassm%E5%91%BD%E4%BB%A4/arthas.png\" alt=\"Arthas\"></p>\n<p><code>Arthas</code> 是Alibaba开源的Java诊断工具，深受开发者喜爱。在线排查问题，无需重启；动态跟踪Java代码；实时监控JVM状态。</p>\n<p><code>Arthas</code> 支持JDK 6+，支持Linux/Mac/Windows，采用命令行交互模式，同时提供丰富的 <code>Tab</code> 自动补全功能，进一步方便进行问题的定位和诊断。</p>\n<p>当你遇到以下类似问题而束手无策时，Arthas可以帮助你解决：</p>\n<ul>\n<li>这个类从哪个 jar 包加载的？为什么会报各种类相关的 Exception？</li>\n<li>我改的代码为什么没有执行到？难道是我没 commit？分支搞错了？</li>\n<li>遇到问题无法在线上 debug，难道只能通过加日志再重新发布吗？</li>\n<li>线上遇到某个用户的数据处理有问题，但线上同样无法 debug，线下无法重现！</li>\n<li>是否有一个全局视角来查看系统的运行状况？</li>\n<li>有什么办法可以监控到JVM的实时运行状态？</li>\n<li>怎么快速定位应用的热点，生成火焰图？</li>\n</ul>\n<p>本教程会以一个简单的应用为例，演示sm命令。</p>\n<ul>\n<li>Github: <a href=\"https://github.com/alibaba/arthas\">https://github.com/alibaba/arthas</a></li>\n<li>文档: <a href=\"https://arthas.aliyun.com/doc/\">https://arthas.aliyun.com/doc/</a></li>\n</ul>\n<h2 id=\"启动arthas-demo\"><a href=\"#启动arthas-demo\" class=\"headerlink\" title=\"启动arthas demo\"></a>启动arthas demo</h2><p>下载<code>arthas-demo.jar</code>，再用<code>java -jar</code>命令启动：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wget https://arthas.aliyun.com/arthas-demo.jar;java -jar arthas-demo.jar</span><br></pre></td></tr></table></figure>\n\n<p><code>arthas-demo</code>是一个很简单的程序，它随机生成整数，再执行因式分解，把结果打印出来。如果生成的随机数是负数，则会打印提示信息。</p>\n<h2 id=\"启动arthas-boot\"><a href=\"#启动arthas-boot\" class=\"headerlink\" title=\"启动arthas-boot\"></a>启动arthas-boot</h2><p>在新的<code>Terminal 2</code>里，下载<code>arthas-boot.jar</code>，再用<code>java -jar</code>命令启动：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wget https://arthas.aliyun.com/arthas-boot.jar;java -jar arthas-boot.jar</span><br></pre></td></tr></table></figure>\n\n<p><code>arthas-boot</code>是<code>Arthas</code>的启动程序，它启动后，会列出所有的Java进程，用户可以选择需要诊断的目标进程。</p>\n<p>选择第一个进程，输入 <code>1</code> ，再<code>Enter/回车</code>：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1</span><br></pre></td></tr></table></figure>\n\n<p>Attach成功之后，会打印Arthas LOGO。输入 <code>help</code> 可以获取到更多的帮助信息。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">help</span></span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/jlynet.github.io/2021/08/07/Java%E8%AF%8A%E6%96%AD%E5%B7%A5%E5%85%B7Arthas%E9%AB%98%E7%BA%A7%E5%91%BD%E4%BB%A4%E6%95%99%E7%A8%8B/Arthassm%E5%91%BD%E4%BB%A4/O1CN01HzatXZ1RgccrlT90M_!!6000000002141-2-tps-529-244.png\" alt=\"Arthas Boot\"></p>\n<h2 id=\"sm命令\"><a href=\"#sm命令\" class=\"headerlink\" title=\"sm命令\"></a>sm命令</h2><blockquote>\n<p>查看已加载类的方法信息</p>\n</blockquote>\n<p>“Search-Method” 的简写，这个命令能搜索出所有已经加载了 Class 信息的方法信息。</p>\n<p><code>sm</code> 命令只能看到由当前类所声明 (declaring) 的方法，父类则无法看到。</p>\n<h4 id=\"参数说明\"><a href=\"#参数说明\" class=\"headerlink\" title=\"参数说明\"></a>参数说明</h4><table>\n<thead>\n<tr>\n<th>参数名称</th>\n<th>参数说明</th>\n</tr>\n</thead>\n<tbody><tr>\n<td><em>class-pattern</em></td>\n<td>类名表达式匹配</td>\n</tr>\n<tr>\n<td><em>method-pattern</em></td>\n<td>方法名表达式匹配</td>\n</tr>\n<tr>\n<td>[d]</td>\n<td>展示每个方法的详细信息</td>\n</tr>\n<tr>\n<td>[E]</td>\n<td>开启正则表达式匹配，默认为通配符匹配</td>\n</tr>\n<tr>\n<td><code>[c:]</code></td>\n<td>指定class的 ClassLoader 的 hashcode</td>\n</tr>\n<tr>\n<td><code>[classLoaderClass:]</code></td>\n<td>指定执行表达式的 ClassLoader 的 class name</td>\n</tr>\n<tr>\n<td><code>[n:]</code></td>\n<td>具有详细信息的匹配类的最大数量（默认为100）</td>\n</tr>\n</tbody></table>\n<h4 id=\"使用参考\"><a href=\"#使用参考\" class=\"headerlink\" title=\"使用参考\"></a>使用参考</h4><ul>\n<li>查找<code>java.lang.String</code>类的具体方法</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sm java.lang.String</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight console\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> sm java.lang.String</span></span><br><span class=\"line\">java.lang.String-&gt;&lt;init&gt;</span><br><span class=\"line\">java.lang.String-&gt;equals</span><br><span class=\"line\">java.lang.String-&gt;toString</span><br><span class=\"line\">java.lang.String-&gt;hashCode</span><br><span class=\"line\">java.lang.String-&gt;compareTo</span><br><span class=\"line\">java.lang.String-&gt;indexOf</span><br><span class=\"line\">java.lang.String-&gt;valueOf</span><br><span class=\"line\">java.lang.String-&gt;checkBounds</span><br><span class=\"line\">java.lang.String-&gt;length</span><br><span class=\"line\">java.lang.String-&gt;isEmpty</span><br><span class=\"line\">java.lang.String-&gt;charAt</span><br><span class=\"line\">java.lang.String-&gt;codePointAt</span><br><span class=\"line\">java.lang.String-&gt;codePointBefore</span><br><span class=\"line\">java.lang.String-&gt;codePointCount</span><br><span class=\"line\">java.lang.String-&gt;offsetByCodePoints</span><br><span class=\"line\">java.lang.String-&gt;getChars</span><br><span class=\"line\">java.lang.String-&gt;getBytes</span><br><span class=\"line\">java.lang.String-&gt;contentEquals</span><br><span class=\"line\">java.lang.String-&gt;nonSyncContentEquals</span><br><span class=\"line\">java.lang.String-&gt;equalsIgnoreCase</span><br><span class=\"line\">java.lang.String-&gt;compareToIgnoreCase</span><br><span class=\"line\">java.lang.String-&gt;regionMatches</span><br><span class=\"line\">java.lang.String-&gt;startsWith</span><br><span class=\"line\">java.lang.String-&gt;endsWith</span><br><span class=\"line\">java.lang.String-&gt;indexOfSupplementary</span><br><span class=\"line\">java.lang.String-&gt;lastIndexOf</span><br><span class=\"line\">java.lang.String-&gt;lastIndexOfSupplementary</span><br><span class=\"line\">java.lang.String-&gt;substring</span><br><span class=\"line\">java.lang.String-&gt;subSequence</span><br><span class=\"line\">java.lang.String-&gt;concat</span><br><span class=\"line\">java.lang.String-&gt;replace</span><br><span class=\"line\">java.lang.String-&gt;matches</span><br><span class=\"line\">java.lang.String-&gt;contains</span><br><span class=\"line\">java.lang.String-&gt;replaceFirst</span><br><span class=\"line\">java.lang.String-&gt;replaceAll</span><br><span class=\"line\">java.lang.String-&gt;split</span><br><span class=\"line\">java.lang.String-&gt;join</span><br><span class=\"line\">java.lang.String-&gt;toLowerCase</span><br><span class=\"line\">java.lang.String-&gt;toUpperCase</span><br><span class=\"line\">java.lang.String-&gt;trim</span><br><span class=\"line\">java.lang.String-&gt;toCharArray</span><br><span class=\"line\">java.lang.String-&gt;format</span><br><span class=\"line\">java.lang.String-&gt;copyValueOf</span><br><span class=\"line\">java.lang.String-&gt;intern</span><br><span class=\"line\">Affect(row-cnt:44) cost in 1342 ms.</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>指定ClassLoader</li>\n</ul>\n<p>查找ClassLoaderHash：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sc -d demo.MathGame | grep classLoaderHash</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight console\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> sc -d demo.MathGame | grep classLoaderHash</span></span><br><span class=\"line\"> classLoaderHash   70dea4e</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>指定classLoader</li>\n</ul>\n<p>注意hashcode是变化的，需要先查看当前的ClassLoader信息，提取对应ClassLoader的hashcode。</p>\n<p>如果你使用<code>-c</code>，你需要手动输入hashcode：<code>-c &lt;hashcode&gt;</code></p>\n<figure class=\"highlight console\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> sm -c 70dea4e demo.MathGame</span></span><br></pre></td></tr></table></figure>\n\n<p>对于只有唯一实例的ClassLoader可以通过<code>--classLoaderClass</code>指定class name，使用起来更加方便：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sm --classLoaderClass sun.misc.Launcher<span class=\"variable\">$AppClassLoader</span> demo.MathGame</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight console\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> sm --classLoaderClass sun.misc.Launcher<span class=\"variable\">$AppClassLoader</span> demo.MathGame</span></span><br><span class=\"line\">demo.MathGame &lt;init&gt;()V</span><br><span class=\"line\">demo.MathGame primeFactors(I)Ljava/util/List;</span><br><span class=\"line\">demo.MathGame main([Ljava/lang/String;)V</span><br><span class=\"line\">demo.MathGame run()V</span><br><span class=\"line\">demo.MathGame print(ILjava/util/List;)V</span><br><span class=\"line\">Affect(row-cnt:5) cost in 2 ms.</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>注: 这里classLoaderClass 在 java 8 是 sun.misc.Launcher$AppClassLoader，而java 11的classloader是jdk.internal.loader.ClassLoaders$AppClassLoader，katacoda目前环境是java8。</li>\n</ul>\n<p><code>--classLoaderClass</code> 的值是ClassLoader的类名，只有匹配到唯一的ClassLoader实例时才能工作，目的是方便输入通用命令，而<code>-c &lt;hashcode&gt;</code>是动态变化的。</p>\n<ul>\n<li>查找<code>java.lang.String#toString</code>函数并打印详细信息</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sm -d java.lang.String toString</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight console\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> sm -d java.lang.String toString</span></span><br><span class=\"line\"> declaring-class  java.lang.String</span><br><span class=\"line\"> method-name      toString</span><br><span class=\"line\"> modifier         public</span><br><span class=\"line\"> annotation</span><br><span class=\"line\"> parameters</span><br><span class=\"line\"> return           java.lang.String</span><br><span class=\"line\"> exceptions</span><br><span class=\"line\"></span><br><span class=\"line\">Affect(row-cnt:1) cost in 3 ms.</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"更多信息\"><a href=\"#更多信息\" class=\"headerlink\" title=\"更多信息\"></a>更多信息</h2><p>在“sm”中，我们演示了了Arthas的sm命令。如果有更多的技巧或者使用疑问，欢迎在Issue里提出。</p>\n<ul>\n<li>Issues: <a href=\"https://github.com/alibaba/arthas/issues\">https://github.com/alibaba/arthas/issues</a></li>\n<li>文档： <a href=\"https://arthas.aliyun.com/doc\">https://arthas.aliyun.com/doc</a></li>\n</ul>\n<p>如果您在使用Arthas，请让我们知道。您的使用对我们非常重要：<a href=\"https://github.com/alibaba/arthas/issues/111\">查看</a></p>\n<p>文章拷贝来源：<a href=\"https://start.aliyun.com/course?spm=a2ck6.17690074.0.0.28bc2e7dHTphXs&amp;id=PaiFAkJM\">https://start.aliyun.com/course?spm=a2ck6.17690074.0.0.28bc2e7dHTphXs&amp;id=PaiFAkJM</a></p>\n"},{"title":"Arthas stack命令","date":"2021-08-07T01:51:38.000Z","_content":"\n<!-- toc -->\n\n![Arthas](arthas.png)\n\n`Arthas` 是Alibaba开源的Java诊断工具，深受开发者喜爱。在线排查问题，无需重启；动态跟踪Java代码；实时监控JVM状态。\n\n`Arthas` 支持JDK 6+，支持Linux/Mac/Windows，采用命令行交互模式，同时提供丰富的 `Tab` 自动补全功能，进一步方便进行问题的定位和诊断。\n\n当你遇到以下类似问题而束手无策时，Arthas可以帮助你解决：\n\n- 这个类从哪个 jar 包加载的？为什么会报各种类相关的 Exception？\n- 我改的代码为什么没有执行到？难道是我没 commit？分支搞错了？\n- 遇到问题无法在线上 debug，难道只能通过加日志再重新发布吗？\n- 线上遇到某个用户的数据处理有问题，但线上同样无法 debug，线下无法重现！\n- 是否有一个全局视角来查看系统的运行状况？\n- 有什么办法可以监控到JVM的实时运行状态？\n- 怎么快速定位应用的热点，生成火焰图？\n\n本教程会以一个简单的应用为例，演示stack命令。\n\n- Github: https://github.com/alibaba/arthas\n- 文档: https://arthas.aliyun.com/doc/\n\n## 启动arthas demo\n\n下载`arthas-demo.jar`，再用`java -jar`命令启动：\n\n```bash\nwget https://arthas.aliyun.com/arthas-demo.jar;java -jar arthas-demo.jar\n```\n\n`arthas-demo`是一个很简单的程序，它随机生成整数，再执行因式分解，把结果打印出来。如果生成的随机数是负数，则会打印提示信息。\n\n## 启动arthas-boot\n\n在新的`Terminal 2`里，下载`arthas-boot.jar`，再用`java -jar`命令启动：\n\n```bash\nwget https://arthas.aliyun.com/arthas-boot.jar;java -jar arthas-boot.jar\n```\n\n`arthas-boot`是`Arthas`的启动程序，它启动后，会列出所有的Java进程，用户可以选择需要诊断的目标进程。\n\n选择第一个进程，输入 `1` ，再`Enter/回车`：\n\n```bash\n1\n```\n\nAttach成功之后，会打印Arthas LOGO。输入 `help` 可以获取到更多的帮助信息。\n\n```bash\nhelp\n```\n\n![Arthas Boot](O1CN01HzatXZ1RgccrlT90M_!!6000000002141-2-tps-529-244.png)\n\n## stack命令\n\n> 输出当前方法被调用的调用路径\n\n很多时候我们都知道一个方法被执行，但这个方法被执行的路径非常多，或者你根本就不知道这个方法是从那里被执行了，此时你需要的是 stack 命令。\n\n#### 参数说明\n\n| 参数名称            | 参数说明                             |\n| ------------------- | ------------------------------------ |\n| *class-pattern*     | 类名表达式匹配                       |\n| *method-pattern*    | 方法名表达式匹配                     |\n| *condition-express* | 条件表达式                           |\n| [E]                 | 开启正则表达式匹配，默认为通配符匹配 |\n| `[n:]`              | 执行次数限制                         |\n\n这里重点要说明的是观察表达式，观察表达式的构成主要由 ognl 表达式组成，所以你可以这样写`\"{params,returnObj}\"`，只要是一个合法的 ognl 表达式，都能被正常支持。\n\n观察的维度也比较多，主要体现在参数 `advice` 的数据结构上。`Advice` 参数最主要是封装了通知节点的所有信息。\n\n- 特殊用法请参考：https://github.com/alibaba/arthas/issues/71\n- OGNL表达式官网：https://commons.apache.org/proper/commons-ognl/language-guide.html\n\n#### 使用例子\n\n##### stack\n\n```bash\nstack demo.MathGame primeFactors\n```\n\n按`q`或者`Ctrl+c`退出\n\n```bash\nq\n```\n\n```console\n$ stack demo.MathGame primeFactors\nPress Ctrl+C to abort.\nAffect(class-cnt:1 , method-cnt:1) cost in 36 ms.\nts=2018-12-04 01:32:19;thread_name=main;id=1;is_daemon=false;priority=5;TCCL=sun.misc.Launcher$AppClassLoader@3d4eac69\n    @demo.MathGame.run()\n        at demo.MathGame.main(MathGame.java:16)\n```\n\n##### 据条件表达式来过滤\n\n```bash\nstack demo.MathGame primeFactors 'params[0]<0' -n 2\n```\n\n按`q`或者`Ctrl+c`退出\n\n```bash\nq\n```\n\n```console\n$ stack demo.MathGame primeFactors 'params[0]<0' -n 2\nPress Ctrl+C to abort.\nAffect(class-cnt:1 , method-cnt:1) cost in 30 ms.\nts=2018-12-04 01:34:27;thread_name=main;id=1;is_daemon=false;priority=5;TCCL=sun.misc.Launcher$AppClassLoader@3d4eac69\n    @demo.MathGame.run()\n        at demo.MathGame.main(MathGame.java:16)\n\nts=2018-12-04 01:34:30;thread_name=main;id=1;is_daemon=false;priority=5;TCCL=sun.misc.Launcher$AppClassLoader@3d4eac69\n    @demo.MathGame.run()\n        at demo.MathGame.main(MathGame.java:16)\n\nCommand execution times exceed limit: 2, so command will exit. You can set it with -n option.\n```\n\n##### 据执行时间来过滤\n\n```bash\nstack demo.MathGame primeFactors '#cost>5'\n```\n\n按`q`或者`Ctrl+c`退出\n\n```bash\nq\n```\n\n```console\n$ stack demo.MathGame primeFactors '#cost>5'\nPress Ctrl+C to abort.\nAffect(class-cnt:1 , method-cnt:1) cost in 35 ms.\nts=2018-12-04 01:35:58;thread_name=main;id=1;is_daemon=false;priority=5;TCCL=sun.misc.Launcher$AppClassLoader@3d4eac69\n    @demo.MathGame.run()\n        at demo.MathGame.main(MathGame.java:16)\n```\n\n## 更多信息\n\n在“stack”中，我们演示了了Arthas的stack命令。如果有更多的技巧或者使用疑问，欢迎在Issue里提出。\n\n- Issues: https://github.com/alibaba/arthas/issues\n- 文档： https://arthas.aliyun.com/doc\n\n如果您在使用Arthas，请让我们知道。您的使用对我们非常重要：[查看](https://github.com/alibaba/arthas/issues/111)\n\n文章拷贝来源：https://start.aliyun.com/course?spm=a2ck6.17690074.0.0.28bc2e7dHTphXs&id=PaiFAkJM","source":"_posts/Java诊断工具Arthas高级命令教程/Arthasstack命令.md","raw":"---\ntitle: Arthas stack命令\ndate: 2021-08-07 09:51:38\ntags: ['Java 诊断工具 Arthas 高级命令教程']\n---\n\n<!-- toc -->\n\n![Arthas](arthas.png)\n\n`Arthas` 是Alibaba开源的Java诊断工具，深受开发者喜爱。在线排查问题，无需重启；动态跟踪Java代码；实时监控JVM状态。\n\n`Arthas` 支持JDK 6+，支持Linux/Mac/Windows，采用命令行交互模式，同时提供丰富的 `Tab` 自动补全功能，进一步方便进行问题的定位和诊断。\n\n当你遇到以下类似问题而束手无策时，Arthas可以帮助你解决：\n\n- 这个类从哪个 jar 包加载的？为什么会报各种类相关的 Exception？\n- 我改的代码为什么没有执行到？难道是我没 commit？分支搞错了？\n- 遇到问题无法在线上 debug，难道只能通过加日志再重新发布吗？\n- 线上遇到某个用户的数据处理有问题，但线上同样无法 debug，线下无法重现！\n- 是否有一个全局视角来查看系统的运行状况？\n- 有什么办法可以监控到JVM的实时运行状态？\n- 怎么快速定位应用的热点，生成火焰图？\n\n本教程会以一个简单的应用为例，演示stack命令。\n\n- Github: https://github.com/alibaba/arthas\n- 文档: https://arthas.aliyun.com/doc/\n\n## 启动arthas demo\n\n下载`arthas-demo.jar`，再用`java -jar`命令启动：\n\n```bash\nwget https://arthas.aliyun.com/arthas-demo.jar;java -jar arthas-demo.jar\n```\n\n`arthas-demo`是一个很简单的程序，它随机生成整数，再执行因式分解，把结果打印出来。如果生成的随机数是负数，则会打印提示信息。\n\n## 启动arthas-boot\n\n在新的`Terminal 2`里，下载`arthas-boot.jar`，再用`java -jar`命令启动：\n\n```bash\nwget https://arthas.aliyun.com/arthas-boot.jar;java -jar arthas-boot.jar\n```\n\n`arthas-boot`是`Arthas`的启动程序，它启动后，会列出所有的Java进程，用户可以选择需要诊断的目标进程。\n\n选择第一个进程，输入 `1` ，再`Enter/回车`：\n\n```bash\n1\n```\n\nAttach成功之后，会打印Arthas LOGO。输入 `help` 可以获取到更多的帮助信息。\n\n```bash\nhelp\n```\n\n![Arthas Boot](O1CN01HzatXZ1RgccrlT90M_!!6000000002141-2-tps-529-244.png)\n\n## stack命令\n\n> 输出当前方法被调用的调用路径\n\n很多时候我们都知道一个方法被执行，但这个方法被执行的路径非常多，或者你根本就不知道这个方法是从那里被执行了，此时你需要的是 stack 命令。\n\n#### 参数说明\n\n| 参数名称            | 参数说明                             |\n| ------------------- | ------------------------------------ |\n| *class-pattern*     | 类名表达式匹配                       |\n| *method-pattern*    | 方法名表达式匹配                     |\n| *condition-express* | 条件表达式                           |\n| [E]                 | 开启正则表达式匹配，默认为通配符匹配 |\n| `[n:]`              | 执行次数限制                         |\n\n这里重点要说明的是观察表达式，观察表达式的构成主要由 ognl 表达式组成，所以你可以这样写`\"{params,returnObj}\"`，只要是一个合法的 ognl 表达式，都能被正常支持。\n\n观察的维度也比较多，主要体现在参数 `advice` 的数据结构上。`Advice` 参数最主要是封装了通知节点的所有信息。\n\n- 特殊用法请参考：https://github.com/alibaba/arthas/issues/71\n- OGNL表达式官网：https://commons.apache.org/proper/commons-ognl/language-guide.html\n\n#### 使用例子\n\n##### stack\n\n```bash\nstack demo.MathGame primeFactors\n```\n\n按`q`或者`Ctrl+c`退出\n\n```bash\nq\n```\n\n```console\n$ stack demo.MathGame primeFactors\nPress Ctrl+C to abort.\nAffect(class-cnt:1 , method-cnt:1) cost in 36 ms.\nts=2018-12-04 01:32:19;thread_name=main;id=1;is_daemon=false;priority=5;TCCL=sun.misc.Launcher$AppClassLoader@3d4eac69\n    @demo.MathGame.run()\n        at demo.MathGame.main(MathGame.java:16)\n```\n\n##### 据条件表达式来过滤\n\n```bash\nstack demo.MathGame primeFactors 'params[0]<0' -n 2\n```\n\n按`q`或者`Ctrl+c`退出\n\n```bash\nq\n```\n\n```console\n$ stack demo.MathGame primeFactors 'params[0]<0' -n 2\nPress Ctrl+C to abort.\nAffect(class-cnt:1 , method-cnt:1) cost in 30 ms.\nts=2018-12-04 01:34:27;thread_name=main;id=1;is_daemon=false;priority=5;TCCL=sun.misc.Launcher$AppClassLoader@3d4eac69\n    @demo.MathGame.run()\n        at demo.MathGame.main(MathGame.java:16)\n\nts=2018-12-04 01:34:30;thread_name=main;id=1;is_daemon=false;priority=5;TCCL=sun.misc.Launcher$AppClassLoader@3d4eac69\n    @demo.MathGame.run()\n        at demo.MathGame.main(MathGame.java:16)\n\nCommand execution times exceed limit: 2, so command will exit. You can set it with -n option.\n```\n\n##### 据执行时间来过滤\n\n```bash\nstack demo.MathGame primeFactors '#cost>5'\n```\n\n按`q`或者`Ctrl+c`退出\n\n```bash\nq\n```\n\n```console\n$ stack demo.MathGame primeFactors '#cost>5'\nPress Ctrl+C to abort.\nAffect(class-cnt:1 , method-cnt:1) cost in 35 ms.\nts=2018-12-04 01:35:58;thread_name=main;id=1;is_daemon=false;priority=5;TCCL=sun.misc.Launcher$AppClassLoader@3d4eac69\n    @demo.MathGame.run()\n        at demo.MathGame.main(MathGame.java:16)\n```\n\n## 更多信息\n\n在“stack”中，我们演示了了Arthas的stack命令。如果有更多的技巧或者使用疑问，欢迎在Issue里提出。\n\n- Issues: https://github.com/alibaba/arthas/issues\n- 文档： https://arthas.aliyun.com/doc\n\n如果您在使用Arthas，请让我们知道。您的使用对我们非常重要：[查看](https://github.com/alibaba/arthas/issues/111)\n\n文章拷贝来源：https://start.aliyun.com/course?spm=a2ck6.17690074.0.0.28bc2e7dHTphXs&id=PaiFAkJM","slug":"Java诊断工具Arthas高级命令教程/Arthasstack命令","published":1,"updated":"2021-08-07T05:35:19.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cks1cgr6w002lfw5ic1eh2c4l","content":"<!-- toc -->\n\n<ul>\n<li><a href=\"#%E5%90%AF%E5%8A%A8arthas-demo\">启动arthas demo</a></li>\n<li><a href=\"#%E5%90%AF%E5%8A%A8arthas-boot\">启动arthas-boot</a></li>\n<li><a href=\"#stack%E5%91%BD%E4%BB%A4\">stack命令</a><ul>\n<li><a href=\"#%E5%8F%82%E6%95%B0%E8%AF%B4%E6%98%8E\">参数说明</a></li>\n<li><a href=\"#%E4%BD%BF%E7%94%A8%E4%BE%8B%E5%AD%90\">使用例子</a><ul>\n<li><a href=\"#stack\">stack</a></li>\n<li><a href=\"#%E6%8D%AE%E6%9D%A1%E4%BB%B6%E8%A1%A8%E8%BE%BE%E5%BC%8F%E6%9D%A5%E8%BF%87%E6%BB%A4\">据条件表达式来过滤</a></li>\n<li><a href=\"#%E6%8D%AE%E6%89%A7%E8%A1%8C%E6%97%B6%E9%97%B4%E6%9D%A5%E8%BF%87%E6%BB%A4\">据执行时间来过滤</a></li>\n</ul>\n</li>\n</ul>\n</li>\n<li><a href=\"#%E6%9B%B4%E5%A4%9A%E4%BF%A1%E6%81%AF\">更多信息</a></li>\n</ul>\n<!-- tocstop -->\n\n<p><img src=\"/jlynet.github.io/2021/08/07/Java%E8%AF%8A%E6%96%AD%E5%B7%A5%E5%85%B7Arthas%E9%AB%98%E7%BA%A7%E5%91%BD%E4%BB%A4%E6%95%99%E7%A8%8B/Arthasstack%E5%91%BD%E4%BB%A4/arthas.png\" alt=\"Arthas\"></p>\n<p><code>Arthas</code> 是Alibaba开源的Java诊断工具，深受开发者喜爱。在线排查问题，无需重启；动态跟踪Java代码；实时监控JVM状态。</p>\n<p><code>Arthas</code> 支持JDK 6+，支持Linux/Mac/Windows，采用命令行交互模式，同时提供丰富的 <code>Tab</code> 自动补全功能，进一步方便进行问题的定位和诊断。</p>\n<p>当你遇到以下类似问题而束手无策时，Arthas可以帮助你解决：</p>\n<ul>\n<li>这个类从哪个 jar 包加载的？为什么会报各种类相关的 Exception？</li>\n<li>我改的代码为什么没有执行到？难道是我没 commit？分支搞错了？</li>\n<li>遇到问题无法在线上 debug，难道只能通过加日志再重新发布吗？</li>\n<li>线上遇到某个用户的数据处理有问题，但线上同样无法 debug，线下无法重现！</li>\n<li>是否有一个全局视角来查看系统的运行状况？</li>\n<li>有什么办法可以监控到JVM的实时运行状态？</li>\n<li>怎么快速定位应用的热点，生成火焰图？</li>\n</ul>\n<p>本教程会以一个简单的应用为例，演示stack命令。</p>\n<ul>\n<li>Github: <a href=\"https://github.com/alibaba/arthas\">https://github.com/alibaba/arthas</a></li>\n<li>文档: <a href=\"https://arthas.aliyun.com/doc/\">https://arthas.aliyun.com/doc/</a></li>\n</ul>\n<h2><span id=\"启动arthas-demo\">启动arthas demo</span></h2><p>下载<code>arthas-demo.jar</code>，再用<code>java -jar</code>命令启动：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wget https://arthas.aliyun.com/arthas-demo.jar;java -jar arthas-demo.jar</span><br></pre></td></tr></table></figure>\n\n<p><code>arthas-demo</code>是一个很简单的程序，它随机生成整数，再执行因式分解，把结果打印出来。如果生成的随机数是负数，则会打印提示信息。</p>\n<h2><span id=\"启动arthas-boot\">启动arthas-boot</span></h2><p>在新的<code>Terminal 2</code>里，下载<code>arthas-boot.jar</code>，再用<code>java -jar</code>命令启动：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wget https://arthas.aliyun.com/arthas-boot.jar;java -jar arthas-boot.jar</span><br></pre></td></tr></table></figure>\n\n<p><code>arthas-boot</code>是<code>Arthas</code>的启动程序，它启动后，会列出所有的Java进程，用户可以选择需要诊断的目标进程。</p>\n<p>选择第一个进程，输入 <code>1</code> ，再<code>Enter/回车</code>：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1</span><br></pre></td></tr></table></figure>\n\n<p>Attach成功之后，会打印Arthas LOGO。输入 <code>help</code> 可以获取到更多的帮助信息。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">help</span></span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/jlynet.github.io/2021/08/07/Java%E8%AF%8A%E6%96%AD%E5%B7%A5%E5%85%B7Arthas%E9%AB%98%E7%BA%A7%E5%91%BD%E4%BB%A4%E6%95%99%E7%A8%8B/Arthasstack%E5%91%BD%E4%BB%A4/O1CN01HzatXZ1RgccrlT90M_!!6000000002141-2-tps-529-244.png\" alt=\"Arthas Boot\"></p>\n<h2><span id=\"stack命令\">stack命令</span></h2><blockquote>\n<p>输出当前方法被调用的调用路径</p>\n</blockquote>\n<p>很多时候我们都知道一个方法被执行，但这个方法被执行的路径非常多，或者你根本就不知道这个方法是从那里被执行了，此时你需要的是 stack 命令。</p>\n<h4><span id=\"参数说明\">参数说明</span></h4><table>\n<thead>\n<tr>\n<th>参数名称</th>\n<th>参数说明</th>\n</tr>\n</thead>\n<tbody><tr>\n<td><em>class-pattern</em></td>\n<td>类名表达式匹配</td>\n</tr>\n<tr>\n<td><em>method-pattern</em></td>\n<td>方法名表达式匹配</td>\n</tr>\n<tr>\n<td><em>condition-express</em></td>\n<td>条件表达式</td>\n</tr>\n<tr>\n<td>[E]</td>\n<td>开启正则表达式匹配，默认为通配符匹配</td>\n</tr>\n<tr>\n<td><code>[n:]</code></td>\n<td>执行次数限制</td>\n</tr>\n</tbody></table>\n<p>这里重点要说明的是观察表达式，观察表达式的构成主要由 ognl 表达式组成，所以你可以这样写<code>&quot;&#123;params,returnObj&#125;&quot;</code>，只要是一个合法的 ognl 表达式，都能被正常支持。</p>\n<p>观察的维度也比较多，主要体现在参数 <code>advice</code> 的数据结构上。<code>Advice</code> 参数最主要是封装了通知节点的所有信息。</p>\n<ul>\n<li>特殊用法请参考：<a href=\"https://github.com/alibaba/arthas/issues/71\">https://github.com/alibaba/arthas/issues/71</a></li>\n<li>OGNL表达式官网：<a href=\"https://commons.apache.org/proper/commons-ognl/language-guide.html\">https://commons.apache.org/proper/commons-ognl/language-guide.html</a></li>\n</ul>\n<h4><span id=\"使用例子\">使用例子</span></h4><h5><span id=\"stack\">stack</span></h5><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">stack demo.MathGame primeFactors</span><br></pre></td></tr></table></figure>\n\n<p>按<code>q</code>或者<code>Ctrl+c</code>退出</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">q</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight console\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> stack demo.MathGame primeFactors</span></span><br><span class=\"line\">Press Ctrl+C to abort.</span><br><span class=\"line\">Affect(class-cnt:1 , method-cnt:1) cost in 36 ms.</span><br><span class=\"line\">ts=2018-12-04 01:32:19;thread_name=main;id=1;is_daemon=false;priority=5;TCCL=sun.misc.Launcher$AppClassLoader@3d4eac69</span><br><span class=\"line\">    @demo.MathGame.run()</span><br><span class=\"line\">        at demo.MathGame.main(MathGame.java:16)</span><br></pre></td></tr></table></figure>\n\n<h5><span id=\"据条件表达式来过滤\">据条件表达式来过滤</span></h5><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">stack demo.MathGame primeFactors <span class=\"string\">&#x27;params[0]&lt;0&#x27;</span> -n 2</span><br></pre></td></tr></table></figure>\n\n<p>按<code>q</code>或者<code>Ctrl+c</code>退出</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">q</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight console\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> stack demo.MathGame primeFactors <span class=\"string\">&#x27;params[0]&lt;0&#x27;</span> -n 2</span></span><br><span class=\"line\">Press Ctrl+C to abort.</span><br><span class=\"line\">Affect(class-cnt:1 , method-cnt:1) cost in 30 ms.</span><br><span class=\"line\">ts=2018-12-04 01:34:27;thread_name=main;id=1;is_daemon=false;priority=5;TCCL=sun.misc.Launcher$AppClassLoader@3d4eac69</span><br><span class=\"line\">    @demo.MathGame.run()</span><br><span class=\"line\">        at demo.MathGame.main(MathGame.java:16)</span><br><span class=\"line\"></span><br><span class=\"line\">ts=2018-12-04 01:34:30;thread_name=main;id=1;is_daemon=false;priority=5;TCCL=sun.misc.Launcher$AppClassLoader@3d4eac69</span><br><span class=\"line\">    @demo.MathGame.run()</span><br><span class=\"line\">        at demo.MathGame.main(MathGame.java:16)</span><br><span class=\"line\"></span><br><span class=\"line\">Command execution times exceed limit: 2, so command will exit. You can set it with -n option.</span><br></pre></td></tr></table></figure>\n\n<h5><span id=\"据执行时间来过滤\">据执行时间来过滤</span></h5><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">stack demo.MathGame primeFactors <span class=\"string\">&#x27;#cost&gt;5&#x27;</span></span><br></pre></td></tr></table></figure>\n\n<p>按<code>q</code>或者<code>Ctrl+c</code>退出</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">q</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight console\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> stack demo.MathGame primeFactors <span class=\"string\">&#x27;#cost&gt;5&#x27;</span></span></span><br><span class=\"line\">Press Ctrl+C to abort.</span><br><span class=\"line\">Affect(class-cnt:1 , method-cnt:1) cost in 35 ms.</span><br><span class=\"line\">ts=2018-12-04 01:35:58;thread_name=main;id=1;is_daemon=false;priority=5;TCCL=sun.misc.Launcher$AppClassLoader@3d4eac69</span><br><span class=\"line\">    @demo.MathGame.run()</span><br><span class=\"line\">        at demo.MathGame.main(MathGame.java:16)</span><br></pre></td></tr></table></figure>\n\n<h2><span id=\"更多信息\">更多信息</span></h2><p>在“stack”中，我们演示了了Arthas的stack命令。如果有更多的技巧或者使用疑问，欢迎在Issue里提出。</p>\n<ul>\n<li>Issues: <a href=\"https://github.com/alibaba/arthas/issues\">https://github.com/alibaba/arthas/issues</a></li>\n<li>文档： <a href=\"https://arthas.aliyun.com/doc\">https://arthas.aliyun.com/doc</a></li>\n</ul>\n<p>如果您在使用Arthas，请让我们知道。您的使用对我们非常重要：<a href=\"https://github.com/alibaba/arthas/issues/111\">查看</a></p>\n<p>文章拷贝来源：<a href=\"https://start.aliyun.com/course?spm=a2ck6.17690074.0.0.28bc2e7dHTphXs&amp;id=PaiFAkJM\">https://start.aliyun.com/course?spm=a2ck6.17690074.0.0.28bc2e7dHTphXs&amp;id=PaiFAkJM</a></p>\n","site":{"data":{}},"excerpt":"","more":"<!-- toc -->\n\n<ul>\n<li><a href=\"#%E5%90%AF%E5%8A%A8arthas-demo\">启动arthas demo</a></li>\n<li><a href=\"#%E5%90%AF%E5%8A%A8arthas-boot\">启动arthas-boot</a></li>\n<li><a href=\"#stack%E5%91%BD%E4%BB%A4\">stack命令</a><ul>\n<li><a href=\"#%E5%8F%82%E6%95%B0%E8%AF%B4%E6%98%8E\">参数说明</a></li>\n<li><a href=\"#%E4%BD%BF%E7%94%A8%E4%BE%8B%E5%AD%90\">使用例子</a><ul>\n<li><a href=\"#stack\">stack</a></li>\n<li><a href=\"#%E6%8D%AE%E6%9D%A1%E4%BB%B6%E8%A1%A8%E8%BE%BE%E5%BC%8F%E6%9D%A5%E8%BF%87%E6%BB%A4\">据条件表达式来过滤</a></li>\n<li><a href=\"#%E6%8D%AE%E6%89%A7%E8%A1%8C%E6%97%B6%E9%97%B4%E6%9D%A5%E8%BF%87%E6%BB%A4\">据执行时间来过滤</a></li>\n</ul>\n</li>\n</ul>\n</li>\n<li><a href=\"#%E6%9B%B4%E5%A4%9A%E4%BF%A1%E6%81%AF\">更多信息</a></li>\n</ul>\n<!-- tocstop -->\n\n<p><img src=\"/jlynet.github.io/2021/08/07/Java%E8%AF%8A%E6%96%AD%E5%B7%A5%E5%85%B7Arthas%E9%AB%98%E7%BA%A7%E5%91%BD%E4%BB%A4%E6%95%99%E7%A8%8B/Arthasstack%E5%91%BD%E4%BB%A4/arthas.png\" alt=\"Arthas\"></p>\n<p><code>Arthas</code> 是Alibaba开源的Java诊断工具，深受开发者喜爱。在线排查问题，无需重启；动态跟踪Java代码；实时监控JVM状态。</p>\n<p><code>Arthas</code> 支持JDK 6+，支持Linux/Mac/Windows，采用命令行交互模式，同时提供丰富的 <code>Tab</code> 自动补全功能，进一步方便进行问题的定位和诊断。</p>\n<p>当你遇到以下类似问题而束手无策时，Arthas可以帮助你解决：</p>\n<ul>\n<li>这个类从哪个 jar 包加载的？为什么会报各种类相关的 Exception？</li>\n<li>我改的代码为什么没有执行到？难道是我没 commit？分支搞错了？</li>\n<li>遇到问题无法在线上 debug，难道只能通过加日志再重新发布吗？</li>\n<li>线上遇到某个用户的数据处理有问题，但线上同样无法 debug，线下无法重现！</li>\n<li>是否有一个全局视角来查看系统的运行状况？</li>\n<li>有什么办法可以监控到JVM的实时运行状态？</li>\n<li>怎么快速定位应用的热点，生成火焰图？</li>\n</ul>\n<p>本教程会以一个简单的应用为例，演示stack命令。</p>\n<ul>\n<li>Github: <a href=\"https://github.com/alibaba/arthas\">https://github.com/alibaba/arthas</a></li>\n<li>文档: <a href=\"https://arthas.aliyun.com/doc/\">https://arthas.aliyun.com/doc/</a></li>\n</ul>\n<h2 id=\"启动arthas-demo\"><a href=\"#启动arthas-demo\" class=\"headerlink\" title=\"启动arthas demo\"></a>启动arthas demo</h2><p>下载<code>arthas-demo.jar</code>，再用<code>java -jar</code>命令启动：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wget https://arthas.aliyun.com/arthas-demo.jar;java -jar arthas-demo.jar</span><br></pre></td></tr></table></figure>\n\n<p><code>arthas-demo</code>是一个很简单的程序，它随机生成整数，再执行因式分解，把结果打印出来。如果生成的随机数是负数，则会打印提示信息。</p>\n<h2 id=\"启动arthas-boot\"><a href=\"#启动arthas-boot\" class=\"headerlink\" title=\"启动arthas-boot\"></a>启动arthas-boot</h2><p>在新的<code>Terminal 2</code>里，下载<code>arthas-boot.jar</code>，再用<code>java -jar</code>命令启动：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wget https://arthas.aliyun.com/arthas-boot.jar;java -jar arthas-boot.jar</span><br></pre></td></tr></table></figure>\n\n<p><code>arthas-boot</code>是<code>Arthas</code>的启动程序，它启动后，会列出所有的Java进程，用户可以选择需要诊断的目标进程。</p>\n<p>选择第一个进程，输入 <code>1</code> ，再<code>Enter/回车</code>：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1</span><br></pre></td></tr></table></figure>\n\n<p>Attach成功之后，会打印Arthas LOGO。输入 <code>help</code> 可以获取到更多的帮助信息。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">help</span></span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/jlynet.github.io/2021/08/07/Java%E8%AF%8A%E6%96%AD%E5%B7%A5%E5%85%B7Arthas%E9%AB%98%E7%BA%A7%E5%91%BD%E4%BB%A4%E6%95%99%E7%A8%8B/Arthasstack%E5%91%BD%E4%BB%A4/O1CN01HzatXZ1RgccrlT90M_!!6000000002141-2-tps-529-244.png\" alt=\"Arthas Boot\"></p>\n<h2 id=\"stack命令\"><a href=\"#stack命令\" class=\"headerlink\" title=\"stack命令\"></a>stack命令</h2><blockquote>\n<p>输出当前方法被调用的调用路径</p>\n</blockquote>\n<p>很多时候我们都知道一个方法被执行，但这个方法被执行的路径非常多，或者你根本就不知道这个方法是从那里被执行了，此时你需要的是 stack 命令。</p>\n<h4 id=\"参数说明\"><a href=\"#参数说明\" class=\"headerlink\" title=\"参数说明\"></a>参数说明</h4><table>\n<thead>\n<tr>\n<th>参数名称</th>\n<th>参数说明</th>\n</tr>\n</thead>\n<tbody><tr>\n<td><em>class-pattern</em></td>\n<td>类名表达式匹配</td>\n</tr>\n<tr>\n<td><em>method-pattern</em></td>\n<td>方法名表达式匹配</td>\n</tr>\n<tr>\n<td><em>condition-express</em></td>\n<td>条件表达式</td>\n</tr>\n<tr>\n<td>[E]</td>\n<td>开启正则表达式匹配，默认为通配符匹配</td>\n</tr>\n<tr>\n<td><code>[n:]</code></td>\n<td>执行次数限制</td>\n</tr>\n</tbody></table>\n<p>这里重点要说明的是观察表达式，观察表达式的构成主要由 ognl 表达式组成，所以你可以这样写<code>&quot;&#123;params,returnObj&#125;&quot;</code>，只要是一个合法的 ognl 表达式，都能被正常支持。</p>\n<p>观察的维度也比较多，主要体现在参数 <code>advice</code> 的数据结构上。<code>Advice</code> 参数最主要是封装了通知节点的所有信息。</p>\n<ul>\n<li>特殊用法请参考：<a href=\"https://github.com/alibaba/arthas/issues/71\">https://github.com/alibaba/arthas/issues/71</a></li>\n<li>OGNL表达式官网：<a href=\"https://commons.apache.org/proper/commons-ognl/language-guide.html\">https://commons.apache.org/proper/commons-ognl/language-guide.html</a></li>\n</ul>\n<h4 id=\"使用例子\"><a href=\"#使用例子\" class=\"headerlink\" title=\"使用例子\"></a>使用例子</h4><h5 id=\"stack\"><a href=\"#stack\" class=\"headerlink\" title=\"stack\"></a>stack</h5><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">stack demo.MathGame primeFactors</span><br></pre></td></tr></table></figure>\n\n<p>按<code>q</code>或者<code>Ctrl+c</code>退出</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">q</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight console\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> stack demo.MathGame primeFactors</span></span><br><span class=\"line\">Press Ctrl+C to abort.</span><br><span class=\"line\">Affect(class-cnt:1 , method-cnt:1) cost in 36 ms.</span><br><span class=\"line\">ts=2018-12-04 01:32:19;thread_name=main;id=1;is_daemon=false;priority=5;TCCL=sun.misc.Launcher$AppClassLoader@3d4eac69</span><br><span class=\"line\">    @demo.MathGame.run()</span><br><span class=\"line\">        at demo.MathGame.main(MathGame.java:16)</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"据条件表达式来过滤\"><a href=\"#据条件表达式来过滤\" class=\"headerlink\" title=\"据条件表达式来过滤\"></a>据条件表达式来过滤</h5><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">stack demo.MathGame primeFactors <span class=\"string\">&#x27;params[0]&lt;0&#x27;</span> -n 2</span><br></pre></td></tr></table></figure>\n\n<p>按<code>q</code>或者<code>Ctrl+c</code>退出</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">q</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight console\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> stack demo.MathGame primeFactors <span class=\"string\">&#x27;params[0]&lt;0&#x27;</span> -n 2</span></span><br><span class=\"line\">Press Ctrl+C to abort.</span><br><span class=\"line\">Affect(class-cnt:1 , method-cnt:1) cost in 30 ms.</span><br><span class=\"line\">ts=2018-12-04 01:34:27;thread_name=main;id=1;is_daemon=false;priority=5;TCCL=sun.misc.Launcher$AppClassLoader@3d4eac69</span><br><span class=\"line\">    @demo.MathGame.run()</span><br><span class=\"line\">        at demo.MathGame.main(MathGame.java:16)</span><br><span class=\"line\"></span><br><span class=\"line\">ts=2018-12-04 01:34:30;thread_name=main;id=1;is_daemon=false;priority=5;TCCL=sun.misc.Launcher$AppClassLoader@3d4eac69</span><br><span class=\"line\">    @demo.MathGame.run()</span><br><span class=\"line\">        at demo.MathGame.main(MathGame.java:16)</span><br><span class=\"line\"></span><br><span class=\"line\">Command execution times exceed limit: 2, so command will exit. You can set it with -n option.</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"据执行时间来过滤\"><a href=\"#据执行时间来过滤\" class=\"headerlink\" title=\"据执行时间来过滤\"></a>据执行时间来过滤</h5><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">stack demo.MathGame primeFactors <span class=\"string\">&#x27;#cost&gt;5&#x27;</span></span><br></pre></td></tr></table></figure>\n\n<p>按<code>q</code>或者<code>Ctrl+c</code>退出</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">q</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight console\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> stack demo.MathGame primeFactors <span class=\"string\">&#x27;#cost&gt;5&#x27;</span></span></span><br><span class=\"line\">Press Ctrl+C to abort.</span><br><span class=\"line\">Affect(class-cnt:1 , method-cnt:1) cost in 35 ms.</span><br><span class=\"line\">ts=2018-12-04 01:35:58;thread_name=main;id=1;is_daemon=false;priority=5;TCCL=sun.misc.Launcher$AppClassLoader@3d4eac69</span><br><span class=\"line\">    @demo.MathGame.run()</span><br><span class=\"line\">        at demo.MathGame.main(MathGame.java:16)</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"更多信息\"><a href=\"#更多信息\" class=\"headerlink\" title=\"更多信息\"></a>更多信息</h2><p>在“stack”中，我们演示了了Arthas的stack命令。如果有更多的技巧或者使用疑问，欢迎在Issue里提出。</p>\n<ul>\n<li>Issues: <a href=\"https://github.com/alibaba/arthas/issues\">https://github.com/alibaba/arthas/issues</a></li>\n<li>文档： <a href=\"https://arthas.aliyun.com/doc\">https://arthas.aliyun.com/doc</a></li>\n</ul>\n<p>如果您在使用Arthas，请让我们知道。您的使用对我们非常重要：<a href=\"https://github.com/alibaba/arthas/issues/111\">查看</a></p>\n<p>文章拷贝来源：<a href=\"https://start.aliyun.com/course?spm=a2ck6.17690074.0.0.28bc2e7dHTphXs&amp;id=PaiFAkJM\">https://start.aliyun.com/course?spm=a2ck6.17690074.0.0.28bc2e7dHTphXs&amp;id=PaiFAkJM</a></p>\n"},{"title":"Arthas sysenv命令","date":"2021-08-07T01:51:28.000Z","_content":"\n<!-- toc -->\n\n![Arthas](arthas.png)\n\n`Arthas` 是Alibaba开源的Java诊断工具，深受开发者喜爱。在线排查问题，无需重启；动态跟踪Java代码；实时监控JVM状态。\n\n`Arthas` 支持JDK 6+，支持Linux/Mac/Windows，采用命令行交互模式，同时提供丰富的 `Tab` 自动补全功能，进一步方便进行问题的定位和诊断。\n\n当你遇到以下类似问题而束手无策时，Arthas可以帮助你解决：\n\n- 这个类从哪个 jar 包加载的？为什么会报各种类相关的 Exception？\n- 我改的代码为什么没有执行到？难道是我没 commit？分支搞错了？\n- 遇到问题无法在线上 debug，难道只能通过加日志再重新发布吗？\n- 线上遇到某个用户的数据处理有问题，但线上同样无法 debug，线下无法重现！\n- 是否有一个全局视角来查看系统的运行状况？\n- 有什么办法可以监控到JVM的实时运行状态？\n- 怎么快速定位应用的热点，生成火焰图？\n\n本教程会以一个简单的应用为例，演示sysenv命令。\n\n- Github: https://github.com/alibaba/arthas\n- 文档: https://arthas.aliyun.com/doc/\n\n## 启动arthas demo\n\n下载`arthas-demo.jar`，再用`java -jar`命令启动：\n\n```bash\nwget https://arthas.aliyun.com/arthas-demo.jar;java -jar arthas-demo.jar\n```\n\n`arthas-demo`是一个很简单的程序，它随机生成整数，再执行因式分解，把结果打印出来。如果生成的随机数是负数，则会打印提示信息。\n\n## 启动arthas-boot\n\n在新的`Terminal 2`里，下载`arthas-boot.jar`，再用`java -jar`命令启动：\n\n```bash\nwget https://arthas.aliyun.com/arthas-boot.jar;java -jar arthas-boot.jar\n```\n\n`arthas-boot`是`Arthas`的启动程序，它启动后，会列出所有的Java进程，用户可以选择需要诊断的目标进程。\n\n选择第一个进程，输入 `1` ，再`Enter/回车`：\n\n```bash\n1\n```\n\nAttach成功之后，会打印Arthas LOGO。输入 `help` 可以获取到更多的帮助信息。\n\n```bash\nhelp\n```\n\n![Arthas Boot](O1CN01HzatXZ1RgccrlT90M_!!6000000002141-2-tps-529-244.png)\n\n## sysenv命令\n\n`sysenv` 命令可以查看当前JVM的环境属性(`System Property`)，与`sysprop`类似\n\n```bash\nsysenv\n```\n\n### 使用参考\n\n```\nsysenv -h\nsysenv -h\n```\n\n```\n USAGE:\n   sysenv [-h] [env-name]\n\n SUMMARY:\n   Display the system env.\n\n EXAMPLES:\n   sysenv\n   sysenv USER\n\n WIKI:\n   https://arthas.aliyun.com/doc/sysenv\n\n OPTIONS:\n -h, --help                                                 this help\n <env-name>                                                 env name\n```\n\n## 查看所有环境变量\n\n```\nsysenv\nsysenv\n```\n\n```console\n$ sysenv\n KEY                      VALUE\n----------------------------------------------------------------------------------------------------------------------------\n PATH                     /Users/admin/.sdkman/candidates/visualvm/current/bin:/Users/admin/.sdkman/candidates/ja\n                          va/current/bin:/usr/local/bin:/usr/bin:/bin:/usr/sbin:/sbin:/Applications/Wireshark.app/Contents/\n                          MacOS\n SDKMAN_VERSION           5.7.3+337\n JAVA_HOME                /Users/admin/.sdkman/candidates/java/current\n JAVA_MAIN_CLASS_65244    demo.MathGame\n TERM                     xterm-256color\n LANG                     zh_CN.UTF-8\n AUTOJUMP_SOURCED         1\n COLORTERM                truecolor\n LOGNAME                  admin\n XPC_SERVICE_NAME         0\n PWD                      /Users/admin/code/ali/arthas/demo\n TERM_PROGRAM_VERSION     3.2.5\n _                        /Users/admin/.sdkman/candidates/java/current/bin/java\n SHELL                    /bin/bash\n TERM_PROGRAM             iTerm.app\n SDKMAN_PLATFORM          Darwin\n USER                     admin\n ITERM_PROFILE            Default\n TMPDIR                   /var/folders/0r/k561bkk917gg972stqclbz9h0000gn/T/\n XPC_FLAGS                0x0\n TERM_SESSION_ID          w0t4p0:60BC264D-9649-42AC-A7E4-AF85B69F93F8\n __CF_USER_TEXT_ENCODING  0x1F5:0x19:0x34\n Apple_PubSub_Socket_Ren  /private/tmp/com.apple.launchd.DwmmjSQsll/Render\n der\n COLORFGBG                7;0\n HOME                     /Users/admin\n SHLVL                    1\n AUTOJUMP_ERROR_PATH      /Users/admin/Library/autojump/errors.log\n```\n\n## 查看单个环境变量\n\n```\nsysenv USER\nsysenv USER\n```\n\n```console\n$ sysenv USER\nUSER=admin\n```\n\n## 自动补全\n\nArthas支持丰富的自动补全功能，在使用有疑惑时，可以输入`Tab`来获取更多信息。\n\n比如输入 `sysenv US` 之后，再输入`Tab`，会补全出对应的key：\n\n```\n$ sysenv US\nUSER\n...\n```\n\n## 历史命令的补全\n\n支持通过`TAB`键自动补全\n\n如果想再执行之前的命令，可以在输入一半时，按`Up/↑` 或者 `Ddown/↓`，来匹配到之前的命令。\n\n比如之前执行过`sysenv USER`，那么在输入`sysenv US`之后，可以输入`Up/↑`，就会自动补全为`sysenv USER`。\n\n如果想查看所有的历史命令，也可以通过 `history` 命令查看到。\n\n```bash\nhistory\n```\n\n## 更多信息\n\n在“sysenv”中，我们演示了了Arthas的sysenv命令。如果有更多的技巧或者使用疑问，欢迎在Issue里提出。\n\n- Issues: https://github.com/alibaba/arthas/issues\n- 文档： https://arthas.aliyun.com/doc\n\n如果您在使用Arthas，请让我们知道。您的使用对我们非常重要：[查看](https://github.com/alibaba/arthas/issues/111)\n\n文章拷贝来源：https://start.aliyun.com/course?spm=a2ck6.17690074.0.0.28bc2e7dHTphXs&id=PaiFAkJM","source":"_posts/Java诊断工具Arthas高级命令教程/Arthassysenv命令.md","raw":"---\ntitle: Arthas sysenv命令\ndate: 2021-08-07 09:51:28\ntags: ['Java 诊断工具 Arthas 高级命令教程']\n---\n\n<!-- toc -->\n\n![Arthas](arthas.png)\n\n`Arthas` 是Alibaba开源的Java诊断工具，深受开发者喜爱。在线排查问题，无需重启；动态跟踪Java代码；实时监控JVM状态。\n\n`Arthas` 支持JDK 6+，支持Linux/Mac/Windows，采用命令行交互模式，同时提供丰富的 `Tab` 自动补全功能，进一步方便进行问题的定位和诊断。\n\n当你遇到以下类似问题而束手无策时，Arthas可以帮助你解决：\n\n- 这个类从哪个 jar 包加载的？为什么会报各种类相关的 Exception？\n- 我改的代码为什么没有执行到？难道是我没 commit？分支搞错了？\n- 遇到问题无法在线上 debug，难道只能通过加日志再重新发布吗？\n- 线上遇到某个用户的数据处理有问题，但线上同样无法 debug，线下无法重现！\n- 是否有一个全局视角来查看系统的运行状况？\n- 有什么办法可以监控到JVM的实时运行状态？\n- 怎么快速定位应用的热点，生成火焰图？\n\n本教程会以一个简单的应用为例，演示sysenv命令。\n\n- Github: https://github.com/alibaba/arthas\n- 文档: https://arthas.aliyun.com/doc/\n\n## 启动arthas demo\n\n下载`arthas-demo.jar`，再用`java -jar`命令启动：\n\n```bash\nwget https://arthas.aliyun.com/arthas-demo.jar;java -jar arthas-demo.jar\n```\n\n`arthas-demo`是一个很简单的程序，它随机生成整数，再执行因式分解，把结果打印出来。如果生成的随机数是负数，则会打印提示信息。\n\n## 启动arthas-boot\n\n在新的`Terminal 2`里，下载`arthas-boot.jar`，再用`java -jar`命令启动：\n\n```bash\nwget https://arthas.aliyun.com/arthas-boot.jar;java -jar arthas-boot.jar\n```\n\n`arthas-boot`是`Arthas`的启动程序，它启动后，会列出所有的Java进程，用户可以选择需要诊断的目标进程。\n\n选择第一个进程，输入 `1` ，再`Enter/回车`：\n\n```bash\n1\n```\n\nAttach成功之后，会打印Arthas LOGO。输入 `help` 可以获取到更多的帮助信息。\n\n```bash\nhelp\n```\n\n![Arthas Boot](O1CN01HzatXZ1RgccrlT90M_!!6000000002141-2-tps-529-244.png)\n\n## sysenv命令\n\n`sysenv` 命令可以查看当前JVM的环境属性(`System Property`)，与`sysprop`类似\n\n```bash\nsysenv\n```\n\n### 使用参考\n\n```\nsysenv -h\nsysenv -h\n```\n\n```\n USAGE:\n   sysenv [-h] [env-name]\n\n SUMMARY:\n   Display the system env.\n\n EXAMPLES:\n   sysenv\n   sysenv USER\n\n WIKI:\n   https://arthas.aliyun.com/doc/sysenv\n\n OPTIONS:\n -h, --help                                                 this help\n <env-name>                                                 env name\n```\n\n## 查看所有环境变量\n\n```\nsysenv\nsysenv\n```\n\n```console\n$ sysenv\n KEY                      VALUE\n----------------------------------------------------------------------------------------------------------------------------\n PATH                     /Users/admin/.sdkman/candidates/visualvm/current/bin:/Users/admin/.sdkman/candidates/ja\n                          va/current/bin:/usr/local/bin:/usr/bin:/bin:/usr/sbin:/sbin:/Applications/Wireshark.app/Contents/\n                          MacOS\n SDKMAN_VERSION           5.7.3+337\n JAVA_HOME                /Users/admin/.sdkman/candidates/java/current\n JAVA_MAIN_CLASS_65244    demo.MathGame\n TERM                     xterm-256color\n LANG                     zh_CN.UTF-8\n AUTOJUMP_SOURCED         1\n COLORTERM                truecolor\n LOGNAME                  admin\n XPC_SERVICE_NAME         0\n PWD                      /Users/admin/code/ali/arthas/demo\n TERM_PROGRAM_VERSION     3.2.5\n _                        /Users/admin/.sdkman/candidates/java/current/bin/java\n SHELL                    /bin/bash\n TERM_PROGRAM             iTerm.app\n SDKMAN_PLATFORM          Darwin\n USER                     admin\n ITERM_PROFILE            Default\n TMPDIR                   /var/folders/0r/k561bkk917gg972stqclbz9h0000gn/T/\n XPC_FLAGS                0x0\n TERM_SESSION_ID          w0t4p0:60BC264D-9649-42AC-A7E4-AF85B69F93F8\n __CF_USER_TEXT_ENCODING  0x1F5:0x19:0x34\n Apple_PubSub_Socket_Ren  /private/tmp/com.apple.launchd.DwmmjSQsll/Render\n der\n COLORFGBG                7;0\n HOME                     /Users/admin\n SHLVL                    1\n AUTOJUMP_ERROR_PATH      /Users/admin/Library/autojump/errors.log\n```\n\n## 查看单个环境变量\n\n```\nsysenv USER\nsysenv USER\n```\n\n```console\n$ sysenv USER\nUSER=admin\n```\n\n## 自动补全\n\nArthas支持丰富的自动补全功能，在使用有疑惑时，可以输入`Tab`来获取更多信息。\n\n比如输入 `sysenv US` 之后，再输入`Tab`，会补全出对应的key：\n\n```\n$ sysenv US\nUSER\n...\n```\n\n## 历史命令的补全\n\n支持通过`TAB`键自动补全\n\n如果想再执行之前的命令，可以在输入一半时，按`Up/↑` 或者 `Ddown/↓`，来匹配到之前的命令。\n\n比如之前执行过`sysenv USER`，那么在输入`sysenv US`之后，可以输入`Up/↑`，就会自动补全为`sysenv USER`。\n\n如果想查看所有的历史命令，也可以通过 `history` 命令查看到。\n\n```bash\nhistory\n```\n\n## 更多信息\n\n在“sysenv”中，我们演示了了Arthas的sysenv命令。如果有更多的技巧或者使用疑问，欢迎在Issue里提出。\n\n- Issues: https://github.com/alibaba/arthas/issues\n- 文档： https://arthas.aliyun.com/doc\n\n如果您在使用Arthas，请让我们知道。您的使用对我们非常重要：[查看](https://github.com/alibaba/arthas/issues/111)\n\n文章拷贝来源：https://start.aliyun.com/course?spm=a2ck6.17690074.0.0.28bc2e7dHTphXs&id=PaiFAkJM","slug":"Java诊断工具Arthas高级命令教程/Arthassysenv命令","published":1,"updated":"2021-08-07T05:35:23.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cks1cgr6x002mfw5idknwd2yz","content":"<!-- toc -->\n\n<ul>\n<li><a href=\"#%E5%90%AF%E5%8A%A8arthas-demo\">启动arthas demo</a></li>\n<li><a href=\"#%E5%90%AF%E5%8A%A8arthas-boot\">启动arthas-boot</a></li>\n<li><a href=\"#sysenv%E5%91%BD%E4%BB%A4\">sysenv命令</a><ul>\n<li><a href=\"#%E4%BD%BF%E7%94%A8%E5%8F%82%E8%80%83\">使用参考</a></li>\n</ul>\n</li>\n<li><a href=\"#%E6%9F%A5%E7%9C%8B%E6%89%80%E6%9C%89%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F\">查看所有环境变量</a></li>\n<li><a href=\"#%E6%9F%A5%E7%9C%8B%E5%8D%95%E4%B8%AA%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F\">查看单个环境变量</a></li>\n<li><a href=\"#%E8%87%AA%E5%8A%A8%E8%A1%A5%E5%85%A8\">自动补全</a></li>\n<li><a href=\"#%E5%8E%86%E5%8F%B2%E5%91%BD%E4%BB%A4%E7%9A%84%E8%A1%A5%E5%85%A8\">历史命令的补全</a></li>\n<li><a href=\"#%E6%9B%B4%E5%A4%9A%E4%BF%A1%E6%81%AF\">更多信息</a></li>\n</ul>\n<!-- tocstop -->\n\n<p><img src=\"/jlynet.github.io/2021/08/07/Java%E8%AF%8A%E6%96%AD%E5%B7%A5%E5%85%B7Arthas%E9%AB%98%E7%BA%A7%E5%91%BD%E4%BB%A4%E6%95%99%E7%A8%8B/Arthassysenv%E5%91%BD%E4%BB%A4/arthas.png\" alt=\"Arthas\"></p>\n<p><code>Arthas</code> 是Alibaba开源的Java诊断工具，深受开发者喜爱。在线排查问题，无需重启；动态跟踪Java代码；实时监控JVM状态。</p>\n<p><code>Arthas</code> 支持JDK 6+，支持Linux/Mac/Windows，采用命令行交互模式，同时提供丰富的 <code>Tab</code> 自动补全功能，进一步方便进行问题的定位和诊断。</p>\n<p>当你遇到以下类似问题而束手无策时，Arthas可以帮助你解决：</p>\n<ul>\n<li>这个类从哪个 jar 包加载的？为什么会报各种类相关的 Exception？</li>\n<li>我改的代码为什么没有执行到？难道是我没 commit？分支搞错了？</li>\n<li>遇到问题无法在线上 debug，难道只能通过加日志再重新发布吗？</li>\n<li>线上遇到某个用户的数据处理有问题，但线上同样无法 debug，线下无法重现！</li>\n<li>是否有一个全局视角来查看系统的运行状况？</li>\n<li>有什么办法可以监控到JVM的实时运行状态？</li>\n<li>怎么快速定位应用的热点，生成火焰图？</li>\n</ul>\n<p>本教程会以一个简单的应用为例，演示sysenv命令。</p>\n<ul>\n<li>Github: <a href=\"https://github.com/alibaba/arthas\">https://github.com/alibaba/arthas</a></li>\n<li>文档: <a href=\"https://arthas.aliyun.com/doc/\">https://arthas.aliyun.com/doc/</a></li>\n</ul>\n<h2><span id=\"启动arthas-demo\">启动arthas demo</span></h2><p>下载<code>arthas-demo.jar</code>，再用<code>java -jar</code>命令启动：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wget https://arthas.aliyun.com/arthas-demo.jar;java -jar arthas-demo.jar</span><br></pre></td></tr></table></figure>\n\n<p><code>arthas-demo</code>是一个很简单的程序，它随机生成整数，再执行因式分解，把结果打印出来。如果生成的随机数是负数，则会打印提示信息。</p>\n<h2><span id=\"启动arthas-boot\">启动arthas-boot</span></h2><p>在新的<code>Terminal 2</code>里，下载<code>arthas-boot.jar</code>，再用<code>java -jar</code>命令启动：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wget https://arthas.aliyun.com/arthas-boot.jar;java -jar arthas-boot.jar</span><br></pre></td></tr></table></figure>\n\n<p><code>arthas-boot</code>是<code>Arthas</code>的启动程序，它启动后，会列出所有的Java进程，用户可以选择需要诊断的目标进程。</p>\n<p>选择第一个进程，输入 <code>1</code> ，再<code>Enter/回车</code>：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1</span><br></pre></td></tr></table></figure>\n\n<p>Attach成功之后，会打印Arthas LOGO。输入 <code>help</code> 可以获取到更多的帮助信息。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">help</span></span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/jlynet.github.io/2021/08/07/Java%E8%AF%8A%E6%96%AD%E5%B7%A5%E5%85%B7Arthas%E9%AB%98%E7%BA%A7%E5%91%BD%E4%BB%A4%E6%95%99%E7%A8%8B/Arthassysenv%E5%91%BD%E4%BB%A4/O1CN01HzatXZ1RgccrlT90M_!!6000000002141-2-tps-529-244.png\" alt=\"Arthas Boot\"></p>\n<h2><span id=\"sysenv命令\">sysenv命令</span></h2><p><code>sysenv</code> 命令可以查看当前JVM的环境属性(<code>System Property</code>)，与<code>sysprop</code>类似</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sysenv</span><br></pre></td></tr></table></figure>\n\n<h3><span id=\"使用参考\">使用参考</span></h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sysenv -h</span><br><span class=\"line\">sysenv -h</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">USAGE:</span><br><span class=\"line\">  sysenv [-h] [env-name]</span><br><span class=\"line\"></span><br><span class=\"line\">SUMMARY:</span><br><span class=\"line\">  Display the system env.</span><br><span class=\"line\"></span><br><span class=\"line\">EXAMPLES:</span><br><span class=\"line\">  sysenv</span><br><span class=\"line\">  sysenv USER</span><br><span class=\"line\"></span><br><span class=\"line\">WIKI:</span><br><span class=\"line\">  https://arthas.aliyun.com/doc/sysenv</span><br><span class=\"line\"></span><br><span class=\"line\">OPTIONS:</span><br><span class=\"line\">-h, --help                                                 this help</span><br><span class=\"line\">&lt;env-name&gt;                                                 env name</span><br></pre></td></tr></table></figure>\n\n<h2><span id=\"查看所有环境变量\">查看所有环境变量</span></h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sysenv</span><br><span class=\"line\">sysenv</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight console\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> sysenv</span></span><br><span class=\"line\"> KEY                      VALUE</span><br><span class=\"line\">----------------------------------------------------------------------------------------------------------------------------</span><br><span class=\"line\"> PATH                     /Users/admin/.sdkman/candidates/visualvm/current/bin:/Users/admin/.sdkman/candidates/ja</span><br><span class=\"line\">                          va/current/bin:/usr/local/bin:/usr/bin:/bin:/usr/sbin:/sbin:/Applications/Wireshark.app/Contents/</span><br><span class=\"line\">                          MacOS</span><br><span class=\"line\"> SDKMAN_VERSION           5.7.3+337</span><br><span class=\"line\"> JAVA_HOME                /Users/admin/.sdkman/candidates/java/current</span><br><span class=\"line\"> JAVA_MAIN_CLASS_65244    demo.MathGame</span><br><span class=\"line\"> TERM                     xterm-256color</span><br><span class=\"line\"> LANG                     zh_CN.UTF-8</span><br><span class=\"line\"> AUTOJUMP_SOURCED         1</span><br><span class=\"line\"> COLORTERM                truecolor</span><br><span class=\"line\"> LOGNAME                  admin</span><br><span class=\"line\"> XPC_SERVICE_NAME         0</span><br><span class=\"line\"> PWD                      /Users/admin/code/ali/arthas/demo</span><br><span class=\"line\"> TERM_PROGRAM_VERSION     3.2.5</span><br><span class=\"line\"> _                        /Users/admin/.sdkman/candidates/java/current/bin/java</span><br><span class=\"line\"> SHELL                    /bin/bash</span><br><span class=\"line\"> TERM_PROGRAM             iTerm.app</span><br><span class=\"line\"> SDKMAN_PLATFORM          Darwin</span><br><span class=\"line\"> USER                     admin</span><br><span class=\"line\"> ITERM_PROFILE            Default</span><br><span class=\"line\"> TMPDIR                   /var/folders/0r/k561bkk917gg972stqclbz9h0000gn/T/</span><br><span class=\"line\"> XPC_FLAGS                0x0</span><br><span class=\"line\"> TERM_SESSION_ID          w0t4p0:60BC264D-9649-42AC-A7E4-AF85B69F93F8</span><br><span class=\"line\"> __CF_USER_TEXT_ENCODING  0x1F5:0x19:0x34</span><br><span class=\"line\"> Apple_PubSub_Socket_Ren  /private/tmp/com.apple.launchd.DwmmjSQsll/Render</span><br><span class=\"line\"> der</span><br><span class=\"line\"> COLORFGBG                7;0</span><br><span class=\"line\"> HOME                     /Users/admin</span><br><span class=\"line\"> SHLVL                    1</span><br><span class=\"line\"> AUTOJUMP_ERROR_PATH      /Users/admin/Library/autojump/errors.log</span><br></pre></td></tr></table></figure>\n\n<h2><span id=\"查看单个环境变量\">查看单个环境变量</span></h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sysenv USER</span><br><span class=\"line\">sysenv USER</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight console\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> sysenv USER</span></span><br><span class=\"line\">USER=admin</span><br></pre></td></tr></table></figure>\n\n<h2><span id=\"自动补全\">自动补全</span></h2><p>Arthas支持丰富的自动补全功能，在使用有疑惑时，可以输入<code>Tab</code>来获取更多信息。</p>\n<p>比如输入 <code>sysenv US</code> 之后，再输入<code>Tab</code>，会补全出对应的key：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ sysenv US</span><br><span class=\"line\">USER</span><br><span class=\"line\">...</span><br></pre></td></tr></table></figure>\n\n<h2><span id=\"历史命令的补全\">历史命令的补全</span></h2><p>支持通过<code>TAB</code>键自动补全</p>\n<p>如果想再执行之前的命令，可以在输入一半时，按<code>Up/↑</code> 或者 <code>Ddown/↓</code>，来匹配到之前的命令。</p>\n<p>比如之前执行过<code>sysenv USER</code>，那么在输入<code>sysenv US</code>之后，可以输入<code>Up/↑</code>，就会自动补全为<code>sysenv USER</code>。</p>\n<p>如果想查看所有的历史命令，也可以通过 <code>history</code> 命令查看到。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">history</span></span><br></pre></td></tr></table></figure>\n\n<h2><span id=\"更多信息\">更多信息</span></h2><p>在“sysenv”中，我们演示了了Arthas的sysenv命令。如果有更多的技巧或者使用疑问，欢迎在Issue里提出。</p>\n<ul>\n<li>Issues: <a href=\"https://github.com/alibaba/arthas/issues\">https://github.com/alibaba/arthas/issues</a></li>\n<li>文档： <a href=\"https://arthas.aliyun.com/doc\">https://arthas.aliyun.com/doc</a></li>\n</ul>\n<p>如果您在使用Arthas，请让我们知道。您的使用对我们非常重要：<a href=\"https://github.com/alibaba/arthas/issues/111\">查看</a></p>\n<p>文章拷贝来源：<a href=\"https://start.aliyun.com/course?spm=a2ck6.17690074.0.0.28bc2e7dHTphXs&amp;id=PaiFAkJM\">https://start.aliyun.com/course?spm=a2ck6.17690074.0.0.28bc2e7dHTphXs&amp;id=PaiFAkJM</a></p>\n","site":{"data":{}},"excerpt":"","more":"<!-- toc -->\n\n<ul>\n<li><a href=\"#%E5%90%AF%E5%8A%A8arthas-demo\">启动arthas demo</a></li>\n<li><a href=\"#%E5%90%AF%E5%8A%A8arthas-boot\">启动arthas-boot</a></li>\n<li><a href=\"#sysenv%E5%91%BD%E4%BB%A4\">sysenv命令</a><ul>\n<li><a href=\"#%E4%BD%BF%E7%94%A8%E5%8F%82%E8%80%83\">使用参考</a></li>\n</ul>\n</li>\n<li><a href=\"#%E6%9F%A5%E7%9C%8B%E6%89%80%E6%9C%89%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F\">查看所有环境变量</a></li>\n<li><a href=\"#%E6%9F%A5%E7%9C%8B%E5%8D%95%E4%B8%AA%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F\">查看单个环境变量</a></li>\n<li><a href=\"#%E8%87%AA%E5%8A%A8%E8%A1%A5%E5%85%A8\">自动补全</a></li>\n<li><a href=\"#%E5%8E%86%E5%8F%B2%E5%91%BD%E4%BB%A4%E7%9A%84%E8%A1%A5%E5%85%A8\">历史命令的补全</a></li>\n<li><a href=\"#%E6%9B%B4%E5%A4%9A%E4%BF%A1%E6%81%AF\">更多信息</a></li>\n</ul>\n<!-- tocstop -->\n\n<p><img src=\"/jlynet.github.io/2021/08/07/Java%E8%AF%8A%E6%96%AD%E5%B7%A5%E5%85%B7Arthas%E9%AB%98%E7%BA%A7%E5%91%BD%E4%BB%A4%E6%95%99%E7%A8%8B/Arthassysenv%E5%91%BD%E4%BB%A4/arthas.png\" alt=\"Arthas\"></p>\n<p><code>Arthas</code> 是Alibaba开源的Java诊断工具，深受开发者喜爱。在线排查问题，无需重启；动态跟踪Java代码；实时监控JVM状态。</p>\n<p><code>Arthas</code> 支持JDK 6+，支持Linux/Mac/Windows，采用命令行交互模式，同时提供丰富的 <code>Tab</code> 自动补全功能，进一步方便进行问题的定位和诊断。</p>\n<p>当你遇到以下类似问题而束手无策时，Arthas可以帮助你解决：</p>\n<ul>\n<li>这个类从哪个 jar 包加载的？为什么会报各种类相关的 Exception？</li>\n<li>我改的代码为什么没有执行到？难道是我没 commit？分支搞错了？</li>\n<li>遇到问题无法在线上 debug，难道只能通过加日志再重新发布吗？</li>\n<li>线上遇到某个用户的数据处理有问题，但线上同样无法 debug，线下无法重现！</li>\n<li>是否有一个全局视角来查看系统的运行状况？</li>\n<li>有什么办法可以监控到JVM的实时运行状态？</li>\n<li>怎么快速定位应用的热点，生成火焰图？</li>\n</ul>\n<p>本教程会以一个简单的应用为例，演示sysenv命令。</p>\n<ul>\n<li>Github: <a href=\"https://github.com/alibaba/arthas\">https://github.com/alibaba/arthas</a></li>\n<li>文档: <a href=\"https://arthas.aliyun.com/doc/\">https://arthas.aliyun.com/doc/</a></li>\n</ul>\n<h2 id=\"启动arthas-demo\"><a href=\"#启动arthas-demo\" class=\"headerlink\" title=\"启动arthas demo\"></a>启动arthas demo</h2><p>下载<code>arthas-demo.jar</code>，再用<code>java -jar</code>命令启动：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wget https://arthas.aliyun.com/arthas-demo.jar;java -jar arthas-demo.jar</span><br></pre></td></tr></table></figure>\n\n<p><code>arthas-demo</code>是一个很简单的程序，它随机生成整数，再执行因式分解，把结果打印出来。如果生成的随机数是负数，则会打印提示信息。</p>\n<h2 id=\"启动arthas-boot\"><a href=\"#启动arthas-boot\" class=\"headerlink\" title=\"启动arthas-boot\"></a>启动arthas-boot</h2><p>在新的<code>Terminal 2</code>里，下载<code>arthas-boot.jar</code>，再用<code>java -jar</code>命令启动：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wget https://arthas.aliyun.com/arthas-boot.jar;java -jar arthas-boot.jar</span><br></pre></td></tr></table></figure>\n\n<p><code>arthas-boot</code>是<code>Arthas</code>的启动程序，它启动后，会列出所有的Java进程，用户可以选择需要诊断的目标进程。</p>\n<p>选择第一个进程，输入 <code>1</code> ，再<code>Enter/回车</code>：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1</span><br></pre></td></tr></table></figure>\n\n<p>Attach成功之后，会打印Arthas LOGO。输入 <code>help</code> 可以获取到更多的帮助信息。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">help</span></span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/jlynet.github.io/2021/08/07/Java%E8%AF%8A%E6%96%AD%E5%B7%A5%E5%85%B7Arthas%E9%AB%98%E7%BA%A7%E5%91%BD%E4%BB%A4%E6%95%99%E7%A8%8B/Arthassysenv%E5%91%BD%E4%BB%A4/O1CN01HzatXZ1RgccrlT90M_!!6000000002141-2-tps-529-244.png\" alt=\"Arthas Boot\"></p>\n<h2 id=\"sysenv命令\"><a href=\"#sysenv命令\" class=\"headerlink\" title=\"sysenv命令\"></a>sysenv命令</h2><p><code>sysenv</code> 命令可以查看当前JVM的环境属性(<code>System Property</code>)，与<code>sysprop</code>类似</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sysenv</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"使用参考\"><a href=\"#使用参考\" class=\"headerlink\" title=\"使用参考\"></a>使用参考</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sysenv -h</span><br><span class=\"line\">sysenv -h</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">USAGE:</span><br><span class=\"line\">  sysenv [-h] [env-name]</span><br><span class=\"line\"></span><br><span class=\"line\">SUMMARY:</span><br><span class=\"line\">  Display the system env.</span><br><span class=\"line\"></span><br><span class=\"line\">EXAMPLES:</span><br><span class=\"line\">  sysenv</span><br><span class=\"line\">  sysenv USER</span><br><span class=\"line\"></span><br><span class=\"line\">WIKI:</span><br><span class=\"line\">  https://arthas.aliyun.com/doc/sysenv</span><br><span class=\"line\"></span><br><span class=\"line\">OPTIONS:</span><br><span class=\"line\">-h, --help                                                 this help</span><br><span class=\"line\">&lt;env-name&gt;                                                 env name</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"查看所有环境变量\"><a href=\"#查看所有环境变量\" class=\"headerlink\" title=\"查看所有环境变量\"></a>查看所有环境变量</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sysenv</span><br><span class=\"line\">sysenv</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight console\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> sysenv</span></span><br><span class=\"line\"> KEY                      VALUE</span><br><span class=\"line\">----------------------------------------------------------------------------------------------------------------------------</span><br><span class=\"line\"> PATH                     /Users/admin/.sdkman/candidates/visualvm/current/bin:/Users/admin/.sdkman/candidates/ja</span><br><span class=\"line\">                          va/current/bin:/usr/local/bin:/usr/bin:/bin:/usr/sbin:/sbin:/Applications/Wireshark.app/Contents/</span><br><span class=\"line\">                          MacOS</span><br><span class=\"line\"> SDKMAN_VERSION           5.7.3+337</span><br><span class=\"line\"> JAVA_HOME                /Users/admin/.sdkman/candidates/java/current</span><br><span class=\"line\"> JAVA_MAIN_CLASS_65244    demo.MathGame</span><br><span class=\"line\"> TERM                     xterm-256color</span><br><span class=\"line\"> LANG                     zh_CN.UTF-8</span><br><span class=\"line\"> AUTOJUMP_SOURCED         1</span><br><span class=\"line\"> COLORTERM                truecolor</span><br><span class=\"line\"> LOGNAME                  admin</span><br><span class=\"line\"> XPC_SERVICE_NAME         0</span><br><span class=\"line\"> PWD                      /Users/admin/code/ali/arthas/demo</span><br><span class=\"line\"> TERM_PROGRAM_VERSION     3.2.5</span><br><span class=\"line\"> _                        /Users/admin/.sdkman/candidates/java/current/bin/java</span><br><span class=\"line\"> SHELL                    /bin/bash</span><br><span class=\"line\"> TERM_PROGRAM             iTerm.app</span><br><span class=\"line\"> SDKMAN_PLATFORM          Darwin</span><br><span class=\"line\"> USER                     admin</span><br><span class=\"line\"> ITERM_PROFILE            Default</span><br><span class=\"line\"> TMPDIR                   /var/folders/0r/k561bkk917gg972stqclbz9h0000gn/T/</span><br><span class=\"line\"> XPC_FLAGS                0x0</span><br><span class=\"line\"> TERM_SESSION_ID          w0t4p0:60BC264D-9649-42AC-A7E4-AF85B69F93F8</span><br><span class=\"line\"> __CF_USER_TEXT_ENCODING  0x1F5:0x19:0x34</span><br><span class=\"line\"> Apple_PubSub_Socket_Ren  /private/tmp/com.apple.launchd.DwmmjSQsll/Render</span><br><span class=\"line\"> der</span><br><span class=\"line\"> COLORFGBG                7;0</span><br><span class=\"line\"> HOME                     /Users/admin</span><br><span class=\"line\"> SHLVL                    1</span><br><span class=\"line\"> AUTOJUMP_ERROR_PATH      /Users/admin/Library/autojump/errors.log</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"查看单个环境变量\"><a href=\"#查看单个环境变量\" class=\"headerlink\" title=\"查看单个环境变量\"></a>查看单个环境变量</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sysenv USER</span><br><span class=\"line\">sysenv USER</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight console\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> sysenv USER</span></span><br><span class=\"line\">USER=admin</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"自动补全\"><a href=\"#自动补全\" class=\"headerlink\" title=\"自动补全\"></a>自动补全</h2><p>Arthas支持丰富的自动补全功能，在使用有疑惑时，可以输入<code>Tab</code>来获取更多信息。</p>\n<p>比如输入 <code>sysenv US</code> 之后，再输入<code>Tab</code>，会补全出对应的key：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ sysenv US</span><br><span class=\"line\">USER</span><br><span class=\"line\">...</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"历史命令的补全\"><a href=\"#历史命令的补全\" class=\"headerlink\" title=\"历史命令的补全\"></a>历史命令的补全</h2><p>支持通过<code>TAB</code>键自动补全</p>\n<p>如果想再执行之前的命令，可以在输入一半时，按<code>Up/↑</code> 或者 <code>Ddown/↓</code>，来匹配到之前的命令。</p>\n<p>比如之前执行过<code>sysenv USER</code>，那么在输入<code>sysenv US</code>之后，可以输入<code>Up/↑</code>，就会自动补全为<code>sysenv USER</code>。</p>\n<p>如果想查看所有的历史命令，也可以通过 <code>history</code> 命令查看到。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">history</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"更多信息\"><a href=\"#更多信息\" class=\"headerlink\" title=\"更多信息\"></a>更多信息</h2><p>在“sysenv”中，我们演示了了Arthas的sysenv命令。如果有更多的技巧或者使用疑问，欢迎在Issue里提出。</p>\n<ul>\n<li>Issues: <a href=\"https://github.com/alibaba/arthas/issues\">https://github.com/alibaba/arthas/issues</a></li>\n<li>文档： <a href=\"https://arthas.aliyun.com/doc\">https://arthas.aliyun.com/doc</a></li>\n</ul>\n<p>如果您在使用Arthas，请让我们知道。您的使用对我们非常重要：<a href=\"https://github.com/alibaba/arthas/issues/111\">查看</a></p>\n<p>文章拷贝来源：<a href=\"https://start.aliyun.com/course?spm=a2ck6.17690074.0.0.28bc2e7dHTphXs&amp;id=PaiFAkJM\">https://start.aliyun.com/course?spm=a2ck6.17690074.0.0.28bc2e7dHTphXs&amp;id=PaiFAkJM</a></p>\n"},{"title":"Arthas sysprop命令","date":"2021-08-07T01:51:29.000Z","_content":"\n<!-- toc -->\n\n![Arthas](arthas.png)\n\n`Arthas` 是Alibaba开源的Java诊断工具，深受开发者喜爱。在线排查问题，无需重启；动态跟踪Java代码；实时监控JVM状态。\n\n`Arthas` 支持JDK 6+，支持Linux/Mac/Windows，采用命令行交互模式，同时提供丰富的 `Tab` 自动补全功能，进一步方便进行问题的定位和诊断。\n\n当你遇到以下类似问题而束手无策时，Arthas可以帮助你解决：\n\n- 这个类从哪个 jar 包加载的？为什么会报各种类相关的 Exception？\n- 我改的代码为什么没有执行到？难道是我没 commit？分支搞错了？\n- 遇到问题无法在线上 debug，难道只能通过加日志再重新发布吗？\n- 线上遇到某个用户的数据处理有问题，但线上同样无法 debug，线下无法重现！\n- 是否有一个全局视角来查看系统的运行状况？\n- 有什么办法可以监控到JVM的实时运行状态？\n- 怎么快速定位应用的热点，生成火焰图？\n\n本教程会以一个简单的应用为例，演示sysprop命令。\n\n- Github: https://github.com/alibaba/arthas\n- 文档: https://arthas.aliyun.com/doc/\n\n## Arthas demo\n\n下载`arthas-demo.jar`，再用`java -jar`命令启动：\n\n```bash\nwget https://arthas.aliyun.com/arthas-demo.jar;java -jar arthas-demo.jar\n```\n\n`arthas-demo`是一个很简单的程序，它随机生成整数，再执行因式分解，把结果打印出来。如果生成的随机数是负数，则会打印提示信息。\n\n## 启动arthas-boot\n\n在新的`Terminal 2`里，下载`arthas-boot.jar`，再用`java -jar`命令启动：\n\n```bash\nwget https://arthas.aliyun.com/arthas-boot.jar;java -jar arthas-boot.jar\n```\n\n`arthas-boot`是`Arthas`的启动程序，它启动后，会列出所有的Java进程，用户可以选择需要诊断的目标进程。\n\n选择第一个进程，输入 `1` ，再`Enter/回车`：\n\n```bash\n1\n```\n\nAttach成功之后，会打印Arthas LOGO。输入 `help` 可以获取到更多的帮助信息。\n\n```bash\nhelp\n```\n\n![Arthas Boot](O1CN01HzatXZ1RgccrlT90M_!!6000000002141-2-tps-529-244.png)\n\n## sysprop命令\n\n`sysprop` 命令可以查看当前JVM的系统属性(`System Property`)\n\n```bash\nsysprop\n```\n\n### 使用参考\n\n```\nsysprop -h\nsysprop -h\n```\n\n```\nUSAGE:\n   sysprop [-h] [property-name] [property-value]\n\n SUMMARY:\n   Display, and change all the system properties.\n\n EXAMPLES:\n sysprop\n sysprop file.encoding\n sysprop production.mode true\n\n WIKI:\n   https://arthas.aliyun.com/doc/sysprop\n\n OPTIONS:\n -h, --help                                  this help\n <property-name>                             property name\n <property-value>                            property value\n```\n\n## 查看所有属性\n\n```\nsysprop\nsysprop\n```\n\n```console\n$ sysprop\n KEY                                                  VALUE\n-------------------------------------------------------------------------------------------------------------------------------------\n java.runtime.name                                    Java(TM) SE Runtime Environment\n sun.boot.library.path                                /Library/Java/JavaVirtualMachines/jdk1.8.0_51.jdk/Contents/Home/jre/lib\n java.vm.version                                      25.51-b03\n user.country.format                                  CN\n gopherProxySet                                       false\n java.vm.vendor                                       Oracle Corporation\n java.vendor.url                                      http://java.oracle.com/\n path.separator                                       :\n java.vm.name                                         Java HotSpot(TM) 64-Bit Server VM\n file.encoding.pkg                                    sun.io\n user.country                                         US\n sun.java.launcher                                    SUN_STANDARD\n sun.os.patch.level                                   unknown\n java.vm.specification.name                           Java Virtual Machine Specification\n user.dir                                             /private/var/tmp\n java.runtime.version                                 1.8.0_51-b16\n java.awt.graphicsenv                                 sun.awt.CGraphicsEnvironment\n java.endorsed.dirs                                   /Library/Java/JavaVirtualMachines/jdk1.8.0_51.jdk/Contents/Home/jre/lib/endors\n                                                      ed\n os.arch                                              x86_64\n java.io.tmpdir                                       /var/folders/2c/tbxwzs4s4sbcvh7frbcc7n000000gn/T/\n line.separator\n\n java.vm.specification.vendor                         Oracle Corporation\n os.name                                              Mac OS X\n sun.jnu.encoding                                     UTF-8\n java.library.path                                    /Users/wangtao/Library/Java/Extensions:/Library/Java/Extensions:/Network/Libra\n                                                      ry/Java/Extensions:/System/Library/Java/Extensions:/usr/lib/java:.\n sun.nio.ch.bugLevel\n java.specification.name                              Java Platform API Specification\n java.class.version                                   52.0\n sun.management.compiler                              HotSpot 64-Bit Tiered Compilers\n os.version                                           10.12.6\n user.home                                            /Users/wangtao\n user.timezone                                        Asia/Shanghai\n java.awt.printerjob                                  sun.lwawt.macosx.CPrinterJob\n file.encoding                                        UTF-8\n java.specification.version                           1.8\n user.name                                            wangtao\n java.class.path                                      .\n java.vm.specification.version                        1.8\n sun.arch.data.model                                  64\n java.home                                            /Library/Java/JavaVirtualMachines/jdk1.8.0_51.jdk/Contents/Home/jre\n sun.java.command                                     Test\n java.specification.vendor                            Oracle Corporation\n user.language                                        en\n awt.toolkit                                          sun.lwawt.macosx.LWCToolkit\n java.vm.info                                         mixed mode\n java.version                                         1.8.0_51\n java.ext.dirs                                        /Users/wangtao/Library/Java/Extensions:/Library/Java/JavaVirtualMachines/jdk1.\n                                                      8.0_51.jdk/Contents/Home/jre/lib/ext:/Library/Java/Extensions:/Network/Library\n                                                      /Java/Extensions:/System/Library/Java/Extensions:/usr/lib/java\n sun.boot.class.path                                  /Library/Java/JavaVirtualMachines/jdk1.8.0_51.jdk/Contents/Home/jre/lib/resour\n                                                      ces.jar:/Library/Java/JavaVirtualMachines/jdk1.8.0_51.jdk/Contents/Home/jre/li\n                                                      b/rt.jar:/Library/Java/JavaVirtualMachines/jdk1.8.0_51.jdk/Contents/Home/jre/l\n                                                      ib/sunrsasign.jar:/Library/Java/JavaVirtualMachines/jdk1.8.0_51.jdk/Contents/H\n                                                      ome/jre/lib/jsse.jar:/Library/Java/JavaVirtualMachines/jdk1.8.0_51.jdk/Content\n                                                      s/Home/jre/lib/jce.jar:/Library/Java/JavaVirtualMachines/jdk1.8.0_51.jdk/Conte\n                                                      nts/Home/jre/lib/charsets.jar:/Library/Java/JavaVirtualMachines/jdk1.8.0_51.jd\n                                                      k/Contents/Home/jre/lib/jfr.jar:/Library/Java/JavaVirtualMachines/jdk1.8.0_51.\n                                                      jdk/Contents/Home/jre/classes\n java.vendor                                          Oracle Corporation\n file.separator                                       /\n java.vendor.url.bug                                  http://bugreport.sun.com/bugreport/\n sun.cpu.endian                                       little\n sun.io.unicode.encoding                              UnicodeBig\n sun.cpu.isalist\n```\n\n## 查看单个属性\n\n```\nsysprop java.version\nsysprop java.version\n```\n\n```console\n$ sysprop java.version\njava.version=1.8.0_51\n```\n\n### 修改单个属性\n\n```\nsysprop user.country\nsysprop user.country\n```\n\n```\nsysprop user.country CN\nsysprop user.country CN\n```\n\n```console\n$ sysprop user.country\nuser.country=US\n$ sysprop user.country CN\nSuccessfully changed the system property.\nuser.country=CN\n```\n\n## 自动补全\n\nArthas支持丰富的自动补全功能，在使用有疑惑时，可以输入`Tab`来获取更多信息。\n\n比如输入 `sysprop java.` 之后，再输入`Tab`，会补全出对应的key：\n\n```\n$ sysprop java.\njava.runtime.name             java.protocol.handler.pkgs    java.vm.version\njava.vm.vendor                java.vendor.url               java.vm.name\n...\n```\n\n## 历史命令的补全\n\n支持通过`TAB`键自动补全\n\n如果想再执行之前的命令，可以在输入一半时，按`Up/↑` 或者 `Ddown/↓`，来匹配到之前的命令。\n\n比如之前执行过`sysprop java.version`，那么在输入`sysprop ja`之后，可以输入`Up/↑`，就会自动补全为`sysprop java.version`。\n\n如果想查看所有的历史命令，也可以通过 `history` 命令查看到。\n\n```bash\nhistory\n```\n\n## 管道\n\nArthas支持在pipeline之后，执行一些简单的命令，比如：\n\n```\nsysprop | grep java\nsysprop | grep java\n```\n\n```\nsysprop | wc -l\nsysprop | wc -l\n```\n\n### 通过`grep`来过滤\n\n```\nsysprop | grep user\nsysprop | grep user\n```\n\n## 更多信息\n\n在“sysprop”中，我们演示了了Arthas的sysprop命令。如果有更多的技巧或者使用疑问，欢迎在Issue里提出。\n\n- Issues: https://github.com/alibaba/arthas/issues\n- 文档： https://arthas.aliyun.com/doc\n\n如果您在使用Arthas，请让我们知道。您的使用对我们非常重要：[查看](https://github.com/alibaba/arthas/issues/111)\n\n文章拷贝来源：https://start.aliyun.com/course?spm=a2ck6.17690074.0.0.28bc2e7dHTphXs&id=PaiFAkJM","source":"_posts/Java诊断工具Arthas高级命令教程/Arthassysprop命令.md","raw":"---\ntitle: Arthas sysprop命令\ndate: 2021-08-07 09:51:29\ntags: ['Java 诊断工具 Arthas 高级命令教程']\n---\n\n<!-- toc -->\n\n![Arthas](arthas.png)\n\n`Arthas` 是Alibaba开源的Java诊断工具，深受开发者喜爱。在线排查问题，无需重启；动态跟踪Java代码；实时监控JVM状态。\n\n`Arthas` 支持JDK 6+，支持Linux/Mac/Windows，采用命令行交互模式，同时提供丰富的 `Tab` 自动补全功能，进一步方便进行问题的定位和诊断。\n\n当你遇到以下类似问题而束手无策时，Arthas可以帮助你解决：\n\n- 这个类从哪个 jar 包加载的？为什么会报各种类相关的 Exception？\n- 我改的代码为什么没有执行到？难道是我没 commit？分支搞错了？\n- 遇到问题无法在线上 debug，难道只能通过加日志再重新发布吗？\n- 线上遇到某个用户的数据处理有问题，但线上同样无法 debug，线下无法重现！\n- 是否有一个全局视角来查看系统的运行状况？\n- 有什么办法可以监控到JVM的实时运行状态？\n- 怎么快速定位应用的热点，生成火焰图？\n\n本教程会以一个简单的应用为例，演示sysprop命令。\n\n- Github: https://github.com/alibaba/arthas\n- 文档: https://arthas.aliyun.com/doc/\n\n## Arthas demo\n\n下载`arthas-demo.jar`，再用`java -jar`命令启动：\n\n```bash\nwget https://arthas.aliyun.com/arthas-demo.jar;java -jar arthas-demo.jar\n```\n\n`arthas-demo`是一个很简单的程序，它随机生成整数，再执行因式分解，把结果打印出来。如果生成的随机数是负数，则会打印提示信息。\n\n## 启动arthas-boot\n\n在新的`Terminal 2`里，下载`arthas-boot.jar`，再用`java -jar`命令启动：\n\n```bash\nwget https://arthas.aliyun.com/arthas-boot.jar;java -jar arthas-boot.jar\n```\n\n`arthas-boot`是`Arthas`的启动程序，它启动后，会列出所有的Java进程，用户可以选择需要诊断的目标进程。\n\n选择第一个进程，输入 `1` ，再`Enter/回车`：\n\n```bash\n1\n```\n\nAttach成功之后，会打印Arthas LOGO。输入 `help` 可以获取到更多的帮助信息。\n\n```bash\nhelp\n```\n\n![Arthas Boot](O1CN01HzatXZ1RgccrlT90M_!!6000000002141-2-tps-529-244.png)\n\n## sysprop命令\n\n`sysprop` 命令可以查看当前JVM的系统属性(`System Property`)\n\n```bash\nsysprop\n```\n\n### 使用参考\n\n```\nsysprop -h\nsysprop -h\n```\n\n```\nUSAGE:\n   sysprop [-h] [property-name] [property-value]\n\n SUMMARY:\n   Display, and change all the system properties.\n\n EXAMPLES:\n sysprop\n sysprop file.encoding\n sysprop production.mode true\n\n WIKI:\n   https://arthas.aliyun.com/doc/sysprop\n\n OPTIONS:\n -h, --help                                  this help\n <property-name>                             property name\n <property-value>                            property value\n```\n\n## 查看所有属性\n\n```\nsysprop\nsysprop\n```\n\n```console\n$ sysprop\n KEY                                                  VALUE\n-------------------------------------------------------------------------------------------------------------------------------------\n java.runtime.name                                    Java(TM) SE Runtime Environment\n sun.boot.library.path                                /Library/Java/JavaVirtualMachines/jdk1.8.0_51.jdk/Contents/Home/jre/lib\n java.vm.version                                      25.51-b03\n user.country.format                                  CN\n gopherProxySet                                       false\n java.vm.vendor                                       Oracle Corporation\n java.vendor.url                                      http://java.oracle.com/\n path.separator                                       :\n java.vm.name                                         Java HotSpot(TM) 64-Bit Server VM\n file.encoding.pkg                                    sun.io\n user.country                                         US\n sun.java.launcher                                    SUN_STANDARD\n sun.os.patch.level                                   unknown\n java.vm.specification.name                           Java Virtual Machine Specification\n user.dir                                             /private/var/tmp\n java.runtime.version                                 1.8.0_51-b16\n java.awt.graphicsenv                                 sun.awt.CGraphicsEnvironment\n java.endorsed.dirs                                   /Library/Java/JavaVirtualMachines/jdk1.8.0_51.jdk/Contents/Home/jre/lib/endors\n                                                      ed\n os.arch                                              x86_64\n java.io.tmpdir                                       /var/folders/2c/tbxwzs4s4sbcvh7frbcc7n000000gn/T/\n line.separator\n\n java.vm.specification.vendor                         Oracle Corporation\n os.name                                              Mac OS X\n sun.jnu.encoding                                     UTF-8\n java.library.path                                    /Users/wangtao/Library/Java/Extensions:/Library/Java/Extensions:/Network/Libra\n                                                      ry/Java/Extensions:/System/Library/Java/Extensions:/usr/lib/java:.\n sun.nio.ch.bugLevel\n java.specification.name                              Java Platform API Specification\n java.class.version                                   52.0\n sun.management.compiler                              HotSpot 64-Bit Tiered Compilers\n os.version                                           10.12.6\n user.home                                            /Users/wangtao\n user.timezone                                        Asia/Shanghai\n java.awt.printerjob                                  sun.lwawt.macosx.CPrinterJob\n file.encoding                                        UTF-8\n java.specification.version                           1.8\n user.name                                            wangtao\n java.class.path                                      .\n java.vm.specification.version                        1.8\n sun.arch.data.model                                  64\n java.home                                            /Library/Java/JavaVirtualMachines/jdk1.8.0_51.jdk/Contents/Home/jre\n sun.java.command                                     Test\n java.specification.vendor                            Oracle Corporation\n user.language                                        en\n awt.toolkit                                          sun.lwawt.macosx.LWCToolkit\n java.vm.info                                         mixed mode\n java.version                                         1.8.0_51\n java.ext.dirs                                        /Users/wangtao/Library/Java/Extensions:/Library/Java/JavaVirtualMachines/jdk1.\n                                                      8.0_51.jdk/Contents/Home/jre/lib/ext:/Library/Java/Extensions:/Network/Library\n                                                      /Java/Extensions:/System/Library/Java/Extensions:/usr/lib/java\n sun.boot.class.path                                  /Library/Java/JavaVirtualMachines/jdk1.8.0_51.jdk/Contents/Home/jre/lib/resour\n                                                      ces.jar:/Library/Java/JavaVirtualMachines/jdk1.8.0_51.jdk/Contents/Home/jre/li\n                                                      b/rt.jar:/Library/Java/JavaVirtualMachines/jdk1.8.0_51.jdk/Contents/Home/jre/l\n                                                      ib/sunrsasign.jar:/Library/Java/JavaVirtualMachines/jdk1.8.0_51.jdk/Contents/H\n                                                      ome/jre/lib/jsse.jar:/Library/Java/JavaVirtualMachines/jdk1.8.0_51.jdk/Content\n                                                      s/Home/jre/lib/jce.jar:/Library/Java/JavaVirtualMachines/jdk1.8.0_51.jdk/Conte\n                                                      nts/Home/jre/lib/charsets.jar:/Library/Java/JavaVirtualMachines/jdk1.8.0_51.jd\n                                                      k/Contents/Home/jre/lib/jfr.jar:/Library/Java/JavaVirtualMachines/jdk1.8.0_51.\n                                                      jdk/Contents/Home/jre/classes\n java.vendor                                          Oracle Corporation\n file.separator                                       /\n java.vendor.url.bug                                  http://bugreport.sun.com/bugreport/\n sun.cpu.endian                                       little\n sun.io.unicode.encoding                              UnicodeBig\n sun.cpu.isalist\n```\n\n## 查看单个属性\n\n```\nsysprop java.version\nsysprop java.version\n```\n\n```console\n$ sysprop java.version\njava.version=1.8.0_51\n```\n\n### 修改单个属性\n\n```\nsysprop user.country\nsysprop user.country\n```\n\n```\nsysprop user.country CN\nsysprop user.country CN\n```\n\n```console\n$ sysprop user.country\nuser.country=US\n$ sysprop user.country CN\nSuccessfully changed the system property.\nuser.country=CN\n```\n\n## 自动补全\n\nArthas支持丰富的自动补全功能，在使用有疑惑时，可以输入`Tab`来获取更多信息。\n\n比如输入 `sysprop java.` 之后，再输入`Tab`，会补全出对应的key：\n\n```\n$ sysprop java.\njava.runtime.name             java.protocol.handler.pkgs    java.vm.version\njava.vm.vendor                java.vendor.url               java.vm.name\n...\n```\n\n## 历史命令的补全\n\n支持通过`TAB`键自动补全\n\n如果想再执行之前的命令，可以在输入一半时，按`Up/↑` 或者 `Ddown/↓`，来匹配到之前的命令。\n\n比如之前执行过`sysprop java.version`，那么在输入`sysprop ja`之后，可以输入`Up/↑`，就会自动补全为`sysprop java.version`。\n\n如果想查看所有的历史命令，也可以通过 `history` 命令查看到。\n\n```bash\nhistory\n```\n\n## 管道\n\nArthas支持在pipeline之后，执行一些简单的命令，比如：\n\n```\nsysprop | grep java\nsysprop | grep java\n```\n\n```\nsysprop | wc -l\nsysprop | wc -l\n```\n\n### 通过`grep`来过滤\n\n```\nsysprop | grep user\nsysprop | grep user\n```\n\n## 更多信息\n\n在“sysprop”中，我们演示了了Arthas的sysprop命令。如果有更多的技巧或者使用疑问，欢迎在Issue里提出。\n\n- Issues: https://github.com/alibaba/arthas/issues\n- 文档： https://arthas.aliyun.com/doc\n\n如果您在使用Arthas，请让我们知道。您的使用对我们非常重要：[查看](https://github.com/alibaba/arthas/issues/111)\n\n文章拷贝来源：https://start.aliyun.com/course?spm=a2ck6.17690074.0.0.28bc2e7dHTphXs&id=PaiFAkJM","slug":"Java诊断工具Arthas高级命令教程/Arthassysprop命令","published":1,"updated":"2021-08-07T05:35:26.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cks1cgr6z002pfw5i3jhugug0","content":"<!-- toc -->\n\n<ul>\n<li><a href=\"#arthas-demo\">Arthas demo</a></li>\n<li><a href=\"#%E5%90%AF%E5%8A%A8arthas-boot\">启动arthas-boot</a></li>\n<li><a href=\"#sysprop%E5%91%BD%E4%BB%A4\">sysprop命令</a><ul>\n<li><a href=\"#%E4%BD%BF%E7%94%A8%E5%8F%82%E8%80%83\">使用参考</a></li>\n</ul>\n</li>\n<li><a href=\"#%E6%9F%A5%E7%9C%8B%E6%89%80%E6%9C%89%E5%B1%9E%E6%80%A7\">查看所有属性</a></li>\n<li><a href=\"#%E6%9F%A5%E7%9C%8B%E5%8D%95%E4%B8%AA%E5%B1%9E%E6%80%A7\">查看单个属性</a><ul>\n<li><a href=\"#%E4%BF%AE%E6%94%B9%E5%8D%95%E4%B8%AA%E5%B1%9E%E6%80%A7\">修改单个属性</a></li>\n</ul>\n</li>\n<li><a href=\"#%E8%87%AA%E5%8A%A8%E8%A1%A5%E5%85%A8\">自动补全</a></li>\n<li><a href=\"#%E5%8E%86%E5%8F%B2%E5%91%BD%E4%BB%A4%E7%9A%84%E8%A1%A5%E5%85%A8\">历史命令的补全</a></li>\n<li><a href=\"#%E7%AE%A1%E9%81%93\">管道</a><ul>\n<li><a href=\"#%E9%80%9A%E8%BF%87grep%E6%9D%A5%E8%BF%87%E6%BB%A4\">通过<code>grep</code>来过滤</a></li>\n</ul>\n</li>\n<li><a href=\"#%E6%9B%B4%E5%A4%9A%E4%BF%A1%E6%81%AF\">更多信息</a></li>\n</ul>\n<!-- tocstop -->\n\n<p><img src=\"/jlynet.github.io/2021/08/07/Java%E8%AF%8A%E6%96%AD%E5%B7%A5%E5%85%B7Arthas%E9%AB%98%E7%BA%A7%E5%91%BD%E4%BB%A4%E6%95%99%E7%A8%8B/Arthassysprop%E5%91%BD%E4%BB%A4/arthas.png\" alt=\"Arthas\"></p>\n<p><code>Arthas</code> 是Alibaba开源的Java诊断工具，深受开发者喜爱。在线排查问题，无需重启；动态跟踪Java代码；实时监控JVM状态。</p>\n<p><code>Arthas</code> 支持JDK 6+，支持Linux/Mac/Windows，采用命令行交互模式，同时提供丰富的 <code>Tab</code> 自动补全功能，进一步方便进行问题的定位和诊断。</p>\n<p>当你遇到以下类似问题而束手无策时，Arthas可以帮助你解决：</p>\n<ul>\n<li>这个类从哪个 jar 包加载的？为什么会报各种类相关的 Exception？</li>\n<li>我改的代码为什么没有执行到？难道是我没 commit？分支搞错了？</li>\n<li>遇到问题无法在线上 debug，难道只能通过加日志再重新发布吗？</li>\n<li>线上遇到某个用户的数据处理有问题，但线上同样无法 debug，线下无法重现！</li>\n<li>是否有一个全局视角来查看系统的运行状况？</li>\n<li>有什么办法可以监控到JVM的实时运行状态？</li>\n<li>怎么快速定位应用的热点，生成火焰图？</li>\n</ul>\n<p>本教程会以一个简单的应用为例，演示sysprop命令。</p>\n<ul>\n<li>Github: <a href=\"https://github.com/alibaba/arthas\">https://github.com/alibaba/arthas</a></li>\n<li>文档: <a href=\"https://arthas.aliyun.com/doc/\">https://arthas.aliyun.com/doc/</a></li>\n</ul>\n<h2><span id=\"arthas-demo\">Arthas demo</span></h2><p>下载<code>arthas-demo.jar</code>，再用<code>java -jar</code>命令启动：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wget https://arthas.aliyun.com/arthas-demo.jar;java -jar arthas-demo.jar</span><br></pre></td></tr></table></figure>\n\n<p><code>arthas-demo</code>是一个很简单的程序，它随机生成整数，再执行因式分解，把结果打印出来。如果生成的随机数是负数，则会打印提示信息。</p>\n<h2><span id=\"启动arthas-boot\">启动arthas-boot</span></h2><p>在新的<code>Terminal 2</code>里，下载<code>arthas-boot.jar</code>，再用<code>java -jar</code>命令启动：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wget https://arthas.aliyun.com/arthas-boot.jar;java -jar arthas-boot.jar</span><br></pre></td></tr></table></figure>\n\n<p><code>arthas-boot</code>是<code>Arthas</code>的启动程序，它启动后，会列出所有的Java进程，用户可以选择需要诊断的目标进程。</p>\n<p>选择第一个进程，输入 <code>1</code> ，再<code>Enter/回车</code>：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1</span><br></pre></td></tr></table></figure>\n\n<p>Attach成功之后，会打印Arthas LOGO。输入 <code>help</code> 可以获取到更多的帮助信息。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">help</span></span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/jlynet.github.io/2021/08/07/Java%E8%AF%8A%E6%96%AD%E5%B7%A5%E5%85%B7Arthas%E9%AB%98%E7%BA%A7%E5%91%BD%E4%BB%A4%E6%95%99%E7%A8%8B/Arthassysprop%E5%91%BD%E4%BB%A4/O1CN01HzatXZ1RgccrlT90M_!!6000000002141-2-tps-529-244.png\" alt=\"Arthas Boot\"></p>\n<h2><span id=\"sysprop命令\">sysprop命令</span></h2><p><code>sysprop</code> 命令可以查看当前JVM的系统属性(<code>System Property</code>)</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sysprop</span><br></pre></td></tr></table></figure>\n\n<h3><span id=\"使用参考\">使用参考</span></h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sysprop -h</span><br><span class=\"line\">sysprop -h</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">USAGE:</span><br><span class=\"line\">   sysprop [-h] [property-name] [property-value]</span><br><span class=\"line\"></span><br><span class=\"line\"> SUMMARY:</span><br><span class=\"line\">   Display, and change all the system properties.</span><br><span class=\"line\"></span><br><span class=\"line\"> EXAMPLES:</span><br><span class=\"line\"> sysprop</span><br><span class=\"line\"> sysprop file.encoding</span><br><span class=\"line\"> sysprop production.mode true</span><br><span class=\"line\"></span><br><span class=\"line\"> WIKI:</span><br><span class=\"line\">   https://arthas.aliyun.com/doc/sysprop</span><br><span class=\"line\"></span><br><span class=\"line\"> OPTIONS:</span><br><span class=\"line\"> -h, --help                                  this help</span><br><span class=\"line\"> &lt;property-name&gt;                             property name</span><br><span class=\"line\"> &lt;property-value&gt;                            property value</span><br></pre></td></tr></table></figure>\n\n<h2><span id=\"查看所有属性\">查看所有属性</span></h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sysprop</span><br><span class=\"line\">sysprop</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight console\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> sysprop</span></span><br><span class=\"line\"> KEY                                                  VALUE</span><br><span class=\"line\">-------------------------------------------------------------------------------------------------------------------------------------</span><br><span class=\"line\"> java.runtime.name                                    Java(TM) SE Runtime Environment</span><br><span class=\"line\"> sun.boot.library.path                                /Library/Java/JavaVirtualMachines/jdk1.8.0_51.jdk/Contents/Home/jre/lib</span><br><span class=\"line\"> java.vm.version                                      25.51-b03</span><br><span class=\"line\"> user.country.format                                  CN</span><br><span class=\"line\"> gopherProxySet                                       false</span><br><span class=\"line\"> java.vm.vendor                                       Oracle Corporation</span><br><span class=\"line\"> java.vendor.url                                      http://java.oracle.com/</span><br><span class=\"line\"> path.separator                                       :</span><br><span class=\"line\"> java.vm.name                                         Java HotSpot(TM) 64-Bit Server VM</span><br><span class=\"line\"> file.encoding.pkg                                    sun.io</span><br><span class=\"line\"> user.country                                         US</span><br><span class=\"line\"> sun.java.launcher                                    SUN_STANDARD</span><br><span class=\"line\"> sun.os.patch.level                                   unknown</span><br><span class=\"line\"> java.vm.specification.name                           Java Virtual Machine Specification</span><br><span class=\"line\"> user.dir                                             /private/var/tmp</span><br><span class=\"line\"> java.runtime.version                                 1.8.0_51-b16</span><br><span class=\"line\"> java.awt.graphicsenv                                 sun.awt.CGraphicsEnvironment</span><br><span class=\"line\"> java.endorsed.dirs                                   /Library/Java/JavaVirtualMachines/jdk1.8.0_51.jdk/Contents/Home/jre/lib/endors</span><br><span class=\"line\">                                                      ed</span><br><span class=\"line\"> os.arch                                              x86_64</span><br><span class=\"line\"> java.io.tmpdir                                       /var/folders/2c/tbxwzs4s4sbcvh7frbcc7n000000gn/T/</span><br><span class=\"line\"> line.separator</span><br><span class=\"line\"></span><br><span class=\"line\"> java.vm.specification.vendor                         Oracle Corporation</span><br><span class=\"line\"> os.name                                              Mac OS X</span><br><span class=\"line\"> sun.jnu.encoding                                     UTF-8</span><br><span class=\"line\"> java.library.path                                    /Users/wangtao/Library/Java/Extensions:/Library/Java/Extensions:/Network/Libra</span><br><span class=\"line\">                                                      ry/Java/Extensions:/System/Library/Java/Extensions:/usr/lib/java:.</span><br><span class=\"line\"> sun.nio.ch.bugLevel</span><br><span class=\"line\"> java.specification.name                              Java Platform API Specification</span><br><span class=\"line\"> java.class.version                                   52.0</span><br><span class=\"line\"> sun.management.compiler                              HotSpot 64-Bit Tiered Compilers</span><br><span class=\"line\"> os.version                                           10.12.6</span><br><span class=\"line\"> user.home                                            /Users/wangtao</span><br><span class=\"line\"> user.timezone                                        Asia/Shanghai</span><br><span class=\"line\"> java.awt.printerjob                                  sun.lwawt.macosx.CPrinterJob</span><br><span class=\"line\"> file.encoding                                        UTF-8</span><br><span class=\"line\"> java.specification.version                           1.8</span><br><span class=\"line\"> user.name                                            wangtao</span><br><span class=\"line\"> java.class.path                                      .</span><br><span class=\"line\"> java.vm.specification.version                        1.8</span><br><span class=\"line\"> sun.arch.data.model                                  64</span><br><span class=\"line\"> java.home                                            /Library/Java/JavaVirtualMachines/jdk1.8.0_51.jdk/Contents/Home/jre</span><br><span class=\"line\"> sun.java.command                                     Test</span><br><span class=\"line\"> java.specification.vendor                            Oracle Corporation</span><br><span class=\"line\"> user.language                                        en</span><br><span class=\"line\"> awt.toolkit                                          sun.lwawt.macosx.LWCToolkit</span><br><span class=\"line\"> java.vm.info                                         mixed mode</span><br><span class=\"line\"> java.version                                         1.8.0_51</span><br><span class=\"line\"> java.ext.dirs                                        /Users/wangtao/Library/Java/Extensions:/Library/Java/JavaVirtualMachines/jdk1.</span><br><span class=\"line\">                                                      8.0_51.jdk/Contents/Home/jre/lib/ext:/Library/Java/Extensions:/Network/Library</span><br><span class=\"line\">                                                      /Java/Extensions:/System/Library/Java/Extensions:/usr/lib/java</span><br><span class=\"line\"> sun.boot.class.path                                  /Library/Java/JavaVirtualMachines/jdk1.8.0_51.jdk/Contents/Home/jre/lib/resour</span><br><span class=\"line\">                                                      ces.jar:/Library/Java/JavaVirtualMachines/jdk1.8.0_51.jdk/Contents/Home/jre/li</span><br><span class=\"line\">                                                      b/rt.jar:/Library/Java/JavaVirtualMachines/jdk1.8.0_51.jdk/Contents/Home/jre/l</span><br><span class=\"line\">                                                      ib/sunrsasign.jar:/Library/Java/JavaVirtualMachines/jdk1.8.0_51.jdk/Contents/H</span><br><span class=\"line\">                                                      ome/jre/lib/jsse.jar:/Library/Java/JavaVirtualMachines/jdk1.8.0_51.jdk/Content</span><br><span class=\"line\">                                                      s/Home/jre/lib/jce.jar:/Library/Java/JavaVirtualMachines/jdk1.8.0_51.jdk/Conte</span><br><span class=\"line\">                                                      nts/Home/jre/lib/charsets.jar:/Library/Java/JavaVirtualMachines/jdk1.8.0_51.jd</span><br><span class=\"line\">                                                      k/Contents/Home/jre/lib/jfr.jar:/Library/Java/JavaVirtualMachines/jdk1.8.0_51.</span><br><span class=\"line\">                                                      jdk/Contents/Home/jre/classes</span><br><span class=\"line\"> java.vendor                                          Oracle Corporation</span><br><span class=\"line\"> file.separator                                       /</span><br><span class=\"line\"> java.vendor.url.bug                                  http://bugreport.sun.com/bugreport/</span><br><span class=\"line\"> sun.cpu.endian                                       little</span><br><span class=\"line\"> sun.io.unicode.encoding                              UnicodeBig</span><br><span class=\"line\"> sun.cpu.isalist</span><br></pre></td></tr></table></figure>\n\n<h2><span id=\"查看单个属性\">查看单个属性</span></h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sysprop java.version</span><br><span class=\"line\">sysprop java.version</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight console\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> sysprop java.version</span></span><br><span class=\"line\">java.version=1.8.0_51</span><br></pre></td></tr></table></figure>\n\n<h3><span id=\"修改单个属性\">修改单个属性</span></h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sysprop user.country</span><br><span class=\"line\">sysprop user.country</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sysprop user.country CN</span><br><span class=\"line\">sysprop user.country CN</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight console\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> sysprop user.country</span></span><br><span class=\"line\">user.country=US</span><br><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> sysprop user.country CN</span></span><br><span class=\"line\">Successfully changed the system property.</span><br><span class=\"line\">user.country=CN</span><br></pre></td></tr></table></figure>\n\n<h2><span id=\"自动补全\">自动补全</span></h2><p>Arthas支持丰富的自动补全功能，在使用有疑惑时，可以输入<code>Tab</code>来获取更多信息。</p>\n<p>比如输入 <code>sysprop java.</code> 之后，再输入<code>Tab</code>，会补全出对应的key：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ sysprop java.</span><br><span class=\"line\">java.runtime.name             java.protocol.handler.pkgs    java.vm.version</span><br><span class=\"line\">java.vm.vendor                java.vendor.url               java.vm.name</span><br><span class=\"line\">...</span><br></pre></td></tr></table></figure>\n\n<h2><span id=\"历史命令的补全\">历史命令的补全</span></h2><p>支持通过<code>TAB</code>键自动补全</p>\n<p>如果想再执行之前的命令，可以在输入一半时，按<code>Up/↑</code> 或者 <code>Ddown/↓</code>，来匹配到之前的命令。</p>\n<p>比如之前执行过<code>sysprop java.version</code>，那么在输入<code>sysprop ja</code>之后，可以输入<code>Up/↑</code>，就会自动补全为<code>sysprop java.version</code>。</p>\n<p>如果想查看所有的历史命令，也可以通过 <code>history</code> 命令查看到。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">history</span></span><br></pre></td></tr></table></figure>\n\n<h2><span id=\"管道\">管道</span></h2><p>Arthas支持在pipeline之后，执行一些简单的命令，比如：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sysprop | grep java</span><br><span class=\"line\">sysprop | grep java</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sysprop | wc -l</span><br><span class=\"line\">sysprop | wc -l</span><br></pre></td></tr></table></figure>\n\n<h3><span id=\"通过grep来过滤\">通过<code>grep</code>来过滤</span></h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sysprop | grep user</span><br><span class=\"line\">sysprop | grep user</span><br></pre></td></tr></table></figure>\n\n<h2><span id=\"更多信息\">更多信息</span></h2><p>在“sysprop”中，我们演示了了Arthas的sysprop命令。如果有更多的技巧或者使用疑问，欢迎在Issue里提出。</p>\n<ul>\n<li>Issues: <a href=\"https://github.com/alibaba/arthas/issues\">https://github.com/alibaba/arthas/issues</a></li>\n<li>文档： <a href=\"https://arthas.aliyun.com/doc\">https://arthas.aliyun.com/doc</a></li>\n</ul>\n<p>如果您在使用Arthas，请让我们知道。您的使用对我们非常重要：<a href=\"https://github.com/alibaba/arthas/issues/111\">查看</a></p>\n<p>文章拷贝来源：<a href=\"https://start.aliyun.com/course?spm=a2ck6.17690074.0.0.28bc2e7dHTphXs&amp;id=PaiFAkJM\">https://start.aliyun.com/course?spm=a2ck6.17690074.0.0.28bc2e7dHTphXs&amp;id=PaiFAkJM</a></p>\n","site":{"data":{}},"excerpt":"","more":"<!-- toc -->\n\n<ul>\n<li><a href=\"#arthas-demo\">Arthas demo</a></li>\n<li><a href=\"#%E5%90%AF%E5%8A%A8arthas-boot\">启动arthas-boot</a></li>\n<li><a href=\"#sysprop%E5%91%BD%E4%BB%A4\">sysprop命令</a><ul>\n<li><a href=\"#%E4%BD%BF%E7%94%A8%E5%8F%82%E8%80%83\">使用参考</a></li>\n</ul>\n</li>\n<li><a href=\"#%E6%9F%A5%E7%9C%8B%E6%89%80%E6%9C%89%E5%B1%9E%E6%80%A7\">查看所有属性</a></li>\n<li><a href=\"#%E6%9F%A5%E7%9C%8B%E5%8D%95%E4%B8%AA%E5%B1%9E%E6%80%A7\">查看单个属性</a><ul>\n<li><a href=\"#%E4%BF%AE%E6%94%B9%E5%8D%95%E4%B8%AA%E5%B1%9E%E6%80%A7\">修改单个属性</a></li>\n</ul>\n</li>\n<li><a href=\"#%E8%87%AA%E5%8A%A8%E8%A1%A5%E5%85%A8\">自动补全</a></li>\n<li><a href=\"#%E5%8E%86%E5%8F%B2%E5%91%BD%E4%BB%A4%E7%9A%84%E8%A1%A5%E5%85%A8\">历史命令的补全</a></li>\n<li><a href=\"#%E7%AE%A1%E9%81%93\">管道</a><ul>\n<li><a href=\"#%E9%80%9A%E8%BF%87grep%E6%9D%A5%E8%BF%87%E6%BB%A4\">通过<code>grep</code>来过滤</a></li>\n</ul>\n</li>\n<li><a href=\"#%E6%9B%B4%E5%A4%9A%E4%BF%A1%E6%81%AF\">更多信息</a></li>\n</ul>\n<!-- tocstop -->\n\n<p><img src=\"/jlynet.github.io/2021/08/07/Java%E8%AF%8A%E6%96%AD%E5%B7%A5%E5%85%B7Arthas%E9%AB%98%E7%BA%A7%E5%91%BD%E4%BB%A4%E6%95%99%E7%A8%8B/Arthassysprop%E5%91%BD%E4%BB%A4/arthas.png\" alt=\"Arthas\"></p>\n<p><code>Arthas</code> 是Alibaba开源的Java诊断工具，深受开发者喜爱。在线排查问题，无需重启；动态跟踪Java代码；实时监控JVM状态。</p>\n<p><code>Arthas</code> 支持JDK 6+，支持Linux/Mac/Windows，采用命令行交互模式，同时提供丰富的 <code>Tab</code> 自动补全功能，进一步方便进行问题的定位和诊断。</p>\n<p>当你遇到以下类似问题而束手无策时，Arthas可以帮助你解决：</p>\n<ul>\n<li>这个类从哪个 jar 包加载的？为什么会报各种类相关的 Exception？</li>\n<li>我改的代码为什么没有执行到？难道是我没 commit？分支搞错了？</li>\n<li>遇到问题无法在线上 debug，难道只能通过加日志再重新发布吗？</li>\n<li>线上遇到某个用户的数据处理有问题，但线上同样无法 debug，线下无法重现！</li>\n<li>是否有一个全局视角来查看系统的运行状况？</li>\n<li>有什么办法可以监控到JVM的实时运行状态？</li>\n<li>怎么快速定位应用的热点，生成火焰图？</li>\n</ul>\n<p>本教程会以一个简单的应用为例，演示sysprop命令。</p>\n<ul>\n<li>Github: <a href=\"https://github.com/alibaba/arthas\">https://github.com/alibaba/arthas</a></li>\n<li>文档: <a href=\"https://arthas.aliyun.com/doc/\">https://arthas.aliyun.com/doc/</a></li>\n</ul>\n<h2 id=\"Arthas-demo\"><a href=\"#Arthas-demo\" class=\"headerlink\" title=\"Arthas demo\"></a>Arthas demo</h2><p>下载<code>arthas-demo.jar</code>，再用<code>java -jar</code>命令启动：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wget https://arthas.aliyun.com/arthas-demo.jar;java -jar arthas-demo.jar</span><br></pre></td></tr></table></figure>\n\n<p><code>arthas-demo</code>是一个很简单的程序，它随机生成整数，再执行因式分解，把结果打印出来。如果生成的随机数是负数，则会打印提示信息。</p>\n<h2 id=\"启动arthas-boot\"><a href=\"#启动arthas-boot\" class=\"headerlink\" title=\"启动arthas-boot\"></a>启动arthas-boot</h2><p>在新的<code>Terminal 2</code>里，下载<code>arthas-boot.jar</code>，再用<code>java -jar</code>命令启动：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wget https://arthas.aliyun.com/arthas-boot.jar;java -jar arthas-boot.jar</span><br></pre></td></tr></table></figure>\n\n<p><code>arthas-boot</code>是<code>Arthas</code>的启动程序，它启动后，会列出所有的Java进程，用户可以选择需要诊断的目标进程。</p>\n<p>选择第一个进程，输入 <code>1</code> ，再<code>Enter/回车</code>：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1</span><br></pre></td></tr></table></figure>\n\n<p>Attach成功之后，会打印Arthas LOGO。输入 <code>help</code> 可以获取到更多的帮助信息。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">help</span></span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/jlynet.github.io/2021/08/07/Java%E8%AF%8A%E6%96%AD%E5%B7%A5%E5%85%B7Arthas%E9%AB%98%E7%BA%A7%E5%91%BD%E4%BB%A4%E6%95%99%E7%A8%8B/Arthassysprop%E5%91%BD%E4%BB%A4/O1CN01HzatXZ1RgccrlT90M_!!6000000002141-2-tps-529-244.png\" alt=\"Arthas Boot\"></p>\n<h2 id=\"sysprop命令\"><a href=\"#sysprop命令\" class=\"headerlink\" title=\"sysprop命令\"></a>sysprop命令</h2><p><code>sysprop</code> 命令可以查看当前JVM的系统属性(<code>System Property</code>)</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sysprop</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"使用参考\"><a href=\"#使用参考\" class=\"headerlink\" title=\"使用参考\"></a>使用参考</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sysprop -h</span><br><span class=\"line\">sysprop -h</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">USAGE:</span><br><span class=\"line\">   sysprop [-h] [property-name] [property-value]</span><br><span class=\"line\"></span><br><span class=\"line\"> SUMMARY:</span><br><span class=\"line\">   Display, and change all the system properties.</span><br><span class=\"line\"></span><br><span class=\"line\"> EXAMPLES:</span><br><span class=\"line\"> sysprop</span><br><span class=\"line\"> sysprop file.encoding</span><br><span class=\"line\"> sysprop production.mode true</span><br><span class=\"line\"></span><br><span class=\"line\"> WIKI:</span><br><span class=\"line\">   https://arthas.aliyun.com/doc/sysprop</span><br><span class=\"line\"></span><br><span class=\"line\"> OPTIONS:</span><br><span class=\"line\"> -h, --help                                  this help</span><br><span class=\"line\"> &lt;property-name&gt;                             property name</span><br><span class=\"line\"> &lt;property-value&gt;                            property value</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"查看所有属性\"><a href=\"#查看所有属性\" class=\"headerlink\" title=\"查看所有属性\"></a>查看所有属性</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sysprop</span><br><span class=\"line\">sysprop</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight console\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> sysprop</span></span><br><span class=\"line\"> KEY                                                  VALUE</span><br><span class=\"line\">-------------------------------------------------------------------------------------------------------------------------------------</span><br><span class=\"line\"> java.runtime.name                                    Java(TM) SE Runtime Environment</span><br><span class=\"line\"> sun.boot.library.path                                /Library/Java/JavaVirtualMachines/jdk1.8.0_51.jdk/Contents/Home/jre/lib</span><br><span class=\"line\"> java.vm.version                                      25.51-b03</span><br><span class=\"line\"> user.country.format                                  CN</span><br><span class=\"line\"> gopherProxySet                                       false</span><br><span class=\"line\"> java.vm.vendor                                       Oracle Corporation</span><br><span class=\"line\"> java.vendor.url                                      http://java.oracle.com/</span><br><span class=\"line\"> path.separator                                       :</span><br><span class=\"line\"> java.vm.name                                         Java HotSpot(TM) 64-Bit Server VM</span><br><span class=\"line\"> file.encoding.pkg                                    sun.io</span><br><span class=\"line\"> user.country                                         US</span><br><span class=\"line\"> sun.java.launcher                                    SUN_STANDARD</span><br><span class=\"line\"> sun.os.patch.level                                   unknown</span><br><span class=\"line\"> java.vm.specification.name                           Java Virtual Machine Specification</span><br><span class=\"line\"> user.dir                                             /private/var/tmp</span><br><span class=\"line\"> java.runtime.version                                 1.8.0_51-b16</span><br><span class=\"line\"> java.awt.graphicsenv                                 sun.awt.CGraphicsEnvironment</span><br><span class=\"line\"> java.endorsed.dirs                                   /Library/Java/JavaVirtualMachines/jdk1.8.0_51.jdk/Contents/Home/jre/lib/endors</span><br><span class=\"line\">                                                      ed</span><br><span class=\"line\"> os.arch                                              x86_64</span><br><span class=\"line\"> java.io.tmpdir                                       /var/folders/2c/tbxwzs4s4sbcvh7frbcc7n000000gn/T/</span><br><span class=\"line\"> line.separator</span><br><span class=\"line\"></span><br><span class=\"line\"> java.vm.specification.vendor                         Oracle Corporation</span><br><span class=\"line\"> os.name                                              Mac OS X</span><br><span class=\"line\"> sun.jnu.encoding                                     UTF-8</span><br><span class=\"line\"> java.library.path                                    /Users/wangtao/Library/Java/Extensions:/Library/Java/Extensions:/Network/Libra</span><br><span class=\"line\">                                                      ry/Java/Extensions:/System/Library/Java/Extensions:/usr/lib/java:.</span><br><span class=\"line\"> sun.nio.ch.bugLevel</span><br><span class=\"line\"> java.specification.name                              Java Platform API Specification</span><br><span class=\"line\"> java.class.version                                   52.0</span><br><span class=\"line\"> sun.management.compiler                              HotSpot 64-Bit Tiered Compilers</span><br><span class=\"line\"> os.version                                           10.12.6</span><br><span class=\"line\"> user.home                                            /Users/wangtao</span><br><span class=\"line\"> user.timezone                                        Asia/Shanghai</span><br><span class=\"line\"> java.awt.printerjob                                  sun.lwawt.macosx.CPrinterJob</span><br><span class=\"line\"> file.encoding                                        UTF-8</span><br><span class=\"line\"> java.specification.version                           1.8</span><br><span class=\"line\"> user.name                                            wangtao</span><br><span class=\"line\"> java.class.path                                      .</span><br><span class=\"line\"> java.vm.specification.version                        1.8</span><br><span class=\"line\"> sun.arch.data.model                                  64</span><br><span class=\"line\"> java.home                                            /Library/Java/JavaVirtualMachines/jdk1.8.0_51.jdk/Contents/Home/jre</span><br><span class=\"line\"> sun.java.command                                     Test</span><br><span class=\"line\"> java.specification.vendor                            Oracle Corporation</span><br><span class=\"line\"> user.language                                        en</span><br><span class=\"line\"> awt.toolkit                                          sun.lwawt.macosx.LWCToolkit</span><br><span class=\"line\"> java.vm.info                                         mixed mode</span><br><span class=\"line\"> java.version                                         1.8.0_51</span><br><span class=\"line\"> java.ext.dirs                                        /Users/wangtao/Library/Java/Extensions:/Library/Java/JavaVirtualMachines/jdk1.</span><br><span class=\"line\">                                                      8.0_51.jdk/Contents/Home/jre/lib/ext:/Library/Java/Extensions:/Network/Library</span><br><span class=\"line\">                                                      /Java/Extensions:/System/Library/Java/Extensions:/usr/lib/java</span><br><span class=\"line\"> sun.boot.class.path                                  /Library/Java/JavaVirtualMachines/jdk1.8.0_51.jdk/Contents/Home/jre/lib/resour</span><br><span class=\"line\">                                                      ces.jar:/Library/Java/JavaVirtualMachines/jdk1.8.0_51.jdk/Contents/Home/jre/li</span><br><span class=\"line\">                                                      b/rt.jar:/Library/Java/JavaVirtualMachines/jdk1.8.0_51.jdk/Contents/Home/jre/l</span><br><span class=\"line\">                                                      ib/sunrsasign.jar:/Library/Java/JavaVirtualMachines/jdk1.8.0_51.jdk/Contents/H</span><br><span class=\"line\">                                                      ome/jre/lib/jsse.jar:/Library/Java/JavaVirtualMachines/jdk1.8.0_51.jdk/Content</span><br><span class=\"line\">                                                      s/Home/jre/lib/jce.jar:/Library/Java/JavaVirtualMachines/jdk1.8.0_51.jdk/Conte</span><br><span class=\"line\">                                                      nts/Home/jre/lib/charsets.jar:/Library/Java/JavaVirtualMachines/jdk1.8.0_51.jd</span><br><span class=\"line\">                                                      k/Contents/Home/jre/lib/jfr.jar:/Library/Java/JavaVirtualMachines/jdk1.8.0_51.</span><br><span class=\"line\">                                                      jdk/Contents/Home/jre/classes</span><br><span class=\"line\"> java.vendor                                          Oracle Corporation</span><br><span class=\"line\"> file.separator                                       /</span><br><span class=\"line\"> java.vendor.url.bug                                  http://bugreport.sun.com/bugreport/</span><br><span class=\"line\"> sun.cpu.endian                                       little</span><br><span class=\"line\"> sun.io.unicode.encoding                              UnicodeBig</span><br><span class=\"line\"> sun.cpu.isalist</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"查看单个属性\"><a href=\"#查看单个属性\" class=\"headerlink\" title=\"查看单个属性\"></a>查看单个属性</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sysprop java.version</span><br><span class=\"line\">sysprop java.version</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight console\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> sysprop java.version</span></span><br><span class=\"line\">java.version=1.8.0_51</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"修改单个属性\"><a href=\"#修改单个属性\" class=\"headerlink\" title=\"修改单个属性\"></a>修改单个属性</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sysprop user.country</span><br><span class=\"line\">sysprop user.country</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sysprop user.country CN</span><br><span class=\"line\">sysprop user.country CN</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight console\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> sysprop user.country</span></span><br><span class=\"line\">user.country=US</span><br><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> sysprop user.country CN</span></span><br><span class=\"line\">Successfully changed the system property.</span><br><span class=\"line\">user.country=CN</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"自动补全\"><a href=\"#自动补全\" class=\"headerlink\" title=\"自动补全\"></a>自动补全</h2><p>Arthas支持丰富的自动补全功能，在使用有疑惑时，可以输入<code>Tab</code>来获取更多信息。</p>\n<p>比如输入 <code>sysprop java.</code> 之后，再输入<code>Tab</code>，会补全出对应的key：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ sysprop java.</span><br><span class=\"line\">java.runtime.name             java.protocol.handler.pkgs    java.vm.version</span><br><span class=\"line\">java.vm.vendor                java.vendor.url               java.vm.name</span><br><span class=\"line\">...</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"历史命令的补全\"><a href=\"#历史命令的补全\" class=\"headerlink\" title=\"历史命令的补全\"></a>历史命令的补全</h2><p>支持通过<code>TAB</code>键自动补全</p>\n<p>如果想再执行之前的命令，可以在输入一半时，按<code>Up/↑</code> 或者 <code>Ddown/↓</code>，来匹配到之前的命令。</p>\n<p>比如之前执行过<code>sysprop java.version</code>，那么在输入<code>sysprop ja</code>之后，可以输入<code>Up/↑</code>，就会自动补全为<code>sysprop java.version</code>。</p>\n<p>如果想查看所有的历史命令，也可以通过 <code>history</code> 命令查看到。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">history</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"管道\"><a href=\"#管道\" class=\"headerlink\" title=\"管道\"></a>管道</h2><p>Arthas支持在pipeline之后，执行一些简单的命令，比如：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sysprop | grep java</span><br><span class=\"line\">sysprop | grep java</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sysprop | wc -l</span><br><span class=\"line\">sysprop | wc -l</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"通过grep来过滤\"><a href=\"#通过grep来过滤\" class=\"headerlink\" title=\"通过grep来过滤\"></a>通过<code>grep</code>来过滤</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sysprop | grep user</span><br><span class=\"line\">sysprop | grep user</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"更多信息\"><a href=\"#更多信息\" class=\"headerlink\" title=\"更多信息\"></a>更多信息</h2><p>在“sysprop”中，我们演示了了Arthas的sysprop命令。如果有更多的技巧或者使用疑问，欢迎在Issue里提出。</p>\n<ul>\n<li>Issues: <a href=\"https://github.com/alibaba/arthas/issues\">https://github.com/alibaba/arthas/issues</a></li>\n<li>文档： <a href=\"https://arthas.aliyun.com/doc\">https://arthas.aliyun.com/doc</a></li>\n</ul>\n<p>如果您在使用Arthas，请让我们知道。您的使用对我们非常重要：<a href=\"https://github.com/alibaba/arthas/issues/111\">查看</a></p>\n<p>文章拷贝来源：<a href=\"https://start.aliyun.com/course?spm=a2ck6.17690074.0.0.28bc2e7dHTphXs&amp;id=PaiFAkJM\">https://start.aliyun.com/course?spm=a2ck6.17690074.0.0.28bc2e7dHTphXs&amp;id=PaiFAkJM</a></p>\n"},{"title":"Arthas thread命令","date":"2021-08-07T01:51:27.000Z","_content":"\n<!-- toc -->\n\n![Arthas](arthas.png)\n\n`Arthas` 是Alibaba开源的Java诊断工具，深受开发者喜爱。在线排查问题，无需重启；动态跟踪Java代码；实时监控JVM状态。\n\n`Arthas` 支持JDK 6+，支持Linux/Mac/Windows，采用命令行交互模式，同时提供丰富的 `Tab` 自动补全功能，进一步方便进行问题的定位和诊断。\n\n当你遇到以下类似问题而束手无策时，Arthas可以帮助你解决：\n\n- 这个类从哪个 jar 包加载的？为什么会报各种类相关的 Exception？\n- 我改的代码为什么没有执行到？难道是我没 commit？分支搞错了？\n- 遇到问题无法在线上 debug，难道只能通过加日志再重新发布吗？\n- 线上遇到某个用户的数据处理有问题，但线上同样无法 debug，线下无法重现！\n- 是否有一个全局视角来查看系统的运行状况？\n- 有什么办法可以监控到JVM的实时运行状态？\n- 怎么快速定位应用的热点，生成火焰图？\n\n本教程会以一个简单的应用为例，演示thread命令。\n\n- Github: https://github.com/alibaba/arthas\n- 文档: https://arthas.aliyun.com/doc/\n\n## Arthas demo\n\n下载`arthas-demo.jar`，再用`java -jar`命令启动：\n\n```bash\nwget https://arthas.aliyun.com/arthas-demo.jar;java -jar arthas-demo.jar\n```\n\n`arthas-demo`是一个很简单的程序，它随机生成整数，再执行因式分解，把结果打印出来。如果生成的随机数是负数，则会打印提示信息。\n\n## 启动arthas-boot\n\n在新的`Terminal 2`里，下载`arthas-boot.jar`，再用`java -jar`命令启动：\n\n```bash\nwget https://arthas.aliyun.com/arthas-boot.jar;java -jar arthas-boot.jar\n```\n\n`arthas-boot`是`Arthas`的启动程序，它启动后，会列出所有的Java进程，用户可以选择需要诊断的目标进程。\n\n选择第一个进程，输入 `1` ，再`Enter/回车`：\n\n```bash\n1\n```\n\nAttach成功之后，会打印Arthas LOGO。输入 `help` 可以获取到更多的帮助信息。\n\n```bash\nhelp\n```\n\n![Arthas Boot](O1CN01HzatXZ1RgccrlT90M_!!6000000002141-2-tps-529-244.png)\n\n## Thread命令\n\n查看当前线程信息，查看线程的堆栈\n\n#### 参数说明\n\n| 参数名称    | 参数说明                              |\n| ----------- | ------------------------------------- |\n| id          | 线程id                                |\n| [n:]        | 指定最忙的前N个线程并打印堆栈         |\n| [b]         | 找出当前阻塞其他线程的线程            |\n| [i <value>] | 指定cpu占比统计的采样间隔，单位为毫秒 |\n| [--all]     | 显示所有匹配的线程                    |\n\n## cpu占比是如何统计出来的？\n\n#### cpu使用率是如何统计出来的？\n\n这里的cpu使用率与linux 命令`top -H -p <pid>` 的线程`%CPU`类似，一段采样间隔时间内，当前JVM里各个线程的增量cpu时间与采样间隔时间的比例。\n\n> 工作原理说明：\n\n- 首先第一次采样，获取所有线程的CPU时间(调用的是`java.lang.management.ThreadMXBean#getThreadCpuTime()`及`sun.management.HotspotThreadMBean.getInternalThreadCpuTimes()`接口)\n- 然后睡眠等待一个间隔时间（默认为200ms，可以通过`-i`指定间隔时间）\n- 再次第二次采样，获取所有线程的CPU时间，对比两次采样数据，计算出每个线程的增量CPU时间\n- 线程CPU使用率 = 线程增量CPU时间 / 采样间隔时间 * 100%\n\n> 注意： 这个统计也会产生一定的开销（JDK这个接口本身开销比较大），因此会看到as的线程占用一定的百分比，为了降低统计自身的开销带来的影响，可以把采样间隔拉长一些，比如5000毫秒。\n>\n> 另外一种查看Java进程的线程cpu使用率方法：可以使用[show-busy-java-threads](https://github.com/oldratlee/useful-scripts/blob/master/docs/java.md#-show-busy-java-threads)这个脚本\n>\n> ## Thread用法\n\n#### 支持一键展示当前最忙的前N个线程并打印堆栈：\n\n```bash\nthread -n 3\n```\n\n```console\n$ thread -n 3\n\"C1 CompilerThread0\" [Internal] cpuUsage=1.63% deltaTime=3ms time=1170ms\n\"arthas-command-execute\" Id=23 cpuUsage=0.11% deltaTime=0ms time=401ms RUNNABLE\n    at java.management@11.0.7/sun.management.ThreadImpl.dumpThreads0(Native Method)\n    at java.management@11.0.7/sun.management.ThreadImpl.getThreadInfo(ThreadImpl.java:466)\n    at com.taobao.arthas.core.command.monitor200.ThreadCommand.processTopBusyThreads(ThreadCommand.java:199)\n    at com.taobao.arthas.core.command.monitor200.ThreadCommand.process(ThreadCommand.java:122)\n    at com.taobao.arthas.core.shell.command.impl.AnnotatedCommandImpl.process(AnnotatedCommandImpl.java:82)\n    at com.taobao.arthas.core.shell.command.impl.AnnotatedCommandImpl.access$100(AnnotatedCommandImpl.java:18)\n    at com.taobao.arthas.core.shell.command.impl.AnnotatedCommandImpl$ProcessHandler.handle(AnnotatedCommandImpl.java:111)\n    at com.taobao.arthas.core.shell.command.impl.AnnotatedCommandImpl$ProcessHandler.handle(AnnotatedCommandImpl.java:108)\n    at com.taobao.arthas.core.shell.system.impl.ProcessImpl$CommandProcessTask.run(ProcessImpl.java:385)\n    at java.base@11.0.7/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)\n    at java.base@11.0.7/java.util.concurrent.FutureTask.run(FutureTask.java:264)\n    at java.base@11.0.7/java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:304)\n    at java.base@11.0.7/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1128)\n    at java.base@11.0.7/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:628)\n    at java.base@11.0.7/java.lang.Thread.run(Thread.java:834)\n\"VM Periodic Task Thread\" [Internal] cpuUsage=0.07% deltaTime=0ms time=584ms\n```\n\n- 没有线程ID，包含`[Internal]`表示为JVM内部线程，参考`dashboard`命令的介绍。\n- `cpuUsage`为采样间隔时间内线程的CPU使用率，与`dashboard`命令的数据一致。\n- `deltaTime`为采样间隔时间内线程的增量CPU时间，小于1ms时被取整显示为0ms。\n- `time` 线程运行总CPU时间。\n\n注意：线程栈为第二采样结束时获取，不能表明采样间隔时间内该线程都是在处理相同的任务。建议间隔时间不要太长，可能间隔时间越大越不准确。 可以根据具体情况尝试指定不同的间隔时间，观察输出结果。\n\n#### 当没有参数时，显示第一页线程信息\n\n默认按照CPU增量时间降序排列，只显示第一页数据，避免滚屏。\n\n```bash\nthread\n```\n\n```console\n$ thread\nThreads Total: 33, NEW: 0, RUNNABLE: 9, BLOCKED: 0, WAITING: 3, TIMED_WAITING: 4, TERMINATED: 0, Internal threads: 17\nID   NAME                           GROUP          PRIORITY  STATE     %CPU      DELTA_TIME TIME      INTERRUPT DAEMON\n-1   C2 CompilerThread0             -              -1        -         5.06      0.010      0:0.973   false     true\n-1   C1 CompilerThread0             -              -1        -         0.95      0.001      0:0.603   false     true\n23   arthas-command-execute         system         5         RUNNABLE  0.17      0.000      0:0.226   false     true\n-1   VM Periodic Task Thread        -              -1        -         0.05      0.000      0:0.094   false     true\n-1   Sweeper thread                 -              -1        -         0.04      0.000      0:0.011   false     true\n-1   G1 Young RemSet Sampling       -              -1        -         0.02      0.000      0:0.025   false     true\n12   Attach Listener                system         9         RUNNABLE  0.0       0.000      0:0.022   false     true\n11   Common-Cleaner                 InnocuousThrea 8         TIMED_WAI 0.0       0.000      0:0.000   false     true\n3    Finalizer                      system         8         WAITING   0.0       0.000      0:0.000   false     true\n2    Reference Handler              system         10        RUNNABLE  0.0       0.000      0:0.000   false     true\n4    Signal Dispatcher              system         9         RUNNABLE  0.0       0.000      0:0.000   false     true\n15   arthas-NettyHttpTelnetBootstra system         5         RUNNABLE  0.0       0.000      0:0.029   false     true\n22   arthas-NettyHttpTelnetBootstra system         5         RUNNABLE  0.0       0.000      0:0.196   false     true\n24   arthas-NettyHttpTelnetBootstra system         5         RUNNABLE  0.0       0.000      0:0.038   false     true\n16   arthas-NettyWebsocketTtyBootst system         5         RUNNABLE  0.0       0.000      0:0.001   false     true\n17   arthas-NettyWebsocketTtyBootst system         5         RUNNABLE  0.0       0.000      0:0.001   false     true\n```\n\n#### thread --all, 显示所有匹配的线程\n\n显示所有匹配线程信息，有时需要获取全部JVM的线程数据进行分析。\n\n```bash\nthread --all\n```\n\n#### thread id， 显示指定线程的运行堆栈\n\n查看线程ID 16的栈：\n\n```bash\nthread 16\n```\n\n```console\n$ thread 1\n\"main\" Id=1 WAITING on java.util.concurrent.CountDownLatch$Sync@29fafb28\n    at sun.misc.Unsafe.park(Native Method)\n    -  waiting on java.util.concurrent.CountDownLatch$Sync@29fafb28\n    at java.util.concurrent.locks.LockSupport.park(LockSupport.java:175)\n    at java.util.concurrent.locks.AbstractQueuedSynchronizer.parkAndCheckInterrupt(AbstractQueuedSynchronizer.java:836)\n    at java.util.concurrent.locks.AbstractQueuedSynchronizer.doAcquireSharedInterruptibly(AbstractQueuedSynchronizer.java:997)\n    at java.util.concurrent.locks.AbstractQueuedSynchronizer.acquireSharedInterruptibly(AbstractQueuedSynchronizer.java:1304)\n    at java.util.concurrent.CountDownLatch.await(CountDownLatch.java:231)\n```\n\n#### thread -b, 找出当前阻塞其他线程的线程\n\n有时候我们发现应用卡住了， 通常是由于某个线程拿住了某个锁， 并且其他线程都在等待这把锁造成的。 为了排查这类问题， arthas提供了`thread -b`， 一键找出那个罪魁祸首。\n\n```bash\nthread -b\n```\n\n```console\n$ thread -b\n\"http-bio-8080-exec-4\" Id=27 TIMED_WAITING\n    at java.lang.Thread.sleep(Native Method)\n    at test.arthas.TestThreadBlocking.doGet(TestThreadBlocking.java:22)\n    -  locked java.lang.Object@725be470 <---- but blocks 4 other threads!\n    at javax.servlet.http.HttpServlet.service(HttpServlet.java:624)\n    at javax.servlet.http.HttpServlet.service(HttpServlet.java:731)\n    at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:303)\n    at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:208)\n    at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:52)\n    at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:241)\n    at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:208)\n    at test.filter.TestDurexFilter.doFilter(TestDurexFilter.java:46)\n    at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:241)\n    at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:208)\n    at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:220)\n    at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:122)\n    at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:505)\n    at com.taobao.tomcat.valves.ContextLoadFilterValve$FilterChainAdapter.doFilter(ContextLoadFilterValve.java:191)\n    at com.taobao.eagleeye.EagleEyeFilter.doFilter(EagleEyeFilter.java:81)\n    at com.taobao.tomcat.valves.ContextLoadFilterValve.invoke(ContextLoadFilterValve.java:150)\n    at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:170)\n    at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:103)\n    at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:116)\n    at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:429)\n    at org.apache.coyote.http11.AbstractHttp11Processor.process(AbstractHttp11Processor.java:1085)\n    at org.apache.coyote.AbstractProtocol$AbstractConnectionHandler.process(AbstractProtocol.java:625)\n    at org.apache.tomcat.util.net.JIoEndpoint$SocketProcessor.run(JIoEndpoint.java:318)\n    -  locked org.apache.tomcat.util.net.SocketWrapper@7127ee12\n    at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)\n    at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)\n    at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)\n    at java.lang.Thread.run(Thread.java:745)\n\n    Number of locked synchronizers = 1\n    - java.util.concurrent.ThreadPoolExecutor$Worker@31a6493e\n```\n\n**注意**， 目前只支持找出synchronized关键字阻塞住的线程， 如果是`java.util.concurrent.Lock`， 目前还不支持。\n\n#### thread -i, 指定采样时间间隔\n\n- `thread -i 1000` : 统计最近1000ms内的线程CPU时间。\n\n```bash\nthread -i 1000\n```\n\n- `thread -n 3 -i 1000` : 列出1000ms内最忙的3个线程栈\n\n```bash\nthread -n 3 -i 1000\n```\n\n```console\n$ thread -n 3 -i 1000\n\"as-command-execute-daemon\" Id=4759 cpuUsage=23% RUNNABLE\n    at sun.management.ThreadImpl.dumpThreads0(Native Method)\n    at sun.management.ThreadImpl.getThreadInfo(ThreadImpl.java:440)\n    at com.taobao.arthas.core.command.monitor200.ThreadCommand.processTopBusyThreads(ThreadCommand.java:133)\n    at com.taobao.arthas.core.command.monitor200.ThreadCommand.process(ThreadCommand.java:79)\n    at com.taobao.arthas.core.shell.command.impl.AnnotatedCommandImpl.process(AnnotatedCommandImpl.java:96)\n    at com.taobao.arthas.core.shell.command.impl.AnnotatedCommandImpl.access$100(AnnotatedCommandImpl.java:27)\n    at com.taobao.arthas.core.shell.command.impl.AnnotatedCommandImpl$ProcessHandler.handle(AnnotatedCommandImpl.java:125)\n    at com.taobao.arthas.core.shell.command.impl.AnnotatedCommandImpl$ProcessHandler.handle(AnnotatedCommandImpl.java:122)\n    at com.taobao.arthas.core.shell.system.impl.ProcessImpl$CommandProcessTask.run(ProcessImpl.java:332)\n    at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)\n    at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)\n    at java.lang.Thread.run(Thread.java:756)\n\n    Number of locked synchronizers = 1\n    - java.util.concurrent.ThreadPoolExecutor$Worker@546aeec1\n...\n```\n\n#### thread –state ，查看指定状态的线程\n\n```bash\nthread --state WAITING\n```\n\n```console\n[arthas@28114]$ thread --state WAITING\nThreads Total: 16, NEW: 0, RUNNABLE: 9, BLOCKED: 0, WAITING: 3, TIMED_WAITING: 4, TERMINATED: 0\nID   NAME                           GROUP           PRIORITY   STATE     %CPU      DELTA_TIME TIME      INTERRUPTE DAEMON\n3    Finalizer                      system          8          WAITING   0.0       0.000      0:0.000   false      true\n20   arthas-UserStat                system          9          WAITING   0.0       0.000      0:0.001   false      true\n14   arthas-timer                   system          9          WAITING   0.0       0.000      0:0.000   false      true\n```\n\n## 更多信息\n\n在“thread”中，我们演示了了Arthas的thread命令。如果有更多的技巧或者使用疑问，欢迎在Issue里提出。\n\n- Issues: https://github.com/alibaba/arthas/issues\n- 文档： https://arthas.aliyun.com/doc\n\n如果您在使用Arthas，请让我们知道。您的使用对我们非常重要：[查看](https://github.com/alibaba/arthas/issues/111)\n\n文章拷贝来源：https://start.aliyun.com/course?spm=a2ck6.17690074.0.0.28bc2e7dHTphXs&id=PaiFAkJM","source":"_posts/Java诊断工具Arthas高级命令教程/Arthasthread命令.md","raw":"---\ntitle: Arthas thread命令\ndate: 2021-08-07 09:51:27\ntags: ['Java 诊断工具 Arthas 高级命令教程']\n---\n\n<!-- toc -->\n\n![Arthas](arthas.png)\n\n`Arthas` 是Alibaba开源的Java诊断工具，深受开发者喜爱。在线排查问题，无需重启；动态跟踪Java代码；实时监控JVM状态。\n\n`Arthas` 支持JDK 6+，支持Linux/Mac/Windows，采用命令行交互模式，同时提供丰富的 `Tab` 自动补全功能，进一步方便进行问题的定位和诊断。\n\n当你遇到以下类似问题而束手无策时，Arthas可以帮助你解决：\n\n- 这个类从哪个 jar 包加载的？为什么会报各种类相关的 Exception？\n- 我改的代码为什么没有执行到？难道是我没 commit？分支搞错了？\n- 遇到问题无法在线上 debug，难道只能通过加日志再重新发布吗？\n- 线上遇到某个用户的数据处理有问题，但线上同样无法 debug，线下无法重现！\n- 是否有一个全局视角来查看系统的运行状况？\n- 有什么办法可以监控到JVM的实时运行状态？\n- 怎么快速定位应用的热点，生成火焰图？\n\n本教程会以一个简单的应用为例，演示thread命令。\n\n- Github: https://github.com/alibaba/arthas\n- 文档: https://arthas.aliyun.com/doc/\n\n## Arthas demo\n\n下载`arthas-demo.jar`，再用`java -jar`命令启动：\n\n```bash\nwget https://arthas.aliyun.com/arthas-demo.jar;java -jar arthas-demo.jar\n```\n\n`arthas-demo`是一个很简单的程序，它随机生成整数，再执行因式分解，把结果打印出来。如果生成的随机数是负数，则会打印提示信息。\n\n## 启动arthas-boot\n\n在新的`Terminal 2`里，下载`arthas-boot.jar`，再用`java -jar`命令启动：\n\n```bash\nwget https://arthas.aliyun.com/arthas-boot.jar;java -jar arthas-boot.jar\n```\n\n`arthas-boot`是`Arthas`的启动程序，它启动后，会列出所有的Java进程，用户可以选择需要诊断的目标进程。\n\n选择第一个进程，输入 `1` ，再`Enter/回车`：\n\n```bash\n1\n```\n\nAttach成功之后，会打印Arthas LOGO。输入 `help` 可以获取到更多的帮助信息。\n\n```bash\nhelp\n```\n\n![Arthas Boot](O1CN01HzatXZ1RgccrlT90M_!!6000000002141-2-tps-529-244.png)\n\n## Thread命令\n\n查看当前线程信息，查看线程的堆栈\n\n#### 参数说明\n\n| 参数名称    | 参数说明                              |\n| ----------- | ------------------------------------- |\n| id          | 线程id                                |\n| [n:]        | 指定最忙的前N个线程并打印堆栈         |\n| [b]         | 找出当前阻塞其他线程的线程            |\n| [i <value>] | 指定cpu占比统计的采样间隔，单位为毫秒 |\n| [--all]     | 显示所有匹配的线程                    |\n\n## cpu占比是如何统计出来的？\n\n#### cpu使用率是如何统计出来的？\n\n这里的cpu使用率与linux 命令`top -H -p <pid>` 的线程`%CPU`类似，一段采样间隔时间内，当前JVM里各个线程的增量cpu时间与采样间隔时间的比例。\n\n> 工作原理说明：\n\n- 首先第一次采样，获取所有线程的CPU时间(调用的是`java.lang.management.ThreadMXBean#getThreadCpuTime()`及`sun.management.HotspotThreadMBean.getInternalThreadCpuTimes()`接口)\n- 然后睡眠等待一个间隔时间（默认为200ms，可以通过`-i`指定间隔时间）\n- 再次第二次采样，获取所有线程的CPU时间，对比两次采样数据，计算出每个线程的增量CPU时间\n- 线程CPU使用率 = 线程增量CPU时间 / 采样间隔时间 * 100%\n\n> 注意： 这个统计也会产生一定的开销（JDK这个接口本身开销比较大），因此会看到as的线程占用一定的百分比，为了降低统计自身的开销带来的影响，可以把采样间隔拉长一些，比如5000毫秒。\n>\n> 另外一种查看Java进程的线程cpu使用率方法：可以使用[show-busy-java-threads](https://github.com/oldratlee/useful-scripts/blob/master/docs/java.md#-show-busy-java-threads)这个脚本\n>\n> ## Thread用法\n\n#### 支持一键展示当前最忙的前N个线程并打印堆栈：\n\n```bash\nthread -n 3\n```\n\n```console\n$ thread -n 3\n\"C1 CompilerThread0\" [Internal] cpuUsage=1.63% deltaTime=3ms time=1170ms\n\"arthas-command-execute\" Id=23 cpuUsage=0.11% deltaTime=0ms time=401ms RUNNABLE\n    at java.management@11.0.7/sun.management.ThreadImpl.dumpThreads0(Native Method)\n    at java.management@11.0.7/sun.management.ThreadImpl.getThreadInfo(ThreadImpl.java:466)\n    at com.taobao.arthas.core.command.monitor200.ThreadCommand.processTopBusyThreads(ThreadCommand.java:199)\n    at com.taobao.arthas.core.command.monitor200.ThreadCommand.process(ThreadCommand.java:122)\n    at com.taobao.arthas.core.shell.command.impl.AnnotatedCommandImpl.process(AnnotatedCommandImpl.java:82)\n    at com.taobao.arthas.core.shell.command.impl.AnnotatedCommandImpl.access$100(AnnotatedCommandImpl.java:18)\n    at com.taobao.arthas.core.shell.command.impl.AnnotatedCommandImpl$ProcessHandler.handle(AnnotatedCommandImpl.java:111)\n    at com.taobao.arthas.core.shell.command.impl.AnnotatedCommandImpl$ProcessHandler.handle(AnnotatedCommandImpl.java:108)\n    at com.taobao.arthas.core.shell.system.impl.ProcessImpl$CommandProcessTask.run(ProcessImpl.java:385)\n    at java.base@11.0.7/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)\n    at java.base@11.0.7/java.util.concurrent.FutureTask.run(FutureTask.java:264)\n    at java.base@11.0.7/java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:304)\n    at java.base@11.0.7/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1128)\n    at java.base@11.0.7/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:628)\n    at java.base@11.0.7/java.lang.Thread.run(Thread.java:834)\n\"VM Periodic Task Thread\" [Internal] cpuUsage=0.07% deltaTime=0ms time=584ms\n```\n\n- 没有线程ID，包含`[Internal]`表示为JVM内部线程，参考`dashboard`命令的介绍。\n- `cpuUsage`为采样间隔时间内线程的CPU使用率，与`dashboard`命令的数据一致。\n- `deltaTime`为采样间隔时间内线程的增量CPU时间，小于1ms时被取整显示为0ms。\n- `time` 线程运行总CPU时间。\n\n注意：线程栈为第二采样结束时获取，不能表明采样间隔时间内该线程都是在处理相同的任务。建议间隔时间不要太长，可能间隔时间越大越不准确。 可以根据具体情况尝试指定不同的间隔时间，观察输出结果。\n\n#### 当没有参数时，显示第一页线程信息\n\n默认按照CPU增量时间降序排列，只显示第一页数据，避免滚屏。\n\n```bash\nthread\n```\n\n```console\n$ thread\nThreads Total: 33, NEW: 0, RUNNABLE: 9, BLOCKED: 0, WAITING: 3, TIMED_WAITING: 4, TERMINATED: 0, Internal threads: 17\nID   NAME                           GROUP          PRIORITY  STATE     %CPU      DELTA_TIME TIME      INTERRUPT DAEMON\n-1   C2 CompilerThread0             -              -1        -         5.06      0.010      0:0.973   false     true\n-1   C1 CompilerThread0             -              -1        -         0.95      0.001      0:0.603   false     true\n23   arthas-command-execute         system         5         RUNNABLE  0.17      0.000      0:0.226   false     true\n-1   VM Periodic Task Thread        -              -1        -         0.05      0.000      0:0.094   false     true\n-1   Sweeper thread                 -              -1        -         0.04      0.000      0:0.011   false     true\n-1   G1 Young RemSet Sampling       -              -1        -         0.02      0.000      0:0.025   false     true\n12   Attach Listener                system         9         RUNNABLE  0.0       0.000      0:0.022   false     true\n11   Common-Cleaner                 InnocuousThrea 8         TIMED_WAI 0.0       0.000      0:0.000   false     true\n3    Finalizer                      system         8         WAITING   0.0       0.000      0:0.000   false     true\n2    Reference Handler              system         10        RUNNABLE  0.0       0.000      0:0.000   false     true\n4    Signal Dispatcher              system         9         RUNNABLE  0.0       0.000      0:0.000   false     true\n15   arthas-NettyHttpTelnetBootstra system         5         RUNNABLE  0.0       0.000      0:0.029   false     true\n22   arthas-NettyHttpTelnetBootstra system         5         RUNNABLE  0.0       0.000      0:0.196   false     true\n24   arthas-NettyHttpTelnetBootstra system         5         RUNNABLE  0.0       0.000      0:0.038   false     true\n16   arthas-NettyWebsocketTtyBootst system         5         RUNNABLE  0.0       0.000      0:0.001   false     true\n17   arthas-NettyWebsocketTtyBootst system         5         RUNNABLE  0.0       0.000      0:0.001   false     true\n```\n\n#### thread --all, 显示所有匹配的线程\n\n显示所有匹配线程信息，有时需要获取全部JVM的线程数据进行分析。\n\n```bash\nthread --all\n```\n\n#### thread id， 显示指定线程的运行堆栈\n\n查看线程ID 16的栈：\n\n```bash\nthread 16\n```\n\n```console\n$ thread 1\n\"main\" Id=1 WAITING on java.util.concurrent.CountDownLatch$Sync@29fafb28\n    at sun.misc.Unsafe.park(Native Method)\n    -  waiting on java.util.concurrent.CountDownLatch$Sync@29fafb28\n    at java.util.concurrent.locks.LockSupport.park(LockSupport.java:175)\n    at java.util.concurrent.locks.AbstractQueuedSynchronizer.parkAndCheckInterrupt(AbstractQueuedSynchronizer.java:836)\n    at java.util.concurrent.locks.AbstractQueuedSynchronizer.doAcquireSharedInterruptibly(AbstractQueuedSynchronizer.java:997)\n    at java.util.concurrent.locks.AbstractQueuedSynchronizer.acquireSharedInterruptibly(AbstractQueuedSynchronizer.java:1304)\n    at java.util.concurrent.CountDownLatch.await(CountDownLatch.java:231)\n```\n\n#### thread -b, 找出当前阻塞其他线程的线程\n\n有时候我们发现应用卡住了， 通常是由于某个线程拿住了某个锁， 并且其他线程都在等待这把锁造成的。 为了排查这类问题， arthas提供了`thread -b`， 一键找出那个罪魁祸首。\n\n```bash\nthread -b\n```\n\n```console\n$ thread -b\n\"http-bio-8080-exec-4\" Id=27 TIMED_WAITING\n    at java.lang.Thread.sleep(Native Method)\n    at test.arthas.TestThreadBlocking.doGet(TestThreadBlocking.java:22)\n    -  locked java.lang.Object@725be470 <---- but blocks 4 other threads!\n    at javax.servlet.http.HttpServlet.service(HttpServlet.java:624)\n    at javax.servlet.http.HttpServlet.service(HttpServlet.java:731)\n    at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:303)\n    at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:208)\n    at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:52)\n    at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:241)\n    at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:208)\n    at test.filter.TestDurexFilter.doFilter(TestDurexFilter.java:46)\n    at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:241)\n    at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:208)\n    at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:220)\n    at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:122)\n    at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:505)\n    at com.taobao.tomcat.valves.ContextLoadFilterValve$FilterChainAdapter.doFilter(ContextLoadFilterValve.java:191)\n    at com.taobao.eagleeye.EagleEyeFilter.doFilter(EagleEyeFilter.java:81)\n    at com.taobao.tomcat.valves.ContextLoadFilterValve.invoke(ContextLoadFilterValve.java:150)\n    at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:170)\n    at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:103)\n    at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:116)\n    at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:429)\n    at org.apache.coyote.http11.AbstractHttp11Processor.process(AbstractHttp11Processor.java:1085)\n    at org.apache.coyote.AbstractProtocol$AbstractConnectionHandler.process(AbstractProtocol.java:625)\n    at org.apache.tomcat.util.net.JIoEndpoint$SocketProcessor.run(JIoEndpoint.java:318)\n    -  locked org.apache.tomcat.util.net.SocketWrapper@7127ee12\n    at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)\n    at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)\n    at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)\n    at java.lang.Thread.run(Thread.java:745)\n\n    Number of locked synchronizers = 1\n    - java.util.concurrent.ThreadPoolExecutor$Worker@31a6493e\n```\n\n**注意**， 目前只支持找出synchronized关键字阻塞住的线程， 如果是`java.util.concurrent.Lock`， 目前还不支持。\n\n#### thread -i, 指定采样时间间隔\n\n- `thread -i 1000` : 统计最近1000ms内的线程CPU时间。\n\n```bash\nthread -i 1000\n```\n\n- `thread -n 3 -i 1000` : 列出1000ms内最忙的3个线程栈\n\n```bash\nthread -n 3 -i 1000\n```\n\n```console\n$ thread -n 3 -i 1000\n\"as-command-execute-daemon\" Id=4759 cpuUsage=23% RUNNABLE\n    at sun.management.ThreadImpl.dumpThreads0(Native Method)\n    at sun.management.ThreadImpl.getThreadInfo(ThreadImpl.java:440)\n    at com.taobao.arthas.core.command.monitor200.ThreadCommand.processTopBusyThreads(ThreadCommand.java:133)\n    at com.taobao.arthas.core.command.monitor200.ThreadCommand.process(ThreadCommand.java:79)\n    at com.taobao.arthas.core.shell.command.impl.AnnotatedCommandImpl.process(AnnotatedCommandImpl.java:96)\n    at com.taobao.arthas.core.shell.command.impl.AnnotatedCommandImpl.access$100(AnnotatedCommandImpl.java:27)\n    at com.taobao.arthas.core.shell.command.impl.AnnotatedCommandImpl$ProcessHandler.handle(AnnotatedCommandImpl.java:125)\n    at com.taobao.arthas.core.shell.command.impl.AnnotatedCommandImpl$ProcessHandler.handle(AnnotatedCommandImpl.java:122)\n    at com.taobao.arthas.core.shell.system.impl.ProcessImpl$CommandProcessTask.run(ProcessImpl.java:332)\n    at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)\n    at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)\n    at java.lang.Thread.run(Thread.java:756)\n\n    Number of locked synchronizers = 1\n    - java.util.concurrent.ThreadPoolExecutor$Worker@546aeec1\n...\n```\n\n#### thread –state ，查看指定状态的线程\n\n```bash\nthread --state WAITING\n```\n\n```console\n[arthas@28114]$ thread --state WAITING\nThreads Total: 16, NEW: 0, RUNNABLE: 9, BLOCKED: 0, WAITING: 3, TIMED_WAITING: 4, TERMINATED: 0\nID   NAME                           GROUP           PRIORITY   STATE     %CPU      DELTA_TIME TIME      INTERRUPTE DAEMON\n3    Finalizer                      system          8          WAITING   0.0       0.000      0:0.000   false      true\n20   arthas-UserStat                system          9          WAITING   0.0       0.000      0:0.001   false      true\n14   arthas-timer                   system          9          WAITING   0.0       0.000      0:0.000   false      true\n```\n\n## 更多信息\n\n在“thread”中，我们演示了了Arthas的thread命令。如果有更多的技巧或者使用疑问，欢迎在Issue里提出。\n\n- Issues: https://github.com/alibaba/arthas/issues\n- 文档： https://arthas.aliyun.com/doc\n\n如果您在使用Arthas，请让我们知道。您的使用对我们非常重要：[查看](https://github.com/alibaba/arthas/issues/111)\n\n文章拷贝来源：https://start.aliyun.com/course?spm=a2ck6.17690074.0.0.28bc2e7dHTphXs&id=PaiFAkJM","slug":"Java诊断工具Arthas高级命令教程/Arthasthread命令","published":1,"updated":"2021-08-07T05:35:30.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cks1cgr72002rfw5i1mpj85ja","content":"<!-- toc -->\n\n<ul>\n<li><a href=\"#arthas-demo\">Arthas demo</a></li>\n<li><a href=\"#%E5%90%AF%E5%8A%A8arthas-boot\">启动arthas-boot</a></li>\n<li><a href=\"#thread%E5%91%BD%E4%BB%A4\">Thread命令</a><ul>\n<li><a href=\"#%E5%8F%82%E6%95%B0%E8%AF%B4%E6%98%8E\">参数说明</a></li>\n</ul>\n</li>\n<li><a href=\"#cpu%E5%8D%A0%E6%AF%94%E6%98%AF%E5%A6%82%E4%BD%95%E7%BB%9F%E8%AE%A1%E5%87%BA%E6%9D%A5%E7%9A%84\">cpu占比是如何统计出来的？</a><ul>\n<li><a href=\"#cpu%E4%BD%BF%E7%94%A8%E7%8E%87%E6%98%AF%E5%A6%82%E4%BD%95%E7%BB%9F%E8%AE%A1%E5%87%BA%E6%9D%A5%E7%9A%84\">cpu使用率是如何统计出来的？</a></li>\n</ul>\n</li>\n<li><a href=\"#thread%E7%94%A8%E6%B3%95\">Thread用法</a><ul>\n<li><a href=\"#%E6%94%AF%E6%8C%81%E4%B8%80%E9%94%AE%E5%B1%95%E7%A4%BA%E5%BD%93%E5%89%8D%E6%9C%80%E5%BF%99%E7%9A%84%E5%89%8Dn%E4%B8%AA%E7%BA%BF%E7%A8%8B%E5%B9%B6%E6%89%93%E5%8D%B0%E5%A0%86%E6%A0%88\">支持一键展示当前最忙的前N个线程并打印堆栈：</a></li>\n<li><a href=\"#%E5%BD%93%E6%B2%A1%E6%9C%89%E5%8F%82%E6%95%B0%E6%97%B6%E6%98%BE%E7%A4%BA%E7%AC%AC%E4%B8%80%E9%A1%B5%E7%BA%BF%E7%A8%8B%E4%BF%A1%E6%81%AF\">当没有参数时，显示第一页线程信息</a></li>\n<li><a href=\"#thread-all-%E6%98%BE%E7%A4%BA%E6%89%80%E6%9C%89%E5%8C%B9%E9%85%8D%E7%9A%84%E7%BA%BF%E7%A8%8B\">thread –all, 显示所有匹配的线程</a></li>\n<li><a href=\"#thread-id-%E6%98%BE%E7%A4%BA%E6%8C%87%E5%AE%9A%E7%BA%BF%E7%A8%8B%E7%9A%84%E8%BF%90%E8%A1%8C%E5%A0%86%E6%A0%88\">thread id， 显示指定线程的运行堆栈</a></li>\n<li><a href=\"#thread-b-%E6%89%BE%E5%87%BA%E5%BD%93%E5%89%8D%E9%98%BB%E5%A1%9E%E5%85%B6%E4%BB%96%E7%BA%BF%E7%A8%8B%E7%9A%84%E7%BA%BF%E7%A8%8B\">thread -b, 找出当前阻塞其他线程的线程</a></li>\n<li><a href=\"#thread-i-%E6%8C%87%E5%AE%9A%E9%87%87%E6%A0%B7%E6%97%B6%E9%97%B4%E9%97%B4%E9%9A%94\">thread -i, 指定采样时间间隔</a></li>\n<li><a href=\"#thread-state-%E6%9F%A5%E7%9C%8B%E6%8C%87%E5%AE%9A%E7%8A%B6%E6%80%81%E7%9A%84%E7%BA%BF%E7%A8%8B\">thread –state ，查看指定状态的线程</a></li>\n</ul>\n</li>\n<li><a href=\"#%E6%9B%B4%E5%A4%9A%E4%BF%A1%E6%81%AF\">更多信息</a></li>\n</ul>\n<!-- tocstop -->\n\n<p><img src=\"/jlynet.github.io/2021/08/07/Java%E8%AF%8A%E6%96%AD%E5%B7%A5%E5%85%B7Arthas%E9%AB%98%E7%BA%A7%E5%91%BD%E4%BB%A4%E6%95%99%E7%A8%8B/Arthasthread%E5%91%BD%E4%BB%A4/arthas.png\" alt=\"Arthas\"></p>\n<p><code>Arthas</code> 是Alibaba开源的Java诊断工具，深受开发者喜爱。在线排查问题，无需重启；动态跟踪Java代码；实时监控JVM状态。</p>\n<p><code>Arthas</code> 支持JDK 6+，支持Linux/Mac/Windows，采用命令行交互模式，同时提供丰富的 <code>Tab</code> 自动补全功能，进一步方便进行问题的定位和诊断。</p>\n<p>当你遇到以下类似问题而束手无策时，Arthas可以帮助你解决：</p>\n<ul>\n<li>这个类从哪个 jar 包加载的？为什么会报各种类相关的 Exception？</li>\n<li>我改的代码为什么没有执行到？难道是我没 commit？分支搞错了？</li>\n<li>遇到问题无法在线上 debug，难道只能通过加日志再重新发布吗？</li>\n<li>线上遇到某个用户的数据处理有问题，但线上同样无法 debug，线下无法重现！</li>\n<li>是否有一个全局视角来查看系统的运行状况？</li>\n<li>有什么办法可以监控到JVM的实时运行状态？</li>\n<li>怎么快速定位应用的热点，生成火焰图？</li>\n</ul>\n<p>本教程会以一个简单的应用为例，演示thread命令。</p>\n<ul>\n<li>Github: <a href=\"https://github.com/alibaba/arthas\">https://github.com/alibaba/arthas</a></li>\n<li>文档: <a href=\"https://arthas.aliyun.com/doc/\">https://arthas.aliyun.com/doc/</a></li>\n</ul>\n<h2><span id=\"arthas-demo\">Arthas demo</span></h2><p>下载<code>arthas-demo.jar</code>，再用<code>java -jar</code>命令启动：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wget https://arthas.aliyun.com/arthas-demo.jar;java -jar arthas-demo.jar</span><br></pre></td></tr></table></figure>\n\n<p><code>arthas-demo</code>是一个很简单的程序，它随机生成整数，再执行因式分解，把结果打印出来。如果生成的随机数是负数，则会打印提示信息。</p>\n<h2><span id=\"启动arthas-boot\">启动arthas-boot</span></h2><p>在新的<code>Terminal 2</code>里，下载<code>arthas-boot.jar</code>，再用<code>java -jar</code>命令启动：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wget https://arthas.aliyun.com/arthas-boot.jar;java -jar arthas-boot.jar</span><br></pre></td></tr></table></figure>\n\n<p><code>arthas-boot</code>是<code>Arthas</code>的启动程序，它启动后，会列出所有的Java进程，用户可以选择需要诊断的目标进程。</p>\n<p>选择第一个进程，输入 <code>1</code> ，再<code>Enter/回车</code>：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1</span><br></pre></td></tr></table></figure>\n\n<p>Attach成功之后，会打印Arthas LOGO。输入 <code>help</code> 可以获取到更多的帮助信息。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">help</span></span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/jlynet.github.io/2021/08/07/Java%E8%AF%8A%E6%96%AD%E5%B7%A5%E5%85%B7Arthas%E9%AB%98%E7%BA%A7%E5%91%BD%E4%BB%A4%E6%95%99%E7%A8%8B/Arthasthread%E5%91%BD%E4%BB%A4/O1CN01HzatXZ1RgccrlT90M_!!6000000002141-2-tps-529-244.png\" alt=\"Arthas Boot\"></p>\n<h2><span id=\"thread命令\">Thread命令</span></h2><p>查看当前线程信息，查看线程的堆栈</p>\n<h4><span id=\"参数说明\">参数说明</span></h4><table>\n<thead>\n<tr>\n<th>参数名称</th>\n<th>参数说明</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>id</td>\n<td>线程id</td>\n</tr>\n<tr>\n<td>[n:]</td>\n<td>指定最忙的前N个线程并打印堆栈</td>\n</tr>\n<tr>\n<td>[b]</td>\n<td>找出当前阻塞其他线程的线程</td>\n</tr>\n<tr>\n<td>[i <value>]</value></td>\n<td>指定cpu占比统计的采样间隔，单位为毫秒</td>\n</tr>\n<tr>\n<td>[–all]</td>\n<td>显示所有匹配的线程</td>\n</tr>\n</tbody></table>\n<h2><span id=\"cpu占比是如何统计出来的\">cpu占比是如何统计出来的？</span></h2><h4><span id=\"cpu使用率是如何统计出来的\">cpu使用率是如何统计出来的？</span></h4><p>这里的cpu使用率与linux 命令<code>top -H -p &lt;pid&gt;</code> 的线程<code>%CPU</code>类似，一段采样间隔时间内，当前JVM里各个线程的增量cpu时间与采样间隔时间的比例。</p>\n<blockquote>\n<p>工作原理说明：</p>\n</blockquote>\n<ul>\n<li>首先第一次采样，获取所有线程的CPU时间(调用的是<code>java.lang.management.ThreadMXBean#getThreadCpuTime()</code>及<code>sun.management.HotspotThreadMBean.getInternalThreadCpuTimes()</code>接口)</li>\n<li>然后睡眠等待一个间隔时间（默认为200ms，可以通过<code>-i</code>指定间隔时间）</li>\n<li>再次第二次采样，获取所有线程的CPU时间，对比两次采样数据，计算出每个线程的增量CPU时间</li>\n<li>线程CPU使用率 = 线程增量CPU时间 / 采样间隔时间 * 100%</li>\n</ul>\n<blockquote>\n<p>注意： 这个统计也会产生一定的开销（JDK这个接口本身开销比较大），因此会看到as的线程占用一定的百分比，为了降低统计自身的开销带来的影响，可以把采样间隔拉长一些，比如5000毫秒。</p>\n<p>另外一种查看Java进程的线程cpu使用率方法：可以使用<a href=\"https://github.com/oldratlee/useful-scripts/blob/master/docs/java.md#-show-busy-java-threads\">show-busy-java-threads</a>这个脚本</p>\n<h2><span id=\"thread用法\">Thread用法</span></h2></blockquote>\n<h4><span id=\"支持一键展示当前最忙的前n个线程并打印堆栈\">支持一键展示当前最忙的前N个线程并打印堆栈：</span></h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">thread -n 3</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight console\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> thread -n 3</span></span><br><span class=\"line\">&quot;C1 CompilerThread0&quot; [Internal] cpuUsage=1.63% deltaTime=3ms time=1170ms</span><br><span class=\"line\">&quot;arthas-command-execute&quot; Id=23 cpuUsage=0.11% deltaTime=0ms time=401ms RUNNABLE</span><br><span class=\"line\">    at java.management@11.0.7/sun.management.ThreadImpl.dumpThreads0(Native Method)</span><br><span class=\"line\">    at java.management@11.0.7/sun.management.ThreadImpl.getThreadInfo(ThreadImpl.java:466)</span><br><span class=\"line\">    at com.taobao.arthas.core.command.monitor200.ThreadCommand.processTopBusyThreads(ThreadCommand.java:199)</span><br><span class=\"line\">    at com.taobao.arthas.core.command.monitor200.ThreadCommand.process(ThreadCommand.java:122)</span><br><span class=\"line\">    at com.taobao.arthas.core.shell.command.impl.AnnotatedCommandImpl.process(AnnotatedCommandImpl.java:82)</span><br><span class=\"line\">    at com.taobao.arthas.core.shell.command.impl.AnnotatedCommandImpl.access$100(AnnotatedCommandImpl.java:18)</span><br><span class=\"line\">    at com.taobao.arthas.core.shell.command.impl.AnnotatedCommandImpl$ProcessHandler.handle(AnnotatedCommandImpl.java:111)</span><br><span class=\"line\">    at com.taobao.arthas.core.shell.command.impl.AnnotatedCommandImpl$ProcessHandler.handle(AnnotatedCommandImpl.java:108)</span><br><span class=\"line\">    at com.taobao.arthas.core.shell.system.impl.ProcessImpl$CommandProcessTask.run(ProcessImpl.java:385)</span><br><span class=\"line\">    at java.base@11.0.7/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)</span><br><span class=\"line\">    at java.base@11.0.7/java.util.concurrent.FutureTask.run(FutureTask.java:264)</span><br><span class=\"line\">    at java.base@11.0.7/java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:304)</span><br><span class=\"line\">    at java.base@11.0.7/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1128)</span><br><span class=\"line\">    at java.base@11.0.7/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:628)</span><br><span class=\"line\">    at java.base@11.0.7/java.lang.Thread.run(Thread.java:834)</span><br><span class=\"line\">&quot;VM Periodic Task Thread&quot; [Internal] cpuUsage=0.07% deltaTime=0ms time=584ms</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>没有线程ID，包含<code>[Internal]</code>表示为JVM内部线程，参考<code>dashboard</code>命令的介绍。</li>\n<li><code>cpuUsage</code>为采样间隔时间内线程的CPU使用率，与<code>dashboard</code>命令的数据一致。</li>\n<li><code>deltaTime</code>为采样间隔时间内线程的增量CPU时间，小于1ms时被取整显示为0ms。</li>\n<li><code>time</code> 线程运行总CPU时间。</li>\n</ul>\n<p>注意：线程栈为第二采样结束时获取，不能表明采样间隔时间内该线程都是在处理相同的任务。建议间隔时间不要太长，可能间隔时间越大越不准确。 可以根据具体情况尝试指定不同的间隔时间，观察输出结果。</p>\n<h4><span id=\"当没有参数时显示第一页线程信息\">当没有参数时，显示第一页线程信息</span></h4><p>默认按照CPU增量时间降序排列，只显示第一页数据，避免滚屏。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">thread</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight console\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> thread</span></span><br><span class=\"line\">Threads Total: 33, NEW: 0, RUNNABLE: 9, BLOCKED: 0, WAITING: 3, TIMED_WAITING: 4, TERMINATED: 0, Internal threads: 17</span><br><span class=\"line\">ID   NAME                           GROUP          PRIORITY  STATE     %CPU      DELTA_TIME TIME      INTERRUPT DAEMON</span><br><span class=\"line\">-1   C2 CompilerThread0             -              -1        -         5.06      0.010      0:0.973   false     true</span><br><span class=\"line\">-1   C1 CompilerThread0             -              -1        -         0.95      0.001      0:0.603   false     true</span><br><span class=\"line\">23   arthas-command-execute         system         5         RUNNABLE  0.17      0.000      0:0.226   false     true</span><br><span class=\"line\">-1   VM Periodic Task Thread        -              -1        -         0.05      0.000      0:0.094   false     true</span><br><span class=\"line\">-1   Sweeper thread                 -              -1        -         0.04      0.000      0:0.011   false     true</span><br><span class=\"line\">-1   G1 Young RemSet Sampling       -              -1        -         0.02      0.000      0:0.025   false     true</span><br><span class=\"line\">12   Attach Listener                system         9         RUNNABLE  0.0       0.000      0:0.022   false     true</span><br><span class=\"line\">11   Common-Cleaner                 InnocuousThrea 8         TIMED_WAI 0.0       0.000      0:0.000   false     true</span><br><span class=\"line\">3    Finalizer                      system         8         WAITING   0.0       0.000      0:0.000   false     true</span><br><span class=\"line\">2    Reference Handler              system         10        RUNNABLE  0.0       0.000      0:0.000   false     true</span><br><span class=\"line\">4    Signal Dispatcher              system         9         RUNNABLE  0.0       0.000      0:0.000   false     true</span><br><span class=\"line\">15   arthas-NettyHttpTelnetBootstra system         5         RUNNABLE  0.0       0.000      0:0.029   false     true</span><br><span class=\"line\">22   arthas-NettyHttpTelnetBootstra system         5         RUNNABLE  0.0       0.000      0:0.196   false     true</span><br><span class=\"line\">24   arthas-NettyHttpTelnetBootstra system         5         RUNNABLE  0.0       0.000      0:0.038   false     true</span><br><span class=\"line\">16   arthas-NettyWebsocketTtyBootst system         5         RUNNABLE  0.0       0.000      0:0.001   false     true</span><br><span class=\"line\">17   arthas-NettyWebsocketTtyBootst system         5         RUNNABLE  0.0       0.000      0:0.001   false     true</span><br></pre></td></tr></table></figure>\n\n<h4><span id=\"thread-all-显示所有匹配的线程\">thread –all, 显示所有匹配的线程</span></h4><p>显示所有匹配线程信息，有时需要获取全部JVM的线程数据进行分析。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">thread --all</span><br></pre></td></tr></table></figure>\n\n<h4><span id=\"thread-id-显示指定线程的运行堆栈\">thread id， 显示指定线程的运行堆栈</span></h4><p>查看线程ID 16的栈：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">thread 16</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight console\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> thread 1</span></span><br><span class=\"line\">&quot;main&quot; Id=1 WAITING on java.util.concurrent.CountDownLatch$Sync@29fafb28</span><br><span class=\"line\">    at sun.misc.Unsafe.park(Native Method)</span><br><span class=\"line\">    -  waiting on java.util.concurrent.CountDownLatch$Sync@29fafb28</span><br><span class=\"line\">    at java.util.concurrent.locks.LockSupport.park(LockSupport.java:175)</span><br><span class=\"line\">    at java.util.concurrent.locks.AbstractQueuedSynchronizer.parkAndCheckInterrupt(AbstractQueuedSynchronizer.java:836)</span><br><span class=\"line\">    at java.util.concurrent.locks.AbstractQueuedSynchronizer.doAcquireSharedInterruptibly(AbstractQueuedSynchronizer.java:997)</span><br><span class=\"line\">    at java.util.concurrent.locks.AbstractQueuedSynchronizer.acquireSharedInterruptibly(AbstractQueuedSynchronizer.java:1304)</span><br><span class=\"line\">    at java.util.concurrent.CountDownLatch.await(CountDownLatch.java:231)</span><br></pre></td></tr></table></figure>\n\n<h4><span id=\"thread-b-找出当前阻塞其他线程的线程\">thread -b, 找出当前阻塞其他线程的线程</span></h4><p>有时候我们发现应用卡住了， 通常是由于某个线程拿住了某个锁， 并且其他线程都在等待这把锁造成的。 为了排查这类问题， arthas提供了<code>thread -b</code>， 一键找出那个罪魁祸首。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">thread -b</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight console\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> thread -b</span></span><br><span class=\"line\">&quot;http-bio-8080-exec-4&quot; Id=27 TIMED_WAITING</span><br><span class=\"line\">    at java.lang.Thread.sleep(Native Method)</span><br><span class=\"line\">    at test.arthas.TestThreadBlocking.doGet(TestThreadBlocking.java:22)</span><br><span class=\"line\">    -  locked java.lang.Object@725be470 &lt;---- but blocks 4 other threads!</span><br><span class=\"line\">    at javax.servlet.http.HttpServlet.service(HttpServlet.java:624)</span><br><span class=\"line\">    at javax.servlet.http.HttpServlet.service(HttpServlet.java:731)</span><br><span class=\"line\">    at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:303)</span><br><span class=\"line\">    at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:208)</span><br><span class=\"line\">    at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:52)</span><br><span class=\"line\">    at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:241)</span><br><span class=\"line\">    at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:208)</span><br><span class=\"line\">    at test.filter.TestDurexFilter.doFilter(TestDurexFilter.java:46)</span><br><span class=\"line\">    at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:241)</span><br><span class=\"line\">    at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:208)</span><br><span class=\"line\">    at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:220)</span><br><span class=\"line\">    at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:122)</span><br><span class=\"line\">    at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:505)</span><br><span class=\"line\">    at com.taobao.tomcat.valves.ContextLoadFilterValve$FilterChainAdapter.doFilter(ContextLoadFilterValve.java:191)</span><br><span class=\"line\">    at com.taobao.eagleeye.EagleEyeFilter.doFilter(EagleEyeFilter.java:81)</span><br><span class=\"line\">    at com.taobao.tomcat.valves.ContextLoadFilterValve.invoke(ContextLoadFilterValve.java:150)</span><br><span class=\"line\">    at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:170)</span><br><span class=\"line\">    at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:103)</span><br><span class=\"line\">    at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:116)</span><br><span class=\"line\">    at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:429)</span><br><span class=\"line\">    at org.apache.coyote.http11.AbstractHttp11Processor.process(AbstractHttp11Processor.java:1085)</span><br><span class=\"line\">    at org.apache.coyote.AbstractProtocol$AbstractConnectionHandler.process(AbstractProtocol.java:625)</span><br><span class=\"line\">    at org.apache.tomcat.util.net.JIoEndpoint$SocketProcessor.run(JIoEndpoint.java:318)</span><br><span class=\"line\">    -  locked org.apache.tomcat.util.net.SocketWrapper@7127ee12</span><br><span class=\"line\">    at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)</span><br><span class=\"line\">    at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)</span><br><span class=\"line\">    at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)</span><br><span class=\"line\">    at java.lang.Thread.run(Thread.java:745)</span><br><span class=\"line\"></span><br><span class=\"line\">    Number of locked synchronizers = 1</span><br><span class=\"line\">    - java.util.concurrent.ThreadPoolExecutor$Worker@31a6493e</span><br></pre></td></tr></table></figure>\n\n<p><strong>注意</strong>， 目前只支持找出synchronized关键字阻塞住的线程， 如果是<code>java.util.concurrent.Lock</code>， 目前还不支持。</p>\n<h4><span id=\"thread-i-指定采样时间间隔\">thread -i, 指定采样时间间隔</span></h4><ul>\n<li><code>thread -i 1000</code> : 统计最近1000ms内的线程CPU时间。</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">thread -i 1000</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><code>thread -n 3 -i 1000</code> : 列出1000ms内最忙的3个线程栈</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">thread -n 3 -i 1000</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight console\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> thread -n 3 -i 1000</span></span><br><span class=\"line\">&quot;as-command-execute-daemon&quot; Id=4759 cpuUsage=23% RUNNABLE</span><br><span class=\"line\">    at sun.management.ThreadImpl.dumpThreads0(Native Method)</span><br><span class=\"line\">    at sun.management.ThreadImpl.getThreadInfo(ThreadImpl.java:440)</span><br><span class=\"line\">    at com.taobao.arthas.core.command.monitor200.ThreadCommand.processTopBusyThreads(ThreadCommand.java:133)</span><br><span class=\"line\">    at com.taobao.arthas.core.command.monitor200.ThreadCommand.process(ThreadCommand.java:79)</span><br><span class=\"line\">    at com.taobao.arthas.core.shell.command.impl.AnnotatedCommandImpl.process(AnnotatedCommandImpl.java:96)</span><br><span class=\"line\">    at com.taobao.arthas.core.shell.command.impl.AnnotatedCommandImpl.access$100(AnnotatedCommandImpl.java:27)</span><br><span class=\"line\">    at com.taobao.arthas.core.shell.command.impl.AnnotatedCommandImpl$ProcessHandler.handle(AnnotatedCommandImpl.java:125)</span><br><span class=\"line\">    at com.taobao.arthas.core.shell.command.impl.AnnotatedCommandImpl$ProcessHandler.handle(AnnotatedCommandImpl.java:122)</span><br><span class=\"line\">    at com.taobao.arthas.core.shell.system.impl.ProcessImpl$CommandProcessTask.run(ProcessImpl.java:332)</span><br><span class=\"line\">    at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)</span><br><span class=\"line\">    at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)</span><br><span class=\"line\">    at java.lang.Thread.run(Thread.java:756)</span><br><span class=\"line\"></span><br><span class=\"line\">    Number of locked synchronizers = 1</span><br><span class=\"line\">    - java.util.concurrent.ThreadPoolExecutor$Worker@546aeec1</span><br><span class=\"line\">...</span><br></pre></td></tr></table></figure>\n\n<h4><span id=\"thread-state-查看指定状态的线程\">thread –state ，查看指定状态的线程</span></h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">thread --state WAITING</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight console\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">[arthas@28114]$</span><span class=\"bash\"> thread --state WAITING</span></span><br><span class=\"line\">Threads Total: 16, NEW: 0, RUNNABLE: 9, BLOCKED: 0, WAITING: 3, TIMED_WAITING: 4, TERMINATED: 0</span><br><span class=\"line\">ID   NAME                           GROUP           PRIORITY   STATE     %CPU      DELTA_TIME TIME      INTERRUPTE DAEMON</span><br><span class=\"line\">3    Finalizer                      system          8          WAITING   0.0       0.000      0:0.000   false      true</span><br><span class=\"line\">20   arthas-UserStat                system          9          WAITING   0.0       0.000      0:0.001   false      true</span><br><span class=\"line\">14   arthas-timer                   system          9          WAITING   0.0       0.000      0:0.000   false      true</span><br></pre></td></tr></table></figure>\n\n<h2><span id=\"更多信息\">更多信息</span></h2><p>在“thread”中，我们演示了了Arthas的thread命令。如果有更多的技巧或者使用疑问，欢迎在Issue里提出。</p>\n<ul>\n<li>Issues: <a href=\"https://github.com/alibaba/arthas/issues\">https://github.com/alibaba/arthas/issues</a></li>\n<li>文档： <a href=\"https://arthas.aliyun.com/doc\">https://arthas.aliyun.com/doc</a></li>\n</ul>\n<p>如果您在使用Arthas，请让我们知道。您的使用对我们非常重要：<a href=\"https://github.com/alibaba/arthas/issues/111\">查看</a></p>\n<p>文章拷贝来源：<a href=\"https://start.aliyun.com/course?spm=a2ck6.17690074.0.0.28bc2e7dHTphXs&amp;id=PaiFAkJM\">https://start.aliyun.com/course?spm=a2ck6.17690074.0.0.28bc2e7dHTphXs&amp;id=PaiFAkJM</a></p>\n","site":{"data":{}},"excerpt":"","more":"<!-- toc -->\n\n<ul>\n<li><a href=\"#arthas-demo\">Arthas demo</a></li>\n<li><a href=\"#%E5%90%AF%E5%8A%A8arthas-boot\">启动arthas-boot</a></li>\n<li><a href=\"#thread%E5%91%BD%E4%BB%A4\">Thread命令</a><ul>\n<li><a href=\"#%E5%8F%82%E6%95%B0%E8%AF%B4%E6%98%8E\">参数说明</a></li>\n</ul>\n</li>\n<li><a href=\"#cpu%E5%8D%A0%E6%AF%94%E6%98%AF%E5%A6%82%E4%BD%95%E7%BB%9F%E8%AE%A1%E5%87%BA%E6%9D%A5%E7%9A%84\">cpu占比是如何统计出来的？</a><ul>\n<li><a href=\"#cpu%E4%BD%BF%E7%94%A8%E7%8E%87%E6%98%AF%E5%A6%82%E4%BD%95%E7%BB%9F%E8%AE%A1%E5%87%BA%E6%9D%A5%E7%9A%84\">cpu使用率是如何统计出来的？</a></li>\n</ul>\n</li>\n<li><a href=\"#thread%E7%94%A8%E6%B3%95\">Thread用法</a><ul>\n<li><a href=\"#%E6%94%AF%E6%8C%81%E4%B8%80%E9%94%AE%E5%B1%95%E7%A4%BA%E5%BD%93%E5%89%8D%E6%9C%80%E5%BF%99%E7%9A%84%E5%89%8Dn%E4%B8%AA%E7%BA%BF%E7%A8%8B%E5%B9%B6%E6%89%93%E5%8D%B0%E5%A0%86%E6%A0%88\">支持一键展示当前最忙的前N个线程并打印堆栈：</a></li>\n<li><a href=\"#%E5%BD%93%E6%B2%A1%E6%9C%89%E5%8F%82%E6%95%B0%E6%97%B6%E6%98%BE%E7%A4%BA%E7%AC%AC%E4%B8%80%E9%A1%B5%E7%BA%BF%E7%A8%8B%E4%BF%A1%E6%81%AF\">当没有参数时，显示第一页线程信息</a></li>\n<li><a href=\"#thread-all-%E6%98%BE%E7%A4%BA%E6%89%80%E6%9C%89%E5%8C%B9%E9%85%8D%E7%9A%84%E7%BA%BF%E7%A8%8B\">thread –all, 显示所有匹配的线程</a></li>\n<li><a href=\"#thread-id-%E6%98%BE%E7%A4%BA%E6%8C%87%E5%AE%9A%E7%BA%BF%E7%A8%8B%E7%9A%84%E8%BF%90%E8%A1%8C%E5%A0%86%E6%A0%88\">thread id， 显示指定线程的运行堆栈</a></li>\n<li><a href=\"#thread-b-%E6%89%BE%E5%87%BA%E5%BD%93%E5%89%8D%E9%98%BB%E5%A1%9E%E5%85%B6%E4%BB%96%E7%BA%BF%E7%A8%8B%E7%9A%84%E7%BA%BF%E7%A8%8B\">thread -b, 找出当前阻塞其他线程的线程</a></li>\n<li><a href=\"#thread-i-%E6%8C%87%E5%AE%9A%E9%87%87%E6%A0%B7%E6%97%B6%E9%97%B4%E9%97%B4%E9%9A%94\">thread -i, 指定采样时间间隔</a></li>\n<li><a href=\"#thread-state-%E6%9F%A5%E7%9C%8B%E6%8C%87%E5%AE%9A%E7%8A%B6%E6%80%81%E7%9A%84%E7%BA%BF%E7%A8%8B\">thread –state ，查看指定状态的线程</a></li>\n</ul>\n</li>\n<li><a href=\"#%E6%9B%B4%E5%A4%9A%E4%BF%A1%E6%81%AF\">更多信息</a></li>\n</ul>\n<!-- tocstop -->\n\n<p><img src=\"/jlynet.github.io/2021/08/07/Java%E8%AF%8A%E6%96%AD%E5%B7%A5%E5%85%B7Arthas%E9%AB%98%E7%BA%A7%E5%91%BD%E4%BB%A4%E6%95%99%E7%A8%8B/Arthasthread%E5%91%BD%E4%BB%A4/arthas.png\" alt=\"Arthas\"></p>\n<p><code>Arthas</code> 是Alibaba开源的Java诊断工具，深受开发者喜爱。在线排查问题，无需重启；动态跟踪Java代码；实时监控JVM状态。</p>\n<p><code>Arthas</code> 支持JDK 6+，支持Linux/Mac/Windows，采用命令行交互模式，同时提供丰富的 <code>Tab</code> 自动补全功能，进一步方便进行问题的定位和诊断。</p>\n<p>当你遇到以下类似问题而束手无策时，Arthas可以帮助你解决：</p>\n<ul>\n<li>这个类从哪个 jar 包加载的？为什么会报各种类相关的 Exception？</li>\n<li>我改的代码为什么没有执行到？难道是我没 commit？分支搞错了？</li>\n<li>遇到问题无法在线上 debug，难道只能通过加日志再重新发布吗？</li>\n<li>线上遇到某个用户的数据处理有问题，但线上同样无法 debug，线下无法重现！</li>\n<li>是否有一个全局视角来查看系统的运行状况？</li>\n<li>有什么办法可以监控到JVM的实时运行状态？</li>\n<li>怎么快速定位应用的热点，生成火焰图？</li>\n</ul>\n<p>本教程会以一个简单的应用为例，演示thread命令。</p>\n<ul>\n<li>Github: <a href=\"https://github.com/alibaba/arthas\">https://github.com/alibaba/arthas</a></li>\n<li>文档: <a href=\"https://arthas.aliyun.com/doc/\">https://arthas.aliyun.com/doc/</a></li>\n</ul>\n<h2 id=\"Arthas-demo\"><a href=\"#Arthas-demo\" class=\"headerlink\" title=\"Arthas demo\"></a>Arthas demo</h2><p>下载<code>arthas-demo.jar</code>，再用<code>java -jar</code>命令启动：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wget https://arthas.aliyun.com/arthas-demo.jar;java -jar arthas-demo.jar</span><br></pre></td></tr></table></figure>\n\n<p><code>arthas-demo</code>是一个很简单的程序，它随机生成整数，再执行因式分解，把结果打印出来。如果生成的随机数是负数，则会打印提示信息。</p>\n<h2 id=\"启动arthas-boot\"><a href=\"#启动arthas-boot\" class=\"headerlink\" title=\"启动arthas-boot\"></a>启动arthas-boot</h2><p>在新的<code>Terminal 2</code>里，下载<code>arthas-boot.jar</code>，再用<code>java -jar</code>命令启动：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wget https://arthas.aliyun.com/arthas-boot.jar;java -jar arthas-boot.jar</span><br></pre></td></tr></table></figure>\n\n<p><code>arthas-boot</code>是<code>Arthas</code>的启动程序，它启动后，会列出所有的Java进程，用户可以选择需要诊断的目标进程。</p>\n<p>选择第一个进程，输入 <code>1</code> ，再<code>Enter/回车</code>：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1</span><br></pre></td></tr></table></figure>\n\n<p>Attach成功之后，会打印Arthas LOGO。输入 <code>help</code> 可以获取到更多的帮助信息。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">help</span></span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/jlynet.github.io/2021/08/07/Java%E8%AF%8A%E6%96%AD%E5%B7%A5%E5%85%B7Arthas%E9%AB%98%E7%BA%A7%E5%91%BD%E4%BB%A4%E6%95%99%E7%A8%8B/Arthasthread%E5%91%BD%E4%BB%A4/O1CN01HzatXZ1RgccrlT90M_!!6000000002141-2-tps-529-244.png\" alt=\"Arthas Boot\"></p>\n<h2 id=\"Thread命令\"><a href=\"#Thread命令\" class=\"headerlink\" title=\"Thread命令\"></a>Thread命令</h2><p>查看当前线程信息，查看线程的堆栈</p>\n<h4 id=\"参数说明\"><a href=\"#参数说明\" class=\"headerlink\" title=\"参数说明\"></a>参数说明</h4><table>\n<thead>\n<tr>\n<th>参数名称</th>\n<th>参数说明</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>id</td>\n<td>线程id</td>\n</tr>\n<tr>\n<td>[n:]</td>\n<td>指定最忙的前N个线程并打印堆栈</td>\n</tr>\n<tr>\n<td>[b]</td>\n<td>找出当前阻塞其他线程的线程</td>\n</tr>\n<tr>\n<td>[i <value>]</value></td>\n<td>指定cpu占比统计的采样间隔，单位为毫秒</td>\n</tr>\n<tr>\n<td>[–all]</td>\n<td>显示所有匹配的线程</td>\n</tr>\n</tbody></table>\n<h2 id=\"cpu占比是如何统计出来的？\"><a href=\"#cpu占比是如何统计出来的？\" class=\"headerlink\" title=\"cpu占比是如何统计出来的？\"></a>cpu占比是如何统计出来的？</h2><h4 id=\"cpu使用率是如何统计出来的？\"><a href=\"#cpu使用率是如何统计出来的？\" class=\"headerlink\" title=\"cpu使用率是如何统计出来的？\"></a>cpu使用率是如何统计出来的？</h4><p>这里的cpu使用率与linux 命令<code>top -H -p &lt;pid&gt;</code> 的线程<code>%CPU</code>类似，一段采样间隔时间内，当前JVM里各个线程的增量cpu时间与采样间隔时间的比例。</p>\n<blockquote>\n<p>工作原理说明：</p>\n</blockquote>\n<ul>\n<li>首先第一次采样，获取所有线程的CPU时间(调用的是<code>java.lang.management.ThreadMXBean#getThreadCpuTime()</code>及<code>sun.management.HotspotThreadMBean.getInternalThreadCpuTimes()</code>接口)</li>\n<li>然后睡眠等待一个间隔时间（默认为200ms，可以通过<code>-i</code>指定间隔时间）</li>\n<li>再次第二次采样，获取所有线程的CPU时间，对比两次采样数据，计算出每个线程的增量CPU时间</li>\n<li>线程CPU使用率 = 线程增量CPU时间 / 采样间隔时间 * 100%</li>\n</ul>\n<blockquote>\n<p>注意： 这个统计也会产生一定的开销（JDK这个接口本身开销比较大），因此会看到as的线程占用一定的百分比，为了降低统计自身的开销带来的影响，可以把采样间隔拉长一些，比如5000毫秒。</p>\n<p>另外一种查看Java进程的线程cpu使用率方法：可以使用<a href=\"https://github.com/oldratlee/useful-scripts/blob/master/docs/java.md#-show-busy-java-threads\">show-busy-java-threads</a>这个脚本</p>\n<h2 id=\"Thread用法\"><a href=\"#Thread用法\" class=\"headerlink\" title=\"Thread用法\"></a>Thread用法</h2></blockquote>\n<h4 id=\"支持一键展示当前最忙的前N个线程并打印堆栈：\"><a href=\"#支持一键展示当前最忙的前N个线程并打印堆栈：\" class=\"headerlink\" title=\"支持一键展示当前最忙的前N个线程并打印堆栈：\"></a>支持一键展示当前最忙的前N个线程并打印堆栈：</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">thread -n 3</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight console\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> thread -n 3</span></span><br><span class=\"line\">&quot;C1 CompilerThread0&quot; [Internal] cpuUsage=1.63% deltaTime=3ms time=1170ms</span><br><span class=\"line\">&quot;arthas-command-execute&quot; Id=23 cpuUsage=0.11% deltaTime=0ms time=401ms RUNNABLE</span><br><span class=\"line\">    at java.management@11.0.7/sun.management.ThreadImpl.dumpThreads0(Native Method)</span><br><span class=\"line\">    at java.management@11.0.7/sun.management.ThreadImpl.getThreadInfo(ThreadImpl.java:466)</span><br><span class=\"line\">    at com.taobao.arthas.core.command.monitor200.ThreadCommand.processTopBusyThreads(ThreadCommand.java:199)</span><br><span class=\"line\">    at com.taobao.arthas.core.command.monitor200.ThreadCommand.process(ThreadCommand.java:122)</span><br><span class=\"line\">    at com.taobao.arthas.core.shell.command.impl.AnnotatedCommandImpl.process(AnnotatedCommandImpl.java:82)</span><br><span class=\"line\">    at com.taobao.arthas.core.shell.command.impl.AnnotatedCommandImpl.access$100(AnnotatedCommandImpl.java:18)</span><br><span class=\"line\">    at com.taobao.arthas.core.shell.command.impl.AnnotatedCommandImpl$ProcessHandler.handle(AnnotatedCommandImpl.java:111)</span><br><span class=\"line\">    at com.taobao.arthas.core.shell.command.impl.AnnotatedCommandImpl$ProcessHandler.handle(AnnotatedCommandImpl.java:108)</span><br><span class=\"line\">    at com.taobao.arthas.core.shell.system.impl.ProcessImpl$CommandProcessTask.run(ProcessImpl.java:385)</span><br><span class=\"line\">    at java.base@11.0.7/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)</span><br><span class=\"line\">    at java.base@11.0.7/java.util.concurrent.FutureTask.run(FutureTask.java:264)</span><br><span class=\"line\">    at java.base@11.0.7/java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:304)</span><br><span class=\"line\">    at java.base@11.0.7/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1128)</span><br><span class=\"line\">    at java.base@11.0.7/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:628)</span><br><span class=\"line\">    at java.base@11.0.7/java.lang.Thread.run(Thread.java:834)</span><br><span class=\"line\">&quot;VM Periodic Task Thread&quot; [Internal] cpuUsage=0.07% deltaTime=0ms time=584ms</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>没有线程ID，包含<code>[Internal]</code>表示为JVM内部线程，参考<code>dashboard</code>命令的介绍。</li>\n<li><code>cpuUsage</code>为采样间隔时间内线程的CPU使用率，与<code>dashboard</code>命令的数据一致。</li>\n<li><code>deltaTime</code>为采样间隔时间内线程的增量CPU时间，小于1ms时被取整显示为0ms。</li>\n<li><code>time</code> 线程运行总CPU时间。</li>\n</ul>\n<p>注意：线程栈为第二采样结束时获取，不能表明采样间隔时间内该线程都是在处理相同的任务。建议间隔时间不要太长，可能间隔时间越大越不准确。 可以根据具体情况尝试指定不同的间隔时间，观察输出结果。</p>\n<h4 id=\"当没有参数时，显示第一页线程信息\"><a href=\"#当没有参数时，显示第一页线程信息\" class=\"headerlink\" title=\"当没有参数时，显示第一页线程信息\"></a>当没有参数时，显示第一页线程信息</h4><p>默认按照CPU增量时间降序排列，只显示第一页数据，避免滚屏。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">thread</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight console\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> thread</span></span><br><span class=\"line\">Threads Total: 33, NEW: 0, RUNNABLE: 9, BLOCKED: 0, WAITING: 3, TIMED_WAITING: 4, TERMINATED: 0, Internal threads: 17</span><br><span class=\"line\">ID   NAME                           GROUP          PRIORITY  STATE     %CPU      DELTA_TIME TIME      INTERRUPT DAEMON</span><br><span class=\"line\">-1   C2 CompilerThread0             -              -1        -         5.06      0.010      0:0.973   false     true</span><br><span class=\"line\">-1   C1 CompilerThread0             -              -1        -         0.95      0.001      0:0.603   false     true</span><br><span class=\"line\">23   arthas-command-execute         system         5         RUNNABLE  0.17      0.000      0:0.226   false     true</span><br><span class=\"line\">-1   VM Periodic Task Thread        -              -1        -         0.05      0.000      0:0.094   false     true</span><br><span class=\"line\">-1   Sweeper thread                 -              -1        -         0.04      0.000      0:0.011   false     true</span><br><span class=\"line\">-1   G1 Young RemSet Sampling       -              -1        -         0.02      0.000      0:0.025   false     true</span><br><span class=\"line\">12   Attach Listener                system         9         RUNNABLE  0.0       0.000      0:0.022   false     true</span><br><span class=\"line\">11   Common-Cleaner                 InnocuousThrea 8         TIMED_WAI 0.0       0.000      0:0.000   false     true</span><br><span class=\"line\">3    Finalizer                      system         8         WAITING   0.0       0.000      0:0.000   false     true</span><br><span class=\"line\">2    Reference Handler              system         10        RUNNABLE  0.0       0.000      0:0.000   false     true</span><br><span class=\"line\">4    Signal Dispatcher              system         9         RUNNABLE  0.0       0.000      0:0.000   false     true</span><br><span class=\"line\">15   arthas-NettyHttpTelnetBootstra system         5         RUNNABLE  0.0       0.000      0:0.029   false     true</span><br><span class=\"line\">22   arthas-NettyHttpTelnetBootstra system         5         RUNNABLE  0.0       0.000      0:0.196   false     true</span><br><span class=\"line\">24   arthas-NettyHttpTelnetBootstra system         5         RUNNABLE  0.0       0.000      0:0.038   false     true</span><br><span class=\"line\">16   arthas-NettyWebsocketTtyBootst system         5         RUNNABLE  0.0       0.000      0:0.001   false     true</span><br><span class=\"line\">17   arthas-NettyWebsocketTtyBootst system         5         RUNNABLE  0.0       0.000      0:0.001   false     true</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"thread-–all-显示所有匹配的线程\"><a href=\"#thread-–all-显示所有匹配的线程\" class=\"headerlink\" title=\"thread –all, 显示所有匹配的线程\"></a>thread –all, 显示所有匹配的线程</h4><p>显示所有匹配线程信息，有时需要获取全部JVM的线程数据进行分析。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">thread --all</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"thread-id，-显示指定线程的运行堆栈\"><a href=\"#thread-id，-显示指定线程的运行堆栈\" class=\"headerlink\" title=\"thread id， 显示指定线程的运行堆栈\"></a>thread id， 显示指定线程的运行堆栈</h4><p>查看线程ID 16的栈：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">thread 16</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight console\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> thread 1</span></span><br><span class=\"line\">&quot;main&quot; Id=1 WAITING on java.util.concurrent.CountDownLatch$Sync@29fafb28</span><br><span class=\"line\">    at sun.misc.Unsafe.park(Native Method)</span><br><span class=\"line\">    -  waiting on java.util.concurrent.CountDownLatch$Sync@29fafb28</span><br><span class=\"line\">    at java.util.concurrent.locks.LockSupport.park(LockSupport.java:175)</span><br><span class=\"line\">    at java.util.concurrent.locks.AbstractQueuedSynchronizer.parkAndCheckInterrupt(AbstractQueuedSynchronizer.java:836)</span><br><span class=\"line\">    at java.util.concurrent.locks.AbstractQueuedSynchronizer.doAcquireSharedInterruptibly(AbstractQueuedSynchronizer.java:997)</span><br><span class=\"line\">    at java.util.concurrent.locks.AbstractQueuedSynchronizer.acquireSharedInterruptibly(AbstractQueuedSynchronizer.java:1304)</span><br><span class=\"line\">    at java.util.concurrent.CountDownLatch.await(CountDownLatch.java:231)</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"thread-b-找出当前阻塞其他线程的线程\"><a href=\"#thread-b-找出当前阻塞其他线程的线程\" class=\"headerlink\" title=\"thread -b, 找出当前阻塞其他线程的线程\"></a>thread -b, 找出当前阻塞其他线程的线程</h4><p>有时候我们发现应用卡住了， 通常是由于某个线程拿住了某个锁， 并且其他线程都在等待这把锁造成的。 为了排查这类问题， arthas提供了<code>thread -b</code>， 一键找出那个罪魁祸首。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">thread -b</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight console\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> thread -b</span></span><br><span class=\"line\">&quot;http-bio-8080-exec-4&quot; Id=27 TIMED_WAITING</span><br><span class=\"line\">    at java.lang.Thread.sleep(Native Method)</span><br><span class=\"line\">    at test.arthas.TestThreadBlocking.doGet(TestThreadBlocking.java:22)</span><br><span class=\"line\">    -  locked java.lang.Object@725be470 &lt;---- but blocks 4 other threads!</span><br><span class=\"line\">    at javax.servlet.http.HttpServlet.service(HttpServlet.java:624)</span><br><span class=\"line\">    at javax.servlet.http.HttpServlet.service(HttpServlet.java:731)</span><br><span class=\"line\">    at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:303)</span><br><span class=\"line\">    at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:208)</span><br><span class=\"line\">    at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:52)</span><br><span class=\"line\">    at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:241)</span><br><span class=\"line\">    at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:208)</span><br><span class=\"line\">    at test.filter.TestDurexFilter.doFilter(TestDurexFilter.java:46)</span><br><span class=\"line\">    at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:241)</span><br><span class=\"line\">    at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:208)</span><br><span class=\"line\">    at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:220)</span><br><span class=\"line\">    at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:122)</span><br><span class=\"line\">    at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:505)</span><br><span class=\"line\">    at com.taobao.tomcat.valves.ContextLoadFilterValve$FilterChainAdapter.doFilter(ContextLoadFilterValve.java:191)</span><br><span class=\"line\">    at com.taobao.eagleeye.EagleEyeFilter.doFilter(EagleEyeFilter.java:81)</span><br><span class=\"line\">    at com.taobao.tomcat.valves.ContextLoadFilterValve.invoke(ContextLoadFilterValve.java:150)</span><br><span class=\"line\">    at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:170)</span><br><span class=\"line\">    at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:103)</span><br><span class=\"line\">    at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:116)</span><br><span class=\"line\">    at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:429)</span><br><span class=\"line\">    at org.apache.coyote.http11.AbstractHttp11Processor.process(AbstractHttp11Processor.java:1085)</span><br><span class=\"line\">    at org.apache.coyote.AbstractProtocol$AbstractConnectionHandler.process(AbstractProtocol.java:625)</span><br><span class=\"line\">    at org.apache.tomcat.util.net.JIoEndpoint$SocketProcessor.run(JIoEndpoint.java:318)</span><br><span class=\"line\">    -  locked org.apache.tomcat.util.net.SocketWrapper@7127ee12</span><br><span class=\"line\">    at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)</span><br><span class=\"line\">    at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)</span><br><span class=\"line\">    at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)</span><br><span class=\"line\">    at java.lang.Thread.run(Thread.java:745)</span><br><span class=\"line\"></span><br><span class=\"line\">    Number of locked synchronizers = 1</span><br><span class=\"line\">    - java.util.concurrent.ThreadPoolExecutor$Worker@31a6493e</span><br></pre></td></tr></table></figure>\n\n<p><strong>注意</strong>， 目前只支持找出synchronized关键字阻塞住的线程， 如果是<code>java.util.concurrent.Lock</code>， 目前还不支持。</p>\n<h4 id=\"thread-i-指定采样时间间隔\"><a href=\"#thread-i-指定采样时间间隔\" class=\"headerlink\" title=\"thread -i, 指定采样时间间隔\"></a>thread -i, 指定采样时间间隔</h4><ul>\n<li><code>thread -i 1000</code> : 统计最近1000ms内的线程CPU时间。</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">thread -i 1000</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><code>thread -n 3 -i 1000</code> : 列出1000ms内最忙的3个线程栈</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">thread -n 3 -i 1000</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight console\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> thread -n 3 -i 1000</span></span><br><span class=\"line\">&quot;as-command-execute-daemon&quot; Id=4759 cpuUsage=23% RUNNABLE</span><br><span class=\"line\">    at sun.management.ThreadImpl.dumpThreads0(Native Method)</span><br><span class=\"line\">    at sun.management.ThreadImpl.getThreadInfo(ThreadImpl.java:440)</span><br><span class=\"line\">    at com.taobao.arthas.core.command.monitor200.ThreadCommand.processTopBusyThreads(ThreadCommand.java:133)</span><br><span class=\"line\">    at com.taobao.arthas.core.command.monitor200.ThreadCommand.process(ThreadCommand.java:79)</span><br><span class=\"line\">    at com.taobao.arthas.core.shell.command.impl.AnnotatedCommandImpl.process(AnnotatedCommandImpl.java:96)</span><br><span class=\"line\">    at com.taobao.arthas.core.shell.command.impl.AnnotatedCommandImpl.access$100(AnnotatedCommandImpl.java:27)</span><br><span class=\"line\">    at com.taobao.arthas.core.shell.command.impl.AnnotatedCommandImpl$ProcessHandler.handle(AnnotatedCommandImpl.java:125)</span><br><span class=\"line\">    at com.taobao.arthas.core.shell.command.impl.AnnotatedCommandImpl$ProcessHandler.handle(AnnotatedCommandImpl.java:122)</span><br><span class=\"line\">    at com.taobao.arthas.core.shell.system.impl.ProcessImpl$CommandProcessTask.run(ProcessImpl.java:332)</span><br><span class=\"line\">    at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)</span><br><span class=\"line\">    at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)</span><br><span class=\"line\">    at java.lang.Thread.run(Thread.java:756)</span><br><span class=\"line\"></span><br><span class=\"line\">    Number of locked synchronizers = 1</span><br><span class=\"line\">    - java.util.concurrent.ThreadPoolExecutor$Worker@546aeec1</span><br><span class=\"line\">...</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"thread-–state-，查看指定状态的线程\"><a href=\"#thread-–state-，查看指定状态的线程\" class=\"headerlink\" title=\"thread –state ，查看指定状态的线程\"></a>thread –state ，查看指定状态的线程</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">thread --state WAITING</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight console\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">[arthas@28114]$</span><span class=\"bash\"> thread --state WAITING</span></span><br><span class=\"line\">Threads Total: 16, NEW: 0, RUNNABLE: 9, BLOCKED: 0, WAITING: 3, TIMED_WAITING: 4, TERMINATED: 0</span><br><span class=\"line\">ID   NAME                           GROUP           PRIORITY   STATE     %CPU      DELTA_TIME TIME      INTERRUPTE DAEMON</span><br><span class=\"line\">3    Finalizer                      system          8          WAITING   0.0       0.000      0:0.000   false      true</span><br><span class=\"line\">20   arthas-UserStat                system          9          WAITING   0.0       0.000      0:0.001   false      true</span><br><span class=\"line\">14   arthas-timer                   system          9          WAITING   0.0       0.000      0:0.000   false      true</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"更多信息\"><a href=\"#更多信息\" class=\"headerlink\" title=\"更多信息\"></a>更多信息</h2><p>在“thread”中，我们演示了了Arthas的thread命令。如果有更多的技巧或者使用疑问，欢迎在Issue里提出。</p>\n<ul>\n<li>Issues: <a href=\"https://github.com/alibaba/arthas/issues\">https://github.com/alibaba/arthas/issues</a></li>\n<li>文档： <a href=\"https://arthas.aliyun.com/doc\">https://arthas.aliyun.com/doc</a></li>\n</ul>\n<p>如果您在使用Arthas，请让我们知道。您的使用对我们非常重要：<a href=\"https://github.com/alibaba/arthas/issues/111\">查看</a></p>\n<p>文章拷贝来源：<a href=\"https://start.aliyun.com/course?spm=a2ck6.17690074.0.0.28bc2e7dHTphXs&amp;id=PaiFAkJM\">https://start.aliyun.com/course?spm=a2ck6.17690074.0.0.28bc2e7dHTphXs&amp;id=PaiFAkJM</a></p>\n"},{"title":"Arthas trace命令","date":"2021-08-07T01:51:37.000Z","_content":"\n<!-- toc -->\n\n![Arthas](arthas.png)\n\n`Arthas` 是Alibaba开源的Java诊断工具，深受开发者喜爱。在线排查问题，无需重启；动态跟踪Java代码；实时监控JVM状态。\n\n`Arthas` 支持JDK 6+，支持Linux/Mac/Windows，采用命令行交互模式，同时提供丰富的 `Tab` 自动补全功能，进一步方便进行问题的定位和诊断。\n\n当你遇到以下类似问题而束手无策时，Arthas可以帮助你解决：\n\n- 这个类从哪个 jar 包加载的？为什么会报各种类相关的 Exception？\n- 我改的代码为什么没有执行到？难道是我没 commit？分支搞错了？\n- 遇到问题无法在线上 debug，难道只能通过加日志再重新发布吗？\n- 线上遇到某个用户的数据处理有问题，但线上同样无法 debug，线下无法重现！\n- 是否有一个全局视角来查看系统的运行状况？\n- 有什么办法可以监控到JVM的实时运行状态？\n- 怎么快速定位应用的热点，生成火焰图？\n\n本教程会以一个简单的应用为例，演示trace命令。\n\n- Github: https://github.com/alibaba/arthas\n- 文档: https://arthas.aliyun.com/doc/\n\n## 启动arthas demo\n\n下载`arthas-demo.jar`，再用`java -jar`命令启动：\n\n```bash\nwget https://arthas.aliyun.com/arthas-demo.jar;java -jar arthas-demo.jar\n```\n\n`arthas-demo`是一个很简单的程序，它随机生成整数，再执行因式分解，把结果打印出来。如果生成的随机数是负数，则会打印提示信息。\n\n## 启动arthas-boot\n\n在新的`Terminal 2`里，下载`arthas-boot.jar`，再用`java -jar`命令启动：\n\n```bash\nwget https://arthas.aliyun.com/arthas-boot.jar;java -jar arthas-boot.jar\n```\n\n`arthas-boot`是`Arthas`的启动程序，它启动后，会列出所有的Java进程，用户可以选择需要诊断的目标进程。\n\n选择第一个进程，输入 `1` ，再`Enter/回车`：\n\n```bash\n1\n```\n\nAttach成功之后，会打印Arthas LOGO。输入 `help` 可以获取到更多的帮助信息。\n\n```bash\nhelp\n```\n\n![Arthas Boot](O1CN01HzatXZ1RgccrlT90M_!!6000000002141-2-tps-529-244.png)\n\n## trace命令\n\n> 方法内部调用路径，并输出方法路径上的每个节点上耗时\n\n`trace` 命令能主动搜索 `class-pattern`／`method-pattern` 对应的方法调用路径，渲染和统计整个调用链路上的所有性能开销和追踪调用链路。\n\n#### 参数说明\n\n| 参数名称            | 参数说明                             |\n| ------------------- | ------------------------------------ |\n| *class-pattern*     | 类名表达式匹配                       |\n| *method-pattern*    | 方法名表达式匹配                     |\n| *condition-express* | 条件表达式                           |\n| [E]                 | 开启正则表达式匹配，默认为通配符匹配 |\n| `[n:]`              | 命令执行次数                         |\n| `#cost`             | 方法执行耗时                         |\n\n这里重点要说明的是观察表达式，观察表达式的构成主要由 \bognl 表达式组成，所以你可以这样写`\"{params,returnObj}\"`，只要是一个合法的 ognl 表达式，都能被正常支持。\n\n观察的维度也比较多，主要体现在参数 `advice` 的数据结构上。`Advice` 参数最主要是封装了通知节点的所有信息。 请参考[表达式核心变量](https://shell.aliyun.com/tutorial)中关于该节点的描述。\n\n- 特殊用法请参考：https://github.com/alibaba/arthas/issues/71\n- OGNL表达式官网：https://commons.apache.org/proper/commons-ognl/language-guide.html\n\n很多时候我们只想看到某个方法的rt大于某个时间之后的trace结果，现在Arthas可以按照方法执行的耗时来进行过滤了，例如`trace *StringUtils isBlank '#cost>100'`表示当执行时间超过100ms的时候，才会输出trace的结果。\n\n> watch/stack/trace这个三个命令都支持`#cost`\n\n#### 注意事项\n\n`trace` 能方便的帮助你定位和发现因 RT 高而导致的性能问题缺陷，但其每次只能跟踪一级方法的调用链路。\n\n参考：[Trace命令的实现原理](https://github.com/alibaba/arthas/issues/597)\n\n3.3.0 版本后，可以使用动态Trace功能，不断增加新的匹配类，参考下面的示例。\n\n#### 使用参考\n\n##### trace函数\n\n```bash\ntrace demo.MathGame run\n```\n\n按`q`或者`Ctrl+c`退出\n\n```bash\nq\n```\n\n```console\n$ trace demo.MathGame run\nPress Q or Ctrl+C to abort.\nAffect(class-cnt:1 , method-cnt:1) cost in 28 ms.\n`---ts=2019-12-04 00:45:08;thread_name=main;id=1;is_daemon=false;priority=5;TCCL=sun.misc.Launcher$AppClassLoader@3d4eac69;    `---[0.617465ms] demo.MathGame:run()\n        `---[0.078946ms] demo.MathGame:primeFactors() #24 [throws Exception]\n\n`---ts=2019-12-04 00:45:09;thread_name=main;id=1;is_daemon=false;priority=5;TCCL=sun.misc.Launcher$AppClassLoader@3d4eac69;    `---[1.276874ms] demo.MathGame:run()\n        `---[0.03752ms] demo.MathGame:primeFactors() #24 [throws Exception]\n```\n\n##### trace次数限制\n\n如果方法调用的次数很多，那么可以用`-n`参数指定捕捉结果的次数。比如下面的例子里，捕捉到一次调用就退出命令。\n\n```bash\ntrace demo.MathGame run -n 1\n```\n\n按`q`或者`Ctrl+c`退出\n\n```bash\nq\n```\n\n```console\n$ trace demo.MathGame run -n 1\nPress Q or Ctrl+C to abort.\nAffect(class-cnt:1 , method-cnt:1) cost in 20 ms.\n`---ts=2019-12-04 00:45:53;thread_name=main;id=1;is_daemon=false;priority=5;TCCL=sun.misc.Launcher$AppClassLoader@3d4eac69;    `---[0.549379ms] demo.MathGame:run()\n        +---[0.059839ms] demo.MathGame:primeFactors() #24\n        `---[0.232887ms] demo.MathGame:print() #25\n\nCommand execution times exceed limit: 1, so command will exit. You can set it with -n option.\n```\n\n##### 包含jdk的函数\n\n- `--skipJDKMethod <value>` skip jdk method trace, default value true.\n\n```bash\ntrace --skipJDKMethod false demo.MathGame run\n```\n\n按`q`或者`Ctrl+c`退出\n\n```bash\nq\n```\n\n默认情况下，trace不会包含jdk里的函数调用，如果希望trace jdk里的函数，需要显式设置`--skipJDKMethod false`。\n\n```console\n$ trace --skipJDKMethod false demo.MathGame run\nPress Q or Ctrl+C to abort.\nAffect(class-cnt:1 , method-cnt:1) cost in 60 ms.\n`---ts=2019-12-04 00:44:41;thread_name=main;id=1;is_daemon=false;priority=5;TCCL=sun.misc.Launcher$AppClassLoader@3d4eac69;    `---[1.357742ms] demo.MathGame:run()\n        +---[0.028624ms] java.util.Random:nextInt() #23\n        +---[0.045534ms] demo.MathGame:primeFactors() #24 [throws Exception]\n        +---[0.005372ms] java.lang.StringBuilder:<init>() #28\n        +---[0.012257ms] java.lang.Integer:valueOf() #28\n        +---[0.234537ms] java.lang.String:format() #28\n        +---[min=0.004539ms,max=0.005778ms,total=0.010317ms,count=2] java.lang.StringBuilder:append() #28\n        +---[0.013777ms] java.lang.Exception:getMessage() #28\n        +---[0.004935ms] java.lang.StringBuilder:toString() #28\n        `---[0.06941ms] java.io.PrintStream:println() #28\n\n`---ts=2019-12-04 00:44:42;thread_name=main;id=1;is_daemon=false;priority=5;TCCL=sun.misc.Launcher$AppClassLoader@3d4eac69;    `---[3.030432ms] demo.MathGame:run()\n        +---[0.010473ms] java.util.Random:nextInt() #23\n        +---[0.023715ms] demo.MathGame:primeFactors() #24 [throws Exception]\n        +---[0.005198ms] java.lang.StringBuilder:<init>() #28\n        +---[0.006405ms] java.lang.Integer:valueOf() #28\n        +---[0.178583ms] java.lang.String:format() #28\n        +---[min=0.011636ms,max=0.838077ms,total=0.849713ms,count=2] java.lang.StringBuilder:append() #28\n        +---[0.008747ms] java.lang.Exception:getMessage() #28\n        +---[0.019768ms] java.lang.StringBuilder:toString() #28\n        `---[0.076457ms] java.io.PrintStream:println() #28\n```\n\n##### 据调用耗时过滤\n\n```bash\ntrace demo.MathGame run '#cost > 10'\n```\n\n按`q`或者`Ctrl+c`退出\n\n```bash\nq\n```\n\n```console\n$ trace demo.MathGame run '#cost > 10'\nPress Ctrl+C to abort.\nAffect(class-cnt:1 , method-cnt:1) cost in 41 ms.\n`---ts=2018-12-04 01:12:02;thread_name=main;id=1;is_daemon=false;priority=5;TCCL=sun.misc.Launcher$AppClassLoader@3d4eac69;    `---[12.033735ms] demo.MathGame:run()\n        +---[0.006783ms] java.util.Random:nextInt()\n        +---[11.852594ms] demo.MathGame:primeFactors()\n        `---[0.05447ms] demo.MathGame:print()\n```\n\n> 只会展示耗时大于10ms的调用路径，有助于在排查问题的时候，只关注异常情况\n\n- 是不是很眼熟，没错，在 JProfiler 等收费软件中你曾经见识类似的功能，这里你将可以通过命令就能打印出指定调用路径。 友情提醒下，`trace` 在执行的过程中本身是会有一定的性能开销，在统计的报告中并未像 JProfiler 一样预先减去其自身的统计开销。所以这统计出来有些许的不准，渲染路径上调用的类、方法越多，性能偏差越大。但还是能让你看清一些事情的。\n- [12.033735ms] 的含义，`12.033735` 的含义是：当前节点在当前步骤的耗时，单位为毫秒\n- [0,0,0ms,11]xxx:yyy() [throws Exception]，对该方法中相同的方法调用进行了合并，`0,0,0ms,11` 表示方法调用耗时，`min,max,total,count`；`throws Exception` 表明该方法调用中存在异常返回\n- 这里存在一个统计不准确的问题，就是所有方法耗时加起来可能会小于该监测方法的总耗时，这个是由于 Arthas 本身的逻辑会有一定的耗时\n\n##### trace多个类或者多个函数\n\ntrace命令只会trace匹配到的函数里的子调用，并不会向下trace多层。因为trace是代价比较贵的，多层trace可能会导致最终要trace的类和函数非常多。\n\n可以用正则表匹配路径上的多个类和函数，一定程度上达到多层trace的效果。\n\n```console\ntrace -E com.test.ClassA|org.test.ClassB method1|method2|method3\n```\n\n#### 动态trace\n\n3.3.0 版本后支持。 打开终端1，trace `run`函数，可以看到打印出 `listenerId: 1`：\n\n```bash\ntrace demo.MathGame run\n```\n\n按`q`或者`Ctrl+c`退出\n\n```bash\nq\n```\n\n```console\n[arthas@59161]$ trace demo.MathGame run\nPress Q or Ctrl+C to abort.\nAffect(class count: 1 , method count: 1) cost in 112 ms, listenerId: 1\n`---ts=2020-07-09 16:48:11;thread_name=main;id=1;is_daemon=false;priority=5;TCCL=sun.misc.Launcher$AppClassLoader@3d4eac69;    `---[1.389634ms] demo.MathGame:run()\n        `---[0.123934ms] demo.MathGame:primeFactors() #24 [throws Exception]\n\n`---ts=2020-07-09 16:48:12;thread_name=main;id=1;is_daemon=false;priority=5;TCCL=sun.misc.Launcher$AppClassLoader@3d4eac69;    `---[3.716391ms] demo.MathGame:run()\n        +---[3.182813ms] demo.MathGame:primeFactors() #24\n        `---[0.167786ms] demo.MathGame:print() #25\n```\n\n现在想要深入子函数`primeFactors`，可以打开一个新终端2，使用`telnet localhost 3658`连接上arthas，再trace `primeFactors`时，指定`listenerId`。\n\n```bash\ntrace demo.MathGame primeFactors --listenerId 1\n```\n\n按`q`或者`Ctrl+c`退出\n\n```bash\nq\n```\n\n```console\n[arthas@59161]$ trace demo.MathGame primeFactors --listenerId 1\nPress Q or Ctrl+C to abort.\nAffect(class count: 1 , method count: 1) cost in 34 ms, listenerId: 1\n```\n\n这时终端2打印的结果，说明已经增强了一个函数：`Affect(class count: 1 , method count: 1)`，但不再打印更多的结果。\n\n再查看终端1，可以发现trace的结果增加了一层，打印了`primeFactors`函数里的内容：\n\n```console\n`---ts=2020-07-09 16:49:29;thread_name=main;id=1;is_daemon=false;priority=5;TCCL=sun.misc.Launcher$AppClassLoader@3d4eac69;    `---[0.492551ms] demo.MathGame:run()\n        `---[0.113929ms] demo.MathGame:primeFactors() #24 [throws Exception]\n            `---[0.061462ms] demo.MathGame:primeFactors()\n                `---[0.001018ms] throw:java.lang.IllegalArgumentException() #46\n\n`---ts=2020-07-09 16:49:30;thread_name=main;id=1;is_daemon=false;priority=5;TCCL=sun.misc.Launcher$AppClassLoader@3d4eac69;    `---[0.409446ms] demo.MathGame:run()\n        +---[0.232606ms] demo.MathGame:primeFactors() #24\n        |   `---[0.1294ms] demo.MathGame:primeFactors()\n        `---[0.084025ms] demo.MathGame:print() #25\n```\n\n通过指定`listenerId`的方式动态trace，可以不断深入。另外 `watch`/`tt`/`monitor`等命令也支持类似的功能。\n\n## 更多信息\n\n在“trace”中，我们演示了了Arthas的trace命令。如果有更多的技巧或者使用疑问，欢迎在Issue里提出。\n\n- Issues: https://github.com/alibaba/arthas/issues\n- 文档： https://arthas.aliyun.com/doc\n\n如果您在使用Arthas，请让我们知道。您的使用对我们非常重要：[查看](https://github.com/alibaba/arthas/issues/111)\n\n文章拷贝来源：https://start.aliyun.com/course?spm=a2ck6.17690074.0.0.28bc2e7dHTphXs&id=PaiFAkJM","source":"_posts/Java诊断工具Arthas高级命令教程/Arthastrace命令.md","raw":"---\ntitle: Arthas trace命令\ndate: 2021-08-07 09:51:37\ntags: ['Java 诊断工具 Arthas 高级命令教程']\n---\n\n<!-- toc -->\n\n![Arthas](arthas.png)\n\n`Arthas` 是Alibaba开源的Java诊断工具，深受开发者喜爱。在线排查问题，无需重启；动态跟踪Java代码；实时监控JVM状态。\n\n`Arthas` 支持JDK 6+，支持Linux/Mac/Windows，采用命令行交互模式，同时提供丰富的 `Tab` 自动补全功能，进一步方便进行问题的定位和诊断。\n\n当你遇到以下类似问题而束手无策时，Arthas可以帮助你解决：\n\n- 这个类从哪个 jar 包加载的？为什么会报各种类相关的 Exception？\n- 我改的代码为什么没有执行到？难道是我没 commit？分支搞错了？\n- 遇到问题无法在线上 debug，难道只能通过加日志再重新发布吗？\n- 线上遇到某个用户的数据处理有问题，但线上同样无法 debug，线下无法重现！\n- 是否有一个全局视角来查看系统的运行状况？\n- 有什么办法可以监控到JVM的实时运行状态？\n- 怎么快速定位应用的热点，生成火焰图？\n\n本教程会以一个简单的应用为例，演示trace命令。\n\n- Github: https://github.com/alibaba/arthas\n- 文档: https://arthas.aliyun.com/doc/\n\n## 启动arthas demo\n\n下载`arthas-demo.jar`，再用`java -jar`命令启动：\n\n```bash\nwget https://arthas.aliyun.com/arthas-demo.jar;java -jar arthas-demo.jar\n```\n\n`arthas-demo`是一个很简单的程序，它随机生成整数，再执行因式分解，把结果打印出来。如果生成的随机数是负数，则会打印提示信息。\n\n## 启动arthas-boot\n\n在新的`Terminal 2`里，下载`arthas-boot.jar`，再用`java -jar`命令启动：\n\n```bash\nwget https://arthas.aliyun.com/arthas-boot.jar;java -jar arthas-boot.jar\n```\n\n`arthas-boot`是`Arthas`的启动程序，它启动后，会列出所有的Java进程，用户可以选择需要诊断的目标进程。\n\n选择第一个进程，输入 `1` ，再`Enter/回车`：\n\n```bash\n1\n```\n\nAttach成功之后，会打印Arthas LOGO。输入 `help` 可以获取到更多的帮助信息。\n\n```bash\nhelp\n```\n\n![Arthas Boot](O1CN01HzatXZ1RgccrlT90M_!!6000000002141-2-tps-529-244.png)\n\n## trace命令\n\n> 方法内部调用路径，并输出方法路径上的每个节点上耗时\n\n`trace` 命令能主动搜索 `class-pattern`／`method-pattern` 对应的方法调用路径，渲染和统计整个调用链路上的所有性能开销和追踪调用链路。\n\n#### 参数说明\n\n| 参数名称            | 参数说明                             |\n| ------------------- | ------------------------------------ |\n| *class-pattern*     | 类名表达式匹配                       |\n| *method-pattern*    | 方法名表达式匹配                     |\n| *condition-express* | 条件表达式                           |\n| [E]                 | 开启正则表达式匹配，默认为通配符匹配 |\n| `[n:]`              | 命令执行次数                         |\n| `#cost`             | 方法执行耗时                         |\n\n这里重点要说明的是观察表达式，观察表达式的构成主要由 \bognl 表达式组成，所以你可以这样写`\"{params,returnObj}\"`，只要是一个合法的 ognl 表达式，都能被正常支持。\n\n观察的维度也比较多，主要体现在参数 `advice` 的数据结构上。`Advice` 参数最主要是封装了通知节点的所有信息。 请参考[表达式核心变量](https://shell.aliyun.com/tutorial)中关于该节点的描述。\n\n- 特殊用法请参考：https://github.com/alibaba/arthas/issues/71\n- OGNL表达式官网：https://commons.apache.org/proper/commons-ognl/language-guide.html\n\n很多时候我们只想看到某个方法的rt大于某个时间之后的trace结果，现在Arthas可以按照方法执行的耗时来进行过滤了，例如`trace *StringUtils isBlank '#cost>100'`表示当执行时间超过100ms的时候，才会输出trace的结果。\n\n> watch/stack/trace这个三个命令都支持`#cost`\n\n#### 注意事项\n\n`trace` 能方便的帮助你定位和发现因 RT 高而导致的性能问题缺陷，但其每次只能跟踪一级方法的调用链路。\n\n参考：[Trace命令的实现原理](https://github.com/alibaba/arthas/issues/597)\n\n3.3.0 版本后，可以使用动态Trace功能，不断增加新的匹配类，参考下面的示例。\n\n#### 使用参考\n\n##### trace函数\n\n```bash\ntrace demo.MathGame run\n```\n\n按`q`或者`Ctrl+c`退出\n\n```bash\nq\n```\n\n```console\n$ trace demo.MathGame run\nPress Q or Ctrl+C to abort.\nAffect(class-cnt:1 , method-cnt:1) cost in 28 ms.\n`---ts=2019-12-04 00:45:08;thread_name=main;id=1;is_daemon=false;priority=5;TCCL=sun.misc.Launcher$AppClassLoader@3d4eac69;    `---[0.617465ms] demo.MathGame:run()\n        `---[0.078946ms] demo.MathGame:primeFactors() #24 [throws Exception]\n\n`---ts=2019-12-04 00:45:09;thread_name=main;id=1;is_daemon=false;priority=5;TCCL=sun.misc.Launcher$AppClassLoader@3d4eac69;    `---[1.276874ms] demo.MathGame:run()\n        `---[0.03752ms] demo.MathGame:primeFactors() #24 [throws Exception]\n```\n\n##### trace次数限制\n\n如果方法调用的次数很多，那么可以用`-n`参数指定捕捉结果的次数。比如下面的例子里，捕捉到一次调用就退出命令。\n\n```bash\ntrace demo.MathGame run -n 1\n```\n\n按`q`或者`Ctrl+c`退出\n\n```bash\nq\n```\n\n```console\n$ trace demo.MathGame run -n 1\nPress Q or Ctrl+C to abort.\nAffect(class-cnt:1 , method-cnt:1) cost in 20 ms.\n`---ts=2019-12-04 00:45:53;thread_name=main;id=1;is_daemon=false;priority=5;TCCL=sun.misc.Launcher$AppClassLoader@3d4eac69;    `---[0.549379ms] demo.MathGame:run()\n        +---[0.059839ms] demo.MathGame:primeFactors() #24\n        `---[0.232887ms] demo.MathGame:print() #25\n\nCommand execution times exceed limit: 1, so command will exit. You can set it with -n option.\n```\n\n##### 包含jdk的函数\n\n- `--skipJDKMethod <value>` skip jdk method trace, default value true.\n\n```bash\ntrace --skipJDKMethod false demo.MathGame run\n```\n\n按`q`或者`Ctrl+c`退出\n\n```bash\nq\n```\n\n默认情况下，trace不会包含jdk里的函数调用，如果希望trace jdk里的函数，需要显式设置`--skipJDKMethod false`。\n\n```console\n$ trace --skipJDKMethod false demo.MathGame run\nPress Q or Ctrl+C to abort.\nAffect(class-cnt:1 , method-cnt:1) cost in 60 ms.\n`---ts=2019-12-04 00:44:41;thread_name=main;id=1;is_daemon=false;priority=5;TCCL=sun.misc.Launcher$AppClassLoader@3d4eac69;    `---[1.357742ms] demo.MathGame:run()\n        +---[0.028624ms] java.util.Random:nextInt() #23\n        +---[0.045534ms] demo.MathGame:primeFactors() #24 [throws Exception]\n        +---[0.005372ms] java.lang.StringBuilder:<init>() #28\n        +---[0.012257ms] java.lang.Integer:valueOf() #28\n        +---[0.234537ms] java.lang.String:format() #28\n        +---[min=0.004539ms,max=0.005778ms,total=0.010317ms,count=2] java.lang.StringBuilder:append() #28\n        +---[0.013777ms] java.lang.Exception:getMessage() #28\n        +---[0.004935ms] java.lang.StringBuilder:toString() #28\n        `---[0.06941ms] java.io.PrintStream:println() #28\n\n`---ts=2019-12-04 00:44:42;thread_name=main;id=1;is_daemon=false;priority=5;TCCL=sun.misc.Launcher$AppClassLoader@3d4eac69;    `---[3.030432ms] demo.MathGame:run()\n        +---[0.010473ms] java.util.Random:nextInt() #23\n        +---[0.023715ms] demo.MathGame:primeFactors() #24 [throws Exception]\n        +---[0.005198ms] java.lang.StringBuilder:<init>() #28\n        +---[0.006405ms] java.lang.Integer:valueOf() #28\n        +---[0.178583ms] java.lang.String:format() #28\n        +---[min=0.011636ms,max=0.838077ms,total=0.849713ms,count=2] java.lang.StringBuilder:append() #28\n        +---[0.008747ms] java.lang.Exception:getMessage() #28\n        +---[0.019768ms] java.lang.StringBuilder:toString() #28\n        `---[0.076457ms] java.io.PrintStream:println() #28\n```\n\n##### 据调用耗时过滤\n\n```bash\ntrace demo.MathGame run '#cost > 10'\n```\n\n按`q`或者`Ctrl+c`退出\n\n```bash\nq\n```\n\n```console\n$ trace demo.MathGame run '#cost > 10'\nPress Ctrl+C to abort.\nAffect(class-cnt:1 , method-cnt:1) cost in 41 ms.\n`---ts=2018-12-04 01:12:02;thread_name=main;id=1;is_daemon=false;priority=5;TCCL=sun.misc.Launcher$AppClassLoader@3d4eac69;    `---[12.033735ms] demo.MathGame:run()\n        +---[0.006783ms] java.util.Random:nextInt()\n        +---[11.852594ms] demo.MathGame:primeFactors()\n        `---[0.05447ms] demo.MathGame:print()\n```\n\n> 只会展示耗时大于10ms的调用路径，有助于在排查问题的时候，只关注异常情况\n\n- 是不是很眼熟，没错，在 JProfiler 等收费软件中你曾经见识类似的功能，这里你将可以通过命令就能打印出指定调用路径。 友情提醒下，`trace` 在执行的过程中本身是会有一定的性能开销，在统计的报告中并未像 JProfiler 一样预先减去其自身的统计开销。所以这统计出来有些许的不准，渲染路径上调用的类、方法越多，性能偏差越大。但还是能让你看清一些事情的。\n- [12.033735ms] 的含义，`12.033735` 的含义是：当前节点在当前步骤的耗时，单位为毫秒\n- [0,0,0ms,11]xxx:yyy() [throws Exception]，对该方法中相同的方法调用进行了合并，`0,0,0ms,11` 表示方法调用耗时，`min,max,total,count`；`throws Exception` 表明该方法调用中存在异常返回\n- 这里存在一个统计不准确的问题，就是所有方法耗时加起来可能会小于该监测方法的总耗时，这个是由于 Arthas 本身的逻辑会有一定的耗时\n\n##### trace多个类或者多个函数\n\ntrace命令只会trace匹配到的函数里的子调用，并不会向下trace多层。因为trace是代价比较贵的，多层trace可能会导致最终要trace的类和函数非常多。\n\n可以用正则表匹配路径上的多个类和函数，一定程度上达到多层trace的效果。\n\n```console\ntrace -E com.test.ClassA|org.test.ClassB method1|method2|method3\n```\n\n#### 动态trace\n\n3.3.0 版本后支持。 打开终端1，trace `run`函数，可以看到打印出 `listenerId: 1`：\n\n```bash\ntrace demo.MathGame run\n```\n\n按`q`或者`Ctrl+c`退出\n\n```bash\nq\n```\n\n```console\n[arthas@59161]$ trace demo.MathGame run\nPress Q or Ctrl+C to abort.\nAffect(class count: 1 , method count: 1) cost in 112 ms, listenerId: 1\n`---ts=2020-07-09 16:48:11;thread_name=main;id=1;is_daemon=false;priority=5;TCCL=sun.misc.Launcher$AppClassLoader@3d4eac69;    `---[1.389634ms] demo.MathGame:run()\n        `---[0.123934ms] demo.MathGame:primeFactors() #24 [throws Exception]\n\n`---ts=2020-07-09 16:48:12;thread_name=main;id=1;is_daemon=false;priority=5;TCCL=sun.misc.Launcher$AppClassLoader@3d4eac69;    `---[3.716391ms] demo.MathGame:run()\n        +---[3.182813ms] demo.MathGame:primeFactors() #24\n        `---[0.167786ms] demo.MathGame:print() #25\n```\n\n现在想要深入子函数`primeFactors`，可以打开一个新终端2，使用`telnet localhost 3658`连接上arthas，再trace `primeFactors`时，指定`listenerId`。\n\n```bash\ntrace demo.MathGame primeFactors --listenerId 1\n```\n\n按`q`或者`Ctrl+c`退出\n\n```bash\nq\n```\n\n```console\n[arthas@59161]$ trace demo.MathGame primeFactors --listenerId 1\nPress Q or Ctrl+C to abort.\nAffect(class count: 1 , method count: 1) cost in 34 ms, listenerId: 1\n```\n\n这时终端2打印的结果，说明已经增强了一个函数：`Affect(class count: 1 , method count: 1)`，但不再打印更多的结果。\n\n再查看终端1，可以发现trace的结果增加了一层，打印了`primeFactors`函数里的内容：\n\n```console\n`---ts=2020-07-09 16:49:29;thread_name=main;id=1;is_daemon=false;priority=5;TCCL=sun.misc.Launcher$AppClassLoader@3d4eac69;    `---[0.492551ms] demo.MathGame:run()\n        `---[0.113929ms] demo.MathGame:primeFactors() #24 [throws Exception]\n            `---[0.061462ms] demo.MathGame:primeFactors()\n                `---[0.001018ms] throw:java.lang.IllegalArgumentException() #46\n\n`---ts=2020-07-09 16:49:30;thread_name=main;id=1;is_daemon=false;priority=5;TCCL=sun.misc.Launcher$AppClassLoader@3d4eac69;    `---[0.409446ms] demo.MathGame:run()\n        +---[0.232606ms] demo.MathGame:primeFactors() #24\n        |   `---[0.1294ms] demo.MathGame:primeFactors()\n        `---[0.084025ms] demo.MathGame:print() #25\n```\n\n通过指定`listenerId`的方式动态trace，可以不断深入。另外 `watch`/`tt`/`monitor`等命令也支持类似的功能。\n\n## 更多信息\n\n在“trace”中，我们演示了了Arthas的trace命令。如果有更多的技巧或者使用疑问，欢迎在Issue里提出。\n\n- Issues: https://github.com/alibaba/arthas/issues\n- 文档： https://arthas.aliyun.com/doc\n\n如果您在使用Arthas，请让我们知道。您的使用对我们非常重要：[查看](https://github.com/alibaba/arthas/issues/111)\n\n文章拷贝来源：https://start.aliyun.com/course?spm=a2ck6.17690074.0.0.28bc2e7dHTphXs&id=PaiFAkJM","slug":"Java诊断工具Arthas高级命令教程/Arthastrace命令","published":1,"updated":"2021-08-07T05:35:33.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cks1cgr73002ufw5ib9kz5mpb","content":"<!-- toc -->\n\n<ul>\n<li><a href=\"#%E5%90%AF%E5%8A%A8arthas-demo\">启动arthas demo</a></li>\n<li><a href=\"#%E5%90%AF%E5%8A%A8arthas-boot\">启动arthas-boot</a></li>\n<li><a href=\"#trace%E5%91%BD%E4%BB%A4\">trace命令</a><ul>\n<li><a href=\"#%E5%8F%82%E6%95%B0%E8%AF%B4%E6%98%8E\">参数说明</a></li>\n<li><a href=\"#%E6%B3%A8%E6%84%8F%E4%BA%8B%E9%A1%B9\">注意事项</a></li>\n<li><a href=\"#%E4%BD%BF%E7%94%A8%E5%8F%82%E8%80%83\">使用参考</a><ul>\n<li><a href=\"#trace%E5%87%BD%E6%95%B0\">trace函数</a></li>\n<li><a href=\"#trace%E6%AC%A1%E6%95%B0%E9%99%90%E5%88%B6\">trace次数限制</a></li>\n<li><a href=\"#%E5%8C%85%E5%90%ABjdk%E7%9A%84%E5%87%BD%E6%95%B0\">包含jdk的函数</a></li>\n<li><a href=\"#%E6%8D%AE%E8%B0%83%E7%94%A8%E8%80%97%E6%97%B6%E8%BF%87%E6%BB%A4\">据调用耗时过滤</a></li>\n<li><a href=\"#trace%E5%A4%9A%E4%B8%AA%E7%B1%BB%E6%88%96%E8%80%85%E5%A4%9A%E4%B8%AA%E5%87%BD%E6%95%B0\">trace多个类或者多个函数</a></li>\n</ul>\n</li>\n<li><a href=\"#%E5%8A%A8%E6%80%81trace\">动态trace</a></li>\n</ul>\n</li>\n<li><a href=\"#%E6%9B%B4%E5%A4%9A%E4%BF%A1%E6%81%AF\">更多信息</a></li>\n</ul>\n<!-- tocstop -->\n\n<p><img src=\"/jlynet.github.io/2021/08/07/Java%E8%AF%8A%E6%96%AD%E5%B7%A5%E5%85%B7Arthas%E9%AB%98%E7%BA%A7%E5%91%BD%E4%BB%A4%E6%95%99%E7%A8%8B/Arthastrace%E5%91%BD%E4%BB%A4/arthas.png\" alt=\"Arthas\"></p>\n<p><code>Arthas</code> 是Alibaba开源的Java诊断工具，深受开发者喜爱。在线排查问题，无需重启；动态跟踪Java代码；实时监控JVM状态。</p>\n<p><code>Arthas</code> 支持JDK 6+，支持Linux/Mac/Windows，采用命令行交互模式，同时提供丰富的 <code>Tab</code> 自动补全功能，进一步方便进行问题的定位和诊断。</p>\n<p>当你遇到以下类似问题而束手无策时，Arthas可以帮助你解决：</p>\n<ul>\n<li>这个类从哪个 jar 包加载的？为什么会报各种类相关的 Exception？</li>\n<li>我改的代码为什么没有执行到？难道是我没 commit？分支搞错了？</li>\n<li>遇到问题无法在线上 debug，难道只能通过加日志再重新发布吗？</li>\n<li>线上遇到某个用户的数据处理有问题，但线上同样无法 debug，线下无法重现！</li>\n<li>是否有一个全局视角来查看系统的运行状况？</li>\n<li>有什么办法可以监控到JVM的实时运行状态？</li>\n<li>怎么快速定位应用的热点，生成火焰图？</li>\n</ul>\n<p>本教程会以一个简单的应用为例，演示trace命令。</p>\n<ul>\n<li>Github: <a href=\"https://github.com/alibaba/arthas\">https://github.com/alibaba/arthas</a></li>\n<li>文档: <a href=\"https://arthas.aliyun.com/doc/\">https://arthas.aliyun.com/doc/</a></li>\n</ul>\n<h2><span id=\"启动arthas-demo\">启动arthas demo</span></h2><p>下载<code>arthas-demo.jar</code>，再用<code>java -jar</code>命令启动：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wget https://arthas.aliyun.com/arthas-demo.jar;java -jar arthas-demo.jar</span><br></pre></td></tr></table></figure>\n\n<p><code>arthas-demo</code>是一个很简单的程序，它随机生成整数，再执行因式分解，把结果打印出来。如果生成的随机数是负数，则会打印提示信息。</p>\n<h2><span id=\"启动arthas-boot\">启动arthas-boot</span></h2><p>在新的<code>Terminal 2</code>里，下载<code>arthas-boot.jar</code>，再用<code>java -jar</code>命令启动：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wget https://arthas.aliyun.com/arthas-boot.jar;java -jar arthas-boot.jar</span><br></pre></td></tr></table></figure>\n\n<p><code>arthas-boot</code>是<code>Arthas</code>的启动程序，它启动后，会列出所有的Java进程，用户可以选择需要诊断的目标进程。</p>\n<p>选择第一个进程，输入 <code>1</code> ，再<code>Enter/回车</code>：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1</span><br></pre></td></tr></table></figure>\n\n<p>Attach成功之后，会打印Arthas LOGO。输入 <code>help</code> 可以获取到更多的帮助信息。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">help</span></span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/jlynet.github.io/2021/08/07/Java%E8%AF%8A%E6%96%AD%E5%B7%A5%E5%85%B7Arthas%E9%AB%98%E7%BA%A7%E5%91%BD%E4%BB%A4%E6%95%99%E7%A8%8B/Arthastrace%E5%91%BD%E4%BB%A4/O1CN01HzatXZ1RgccrlT90M_!!6000000002141-2-tps-529-244.png\" alt=\"Arthas Boot\"></p>\n<h2><span id=\"trace命令\">trace命令</span></h2><blockquote>\n<p>方法内部调用路径，并输出方法路径上的每个节点上耗时</p>\n</blockquote>\n<p><code>trace</code> 命令能主动搜索 <code>class-pattern</code>／<code>method-pattern</code> 对应的方法调用路径，渲染和统计整个调用链路上的所有性能开销和追踪调用链路。</p>\n<h4><span id=\"参数说明\">参数说明</span></h4><table>\n<thead>\n<tr>\n<th>参数名称</th>\n<th>参数说明</th>\n</tr>\n</thead>\n<tbody><tr>\n<td><em>class-pattern</em></td>\n<td>类名表达式匹配</td>\n</tr>\n<tr>\n<td><em>method-pattern</em></td>\n<td>方法名表达式匹配</td>\n</tr>\n<tr>\n<td><em>condition-express</em></td>\n<td>条件表达式</td>\n</tr>\n<tr>\n<td>[E]</td>\n<td>开启正则表达式匹配，默认为通配符匹配</td>\n</tr>\n<tr>\n<td><code>[n:]</code></td>\n<td>命令执行次数</td>\n</tr>\n<tr>\n<td><code>#cost</code></td>\n<td>方法执行耗时</td>\n</tr>\n</tbody></table>\n<p>这里重点要说明的是观察表达式，观察表达式的构成主要由 \bognl 表达式组成，所以你可以这样写<code>&quot;&#123;params,returnObj&#125;&quot;</code>，只要是一个合法的 ognl 表达式，都能被正常支持。</p>\n<p>观察的维度也比较多，主要体现在参数 <code>advice</code> 的数据结构上。<code>Advice</code> 参数最主要是封装了通知节点的所有信息。 请参考<a href=\"https://shell.aliyun.com/tutorial\">表达式核心变量</a>中关于该节点的描述。</p>\n<ul>\n<li>特殊用法请参考：<a href=\"https://github.com/alibaba/arthas/issues/71\">https://github.com/alibaba/arthas/issues/71</a></li>\n<li>OGNL表达式官网：<a href=\"https://commons.apache.org/proper/commons-ognl/language-guide.html\">https://commons.apache.org/proper/commons-ognl/language-guide.html</a></li>\n</ul>\n<p>很多时候我们只想看到某个方法的rt大于某个时间之后的trace结果，现在Arthas可以按照方法执行的耗时来进行过滤了，例如<code>trace *StringUtils isBlank &#39;#cost&gt;100&#39;</code>表示当执行时间超过100ms的时候，才会输出trace的结果。</p>\n<blockquote>\n<p>watch/stack/trace这个三个命令都支持<code>#cost</code></p>\n</blockquote>\n<h4><span id=\"注意事项\">注意事项</span></h4><p><code>trace</code> 能方便的帮助你定位和发现因 RT 高而导致的性能问题缺陷，但其每次只能跟踪一级方法的调用链路。</p>\n<p>参考：<a href=\"https://github.com/alibaba/arthas/issues/597\">Trace命令的实现原理</a></p>\n<p>3.3.0 版本后，可以使用动态Trace功能，不断增加新的匹配类，参考下面的示例。</p>\n<h4><span id=\"使用参考\">使用参考</span></h4><h5><span id=\"trace函数\">trace函数</span></h5><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">trace demo.MathGame run</span><br></pre></td></tr></table></figure>\n\n<p>按<code>q</code>或者<code>Ctrl+c</code>退出</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">q</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight console\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> trace demo.MathGame run</span></span><br><span class=\"line\">Press Q or Ctrl+C to abort.</span><br><span class=\"line\">Affect(class-cnt:1 , method-cnt:1) cost in 28 ms.</span><br><span class=\"line\">`---ts=2019-12-04 00:45:08;thread_name=main;id=1;is_daemon=false;priority=5;TCCL=sun.misc.Launcher$AppClassLoader@3d4eac69;    `---[0.617465ms] demo.MathGame:run()</span><br><span class=\"line\">        `---[0.078946ms] demo.MathGame:primeFactors() #24 [throws Exception]</span><br><span class=\"line\"></span><br><span class=\"line\">`---ts=2019-12-04 00:45:09;thread_name=main;id=1;is_daemon=false;priority=5;TCCL=sun.misc.Launcher$AppClassLoader@3d4eac69;    `---[1.276874ms] demo.MathGame:run()</span><br><span class=\"line\">        `---[0.03752ms] demo.MathGame:primeFactors() #24 [throws Exception]</span><br></pre></td></tr></table></figure>\n\n<h5><span id=\"trace次数限制\">trace次数限制</span></h5><p>如果方法调用的次数很多，那么可以用<code>-n</code>参数指定捕捉结果的次数。比如下面的例子里，捕捉到一次调用就退出命令。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">trace demo.MathGame run -n 1</span><br></pre></td></tr></table></figure>\n\n<p>按<code>q</code>或者<code>Ctrl+c</code>退出</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">q</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight console\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> trace demo.MathGame run -n 1</span></span><br><span class=\"line\">Press Q or Ctrl+C to abort.</span><br><span class=\"line\">Affect(class-cnt:1 , method-cnt:1) cost in 20 ms.</span><br><span class=\"line\">`---ts=2019-12-04 00:45:53;thread_name=main;id=1;is_daemon=false;priority=5;TCCL=sun.misc.Launcher$AppClassLoader@3d4eac69;    `---[0.549379ms] demo.MathGame:run()</span><br><span class=\"line\">        +---[0.059839ms] demo.MathGame:primeFactors() #24</span><br><span class=\"line\">        `---[0.232887ms] demo.MathGame:print() #25</span><br><span class=\"line\"></span><br><span class=\"line\">Command execution times exceed limit: 1, so command will exit. You can set it with -n option.</span><br></pre></td></tr></table></figure>\n\n<h5><span id=\"包含jdk的函数\">包含jdk的函数</span></h5><ul>\n<li><code>--skipJDKMethod &lt;value&gt;</code> skip jdk method trace, default value true.</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">trace --skipJDKMethod <span class=\"literal\">false</span> demo.MathGame run</span><br></pre></td></tr></table></figure>\n\n<p>按<code>q</code>或者<code>Ctrl+c</code>退出</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">q</span><br></pre></td></tr></table></figure>\n\n<p>默认情况下，trace不会包含jdk里的函数调用，如果希望trace jdk里的函数，需要显式设置<code>--skipJDKMethod false</code>。</p>\n<figure class=\"highlight console\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> trace --skipJDKMethod <span class=\"literal\">false</span> demo.MathGame run</span></span><br><span class=\"line\">Press Q or Ctrl+C to abort.</span><br><span class=\"line\">Affect(class-cnt:1 , method-cnt:1) cost in 60 ms.</span><br><span class=\"line\">`---ts=2019-12-04 00:44:41;thread_name=main;id=1;is_daemon=false;priority=5;TCCL=sun.misc.Launcher$AppClassLoader@3d4eac69;    `---[1.357742ms] demo.MathGame:run()</span><br><span class=\"line\">        +---[0.028624ms] java.util.Random:nextInt() #23</span><br><span class=\"line\">        +---[0.045534ms] demo.MathGame:primeFactors() #24 [throws Exception]</span><br><span class=\"line\">        +---[0.005372ms] java.lang.StringBuilder:&lt;init&gt;() #28</span><br><span class=\"line\">        +---[0.012257ms] java.lang.Integer:valueOf() #28</span><br><span class=\"line\">        +---[0.234537ms] java.lang.String:format() #28</span><br><span class=\"line\">        +---[min=0.004539ms,max=0.005778ms,total=0.010317ms,count=2] java.lang.StringBuilder:append() #28</span><br><span class=\"line\">        +---[0.013777ms] java.lang.Exception:getMessage() #28</span><br><span class=\"line\">        +---[0.004935ms] java.lang.StringBuilder:toString() #28</span><br><span class=\"line\">        `---[0.06941ms] java.io.PrintStream:println() #28</span><br><span class=\"line\"></span><br><span class=\"line\">`---ts=2019-12-04 00:44:42;thread_name=main;id=1;is_daemon=false;priority=5;TCCL=sun.misc.Launcher$AppClassLoader@3d4eac69;    `---[3.030432ms] demo.MathGame:run()</span><br><span class=\"line\">        +---[0.010473ms] java.util.Random:nextInt() #23</span><br><span class=\"line\">        +---[0.023715ms] demo.MathGame:primeFactors() #24 [throws Exception]</span><br><span class=\"line\">        +---[0.005198ms] java.lang.StringBuilder:&lt;init&gt;() #28</span><br><span class=\"line\">        +---[0.006405ms] java.lang.Integer:valueOf() #28</span><br><span class=\"line\">        +---[0.178583ms] java.lang.String:format() #28</span><br><span class=\"line\">        +---[min=0.011636ms,max=0.838077ms,total=0.849713ms,count=2] java.lang.StringBuilder:append() #28</span><br><span class=\"line\">        +---[0.008747ms] java.lang.Exception:getMessage() #28</span><br><span class=\"line\">        +---[0.019768ms] java.lang.StringBuilder:toString() #28</span><br><span class=\"line\">        `---[0.076457ms] java.io.PrintStream:println() #28</span><br></pre></td></tr></table></figure>\n\n<h5><span id=\"据调用耗时过滤\">据调用耗时过滤</span></h5><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">trace demo.MathGame run <span class=\"string\">&#x27;#cost &gt; 10&#x27;</span></span><br></pre></td></tr></table></figure>\n\n<p>按<code>q</code>或者<code>Ctrl+c</code>退出</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">q</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight console\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> trace demo.MathGame run <span class=\"string\">&#x27;#cost &gt; 10&#x27;</span></span></span><br><span class=\"line\">Press Ctrl+C to abort.</span><br><span class=\"line\">Affect(class-cnt:1 , method-cnt:1) cost in 41 ms.</span><br><span class=\"line\">`---ts=2018-12-04 01:12:02;thread_name=main;id=1;is_daemon=false;priority=5;TCCL=sun.misc.Launcher$AppClassLoader@3d4eac69;    `---[12.033735ms] demo.MathGame:run()</span><br><span class=\"line\">        +---[0.006783ms] java.util.Random:nextInt()</span><br><span class=\"line\">        +---[11.852594ms] demo.MathGame:primeFactors()</span><br><span class=\"line\">        `---[0.05447ms] demo.MathGame:print()</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>只会展示耗时大于10ms的调用路径，有助于在排查问题的时候，只关注异常情况</p>\n</blockquote>\n<ul>\n<li>是不是很眼熟，没错，在 JProfiler 等收费软件中你曾经见识类似的功能，这里你将可以通过命令就能打印出指定调用路径。 友情提醒下，<code>trace</code> 在执行的过程中本身是会有一定的性能开销，在统计的报告中并未像 JProfiler 一样预先减去其自身的统计开销。所以这统计出来有些许的不准，渲染路径上调用的类、方法越多，性能偏差越大。但还是能让你看清一些事情的。</li>\n<li>[12.033735ms] 的含义，<code>12.033735</code> 的含义是：当前节点在当前步骤的耗时，单位为毫秒</li>\n<li>[0,0,0ms,11]xxx:yyy() [throws Exception]，对该方法中相同的方法调用进行了合并，<code>0,0,0ms,11</code> 表示方法调用耗时，<code>min,max,total,count</code>；<code>throws Exception</code> 表明该方法调用中存在异常返回</li>\n<li>这里存在一个统计不准确的问题，就是所有方法耗时加起来可能会小于该监测方法的总耗时，这个是由于 Arthas 本身的逻辑会有一定的耗时</li>\n</ul>\n<h5><span id=\"trace多个类或者多个函数\">trace多个类或者多个函数</span></h5><p>trace命令只会trace匹配到的函数里的子调用，并不会向下trace多层。因为trace是代价比较贵的，多层trace可能会导致最终要trace的类和函数非常多。</p>\n<p>可以用正则表匹配路径上的多个类和函数，一定程度上达到多层trace的效果。</p>\n<figure class=\"highlight console\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">trace -E com.test.ClassA|org.test.ClassB method1|method2|method3</span><br></pre></td></tr></table></figure>\n\n<h4><span id=\"动态trace\">动态trace</span></h4><p>3.3.0 版本后支持。 打开终端1，trace <code>run</code>函数，可以看到打印出 <code>listenerId: 1</code>：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">trace demo.MathGame run</span><br></pre></td></tr></table></figure>\n\n<p>按<code>q</code>或者<code>Ctrl+c</code>退出</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">q</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight console\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">[arthas@59161]$</span><span class=\"bash\"> trace demo.MathGame run</span></span><br><span class=\"line\">Press Q or Ctrl+C to abort.</span><br><span class=\"line\">Affect(class count: 1 , method count: 1) cost in 112 ms, listenerId: 1</span><br><span class=\"line\">`---ts=2020-07-09 16:48:11;thread_name=main;id=1;is_daemon=false;priority=5;TCCL=sun.misc.Launcher$AppClassLoader@3d4eac69;    `---[1.389634ms] demo.MathGame:run()</span><br><span class=\"line\">        `---[0.123934ms] demo.MathGame:primeFactors() #24 [throws Exception]</span><br><span class=\"line\"></span><br><span class=\"line\">`---ts=2020-07-09 16:48:12;thread_name=main;id=1;is_daemon=false;priority=5;TCCL=sun.misc.Launcher$AppClassLoader@3d4eac69;    `---[3.716391ms] demo.MathGame:run()</span><br><span class=\"line\">        +---[3.182813ms] demo.MathGame:primeFactors() #24</span><br><span class=\"line\">        `---[0.167786ms] demo.MathGame:print() #25</span><br></pre></td></tr></table></figure>\n\n<p>现在想要深入子函数<code>primeFactors</code>，可以打开一个新终端2，使用<code>telnet localhost 3658</code>连接上arthas，再trace <code>primeFactors</code>时，指定<code>listenerId</code>。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">trace demo.MathGame primeFactors --listenerId 1</span><br></pre></td></tr></table></figure>\n\n<p>按<code>q</code>或者<code>Ctrl+c</code>退出</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">q</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight console\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">[arthas@59161]$</span><span class=\"bash\"> trace demo.MathGame primeFactors --listenerId 1</span></span><br><span class=\"line\">Press Q or Ctrl+C to abort.</span><br><span class=\"line\">Affect(class count: 1 , method count: 1) cost in 34 ms, listenerId: 1</span><br></pre></td></tr></table></figure>\n\n<p>这时终端2打印的结果，说明已经增强了一个函数：<code>Affect(class count: 1 , method count: 1)</code>，但不再打印更多的结果。</p>\n<p>再查看终端1，可以发现trace的结果增加了一层，打印了<code>primeFactors</code>函数里的内容：</p>\n<figure class=\"highlight console\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">`---ts=2020-07-09 16:49:29;thread_name=main;id=1;is_daemon=false;priority=5;TCCL=sun.misc.Launcher$AppClassLoader@3d4eac69;    `---[0.492551ms] demo.MathGame:run()</span><br><span class=\"line\">        `---[0.113929ms] demo.MathGame:primeFactors() #24 [throws Exception]</span><br><span class=\"line\">            `---[0.061462ms] demo.MathGame:primeFactors()</span><br><span class=\"line\">                `---[0.001018ms] throw:java.lang.IllegalArgumentException() #46</span><br><span class=\"line\"></span><br><span class=\"line\">`---ts=2020-07-09 16:49:30;thread_name=main;id=1;is_daemon=false;priority=5;TCCL=sun.misc.Launcher$AppClassLoader@3d4eac69;    `---[0.409446ms] demo.MathGame:run()</span><br><span class=\"line\">        +---[0.232606ms] demo.MathGame:primeFactors() #24</span><br><span class=\"line\">        |   `---[0.1294ms] demo.MathGame:primeFactors()</span><br><span class=\"line\">        `---[0.084025ms] demo.MathGame:print() #25</span><br></pre></td></tr></table></figure>\n\n<p>通过指定<code>listenerId</code>的方式动态trace，可以不断深入。另外 <code>watch</code>/<code>tt</code>/<code>monitor</code>等命令也支持类似的功能。</p>\n<h2><span id=\"更多信息\">更多信息</span></h2><p>在“trace”中，我们演示了了Arthas的trace命令。如果有更多的技巧或者使用疑问，欢迎在Issue里提出。</p>\n<ul>\n<li>Issues: <a href=\"https://github.com/alibaba/arthas/issues\">https://github.com/alibaba/arthas/issues</a></li>\n<li>文档： <a href=\"https://arthas.aliyun.com/doc\">https://arthas.aliyun.com/doc</a></li>\n</ul>\n<p>如果您在使用Arthas，请让我们知道。您的使用对我们非常重要：<a href=\"https://github.com/alibaba/arthas/issues/111\">查看</a></p>\n<p>文章拷贝来源：<a href=\"https://start.aliyun.com/course?spm=a2ck6.17690074.0.0.28bc2e7dHTphXs&amp;id=PaiFAkJM\">https://start.aliyun.com/course?spm=a2ck6.17690074.0.0.28bc2e7dHTphXs&amp;id=PaiFAkJM</a></p>\n","site":{"data":{}},"excerpt":"","more":"<!-- toc -->\n\n<ul>\n<li><a href=\"#%E5%90%AF%E5%8A%A8arthas-demo\">启动arthas demo</a></li>\n<li><a href=\"#%E5%90%AF%E5%8A%A8arthas-boot\">启动arthas-boot</a></li>\n<li><a href=\"#trace%E5%91%BD%E4%BB%A4\">trace命令</a><ul>\n<li><a href=\"#%E5%8F%82%E6%95%B0%E8%AF%B4%E6%98%8E\">参数说明</a></li>\n<li><a href=\"#%E6%B3%A8%E6%84%8F%E4%BA%8B%E9%A1%B9\">注意事项</a></li>\n<li><a href=\"#%E4%BD%BF%E7%94%A8%E5%8F%82%E8%80%83\">使用参考</a><ul>\n<li><a href=\"#trace%E5%87%BD%E6%95%B0\">trace函数</a></li>\n<li><a href=\"#trace%E6%AC%A1%E6%95%B0%E9%99%90%E5%88%B6\">trace次数限制</a></li>\n<li><a href=\"#%E5%8C%85%E5%90%ABjdk%E7%9A%84%E5%87%BD%E6%95%B0\">包含jdk的函数</a></li>\n<li><a href=\"#%E6%8D%AE%E8%B0%83%E7%94%A8%E8%80%97%E6%97%B6%E8%BF%87%E6%BB%A4\">据调用耗时过滤</a></li>\n<li><a href=\"#trace%E5%A4%9A%E4%B8%AA%E7%B1%BB%E6%88%96%E8%80%85%E5%A4%9A%E4%B8%AA%E5%87%BD%E6%95%B0\">trace多个类或者多个函数</a></li>\n</ul>\n</li>\n<li><a href=\"#%E5%8A%A8%E6%80%81trace\">动态trace</a></li>\n</ul>\n</li>\n<li><a href=\"#%E6%9B%B4%E5%A4%9A%E4%BF%A1%E6%81%AF\">更多信息</a></li>\n</ul>\n<!-- tocstop -->\n\n<p><img src=\"/jlynet.github.io/2021/08/07/Java%E8%AF%8A%E6%96%AD%E5%B7%A5%E5%85%B7Arthas%E9%AB%98%E7%BA%A7%E5%91%BD%E4%BB%A4%E6%95%99%E7%A8%8B/Arthastrace%E5%91%BD%E4%BB%A4/arthas.png\" alt=\"Arthas\"></p>\n<p><code>Arthas</code> 是Alibaba开源的Java诊断工具，深受开发者喜爱。在线排查问题，无需重启；动态跟踪Java代码；实时监控JVM状态。</p>\n<p><code>Arthas</code> 支持JDK 6+，支持Linux/Mac/Windows，采用命令行交互模式，同时提供丰富的 <code>Tab</code> 自动补全功能，进一步方便进行问题的定位和诊断。</p>\n<p>当你遇到以下类似问题而束手无策时，Arthas可以帮助你解决：</p>\n<ul>\n<li>这个类从哪个 jar 包加载的？为什么会报各种类相关的 Exception？</li>\n<li>我改的代码为什么没有执行到？难道是我没 commit？分支搞错了？</li>\n<li>遇到问题无法在线上 debug，难道只能通过加日志再重新发布吗？</li>\n<li>线上遇到某个用户的数据处理有问题，但线上同样无法 debug，线下无法重现！</li>\n<li>是否有一个全局视角来查看系统的运行状况？</li>\n<li>有什么办法可以监控到JVM的实时运行状态？</li>\n<li>怎么快速定位应用的热点，生成火焰图？</li>\n</ul>\n<p>本教程会以一个简单的应用为例，演示trace命令。</p>\n<ul>\n<li>Github: <a href=\"https://github.com/alibaba/arthas\">https://github.com/alibaba/arthas</a></li>\n<li>文档: <a href=\"https://arthas.aliyun.com/doc/\">https://arthas.aliyun.com/doc/</a></li>\n</ul>\n<h2 id=\"启动arthas-demo\"><a href=\"#启动arthas-demo\" class=\"headerlink\" title=\"启动arthas demo\"></a>启动arthas demo</h2><p>下载<code>arthas-demo.jar</code>，再用<code>java -jar</code>命令启动：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wget https://arthas.aliyun.com/arthas-demo.jar;java -jar arthas-demo.jar</span><br></pre></td></tr></table></figure>\n\n<p><code>arthas-demo</code>是一个很简单的程序，它随机生成整数，再执行因式分解，把结果打印出来。如果生成的随机数是负数，则会打印提示信息。</p>\n<h2 id=\"启动arthas-boot\"><a href=\"#启动arthas-boot\" class=\"headerlink\" title=\"启动arthas-boot\"></a>启动arthas-boot</h2><p>在新的<code>Terminal 2</code>里，下载<code>arthas-boot.jar</code>，再用<code>java -jar</code>命令启动：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wget https://arthas.aliyun.com/arthas-boot.jar;java -jar arthas-boot.jar</span><br></pre></td></tr></table></figure>\n\n<p><code>arthas-boot</code>是<code>Arthas</code>的启动程序，它启动后，会列出所有的Java进程，用户可以选择需要诊断的目标进程。</p>\n<p>选择第一个进程，输入 <code>1</code> ，再<code>Enter/回车</code>：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1</span><br></pre></td></tr></table></figure>\n\n<p>Attach成功之后，会打印Arthas LOGO。输入 <code>help</code> 可以获取到更多的帮助信息。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">help</span></span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/jlynet.github.io/2021/08/07/Java%E8%AF%8A%E6%96%AD%E5%B7%A5%E5%85%B7Arthas%E9%AB%98%E7%BA%A7%E5%91%BD%E4%BB%A4%E6%95%99%E7%A8%8B/Arthastrace%E5%91%BD%E4%BB%A4/O1CN01HzatXZ1RgccrlT90M_!!6000000002141-2-tps-529-244.png\" alt=\"Arthas Boot\"></p>\n<h2 id=\"trace命令\"><a href=\"#trace命令\" class=\"headerlink\" title=\"trace命令\"></a>trace命令</h2><blockquote>\n<p>方法内部调用路径，并输出方法路径上的每个节点上耗时</p>\n</blockquote>\n<p><code>trace</code> 命令能主动搜索 <code>class-pattern</code>／<code>method-pattern</code> 对应的方法调用路径，渲染和统计整个调用链路上的所有性能开销和追踪调用链路。</p>\n<h4 id=\"参数说明\"><a href=\"#参数说明\" class=\"headerlink\" title=\"参数说明\"></a>参数说明</h4><table>\n<thead>\n<tr>\n<th>参数名称</th>\n<th>参数说明</th>\n</tr>\n</thead>\n<tbody><tr>\n<td><em>class-pattern</em></td>\n<td>类名表达式匹配</td>\n</tr>\n<tr>\n<td><em>method-pattern</em></td>\n<td>方法名表达式匹配</td>\n</tr>\n<tr>\n<td><em>condition-express</em></td>\n<td>条件表达式</td>\n</tr>\n<tr>\n<td>[E]</td>\n<td>开启正则表达式匹配，默认为通配符匹配</td>\n</tr>\n<tr>\n<td><code>[n:]</code></td>\n<td>命令执行次数</td>\n</tr>\n<tr>\n<td><code>#cost</code></td>\n<td>方法执行耗时</td>\n</tr>\n</tbody></table>\n<p>这里重点要说明的是观察表达式，观察表达式的构成主要由 \bognl 表达式组成，所以你可以这样写<code>&quot;&#123;params,returnObj&#125;&quot;</code>，只要是一个合法的 ognl 表达式，都能被正常支持。</p>\n<p>观察的维度也比较多，主要体现在参数 <code>advice</code> 的数据结构上。<code>Advice</code> 参数最主要是封装了通知节点的所有信息。 请参考<a href=\"https://shell.aliyun.com/tutorial\">表达式核心变量</a>中关于该节点的描述。</p>\n<ul>\n<li>特殊用法请参考：<a href=\"https://github.com/alibaba/arthas/issues/71\">https://github.com/alibaba/arthas/issues/71</a></li>\n<li>OGNL表达式官网：<a href=\"https://commons.apache.org/proper/commons-ognl/language-guide.html\">https://commons.apache.org/proper/commons-ognl/language-guide.html</a></li>\n</ul>\n<p>很多时候我们只想看到某个方法的rt大于某个时间之后的trace结果，现在Arthas可以按照方法执行的耗时来进行过滤了，例如<code>trace *StringUtils isBlank &#39;#cost&gt;100&#39;</code>表示当执行时间超过100ms的时候，才会输出trace的结果。</p>\n<blockquote>\n<p>watch/stack/trace这个三个命令都支持<code>#cost</code></p>\n</blockquote>\n<h4 id=\"注意事项\"><a href=\"#注意事项\" class=\"headerlink\" title=\"注意事项\"></a>注意事项</h4><p><code>trace</code> 能方便的帮助你定位和发现因 RT 高而导致的性能问题缺陷，但其每次只能跟踪一级方法的调用链路。</p>\n<p>参考：<a href=\"https://github.com/alibaba/arthas/issues/597\">Trace命令的实现原理</a></p>\n<p>3.3.0 版本后，可以使用动态Trace功能，不断增加新的匹配类，参考下面的示例。</p>\n<h4 id=\"使用参考\"><a href=\"#使用参考\" class=\"headerlink\" title=\"使用参考\"></a>使用参考</h4><h5 id=\"trace函数\"><a href=\"#trace函数\" class=\"headerlink\" title=\"trace函数\"></a>trace函数</h5><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">trace demo.MathGame run</span><br></pre></td></tr></table></figure>\n\n<p>按<code>q</code>或者<code>Ctrl+c</code>退出</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">q</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight console\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> trace demo.MathGame run</span></span><br><span class=\"line\">Press Q or Ctrl+C to abort.</span><br><span class=\"line\">Affect(class-cnt:1 , method-cnt:1) cost in 28 ms.</span><br><span class=\"line\">`---ts=2019-12-04 00:45:08;thread_name=main;id=1;is_daemon=false;priority=5;TCCL=sun.misc.Launcher$AppClassLoader@3d4eac69;    `---[0.617465ms] demo.MathGame:run()</span><br><span class=\"line\">        `---[0.078946ms] demo.MathGame:primeFactors() #24 [throws Exception]</span><br><span class=\"line\"></span><br><span class=\"line\">`---ts=2019-12-04 00:45:09;thread_name=main;id=1;is_daemon=false;priority=5;TCCL=sun.misc.Launcher$AppClassLoader@3d4eac69;    `---[1.276874ms] demo.MathGame:run()</span><br><span class=\"line\">        `---[0.03752ms] demo.MathGame:primeFactors() #24 [throws Exception]</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"trace次数限制\"><a href=\"#trace次数限制\" class=\"headerlink\" title=\"trace次数限制\"></a>trace次数限制</h5><p>如果方法调用的次数很多，那么可以用<code>-n</code>参数指定捕捉结果的次数。比如下面的例子里，捕捉到一次调用就退出命令。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">trace demo.MathGame run -n 1</span><br></pre></td></tr></table></figure>\n\n<p>按<code>q</code>或者<code>Ctrl+c</code>退出</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">q</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight console\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> trace demo.MathGame run -n 1</span></span><br><span class=\"line\">Press Q or Ctrl+C to abort.</span><br><span class=\"line\">Affect(class-cnt:1 , method-cnt:1) cost in 20 ms.</span><br><span class=\"line\">`---ts=2019-12-04 00:45:53;thread_name=main;id=1;is_daemon=false;priority=5;TCCL=sun.misc.Launcher$AppClassLoader@3d4eac69;    `---[0.549379ms] demo.MathGame:run()</span><br><span class=\"line\">        +---[0.059839ms] demo.MathGame:primeFactors() #24</span><br><span class=\"line\">        `---[0.232887ms] demo.MathGame:print() #25</span><br><span class=\"line\"></span><br><span class=\"line\">Command execution times exceed limit: 1, so command will exit. You can set it with -n option.</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"包含jdk的函数\"><a href=\"#包含jdk的函数\" class=\"headerlink\" title=\"包含jdk的函数\"></a>包含jdk的函数</h5><ul>\n<li><code>--skipJDKMethod &lt;value&gt;</code> skip jdk method trace, default value true.</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">trace --skipJDKMethod <span class=\"literal\">false</span> demo.MathGame run</span><br></pre></td></tr></table></figure>\n\n<p>按<code>q</code>或者<code>Ctrl+c</code>退出</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">q</span><br></pre></td></tr></table></figure>\n\n<p>默认情况下，trace不会包含jdk里的函数调用，如果希望trace jdk里的函数，需要显式设置<code>--skipJDKMethod false</code>。</p>\n<figure class=\"highlight console\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> trace --skipJDKMethod <span class=\"literal\">false</span> demo.MathGame run</span></span><br><span class=\"line\">Press Q or Ctrl+C to abort.</span><br><span class=\"line\">Affect(class-cnt:1 , method-cnt:1) cost in 60 ms.</span><br><span class=\"line\">`---ts=2019-12-04 00:44:41;thread_name=main;id=1;is_daemon=false;priority=5;TCCL=sun.misc.Launcher$AppClassLoader@3d4eac69;    `---[1.357742ms] demo.MathGame:run()</span><br><span class=\"line\">        +---[0.028624ms] java.util.Random:nextInt() #23</span><br><span class=\"line\">        +---[0.045534ms] demo.MathGame:primeFactors() #24 [throws Exception]</span><br><span class=\"line\">        +---[0.005372ms] java.lang.StringBuilder:&lt;init&gt;() #28</span><br><span class=\"line\">        +---[0.012257ms] java.lang.Integer:valueOf() #28</span><br><span class=\"line\">        +---[0.234537ms] java.lang.String:format() #28</span><br><span class=\"line\">        +---[min=0.004539ms,max=0.005778ms,total=0.010317ms,count=2] java.lang.StringBuilder:append() #28</span><br><span class=\"line\">        +---[0.013777ms] java.lang.Exception:getMessage() #28</span><br><span class=\"line\">        +---[0.004935ms] java.lang.StringBuilder:toString() #28</span><br><span class=\"line\">        `---[0.06941ms] java.io.PrintStream:println() #28</span><br><span class=\"line\"></span><br><span class=\"line\">`---ts=2019-12-04 00:44:42;thread_name=main;id=1;is_daemon=false;priority=5;TCCL=sun.misc.Launcher$AppClassLoader@3d4eac69;    `---[3.030432ms] demo.MathGame:run()</span><br><span class=\"line\">        +---[0.010473ms] java.util.Random:nextInt() #23</span><br><span class=\"line\">        +---[0.023715ms] demo.MathGame:primeFactors() #24 [throws Exception]</span><br><span class=\"line\">        +---[0.005198ms] java.lang.StringBuilder:&lt;init&gt;() #28</span><br><span class=\"line\">        +---[0.006405ms] java.lang.Integer:valueOf() #28</span><br><span class=\"line\">        +---[0.178583ms] java.lang.String:format() #28</span><br><span class=\"line\">        +---[min=0.011636ms,max=0.838077ms,total=0.849713ms,count=2] java.lang.StringBuilder:append() #28</span><br><span class=\"line\">        +---[0.008747ms] java.lang.Exception:getMessage() #28</span><br><span class=\"line\">        +---[0.019768ms] java.lang.StringBuilder:toString() #28</span><br><span class=\"line\">        `---[0.076457ms] java.io.PrintStream:println() #28</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"据调用耗时过滤\"><a href=\"#据调用耗时过滤\" class=\"headerlink\" title=\"据调用耗时过滤\"></a>据调用耗时过滤</h5><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">trace demo.MathGame run <span class=\"string\">&#x27;#cost &gt; 10&#x27;</span></span><br></pre></td></tr></table></figure>\n\n<p>按<code>q</code>或者<code>Ctrl+c</code>退出</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">q</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight console\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> trace demo.MathGame run <span class=\"string\">&#x27;#cost &gt; 10&#x27;</span></span></span><br><span class=\"line\">Press Ctrl+C to abort.</span><br><span class=\"line\">Affect(class-cnt:1 , method-cnt:1) cost in 41 ms.</span><br><span class=\"line\">`---ts=2018-12-04 01:12:02;thread_name=main;id=1;is_daemon=false;priority=5;TCCL=sun.misc.Launcher$AppClassLoader@3d4eac69;    `---[12.033735ms] demo.MathGame:run()</span><br><span class=\"line\">        +---[0.006783ms] java.util.Random:nextInt()</span><br><span class=\"line\">        +---[11.852594ms] demo.MathGame:primeFactors()</span><br><span class=\"line\">        `---[0.05447ms] demo.MathGame:print()</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>只会展示耗时大于10ms的调用路径，有助于在排查问题的时候，只关注异常情况</p>\n</blockquote>\n<ul>\n<li>是不是很眼熟，没错，在 JProfiler 等收费软件中你曾经见识类似的功能，这里你将可以通过命令就能打印出指定调用路径。 友情提醒下，<code>trace</code> 在执行的过程中本身是会有一定的性能开销，在统计的报告中并未像 JProfiler 一样预先减去其自身的统计开销。所以这统计出来有些许的不准，渲染路径上调用的类、方法越多，性能偏差越大。但还是能让你看清一些事情的。</li>\n<li>[12.033735ms] 的含义，<code>12.033735</code> 的含义是：当前节点在当前步骤的耗时，单位为毫秒</li>\n<li>[0,0,0ms,11]xxx:yyy() [throws Exception]，对该方法中相同的方法调用进行了合并，<code>0,0,0ms,11</code> 表示方法调用耗时，<code>min,max,total,count</code>；<code>throws Exception</code> 表明该方法调用中存在异常返回</li>\n<li>这里存在一个统计不准确的问题，就是所有方法耗时加起来可能会小于该监测方法的总耗时，这个是由于 Arthas 本身的逻辑会有一定的耗时</li>\n</ul>\n<h5 id=\"trace多个类或者多个函数\"><a href=\"#trace多个类或者多个函数\" class=\"headerlink\" title=\"trace多个类或者多个函数\"></a>trace多个类或者多个函数</h5><p>trace命令只会trace匹配到的函数里的子调用，并不会向下trace多层。因为trace是代价比较贵的，多层trace可能会导致最终要trace的类和函数非常多。</p>\n<p>可以用正则表匹配路径上的多个类和函数，一定程度上达到多层trace的效果。</p>\n<figure class=\"highlight console\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">trace -E com.test.ClassA|org.test.ClassB method1|method2|method3</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"动态trace\"><a href=\"#动态trace\" class=\"headerlink\" title=\"动态trace\"></a>动态trace</h4><p>3.3.0 版本后支持。 打开终端1，trace <code>run</code>函数，可以看到打印出 <code>listenerId: 1</code>：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">trace demo.MathGame run</span><br></pre></td></tr></table></figure>\n\n<p>按<code>q</code>或者<code>Ctrl+c</code>退出</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">q</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight console\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">[arthas@59161]$</span><span class=\"bash\"> trace demo.MathGame run</span></span><br><span class=\"line\">Press Q or Ctrl+C to abort.</span><br><span class=\"line\">Affect(class count: 1 , method count: 1) cost in 112 ms, listenerId: 1</span><br><span class=\"line\">`---ts=2020-07-09 16:48:11;thread_name=main;id=1;is_daemon=false;priority=5;TCCL=sun.misc.Launcher$AppClassLoader@3d4eac69;    `---[1.389634ms] demo.MathGame:run()</span><br><span class=\"line\">        `---[0.123934ms] demo.MathGame:primeFactors() #24 [throws Exception]</span><br><span class=\"line\"></span><br><span class=\"line\">`---ts=2020-07-09 16:48:12;thread_name=main;id=1;is_daemon=false;priority=5;TCCL=sun.misc.Launcher$AppClassLoader@3d4eac69;    `---[3.716391ms] demo.MathGame:run()</span><br><span class=\"line\">        +---[3.182813ms] demo.MathGame:primeFactors() #24</span><br><span class=\"line\">        `---[0.167786ms] demo.MathGame:print() #25</span><br></pre></td></tr></table></figure>\n\n<p>现在想要深入子函数<code>primeFactors</code>，可以打开一个新终端2，使用<code>telnet localhost 3658</code>连接上arthas，再trace <code>primeFactors</code>时，指定<code>listenerId</code>。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">trace demo.MathGame primeFactors --listenerId 1</span><br></pre></td></tr></table></figure>\n\n<p>按<code>q</code>或者<code>Ctrl+c</code>退出</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">q</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight console\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">[arthas@59161]$</span><span class=\"bash\"> trace demo.MathGame primeFactors --listenerId 1</span></span><br><span class=\"line\">Press Q or Ctrl+C to abort.</span><br><span class=\"line\">Affect(class count: 1 , method count: 1) cost in 34 ms, listenerId: 1</span><br></pre></td></tr></table></figure>\n\n<p>这时终端2打印的结果，说明已经增强了一个函数：<code>Affect(class count: 1 , method count: 1)</code>，但不再打印更多的结果。</p>\n<p>再查看终端1，可以发现trace的结果增加了一层，打印了<code>primeFactors</code>函数里的内容：</p>\n<figure class=\"highlight console\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">`---ts=2020-07-09 16:49:29;thread_name=main;id=1;is_daemon=false;priority=5;TCCL=sun.misc.Launcher$AppClassLoader@3d4eac69;    `---[0.492551ms] demo.MathGame:run()</span><br><span class=\"line\">        `---[0.113929ms] demo.MathGame:primeFactors() #24 [throws Exception]</span><br><span class=\"line\">            `---[0.061462ms] demo.MathGame:primeFactors()</span><br><span class=\"line\">                `---[0.001018ms] throw:java.lang.IllegalArgumentException() #46</span><br><span class=\"line\"></span><br><span class=\"line\">`---ts=2020-07-09 16:49:30;thread_name=main;id=1;is_daemon=false;priority=5;TCCL=sun.misc.Launcher$AppClassLoader@3d4eac69;    `---[0.409446ms] demo.MathGame:run()</span><br><span class=\"line\">        +---[0.232606ms] demo.MathGame:primeFactors() #24</span><br><span class=\"line\">        |   `---[0.1294ms] demo.MathGame:primeFactors()</span><br><span class=\"line\">        `---[0.084025ms] demo.MathGame:print() #25</span><br></pre></td></tr></table></figure>\n\n<p>通过指定<code>listenerId</code>的方式动态trace，可以不断深入。另外 <code>watch</code>/<code>tt</code>/<code>monitor</code>等命令也支持类似的功能。</p>\n<h2 id=\"更多信息\"><a href=\"#更多信息\" class=\"headerlink\" title=\"更多信息\"></a>更多信息</h2><p>在“trace”中，我们演示了了Arthas的trace命令。如果有更多的技巧或者使用疑问，欢迎在Issue里提出。</p>\n<ul>\n<li>Issues: <a href=\"https://github.com/alibaba/arthas/issues\">https://github.com/alibaba/arthas/issues</a></li>\n<li>文档： <a href=\"https://arthas.aliyun.com/doc\">https://arthas.aliyun.com/doc</a></li>\n</ul>\n<p>如果您在使用Arthas，请让我们知道。您的使用对我们非常重要：<a href=\"https://github.com/alibaba/arthas/issues/111\">查看</a></p>\n<p>文章拷贝来源：<a href=\"https://start.aliyun.com/course?spm=a2ck6.17690074.0.0.28bc2e7dHTphXs&amp;id=PaiFAkJM\">https://start.aliyun.com/course?spm=a2ck6.17690074.0.0.28bc2e7dHTphXs&amp;id=PaiFAkJM</a></p>\n"},{"title":"Arthas tt命令","date":"2021-08-07T01:51:36.000Z","_content":"\n<!-- toc -->\n\n![Arthas](arthas.png)\n\n`Arthas` 是Alibaba开源的Java诊断工具，深受开发者喜爱。在线排查问题，无需重启；动态跟踪Java代码；实时监控JVM状态。\n\n`Arthas` 支持JDK 6+，支持Linux/Mac/Windows，采用命令行交互模式，同时提供丰富的 `Tab` 自动补全功能，进一步方便进行问题的定位和诊断。\n\n当你遇到以下类似问题而束手无策时，Arthas可以帮助你解决：\n\n- 这个类从哪个 jar 包加载的？为什么会报各种类相关的 Exception？\n- 我改的代码为什么没有执行到？难道是我没 commit？分支搞错了？\n- 遇到问题无法在线上 debug，难道只能通过加日志再重新发布吗？\n- 线上遇到某个用户的数据处理有问题，但线上同样无法 debug，线下无法重现！\n- 是否有一个全局视角来查看系统的运行状况？\n- 有什么办法可以监控到JVM的实时运行状态？\n- 怎么快速定位应用的热点，生成火焰图？\n\n本教程会以一个简单的应用为例，演示tt命令。\n\n- Github: https://github.com/alibaba/arthas\n- 文档: https://arthas.aliyun.com/doc/\n\n## 启动arthas demo\n\n下载`arthas-demo.jar`，再用`java -jar`命令启动：\n\n```bash\nwget https://arthas.aliyun.com/arthas-demo.jar;java -jar arthas-demo.jar\n```\n\n`arthas-demo`是一个很简单的程序，它随机生成整数，再执行因式分解，把结果打印出来。如果生成的随机数是负数，则会打印提示信息。\n\n## 启动arthas-boot\n\n在新的`Terminal 2`里，下载`arthas-boot.jar`，再用`java -jar`命令启动：\n\n```bash\nwget https://arthas.aliyun.com/arthas-boot.jar;java -jar arthas-boot.jar\n```\n\n`arthas-boot`是`Arthas`的启动程序，它启动后，会列出所有的Java进程，用户可以选择需要诊断的目标进程。\n\n选择第一个进程，输入 `1` ，再`Enter/回车`：\n\n```bash\n1\n```\n\nAttach成功之后，会打印Arthas LOGO。输入 `help` 可以获取到更多的帮助信息。\n\n```bash\nhelp\n```\n\n![Arthas Boot](O1CN01HzatXZ1RgccrlT90M_!!6000000002141-2-tps-529-244.png)\n\n## tt命令\n\n> 方法执行数据的时空隧道，记录下指定方法每次调用的入参和返回信息，并能对这些不同的时间下调用进行观测\n\n`watch` 虽然很方便和灵活，但需要提前想清楚观察表达式的拼写，这对排查问题而言要求太高，因为很多时候我们并不清楚问题出自于何方，只能靠蛛丝马迹进行猜测。\n\n这个时候如果能记录下当时方法调用的所有入参和返回值、抛出的异常会对整个问题的思考与判断非常有帮助。\n\n于是乎，TimeTunnel 命令就诞生了。\n\n#### 使用参考\n\n##### 记录调用\n\n对于一个最基本的使用来说，就是记录下当前方法的每次调用环境现场。\n\n```bash\ntt -t demo.MathGame primeFactors\n```\n\n按`q`或者`Ctrl+c`退出\n\n```bash\nq\n```\n\n```console\n$ tt -t demo.MathGame primeFactors\nPress Ctrl+C to abort.\nAffect(class-cnt:1 , method-cnt:1) cost in 66 ms.\n INDEX   TIMESTAMP            COST(ms)  IS-RET  IS-EXP   OBJECT         CLASS                          METHOD\n-------------------------------------------------------------------------------------------------------------------------------------\n 1000    2018-12-04 11:15:38  1.096236  false   true     0x4b67cf4d     MathGame                       primeFactors\n 1001    2018-12-04 11:15:39  0.191848  false   true     0x4b67cf4d     MathGame                       primeFactors\n 1002    2018-12-04 11:15:40  0.069523  false   true     0x4b67cf4d     MathGame                       primeFactors\n 1003    2018-12-04 11:15:41  0.186073  false   true     0x4b67cf4d     MathGame                       primeFactors\n 1004    2018-12-04 11:15:42  17.76437  true    false    0x4b67cf4d     MathGame                       primeFactors\n```\n\n- 命令参数解析\n\n  - `-t`\n\n    tt 命令有很多个主参数，`-t` 就是其中之一。这个参数的表明希望记录下类 `*Test` 的 `print` 方法的每次执行情况。\n\n  - `-n 3`\n\n    当你执行一个调用量不高的方法时可能你还能有足够的时间用 `CTRL+C` 中断 tt 命令记录的过程，但如果遇到调用量非常大的方法，瞬间就能将你的 JVM 内存撑爆。\n\n    此时你可以通过 `-n` 参数指定你需要记录的次数，当达到记录次数时 Arthas 会主动中断tt命令的记录过程，避免人工操作无法停止的情况。\n\n- 表格字段说明\n\n| 表格字段  | 字段解释                                                     |\n| --------- | ------------------------------------------------------------ |\n| INDEX     | 时间片段记录编号，每一个编号代表着一次调用，后续tt还有很多命令都是基于此编号指定记录操作，非常重要。 |\n| TIMESTAMP | 方法执行的本机时间，记录了这个时间片段所发生的本机时间       |\n| COST(ms)  | 方法执行的耗时                                               |\n| IS-RET    | 方法是否以正常返回的形式结束                                 |\n| IS-EXP    | 方法是否以抛异常的形式结束                                   |\n| OBJECT    | 执行对象的`hashCode()`，注意，曾经有人误认为是对象在JVM中的内存地址，但很遗憾他不是。但他能帮助你简单的标记当前执行方法的类实体 |\n| CLASS     | 执行的类名                                                   |\n| METHOD    | 执行的方法名                                                 |\n\n- 条件表达式\n\n  不知道大家是否有在使用过程中遇到以下困惑\n\n  - Arthas 似乎很难区分出重载的方法\n  - 我只需要观察特定参数，但是 tt 却全部都给我记录了下来\n\n  条件表达式也是用 `\bOGNL` 来编写，核心的判断对象依然是 `Advice` 对象。除了 `tt` 命令之外，`watch`、`trace`、`stack` 命令也都支持条件表达式。\n\n- 解决方法重载\n\n  `tt -t *Test print params.length==1`\n\n  通过制定参数个数的形式解决不同的方法签名，如果参数个数一样，你还可以这样写\n\n  `tt -t *Test print 'params[1] instanceof Integer'`\n\n- 解决指定参数\n\n  `tt -t *Test print params[0].mobile==\"13989838402\"`\n\n- 构成条件表达式的 `Advice` 对象\n\n  前边看到了很多条件表达式中，都使用了 `params[0]`，有关这个变量的介绍，请参考[表达式核心变量](https://arthas.aliyun.com/doc/advice-class.html)\n\n##### 检索调用记录\n\n当你用 `tt` 记录了一大片的时间片段之后，你希望能从中筛选出自己需要的时间片段，这个时候你就需要对现有记录进行检索。\n\n假设我们有这些记录\n\n```bash\ntt -l\n```\n\n```console\n$ tt -l\n INDEX   TIMESTAMP            COST(ms)  IS-RET  IS-EXP   OBJECT         CLASS                          METHOD\n-------------------------------------------------------------------------------------------------------------------------------------\n 1000    2018-12-04 11:15:38  1.096236  false   true     0x4b67cf4d     MathGame                       primeFactors\n 1001    2018-12-04 11:15:39  0.191848  false   true     0x4b67cf4d     MathGame                       primeFactors\n 1002    2018-12-04 11:15:40  0.069523  false   true     0x4b67cf4d     MathGame                       primeFactors\n 1003    2018-12-04 11:15:41  0.186073  false   true     0x4b67cf4d     MathGame                       primeFactors\n 1004    2018-12-04 11:15:42  17.76437  true    false    0x4b67cf4d     MathGame                       primeFactors\n                              9\n 1005    2018-12-04 11:15:43  0.4776    false   true     0x4b67cf4d     MathGame                       primeFactors\nAffect(row-cnt:6) cost in 4 ms.\n```\n\n我需要筛选出 `primeFactors` 方法的调用信息\n\n```bash\ntt -s 'method.name==\"primeFactors\"'\n```\n\n```console\n$ tt -s 'method.name==\"primeFactors\"'\n INDEX   TIMESTAMP            COST(ms)  IS-RET  IS-EXP   OBJECT         CLASS                          METHOD\n-------------------------------------------------------------------------------------------------------------------------------------\n 1000    2018-12-04 11:15:38  1.096236  false   true     0x4b67cf4d     MathGame                       primeFactors\n 1001    2018-12-04 11:15:39  0.191848  false   true     0x4b67cf4d     MathGame                       primeFactors\n 1002    2018-12-04 11:15:40  0.069523  false   true     0x4b67cf4d     MathGame                       primeFactors\n 1003    2018-12-04 11:15:41  0.186073  false   true     0x4b67cf4d     MathGame                       primeFactors\n 1004    2018-12-04 11:15:42  17.76437  true    false    0x4b67cf4d     MathGame                       primeFactors\n                              9\n 1005    2018-12-04 11:15:43  0.4776    false   true     0x4b67cf4d     MathGame                       primeFactors\nAffect(row-cnt:6) cost in 607 ms.\n```\n\n你需要一个 `-s` 参数。同样的，搜索表达式的核心对象依旧是 `Advice` 对象。\n\n##### 查看调用信息\n\n对于具体一个时间片的信息而言，你可以通过 `-i` 参数后边跟着对应的 `INDEX` 编号查看到他的详细信息。\n\n```bash\ntt -i 1003\n```\n\n```console\n$ tt -i 1003\n INDEX            1003\n GMT-CREATE       2018-12-04 11:15:41\n COST(ms)         0.186073\n OBJECT           0x4b67cf4d\n CLASS            demo.MathGame\n METHOD           primeFactors\n IS-RETURN        false\n IS-EXCEPTION     true\n PARAMETERS[0]    @Integer[-564322413]\n THROW-EXCEPTION  java.lang.IllegalArgumentException: number is: -564322413, need >= 2\n                      at demo.MathGame.primeFactors(MathGame.java:46)\n                      at demo.MathGame.run(MathGame.java:24)\n                      at demo.MathGame.main(MathGame.java:16)\n\nAffect(row-cnt:1) cost in 11 ms.\n```\n\n##### 重做一次调用\n\n当你稍稍做了一些调整之后，你可能需要前端系统重新触发一次你的调用，此时得求爷爷告奶奶的需要前端配合联调的同学再次发起一次调用。而有些场景下，这个调用不是这么好触发的。\n\n`tt` 命令由于保存了当时调用的所有现场信息，所以我们可以自己主动对一个 `INDEX` 编号的时间片自主发起一次调用，从而解放你的沟通成本。此时你需要 `-p` 参数。通过 `--replay-times` 指定 调用次数，通过 `--replay-interval` 指定多次调用间隔(单位ms, 默认1000ms)\n\n```bash\ntt -i 1004 -p\n```\n\n```console\n$ tt -i 1004 -p\n RE-INDEX       1004\n GMT-REPLAY     2018-12-04 11:26:00\n OBJECT         0x4b67cf4d\n CLASS          demo.MathGame\n METHOD         primeFactors\n PARAMETERS[0]  @Integer[946738738]\n IS-RETURN      true\n IS-EXCEPTION   false\n COST(ms)         0.186073\n RETURN-OBJ     @ArrayList[\n                    @Integer[2],\n                    @Integer[11],\n                    @Integer[17],\n                    @Integer[2531387],\n                ]\nTime fragment[1004] successfully replayed.\nAffect(row-cnt:1) cost in 14 ms.\n```\n\n你会发现结果虽然一样，但调用的路径发生了变化，有原来的程序发起变成了 Arthas 自己的内部线程发起的调用了。\n\n- 需要强调的点\n\n  1. **ThreadLocal 信息丢失**\n\n     很多框架偷偷的将一些环境变量信息塞到了发起调用线程的 ThreadLocal 中，由于调用线程发生了变化，这些 ThreadLocal 线程信息无法通过 Arthas 保存，所以这些信息将会丢失。\n\n     一些常见的 CASE 比如：鹰眼的 TraceId 等。\n\n  2. **引用的对象**\n\n     需要强调的是，`tt` 命令是将当前环境的对象引用保存起来，但仅仅也只能保存一个引用而已。如果方法内部对入参进行了变更，或者返回的对象经过了后续的处理，那么在 `tt` 查看的时候将无法看到当时最准确的值。这也是为什么 `watch` 命令存在的意义。\n\n## 更多信息\n\n在“tt”中，我们演示了了Arthas的tt命令。如果有更多的技巧或者使用疑问，欢迎在Issue里提出。\n\n- Issues: https://github.com/alibaba/arthas/issues\n- 文档： https://arthas.aliyun.com/doc\n\n如果您在使用Arthas，请让我们知道。您的使用对我们非常重要：[查看](https://github.com/alibaba/arthas/issues/111)\n\n文章拷贝来源：https://start.aliyun.com/course?spm=a2ck6.17690074.0.0.28bc2e7dHTphXs&id=PaiFAkJM","source":"_posts/Java诊断工具Arthas高级命令教程/Arthastt命令.md","raw":"---\ntitle: Arthas tt命令\ndate: 2021-08-07 09:51:36\ntags: ['Java 诊断工具 Arthas 高级命令教程']\n---\n\n<!-- toc -->\n\n![Arthas](arthas.png)\n\n`Arthas` 是Alibaba开源的Java诊断工具，深受开发者喜爱。在线排查问题，无需重启；动态跟踪Java代码；实时监控JVM状态。\n\n`Arthas` 支持JDK 6+，支持Linux/Mac/Windows，采用命令行交互模式，同时提供丰富的 `Tab` 自动补全功能，进一步方便进行问题的定位和诊断。\n\n当你遇到以下类似问题而束手无策时，Arthas可以帮助你解决：\n\n- 这个类从哪个 jar 包加载的？为什么会报各种类相关的 Exception？\n- 我改的代码为什么没有执行到？难道是我没 commit？分支搞错了？\n- 遇到问题无法在线上 debug，难道只能通过加日志再重新发布吗？\n- 线上遇到某个用户的数据处理有问题，但线上同样无法 debug，线下无法重现！\n- 是否有一个全局视角来查看系统的运行状况？\n- 有什么办法可以监控到JVM的实时运行状态？\n- 怎么快速定位应用的热点，生成火焰图？\n\n本教程会以一个简单的应用为例，演示tt命令。\n\n- Github: https://github.com/alibaba/arthas\n- 文档: https://arthas.aliyun.com/doc/\n\n## 启动arthas demo\n\n下载`arthas-demo.jar`，再用`java -jar`命令启动：\n\n```bash\nwget https://arthas.aliyun.com/arthas-demo.jar;java -jar arthas-demo.jar\n```\n\n`arthas-demo`是一个很简单的程序，它随机生成整数，再执行因式分解，把结果打印出来。如果生成的随机数是负数，则会打印提示信息。\n\n## 启动arthas-boot\n\n在新的`Terminal 2`里，下载`arthas-boot.jar`，再用`java -jar`命令启动：\n\n```bash\nwget https://arthas.aliyun.com/arthas-boot.jar;java -jar arthas-boot.jar\n```\n\n`arthas-boot`是`Arthas`的启动程序，它启动后，会列出所有的Java进程，用户可以选择需要诊断的目标进程。\n\n选择第一个进程，输入 `1` ，再`Enter/回车`：\n\n```bash\n1\n```\n\nAttach成功之后，会打印Arthas LOGO。输入 `help` 可以获取到更多的帮助信息。\n\n```bash\nhelp\n```\n\n![Arthas Boot](O1CN01HzatXZ1RgccrlT90M_!!6000000002141-2-tps-529-244.png)\n\n## tt命令\n\n> 方法执行数据的时空隧道，记录下指定方法每次调用的入参和返回信息，并能对这些不同的时间下调用进行观测\n\n`watch` 虽然很方便和灵活，但需要提前想清楚观察表达式的拼写，这对排查问题而言要求太高，因为很多时候我们并不清楚问题出自于何方，只能靠蛛丝马迹进行猜测。\n\n这个时候如果能记录下当时方法调用的所有入参和返回值、抛出的异常会对整个问题的思考与判断非常有帮助。\n\n于是乎，TimeTunnel 命令就诞生了。\n\n#### 使用参考\n\n##### 记录调用\n\n对于一个最基本的使用来说，就是记录下当前方法的每次调用环境现场。\n\n```bash\ntt -t demo.MathGame primeFactors\n```\n\n按`q`或者`Ctrl+c`退出\n\n```bash\nq\n```\n\n```console\n$ tt -t demo.MathGame primeFactors\nPress Ctrl+C to abort.\nAffect(class-cnt:1 , method-cnt:1) cost in 66 ms.\n INDEX   TIMESTAMP            COST(ms)  IS-RET  IS-EXP   OBJECT         CLASS                          METHOD\n-------------------------------------------------------------------------------------------------------------------------------------\n 1000    2018-12-04 11:15:38  1.096236  false   true     0x4b67cf4d     MathGame                       primeFactors\n 1001    2018-12-04 11:15:39  0.191848  false   true     0x4b67cf4d     MathGame                       primeFactors\n 1002    2018-12-04 11:15:40  0.069523  false   true     0x4b67cf4d     MathGame                       primeFactors\n 1003    2018-12-04 11:15:41  0.186073  false   true     0x4b67cf4d     MathGame                       primeFactors\n 1004    2018-12-04 11:15:42  17.76437  true    false    0x4b67cf4d     MathGame                       primeFactors\n```\n\n- 命令参数解析\n\n  - `-t`\n\n    tt 命令有很多个主参数，`-t` 就是其中之一。这个参数的表明希望记录下类 `*Test` 的 `print` 方法的每次执行情况。\n\n  - `-n 3`\n\n    当你执行一个调用量不高的方法时可能你还能有足够的时间用 `CTRL+C` 中断 tt 命令记录的过程，但如果遇到调用量非常大的方法，瞬间就能将你的 JVM 内存撑爆。\n\n    此时你可以通过 `-n` 参数指定你需要记录的次数，当达到记录次数时 Arthas 会主动中断tt命令的记录过程，避免人工操作无法停止的情况。\n\n- 表格字段说明\n\n| 表格字段  | 字段解释                                                     |\n| --------- | ------------------------------------------------------------ |\n| INDEX     | 时间片段记录编号，每一个编号代表着一次调用，后续tt还有很多命令都是基于此编号指定记录操作，非常重要。 |\n| TIMESTAMP | 方法执行的本机时间，记录了这个时间片段所发生的本机时间       |\n| COST(ms)  | 方法执行的耗时                                               |\n| IS-RET    | 方法是否以正常返回的形式结束                                 |\n| IS-EXP    | 方法是否以抛异常的形式结束                                   |\n| OBJECT    | 执行对象的`hashCode()`，注意，曾经有人误认为是对象在JVM中的内存地址，但很遗憾他不是。但他能帮助你简单的标记当前执行方法的类实体 |\n| CLASS     | 执行的类名                                                   |\n| METHOD    | 执行的方法名                                                 |\n\n- 条件表达式\n\n  不知道大家是否有在使用过程中遇到以下困惑\n\n  - Arthas 似乎很难区分出重载的方法\n  - 我只需要观察特定参数，但是 tt 却全部都给我记录了下来\n\n  条件表达式也是用 `\bOGNL` 来编写，核心的判断对象依然是 `Advice` 对象。除了 `tt` 命令之外，`watch`、`trace`、`stack` 命令也都支持条件表达式。\n\n- 解决方法重载\n\n  `tt -t *Test print params.length==1`\n\n  通过制定参数个数的形式解决不同的方法签名，如果参数个数一样，你还可以这样写\n\n  `tt -t *Test print 'params[1] instanceof Integer'`\n\n- 解决指定参数\n\n  `tt -t *Test print params[0].mobile==\"13989838402\"`\n\n- 构成条件表达式的 `Advice` 对象\n\n  前边看到了很多条件表达式中，都使用了 `params[0]`，有关这个变量的介绍，请参考[表达式核心变量](https://arthas.aliyun.com/doc/advice-class.html)\n\n##### 检索调用记录\n\n当你用 `tt` 记录了一大片的时间片段之后，你希望能从中筛选出自己需要的时间片段，这个时候你就需要对现有记录进行检索。\n\n假设我们有这些记录\n\n```bash\ntt -l\n```\n\n```console\n$ tt -l\n INDEX   TIMESTAMP            COST(ms)  IS-RET  IS-EXP   OBJECT         CLASS                          METHOD\n-------------------------------------------------------------------------------------------------------------------------------------\n 1000    2018-12-04 11:15:38  1.096236  false   true     0x4b67cf4d     MathGame                       primeFactors\n 1001    2018-12-04 11:15:39  0.191848  false   true     0x4b67cf4d     MathGame                       primeFactors\n 1002    2018-12-04 11:15:40  0.069523  false   true     0x4b67cf4d     MathGame                       primeFactors\n 1003    2018-12-04 11:15:41  0.186073  false   true     0x4b67cf4d     MathGame                       primeFactors\n 1004    2018-12-04 11:15:42  17.76437  true    false    0x4b67cf4d     MathGame                       primeFactors\n                              9\n 1005    2018-12-04 11:15:43  0.4776    false   true     0x4b67cf4d     MathGame                       primeFactors\nAffect(row-cnt:6) cost in 4 ms.\n```\n\n我需要筛选出 `primeFactors` 方法的调用信息\n\n```bash\ntt -s 'method.name==\"primeFactors\"'\n```\n\n```console\n$ tt -s 'method.name==\"primeFactors\"'\n INDEX   TIMESTAMP            COST(ms)  IS-RET  IS-EXP   OBJECT         CLASS                          METHOD\n-------------------------------------------------------------------------------------------------------------------------------------\n 1000    2018-12-04 11:15:38  1.096236  false   true     0x4b67cf4d     MathGame                       primeFactors\n 1001    2018-12-04 11:15:39  0.191848  false   true     0x4b67cf4d     MathGame                       primeFactors\n 1002    2018-12-04 11:15:40  0.069523  false   true     0x4b67cf4d     MathGame                       primeFactors\n 1003    2018-12-04 11:15:41  0.186073  false   true     0x4b67cf4d     MathGame                       primeFactors\n 1004    2018-12-04 11:15:42  17.76437  true    false    0x4b67cf4d     MathGame                       primeFactors\n                              9\n 1005    2018-12-04 11:15:43  0.4776    false   true     0x4b67cf4d     MathGame                       primeFactors\nAffect(row-cnt:6) cost in 607 ms.\n```\n\n你需要一个 `-s` 参数。同样的，搜索表达式的核心对象依旧是 `Advice` 对象。\n\n##### 查看调用信息\n\n对于具体一个时间片的信息而言，你可以通过 `-i` 参数后边跟着对应的 `INDEX` 编号查看到他的详细信息。\n\n```bash\ntt -i 1003\n```\n\n```console\n$ tt -i 1003\n INDEX            1003\n GMT-CREATE       2018-12-04 11:15:41\n COST(ms)         0.186073\n OBJECT           0x4b67cf4d\n CLASS            demo.MathGame\n METHOD           primeFactors\n IS-RETURN        false\n IS-EXCEPTION     true\n PARAMETERS[0]    @Integer[-564322413]\n THROW-EXCEPTION  java.lang.IllegalArgumentException: number is: -564322413, need >= 2\n                      at demo.MathGame.primeFactors(MathGame.java:46)\n                      at demo.MathGame.run(MathGame.java:24)\n                      at demo.MathGame.main(MathGame.java:16)\n\nAffect(row-cnt:1) cost in 11 ms.\n```\n\n##### 重做一次调用\n\n当你稍稍做了一些调整之后，你可能需要前端系统重新触发一次你的调用，此时得求爷爷告奶奶的需要前端配合联调的同学再次发起一次调用。而有些场景下，这个调用不是这么好触发的。\n\n`tt` 命令由于保存了当时调用的所有现场信息，所以我们可以自己主动对一个 `INDEX` 编号的时间片自主发起一次调用，从而解放你的沟通成本。此时你需要 `-p` 参数。通过 `--replay-times` 指定 调用次数，通过 `--replay-interval` 指定多次调用间隔(单位ms, 默认1000ms)\n\n```bash\ntt -i 1004 -p\n```\n\n```console\n$ tt -i 1004 -p\n RE-INDEX       1004\n GMT-REPLAY     2018-12-04 11:26:00\n OBJECT         0x4b67cf4d\n CLASS          demo.MathGame\n METHOD         primeFactors\n PARAMETERS[0]  @Integer[946738738]\n IS-RETURN      true\n IS-EXCEPTION   false\n COST(ms)         0.186073\n RETURN-OBJ     @ArrayList[\n                    @Integer[2],\n                    @Integer[11],\n                    @Integer[17],\n                    @Integer[2531387],\n                ]\nTime fragment[1004] successfully replayed.\nAffect(row-cnt:1) cost in 14 ms.\n```\n\n你会发现结果虽然一样，但调用的路径发生了变化，有原来的程序发起变成了 Arthas 自己的内部线程发起的调用了。\n\n- 需要强调的点\n\n  1. **ThreadLocal 信息丢失**\n\n     很多框架偷偷的将一些环境变量信息塞到了发起调用线程的 ThreadLocal 中，由于调用线程发生了变化，这些 ThreadLocal 线程信息无法通过 Arthas 保存，所以这些信息将会丢失。\n\n     一些常见的 CASE 比如：鹰眼的 TraceId 等。\n\n  2. **引用的对象**\n\n     需要强调的是，`tt` 命令是将当前环境的对象引用保存起来，但仅仅也只能保存一个引用而已。如果方法内部对入参进行了变更，或者返回的对象经过了后续的处理，那么在 `tt` 查看的时候将无法看到当时最准确的值。这也是为什么 `watch` 命令存在的意义。\n\n## 更多信息\n\n在“tt”中，我们演示了了Arthas的tt命令。如果有更多的技巧或者使用疑问，欢迎在Issue里提出。\n\n- Issues: https://github.com/alibaba/arthas/issues\n- 文档： https://arthas.aliyun.com/doc\n\n如果您在使用Arthas，请让我们知道。您的使用对我们非常重要：[查看](https://github.com/alibaba/arthas/issues/111)\n\n文章拷贝来源：https://start.aliyun.com/course?spm=a2ck6.17690074.0.0.28bc2e7dHTphXs&id=PaiFAkJM","slug":"Java诊断工具Arthas高级命令教程/Arthastt命令","published":1,"updated":"2021-08-07T05:35:37.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cks1cgr74002wfw5ibdgp2jl4","content":"<!-- toc -->\n\n<ul>\n<li><a href=\"#%E5%90%AF%E5%8A%A8arthas-demo\">启动arthas demo</a></li>\n<li><a href=\"#%E5%90%AF%E5%8A%A8arthas-boot\">启动arthas-boot</a></li>\n<li><a href=\"#tt%E5%91%BD%E4%BB%A4\">tt命令</a><ul>\n<li><a href=\"#%E4%BD%BF%E7%94%A8%E5%8F%82%E8%80%83\">使用参考</a><ul>\n<li><a href=\"#%E8%AE%B0%E5%BD%95%E8%B0%83%E7%94%A8\">记录调用</a></li>\n<li><a href=\"#%E6%A3%80%E7%B4%A2%E8%B0%83%E7%94%A8%E8%AE%B0%E5%BD%95\">检索调用记录</a></li>\n<li><a href=\"#%E6%9F%A5%E7%9C%8B%E8%B0%83%E7%94%A8%E4%BF%A1%E6%81%AF\">查看调用信息</a></li>\n<li><a href=\"#%E9%87%8D%E5%81%9A%E4%B8%80%E6%AC%A1%E8%B0%83%E7%94%A8\">重做一次调用</a></li>\n</ul>\n</li>\n</ul>\n</li>\n<li><a href=\"#%E6%9B%B4%E5%A4%9A%E4%BF%A1%E6%81%AF\">更多信息</a></li>\n</ul>\n<!-- tocstop -->\n\n<p><img src=\"/jlynet.github.io/2021/08/07/Java%E8%AF%8A%E6%96%AD%E5%B7%A5%E5%85%B7Arthas%E9%AB%98%E7%BA%A7%E5%91%BD%E4%BB%A4%E6%95%99%E7%A8%8B/Arthastt%E5%91%BD%E4%BB%A4/arthas.png\" alt=\"Arthas\"></p>\n<p><code>Arthas</code> 是Alibaba开源的Java诊断工具，深受开发者喜爱。在线排查问题，无需重启；动态跟踪Java代码；实时监控JVM状态。</p>\n<p><code>Arthas</code> 支持JDK 6+，支持Linux/Mac/Windows，采用命令行交互模式，同时提供丰富的 <code>Tab</code> 自动补全功能，进一步方便进行问题的定位和诊断。</p>\n<p>当你遇到以下类似问题而束手无策时，Arthas可以帮助你解决：</p>\n<ul>\n<li>这个类从哪个 jar 包加载的？为什么会报各种类相关的 Exception？</li>\n<li>我改的代码为什么没有执行到？难道是我没 commit？分支搞错了？</li>\n<li>遇到问题无法在线上 debug，难道只能通过加日志再重新发布吗？</li>\n<li>线上遇到某个用户的数据处理有问题，但线上同样无法 debug，线下无法重现！</li>\n<li>是否有一个全局视角来查看系统的运行状况？</li>\n<li>有什么办法可以监控到JVM的实时运行状态？</li>\n<li>怎么快速定位应用的热点，生成火焰图？</li>\n</ul>\n<p>本教程会以一个简单的应用为例，演示tt命令。</p>\n<ul>\n<li>Github: <a href=\"https://github.com/alibaba/arthas\">https://github.com/alibaba/arthas</a></li>\n<li>文档: <a href=\"https://arthas.aliyun.com/doc/\">https://arthas.aliyun.com/doc/</a></li>\n</ul>\n<h2><span id=\"启动arthas-demo\">启动arthas demo</span></h2><p>下载<code>arthas-demo.jar</code>，再用<code>java -jar</code>命令启动：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wget https://arthas.aliyun.com/arthas-demo.jar;java -jar arthas-demo.jar</span><br></pre></td></tr></table></figure>\n\n<p><code>arthas-demo</code>是一个很简单的程序，它随机生成整数，再执行因式分解，把结果打印出来。如果生成的随机数是负数，则会打印提示信息。</p>\n<h2><span id=\"启动arthas-boot\">启动arthas-boot</span></h2><p>在新的<code>Terminal 2</code>里，下载<code>arthas-boot.jar</code>，再用<code>java -jar</code>命令启动：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wget https://arthas.aliyun.com/arthas-boot.jar;java -jar arthas-boot.jar</span><br></pre></td></tr></table></figure>\n\n<p><code>arthas-boot</code>是<code>Arthas</code>的启动程序，它启动后，会列出所有的Java进程，用户可以选择需要诊断的目标进程。</p>\n<p>选择第一个进程，输入 <code>1</code> ，再<code>Enter/回车</code>：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1</span><br></pre></td></tr></table></figure>\n\n<p>Attach成功之后，会打印Arthas LOGO。输入 <code>help</code> 可以获取到更多的帮助信息。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">help</span></span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/jlynet.github.io/2021/08/07/Java%E8%AF%8A%E6%96%AD%E5%B7%A5%E5%85%B7Arthas%E9%AB%98%E7%BA%A7%E5%91%BD%E4%BB%A4%E6%95%99%E7%A8%8B/Arthastt%E5%91%BD%E4%BB%A4/O1CN01HzatXZ1RgccrlT90M_!!6000000002141-2-tps-529-244.png\" alt=\"Arthas Boot\"></p>\n<h2><span id=\"tt命令\">tt命令</span></h2><blockquote>\n<p>方法执行数据的时空隧道，记录下指定方法每次调用的入参和返回信息，并能对这些不同的时间下调用进行观测</p>\n</blockquote>\n<p><code>watch</code> 虽然很方便和灵活，但需要提前想清楚观察表达式的拼写，这对排查问题而言要求太高，因为很多时候我们并不清楚问题出自于何方，只能靠蛛丝马迹进行猜测。</p>\n<p>这个时候如果能记录下当时方法调用的所有入参和返回值、抛出的异常会对整个问题的思考与判断非常有帮助。</p>\n<p>于是乎，TimeTunnel 命令就诞生了。</p>\n<h4><span id=\"使用参考\">使用参考</span></h4><h5><span id=\"记录调用\">记录调用</span></h5><p>对于一个最基本的使用来说，就是记录下当前方法的每次调用环境现场。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">tt -t demo.MathGame primeFactors</span><br></pre></td></tr></table></figure>\n\n<p>按<code>q</code>或者<code>Ctrl+c</code>退出</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">q</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight console\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> tt -t demo.MathGame primeFactors</span></span><br><span class=\"line\">Press Ctrl+C to abort.</span><br><span class=\"line\">Affect(class-cnt:1 , method-cnt:1) cost in 66 ms.</span><br><span class=\"line\"> INDEX   TIMESTAMP            COST(ms)  IS-RET  IS-EXP   OBJECT         CLASS                          METHOD</span><br><span class=\"line\">-------------------------------------------------------------------------------------------------------------------------------------</span><br><span class=\"line\"> 1000    2018-12-04 11:15:38  1.096236  false   true     0x4b67cf4d     MathGame                       primeFactors</span><br><span class=\"line\"> 1001    2018-12-04 11:15:39  0.191848  false   true     0x4b67cf4d     MathGame                       primeFactors</span><br><span class=\"line\"> 1002    2018-12-04 11:15:40  0.069523  false   true     0x4b67cf4d     MathGame                       primeFactors</span><br><span class=\"line\"> 1003    2018-12-04 11:15:41  0.186073  false   true     0x4b67cf4d     MathGame                       primeFactors</span><br><span class=\"line\"> 1004    2018-12-04 11:15:42  17.76437  true    false    0x4b67cf4d     MathGame                       primeFactors</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><p>命令参数解析</p>\n<ul>\n<li><p><code>-t</code></p>\n<p>tt 命令有很多个主参数，<code>-t</code> 就是其中之一。这个参数的表明希望记录下类 <code>*Test</code> 的 <code>print</code> 方法的每次执行情况。</p>\n</li>\n<li><p><code>-n 3</code></p>\n<p>当你执行一个调用量不高的方法时可能你还能有足够的时间用 <code>CTRL+C</code> 中断 tt 命令记录的过程，但如果遇到调用量非常大的方法，瞬间就能将你的 JVM 内存撑爆。</p>\n<p>此时你可以通过 <code>-n</code> 参数指定你需要记录的次数，当达到记录次数时 Arthas 会主动中断tt命令的记录过程，避免人工操作无法停止的情况。</p>\n</li>\n</ul>\n</li>\n<li><p>表格字段说明</p>\n</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>表格字段</th>\n<th>字段解释</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>INDEX</td>\n<td>时间片段记录编号，每一个编号代表着一次调用，后续tt还有很多命令都是基于此编号指定记录操作，非常重要。</td>\n</tr>\n<tr>\n<td>TIMESTAMP</td>\n<td>方法执行的本机时间，记录了这个时间片段所发生的本机时间</td>\n</tr>\n<tr>\n<td>COST(ms)</td>\n<td>方法执行的耗时</td>\n</tr>\n<tr>\n<td>IS-RET</td>\n<td>方法是否以正常返回的形式结束</td>\n</tr>\n<tr>\n<td>IS-EXP</td>\n<td>方法是否以抛异常的形式结束</td>\n</tr>\n<tr>\n<td>OBJECT</td>\n<td>执行对象的<code>hashCode()</code>，注意，曾经有人误认为是对象在JVM中的内存地址，但很遗憾他不是。但他能帮助你简单的标记当前执行方法的类实体</td>\n</tr>\n<tr>\n<td>CLASS</td>\n<td>执行的类名</td>\n</tr>\n<tr>\n<td>METHOD</td>\n<td>执行的方法名</td>\n</tr>\n</tbody></table>\n<ul>\n<li><p>条件表达式</p>\n<p>不知道大家是否有在使用过程中遇到以下困惑</p>\n<ul>\n<li>Arthas 似乎很难区分出重载的方法</li>\n<li>我只需要观察特定参数，但是 tt 却全部都给我记录了下来</li>\n</ul>\n<p>条件表达式也是用 <code>\bOGNL</code> 来编写，核心的判断对象依然是 <code>Advice</code> 对象。除了 <code>tt</code> 命令之外，<code>watch</code>、<code>trace</code>、<code>stack</code> 命令也都支持条件表达式。</p>\n</li>\n<li><p>解决方法重载</p>\n<p><code>tt -t *Test print params.length==1</code></p>\n<p>通过制定参数个数的形式解决不同的方法签名，如果参数个数一样，你还可以这样写</p>\n<p><code>tt -t *Test print &#39;params[1] instanceof Integer&#39;</code></p>\n</li>\n<li><p>解决指定参数</p>\n<p><code>tt -t *Test print params[0].mobile==&quot;13989838402&quot;</code></p>\n</li>\n<li><p>构成条件表达式的 <code>Advice</code> 对象</p>\n<p>前边看到了很多条件表达式中，都使用了 <code>params[0]</code>，有关这个变量的介绍，请参考<a href=\"https://arthas.aliyun.com/doc/advice-class.html\">表达式核心变量</a></p>\n</li>\n</ul>\n<h5><span id=\"检索调用记录\">检索调用记录</span></h5><p>当你用 <code>tt</code> 记录了一大片的时间片段之后，你希望能从中筛选出自己需要的时间片段，这个时候你就需要对现有记录进行检索。</p>\n<p>假设我们有这些记录</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">tt -l</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight console\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> tt -l</span></span><br><span class=\"line\"> INDEX   TIMESTAMP            COST(ms)  IS-RET  IS-EXP   OBJECT         CLASS                          METHOD</span><br><span class=\"line\">-------------------------------------------------------------------------------------------------------------------------------------</span><br><span class=\"line\"> 1000    2018-12-04 11:15:38  1.096236  false   true     0x4b67cf4d     MathGame                       primeFactors</span><br><span class=\"line\"> 1001    2018-12-04 11:15:39  0.191848  false   true     0x4b67cf4d     MathGame                       primeFactors</span><br><span class=\"line\"> 1002    2018-12-04 11:15:40  0.069523  false   true     0x4b67cf4d     MathGame                       primeFactors</span><br><span class=\"line\"> 1003    2018-12-04 11:15:41  0.186073  false   true     0x4b67cf4d     MathGame                       primeFactors</span><br><span class=\"line\"> 1004    2018-12-04 11:15:42  17.76437  true    false    0x4b67cf4d     MathGame                       primeFactors</span><br><span class=\"line\">                              9</span><br><span class=\"line\"> 1005    2018-12-04 11:15:43  0.4776    false   true     0x4b67cf4d     MathGame                       primeFactors</span><br><span class=\"line\">Affect(row-cnt:6) cost in 4 ms.</span><br></pre></td></tr></table></figure>\n\n<p>我需要筛选出 <code>primeFactors</code> 方法的调用信息</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">tt -s <span class=\"string\">&#x27;method.name==&quot;primeFactors&quot;&#x27;</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight console\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> tt -s <span class=\"string\">&#x27;method.name==&quot;primeFactors&quot;&#x27;</span></span></span><br><span class=\"line\"> INDEX   TIMESTAMP            COST(ms)  IS-RET  IS-EXP   OBJECT         CLASS                          METHOD</span><br><span class=\"line\">-------------------------------------------------------------------------------------------------------------------------------------</span><br><span class=\"line\"> 1000    2018-12-04 11:15:38  1.096236  false   true     0x4b67cf4d     MathGame                       primeFactors</span><br><span class=\"line\"> 1001    2018-12-04 11:15:39  0.191848  false   true     0x4b67cf4d     MathGame                       primeFactors</span><br><span class=\"line\"> 1002    2018-12-04 11:15:40  0.069523  false   true     0x4b67cf4d     MathGame                       primeFactors</span><br><span class=\"line\"> 1003    2018-12-04 11:15:41  0.186073  false   true     0x4b67cf4d     MathGame                       primeFactors</span><br><span class=\"line\"> 1004    2018-12-04 11:15:42  17.76437  true    false    0x4b67cf4d     MathGame                       primeFactors</span><br><span class=\"line\">                              9</span><br><span class=\"line\"> 1005    2018-12-04 11:15:43  0.4776    false   true     0x4b67cf4d     MathGame                       primeFactors</span><br><span class=\"line\">Affect(row-cnt:6) cost in 607 ms.</span><br></pre></td></tr></table></figure>\n\n<p>你需要一个 <code>-s</code> 参数。同样的，搜索表达式的核心对象依旧是 <code>Advice</code> 对象。</p>\n<h5><span id=\"查看调用信息\">查看调用信息</span></h5><p>对于具体一个时间片的信息而言，你可以通过 <code>-i</code> 参数后边跟着对应的 <code>INDEX</code> 编号查看到他的详细信息。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">tt -i 1003</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight console\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> tt -i 1003</span></span><br><span class=\"line\"> INDEX            1003</span><br><span class=\"line\"> GMT-CREATE       2018-12-04 11:15:41</span><br><span class=\"line\"> COST(ms)         0.186073</span><br><span class=\"line\"> OBJECT           0x4b67cf4d</span><br><span class=\"line\"> CLASS            demo.MathGame</span><br><span class=\"line\"> METHOD           primeFactors</span><br><span class=\"line\"> IS-RETURN        false</span><br><span class=\"line\"> IS-EXCEPTION     true</span><br><span class=\"line\"> PARAMETERS[0]    @Integer[-564322413]</span><br><span class=\"line\"> THROW-EXCEPTION  java.lang.IllegalArgumentException: number is: -564322413, need &gt;= 2</span><br><span class=\"line\">                      at demo.MathGame.primeFactors(MathGame.java:46)</span><br><span class=\"line\">                      at demo.MathGame.run(MathGame.java:24)</span><br><span class=\"line\">                      at demo.MathGame.main(MathGame.java:16)</span><br><span class=\"line\"></span><br><span class=\"line\">Affect(row-cnt:1) cost in 11 ms.</span><br></pre></td></tr></table></figure>\n\n<h5><span id=\"重做一次调用\">重做一次调用</span></h5><p>当你稍稍做了一些调整之后，你可能需要前端系统重新触发一次你的调用，此时得求爷爷告奶奶的需要前端配合联调的同学再次发起一次调用。而有些场景下，这个调用不是这么好触发的。</p>\n<p><code>tt</code> 命令由于保存了当时调用的所有现场信息，所以我们可以自己主动对一个 <code>INDEX</code> 编号的时间片自主发起一次调用，从而解放你的沟通成本。此时你需要 <code>-p</code> 参数。通过 <code>--replay-times</code> 指定 调用次数，通过 <code>--replay-interval</code> 指定多次调用间隔(单位ms, 默认1000ms)</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">tt -i 1004 -p</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight console\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> tt -i 1004 -p</span></span><br><span class=\"line\"> RE-INDEX       1004</span><br><span class=\"line\"> GMT-REPLAY     2018-12-04 11:26:00</span><br><span class=\"line\"> OBJECT         0x4b67cf4d</span><br><span class=\"line\"> CLASS          demo.MathGame</span><br><span class=\"line\"> METHOD         primeFactors</span><br><span class=\"line\"> PARAMETERS[0]  @Integer[946738738]</span><br><span class=\"line\"> IS-RETURN      true</span><br><span class=\"line\"> IS-EXCEPTION   false</span><br><span class=\"line\"> COST(ms)         0.186073</span><br><span class=\"line\"> RETURN-OBJ     @ArrayList[</span><br><span class=\"line\">                    @Integer[2],</span><br><span class=\"line\">                    @Integer[11],</span><br><span class=\"line\">                    @Integer[17],</span><br><span class=\"line\">                    @Integer[2531387],</span><br><span class=\"line\">                ]</span><br><span class=\"line\">Time fragment[1004] successfully replayed.</span><br><span class=\"line\">Affect(row-cnt:1) cost in 14 ms.</span><br></pre></td></tr></table></figure>\n\n<p>你会发现结果虽然一样，但调用的路径发生了变化，有原来的程序发起变成了 Arthas 自己的内部线程发起的调用了。</p>\n<ul>\n<li><p>需要强调的点</p>\n<ol>\n<li><p><strong>ThreadLocal 信息丢失</strong></p>\n<p>很多框架偷偷的将一些环境变量信息塞到了发起调用线程的 ThreadLocal 中，由于调用线程发生了变化，这些 ThreadLocal 线程信息无法通过 Arthas 保存，所以这些信息将会丢失。</p>\n<p>一些常见的 CASE 比如：鹰眼的 TraceId 等。</p>\n</li>\n<li><p><strong>引用的对象</strong></p>\n<p>需要强调的是，<code>tt</code> 命令是将当前环境的对象引用保存起来，但仅仅也只能保存一个引用而已。如果方法内部对入参进行了变更，或者返回的对象经过了后续的处理，那么在 <code>tt</code> 查看的时候将无法看到当时最准确的值。这也是为什么 <code>watch</code> 命令存在的意义。</p>\n</li>\n</ol>\n</li>\n</ul>\n<h2><span id=\"更多信息\">更多信息</span></h2><p>在“tt”中，我们演示了了Arthas的tt命令。如果有更多的技巧或者使用疑问，欢迎在Issue里提出。</p>\n<ul>\n<li>Issues: <a href=\"https://github.com/alibaba/arthas/issues\">https://github.com/alibaba/arthas/issues</a></li>\n<li>文档： <a href=\"https://arthas.aliyun.com/doc\">https://arthas.aliyun.com/doc</a></li>\n</ul>\n<p>如果您在使用Arthas，请让我们知道。您的使用对我们非常重要：<a href=\"https://github.com/alibaba/arthas/issues/111\">查看</a></p>\n<p>文章拷贝来源：<a href=\"https://start.aliyun.com/course?spm=a2ck6.17690074.0.0.28bc2e7dHTphXs&amp;id=PaiFAkJM\">https://start.aliyun.com/course?spm=a2ck6.17690074.0.0.28bc2e7dHTphXs&amp;id=PaiFAkJM</a></p>\n","site":{"data":{}},"excerpt":"","more":"<!-- toc -->\n\n<ul>\n<li><a href=\"#%E5%90%AF%E5%8A%A8arthas-demo\">启动arthas demo</a></li>\n<li><a href=\"#%E5%90%AF%E5%8A%A8arthas-boot\">启动arthas-boot</a></li>\n<li><a href=\"#tt%E5%91%BD%E4%BB%A4\">tt命令</a><ul>\n<li><a href=\"#%E4%BD%BF%E7%94%A8%E5%8F%82%E8%80%83\">使用参考</a><ul>\n<li><a href=\"#%E8%AE%B0%E5%BD%95%E8%B0%83%E7%94%A8\">记录调用</a></li>\n<li><a href=\"#%E6%A3%80%E7%B4%A2%E8%B0%83%E7%94%A8%E8%AE%B0%E5%BD%95\">检索调用记录</a></li>\n<li><a href=\"#%E6%9F%A5%E7%9C%8B%E8%B0%83%E7%94%A8%E4%BF%A1%E6%81%AF\">查看调用信息</a></li>\n<li><a href=\"#%E9%87%8D%E5%81%9A%E4%B8%80%E6%AC%A1%E8%B0%83%E7%94%A8\">重做一次调用</a></li>\n</ul>\n</li>\n</ul>\n</li>\n<li><a href=\"#%E6%9B%B4%E5%A4%9A%E4%BF%A1%E6%81%AF\">更多信息</a></li>\n</ul>\n<!-- tocstop -->\n\n<p><img src=\"/jlynet.github.io/2021/08/07/Java%E8%AF%8A%E6%96%AD%E5%B7%A5%E5%85%B7Arthas%E9%AB%98%E7%BA%A7%E5%91%BD%E4%BB%A4%E6%95%99%E7%A8%8B/Arthastt%E5%91%BD%E4%BB%A4/arthas.png\" alt=\"Arthas\"></p>\n<p><code>Arthas</code> 是Alibaba开源的Java诊断工具，深受开发者喜爱。在线排查问题，无需重启；动态跟踪Java代码；实时监控JVM状态。</p>\n<p><code>Arthas</code> 支持JDK 6+，支持Linux/Mac/Windows，采用命令行交互模式，同时提供丰富的 <code>Tab</code> 自动补全功能，进一步方便进行问题的定位和诊断。</p>\n<p>当你遇到以下类似问题而束手无策时，Arthas可以帮助你解决：</p>\n<ul>\n<li>这个类从哪个 jar 包加载的？为什么会报各种类相关的 Exception？</li>\n<li>我改的代码为什么没有执行到？难道是我没 commit？分支搞错了？</li>\n<li>遇到问题无法在线上 debug，难道只能通过加日志再重新发布吗？</li>\n<li>线上遇到某个用户的数据处理有问题，但线上同样无法 debug，线下无法重现！</li>\n<li>是否有一个全局视角来查看系统的运行状况？</li>\n<li>有什么办法可以监控到JVM的实时运行状态？</li>\n<li>怎么快速定位应用的热点，生成火焰图？</li>\n</ul>\n<p>本教程会以一个简单的应用为例，演示tt命令。</p>\n<ul>\n<li>Github: <a href=\"https://github.com/alibaba/arthas\">https://github.com/alibaba/arthas</a></li>\n<li>文档: <a href=\"https://arthas.aliyun.com/doc/\">https://arthas.aliyun.com/doc/</a></li>\n</ul>\n<h2 id=\"启动arthas-demo\"><a href=\"#启动arthas-demo\" class=\"headerlink\" title=\"启动arthas demo\"></a>启动arthas demo</h2><p>下载<code>arthas-demo.jar</code>，再用<code>java -jar</code>命令启动：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wget https://arthas.aliyun.com/arthas-demo.jar;java -jar arthas-demo.jar</span><br></pre></td></tr></table></figure>\n\n<p><code>arthas-demo</code>是一个很简单的程序，它随机生成整数，再执行因式分解，把结果打印出来。如果生成的随机数是负数，则会打印提示信息。</p>\n<h2 id=\"启动arthas-boot\"><a href=\"#启动arthas-boot\" class=\"headerlink\" title=\"启动arthas-boot\"></a>启动arthas-boot</h2><p>在新的<code>Terminal 2</code>里，下载<code>arthas-boot.jar</code>，再用<code>java -jar</code>命令启动：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wget https://arthas.aliyun.com/arthas-boot.jar;java -jar arthas-boot.jar</span><br></pre></td></tr></table></figure>\n\n<p><code>arthas-boot</code>是<code>Arthas</code>的启动程序，它启动后，会列出所有的Java进程，用户可以选择需要诊断的目标进程。</p>\n<p>选择第一个进程，输入 <code>1</code> ，再<code>Enter/回车</code>：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1</span><br></pre></td></tr></table></figure>\n\n<p>Attach成功之后，会打印Arthas LOGO。输入 <code>help</code> 可以获取到更多的帮助信息。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">help</span></span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/jlynet.github.io/2021/08/07/Java%E8%AF%8A%E6%96%AD%E5%B7%A5%E5%85%B7Arthas%E9%AB%98%E7%BA%A7%E5%91%BD%E4%BB%A4%E6%95%99%E7%A8%8B/Arthastt%E5%91%BD%E4%BB%A4/O1CN01HzatXZ1RgccrlT90M_!!6000000002141-2-tps-529-244.png\" alt=\"Arthas Boot\"></p>\n<h2 id=\"tt命令\"><a href=\"#tt命令\" class=\"headerlink\" title=\"tt命令\"></a>tt命令</h2><blockquote>\n<p>方法执行数据的时空隧道，记录下指定方法每次调用的入参和返回信息，并能对这些不同的时间下调用进行观测</p>\n</blockquote>\n<p><code>watch</code> 虽然很方便和灵活，但需要提前想清楚观察表达式的拼写，这对排查问题而言要求太高，因为很多时候我们并不清楚问题出自于何方，只能靠蛛丝马迹进行猜测。</p>\n<p>这个时候如果能记录下当时方法调用的所有入参和返回值、抛出的异常会对整个问题的思考与判断非常有帮助。</p>\n<p>于是乎，TimeTunnel 命令就诞生了。</p>\n<h4 id=\"使用参考\"><a href=\"#使用参考\" class=\"headerlink\" title=\"使用参考\"></a>使用参考</h4><h5 id=\"记录调用\"><a href=\"#记录调用\" class=\"headerlink\" title=\"记录调用\"></a>记录调用</h5><p>对于一个最基本的使用来说，就是记录下当前方法的每次调用环境现场。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">tt -t demo.MathGame primeFactors</span><br></pre></td></tr></table></figure>\n\n<p>按<code>q</code>或者<code>Ctrl+c</code>退出</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">q</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight console\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> tt -t demo.MathGame primeFactors</span></span><br><span class=\"line\">Press Ctrl+C to abort.</span><br><span class=\"line\">Affect(class-cnt:1 , method-cnt:1) cost in 66 ms.</span><br><span class=\"line\"> INDEX   TIMESTAMP            COST(ms)  IS-RET  IS-EXP   OBJECT         CLASS                          METHOD</span><br><span class=\"line\">-------------------------------------------------------------------------------------------------------------------------------------</span><br><span class=\"line\"> 1000    2018-12-04 11:15:38  1.096236  false   true     0x4b67cf4d     MathGame                       primeFactors</span><br><span class=\"line\"> 1001    2018-12-04 11:15:39  0.191848  false   true     0x4b67cf4d     MathGame                       primeFactors</span><br><span class=\"line\"> 1002    2018-12-04 11:15:40  0.069523  false   true     0x4b67cf4d     MathGame                       primeFactors</span><br><span class=\"line\"> 1003    2018-12-04 11:15:41  0.186073  false   true     0x4b67cf4d     MathGame                       primeFactors</span><br><span class=\"line\"> 1004    2018-12-04 11:15:42  17.76437  true    false    0x4b67cf4d     MathGame                       primeFactors</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><p>命令参数解析</p>\n<ul>\n<li><p><code>-t</code></p>\n<p>tt 命令有很多个主参数，<code>-t</code> 就是其中之一。这个参数的表明希望记录下类 <code>*Test</code> 的 <code>print</code> 方法的每次执行情况。</p>\n</li>\n<li><p><code>-n 3</code></p>\n<p>当你执行一个调用量不高的方法时可能你还能有足够的时间用 <code>CTRL+C</code> 中断 tt 命令记录的过程，但如果遇到调用量非常大的方法，瞬间就能将你的 JVM 内存撑爆。</p>\n<p>此时你可以通过 <code>-n</code> 参数指定你需要记录的次数，当达到记录次数时 Arthas 会主动中断tt命令的记录过程，避免人工操作无法停止的情况。</p>\n</li>\n</ul>\n</li>\n<li><p>表格字段说明</p>\n</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>表格字段</th>\n<th>字段解释</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>INDEX</td>\n<td>时间片段记录编号，每一个编号代表着一次调用，后续tt还有很多命令都是基于此编号指定记录操作，非常重要。</td>\n</tr>\n<tr>\n<td>TIMESTAMP</td>\n<td>方法执行的本机时间，记录了这个时间片段所发生的本机时间</td>\n</tr>\n<tr>\n<td>COST(ms)</td>\n<td>方法执行的耗时</td>\n</tr>\n<tr>\n<td>IS-RET</td>\n<td>方法是否以正常返回的形式结束</td>\n</tr>\n<tr>\n<td>IS-EXP</td>\n<td>方法是否以抛异常的形式结束</td>\n</tr>\n<tr>\n<td>OBJECT</td>\n<td>执行对象的<code>hashCode()</code>，注意，曾经有人误认为是对象在JVM中的内存地址，但很遗憾他不是。但他能帮助你简单的标记当前执行方法的类实体</td>\n</tr>\n<tr>\n<td>CLASS</td>\n<td>执行的类名</td>\n</tr>\n<tr>\n<td>METHOD</td>\n<td>执行的方法名</td>\n</tr>\n</tbody></table>\n<ul>\n<li><p>条件表达式</p>\n<p>不知道大家是否有在使用过程中遇到以下困惑</p>\n<ul>\n<li>Arthas 似乎很难区分出重载的方法</li>\n<li>我只需要观察特定参数，但是 tt 却全部都给我记录了下来</li>\n</ul>\n<p>条件表达式也是用 <code>\bOGNL</code> 来编写，核心的判断对象依然是 <code>Advice</code> 对象。除了 <code>tt</code> 命令之外，<code>watch</code>、<code>trace</code>、<code>stack</code> 命令也都支持条件表达式。</p>\n</li>\n<li><p>解决方法重载</p>\n<p><code>tt -t *Test print params.length==1</code></p>\n<p>通过制定参数个数的形式解决不同的方法签名，如果参数个数一样，你还可以这样写</p>\n<p><code>tt -t *Test print &#39;params[1] instanceof Integer&#39;</code></p>\n</li>\n<li><p>解决指定参数</p>\n<p><code>tt -t *Test print params[0].mobile==&quot;13989838402&quot;</code></p>\n</li>\n<li><p>构成条件表达式的 <code>Advice</code> 对象</p>\n<p>前边看到了很多条件表达式中，都使用了 <code>params[0]</code>，有关这个变量的介绍，请参考<a href=\"https://arthas.aliyun.com/doc/advice-class.html\">表达式核心变量</a></p>\n</li>\n</ul>\n<h5 id=\"检索调用记录\"><a href=\"#检索调用记录\" class=\"headerlink\" title=\"检索调用记录\"></a>检索调用记录</h5><p>当你用 <code>tt</code> 记录了一大片的时间片段之后，你希望能从中筛选出自己需要的时间片段，这个时候你就需要对现有记录进行检索。</p>\n<p>假设我们有这些记录</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">tt -l</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight console\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> tt -l</span></span><br><span class=\"line\"> INDEX   TIMESTAMP            COST(ms)  IS-RET  IS-EXP   OBJECT         CLASS                          METHOD</span><br><span class=\"line\">-------------------------------------------------------------------------------------------------------------------------------------</span><br><span class=\"line\"> 1000    2018-12-04 11:15:38  1.096236  false   true     0x4b67cf4d     MathGame                       primeFactors</span><br><span class=\"line\"> 1001    2018-12-04 11:15:39  0.191848  false   true     0x4b67cf4d     MathGame                       primeFactors</span><br><span class=\"line\"> 1002    2018-12-04 11:15:40  0.069523  false   true     0x4b67cf4d     MathGame                       primeFactors</span><br><span class=\"line\"> 1003    2018-12-04 11:15:41  0.186073  false   true     0x4b67cf4d     MathGame                       primeFactors</span><br><span class=\"line\"> 1004    2018-12-04 11:15:42  17.76437  true    false    0x4b67cf4d     MathGame                       primeFactors</span><br><span class=\"line\">                              9</span><br><span class=\"line\"> 1005    2018-12-04 11:15:43  0.4776    false   true     0x4b67cf4d     MathGame                       primeFactors</span><br><span class=\"line\">Affect(row-cnt:6) cost in 4 ms.</span><br></pre></td></tr></table></figure>\n\n<p>我需要筛选出 <code>primeFactors</code> 方法的调用信息</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">tt -s <span class=\"string\">&#x27;method.name==&quot;primeFactors&quot;&#x27;</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight console\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> tt -s <span class=\"string\">&#x27;method.name==&quot;primeFactors&quot;&#x27;</span></span></span><br><span class=\"line\"> INDEX   TIMESTAMP            COST(ms)  IS-RET  IS-EXP   OBJECT         CLASS                          METHOD</span><br><span class=\"line\">-------------------------------------------------------------------------------------------------------------------------------------</span><br><span class=\"line\"> 1000    2018-12-04 11:15:38  1.096236  false   true     0x4b67cf4d     MathGame                       primeFactors</span><br><span class=\"line\"> 1001    2018-12-04 11:15:39  0.191848  false   true     0x4b67cf4d     MathGame                       primeFactors</span><br><span class=\"line\"> 1002    2018-12-04 11:15:40  0.069523  false   true     0x4b67cf4d     MathGame                       primeFactors</span><br><span class=\"line\"> 1003    2018-12-04 11:15:41  0.186073  false   true     0x4b67cf4d     MathGame                       primeFactors</span><br><span class=\"line\"> 1004    2018-12-04 11:15:42  17.76437  true    false    0x4b67cf4d     MathGame                       primeFactors</span><br><span class=\"line\">                              9</span><br><span class=\"line\"> 1005    2018-12-04 11:15:43  0.4776    false   true     0x4b67cf4d     MathGame                       primeFactors</span><br><span class=\"line\">Affect(row-cnt:6) cost in 607 ms.</span><br></pre></td></tr></table></figure>\n\n<p>你需要一个 <code>-s</code> 参数。同样的，搜索表达式的核心对象依旧是 <code>Advice</code> 对象。</p>\n<h5 id=\"查看调用信息\"><a href=\"#查看调用信息\" class=\"headerlink\" title=\"查看调用信息\"></a>查看调用信息</h5><p>对于具体一个时间片的信息而言，你可以通过 <code>-i</code> 参数后边跟着对应的 <code>INDEX</code> 编号查看到他的详细信息。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">tt -i 1003</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight console\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> tt -i 1003</span></span><br><span class=\"line\"> INDEX            1003</span><br><span class=\"line\"> GMT-CREATE       2018-12-04 11:15:41</span><br><span class=\"line\"> COST(ms)         0.186073</span><br><span class=\"line\"> OBJECT           0x4b67cf4d</span><br><span class=\"line\"> CLASS            demo.MathGame</span><br><span class=\"line\"> METHOD           primeFactors</span><br><span class=\"line\"> IS-RETURN        false</span><br><span class=\"line\"> IS-EXCEPTION     true</span><br><span class=\"line\"> PARAMETERS[0]    @Integer[-564322413]</span><br><span class=\"line\"> THROW-EXCEPTION  java.lang.IllegalArgumentException: number is: -564322413, need &gt;= 2</span><br><span class=\"line\">                      at demo.MathGame.primeFactors(MathGame.java:46)</span><br><span class=\"line\">                      at demo.MathGame.run(MathGame.java:24)</span><br><span class=\"line\">                      at demo.MathGame.main(MathGame.java:16)</span><br><span class=\"line\"></span><br><span class=\"line\">Affect(row-cnt:1) cost in 11 ms.</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"重做一次调用\"><a href=\"#重做一次调用\" class=\"headerlink\" title=\"重做一次调用\"></a>重做一次调用</h5><p>当你稍稍做了一些调整之后，你可能需要前端系统重新触发一次你的调用，此时得求爷爷告奶奶的需要前端配合联调的同学再次发起一次调用。而有些场景下，这个调用不是这么好触发的。</p>\n<p><code>tt</code> 命令由于保存了当时调用的所有现场信息，所以我们可以自己主动对一个 <code>INDEX</code> 编号的时间片自主发起一次调用，从而解放你的沟通成本。此时你需要 <code>-p</code> 参数。通过 <code>--replay-times</code> 指定 调用次数，通过 <code>--replay-interval</code> 指定多次调用间隔(单位ms, 默认1000ms)</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">tt -i 1004 -p</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight console\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> tt -i 1004 -p</span></span><br><span class=\"line\"> RE-INDEX       1004</span><br><span class=\"line\"> GMT-REPLAY     2018-12-04 11:26:00</span><br><span class=\"line\"> OBJECT         0x4b67cf4d</span><br><span class=\"line\"> CLASS          demo.MathGame</span><br><span class=\"line\"> METHOD         primeFactors</span><br><span class=\"line\"> PARAMETERS[0]  @Integer[946738738]</span><br><span class=\"line\"> IS-RETURN      true</span><br><span class=\"line\"> IS-EXCEPTION   false</span><br><span class=\"line\"> COST(ms)         0.186073</span><br><span class=\"line\"> RETURN-OBJ     @ArrayList[</span><br><span class=\"line\">                    @Integer[2],</span><br><span class=\"line\">                    @Integer[11],</span><br><span class=\"line\">                    @Integer[17],</span><br><span class=\"line\">                    @Integer[2531387],</span><br><span class=\"line\">                ]</span><br><span class=\"line\">Time fragment[1004] successfully replayed.</span><br><span class=\"line\">Affect(row-cnt:1) cost in 14 ms.</span><br></pre></td></tr></table></figure>\n\n<p>你会发现结果虽然一样，但调用的路径发生了变化，有原来的程序发起变成了 Arthas 自己的内部线程发起的调用了。</p>\n<ul>\n<li><p>需要强调的点</p>\n<ol>\n<li><p><strong>ThreadLocal 信息丢失</strong></p>\n<p>很多框架偷偷的将一些环境变量信息塞到了发起调用线程的 ThreadLocal 中，由于调用线程发生了变化，这些 ThreadLocal 线程信息无法通过 Arthas 保存，所以这些信息将会丢失。</p>\n<p>一些常见的 CASE 比如：鹰眼的 TraceId 等。</p>\n</li>\n<li><p><strong>引用的对象</strong></p>\n<p>需要强调的是，<code>tt</code> 命令是将当前环境的对象引用保存起来，但仅仅也只能保存一个引用而已。如果方法内部对入参进行了变更，或者返回的对象经过了后续的处理，那么在 <code>tt</code> 查看的时候将无法看到当时最准确的值。这也是为什么 <code>watch</code> 命令存在的意义。</p>\n</li>\n</ol>\n</li>\n</ul>\n<h2 id=\"更多信息\"><a href=\"#更多信息\" class=\"headerlink\" title=\"更多信息\"></a>更多信息</h2><p>在“tt”中，我们演示了了Arthas的tt命令。如果有更多的技巧或者使用疑问，欢迎在Issue里提出。</p>\n<ul>\n<li>Issues: <a href=\"https://github.com/alibaba/arthas/issues\">https://github.com/alibaba/arthas/issues</a></li>\n<li>文档： <a href=\"https://arthas.aliyun.com/doc\">https://arthas.aliyun.com/doc</a></li>\n</ul>\n<p>如果您在使用Arthas，请让我们知道。您的使用对我们非常重要：<a href=\"https://github.com/alibaba/arthas/issues/111\">查看</a></p>\n<p>文章拷贝来源：<a href=\"https://start.aliyun.com/course?spm=a2ck6.17690074.0.0.28bc2e7dHTphXs&amp;id=PaiFAkJM\">https://start.aliyun.com/course?spm=a2ck6.17690074.0.0.28bc2e7dHTphXs&amp;id=PaiFAkJM</a></p>\n"},{"title":"Arthas vmoption命令","date":"2021-08-07T01:51:26.000Z","_content":"\n<!-- toc -->\n\n![Arthas](arthas.png)\n\n`Arthas` 是Alibaba开源的Java诊断工具，深受开发者喜爱。在线排查问题，无需重启；动态跟踪Java代码；实时监控JVM状态。\n\n`Arthas` 支持JDK 6+，支持Linux/Mac/Windows，采用命令行交互模式，同时提供丰富的 `Tab` 自动补全功能，进一步方便进行问题的定位和诊断。\n\n当你遇到以下类似问题而束手无策时，Arthas可以帮助你解决：\n\n- 这个类从哪个 jar 包加载的？为什么会报各种类相关的 Exception？\n- 我改的代码为什么没有执行到？难道是我没 commit？分支搞错了？\n- 遇到问题无法在线上 debug，难道只能通过加日志再重新发布吗？\n- 线上遇到某个用户的数据处理有问题，但线上同样无法 debug，线下无法重现！\n- 是否有一个全局视角来查看系统的运行状况？\n- 有什么办法可以监控到JVM的实时运行状态？\n- 怎么快速定位应用的热点，生成火焰图？\n\n本教程会以一个简单的应用为例，演示vmoption命令。\n\n- Github: https://github.com/alibaba/arthas\n- 文档: https://arthas.aliyun.com/doc/\n\n## 启动arthas demo\n\n下载`arthas-demo.jar`，再用`java -jar`命令启动：\n\n```bash\nwget https://arthas.aliyun.com/arthas-demo.jar;java -jar arthas-demo.jar\n```\n\n`arthas-demo`是一个很简单的程序，它随机生成整数，再执行因式分解，把结果打印出来。如果生成的随机数是负数，则会打印提示信息。\n\n为了和使用vmoption后的效果作对比，此时使用`Ctrl+c`，程序很自然地退出。 Ctrl+C\n\n再次启动`arthas-demo`：\n\n```bash\njava -jar arthas-demo.jar\n```\n\n## 启动arthas-boot\n\n在新的`Terminal 2`里，下载`arthas-boot.jar`，再用`java -jar`命令启动：\n\n```bash\nwget https://arthas.aliyun.com/arthas-boot.jar;java -jar arthas-boot.jar\n```\n\n`arthas-boot`是`Arthas`的启动程序，它启动后，会列出所有的Java进程，用户可以选择需要诊断的目标进程。\n\n选择第一个进程，输入 `1` ，再`Enter/回车`：\n\n```bash\n1\n```\n\nAttach成功之后，会打印Arthas LOGO。输入 `help` 可以获取到更多的帮助信息。\n\n```bash\nhelp\n```\n\n![Arthas Boot](O1CN01HzatXZ1RgccrlT90M_!!6000000002141-2-tps-529-244.png)\n\n## vmoption命令\n\n查看，更新VM诊断相关的参数\n\n```bash\nvmoption -h\n```\n\n```console\n[arthas@48]$ vmoption -h\n USAGE:\n   vmoption [-h] [name] [value]\n\n SUMMARY:\n   Display, and update the vm diagnostic options.\n\n Examples:\n   vmoption\n   vmoption PrintGCDetails\n   vmoption PrintGCDetails true\n\n WIKI:\n   https://arthas.aliyun.com/doc/vmoption\n\n OPTIONS:\n -h, --help                           this help\n <name>                               VMOption name\n <value>                              VMOption value\n```\n\n### 使用参考\n\n#### 查看所有的option：\n\n```bash\nvmoption\n```\n\n```console\n[arthas@56963]$ vmoption\n KEY                    VALUE                   ORIGIN                 WRITEABLE\n---------------------------------------------------------------------------------------------\n HeapDumpBeforeFullGC   false                   DEFAULT                true\n HeapDumpAfterFullGC    false                   DEFAULT                true\n HeapDumpOnOutOfMemory  false                   DEFAULT                true\n Error\n HeapDumpPath                                   DEFAULT                true\n CMSAbortablePrecleanW  100                     DEFAULT                true\n aitMillis\n CMSWaitDuration        2000                    DEFAULT                true\n CMSTriggerInterval     -1                      DEFAULT                true\n PrintGC                false                   DEFAULT                true\n PrintGCDetails         true                    MANAGEMENT             true\n PrintGCDateStamps      false                   DEFAULT                true\n PrintGCTimeStamps      false                   DEFAULT                true\n PrintGCID              false                   DEFAULT                true\n PrintClassHistogramBe  false                   DEFAULT                true\n foreFullGC\n PrintClassHistogramAf  false                   DEFAULT                true\n terFullGC\n PrintClassHistogram    false                   DEFAULT                true\n MinHeapFreeRatio       0                       DEFAULT                true\n MaxHeapFreeRatio       100                     DEFAULT                true\n PrintConcurrentLocks   false                   DEFAULT                true\n```\n\n#### 查看指定的option\n\n```bash\nvmoption PrintGCDetails\n```\n\n```console\n[arthas@56963]$ vmoption PrintGCDetails\n KEY                    VALUE                   ORIGIN                 WRITEABLE\n---------------------------------------------------------------------------------------------\n PrintGCDetails         false                   MANAGEMENT             true\n```\n\n#### 更新指定的option\n\n```bash\nvmoption PrintGCDetails true\n```\n\n```console\n[arthas@56963]$ vmoption PrintGCDetails true\nSuccessfully updated the vm option.\nPrintGCDetails=true\n```\n\n此时，切换到arthas demo 运行所在的`Terminal`，使用`Ctrl+c`退出，发现比之前多打印了GC垃圾回收信息：\n\n```console\nHeap\n def new generation   total 10432K, used 5682K [0x00000000f4800000, 0x00000000f5350000, 0x00000000f8550000)\n  eden space 9280K,  61% used [0x00000000f4800000, 0x00000000f4d8cad0, 0x00000000f5110000)\n  from space 1152K,   0% used [0x00000000f5110000, 0x00000000f5110000, 0x00000000f5230000)\n  to   space 1152K,   0% used [0x00000000f5230000, 0x00000000f5230000, 0x00000000f5350000)\n tenured generation   total 22992K, used 13795K [0x00000000f8550000, 0x00000000f9bc4000, 0x0000000100000000)\n   the space 22992K,  59% used [0x00000000f8550000, 0x00000000f92c8cc8, 0x00000000f92c8e00, 0x00000000f9bc4000)\n Metaspace       used 14926K, capacity 15128K, committed 15360K, reserved 1062912K\n  class space    used 1895K, capacity 1954K, committed 2048K, reserved 1048576K\n```\n\n## 更多信息\n\n在“vmoption”中，我们演示了了Arthas的vmoption命令。如果有更多的技巧或者使用疑问，欢迎在Issue里提出。\n\n- Issues: https://github.com/alibaba/arthas/issues\n- 文档： https://arthas.aliyun.com/doc\n\n如果您在使用Arthas，请让我们知道。您的使用对我们非常重要：[查看](https://github.com/alibaba/arthas/issues/111)\n\n文章拷贝来源：https://start.aliyun.com/course?spm=a2ck6.17690074.0.0.28bc2e7dHTphXs&id=PaiFAkJM","source":"_posts/Java诊断工具Arthas高级命令教程/Arthasvmoption命令.md","raw":"---\ntitle: Arthas vmoption命令\ndate: 2021-08-07 09:51:26\ntags: ['Java 诊断工具 Arthas 高级命令教程']\n---\n\n<!-- toc -->\n\n![Arthas](arthas.png)\n\n`Arthas` 是Alibaba开源的Java诊断工具，深受开发者喜爱。在线排查问题，无需重启；动态跟踪Java代码；实时监控JVM状态。\n\n`Arthas` 支持JDK 6+，支持Linux/Mac/Windows，采用命令行交互模式，同时提供丰富的 `Tab` 自动补全功能，进一步方便进行问题的定位和诊断。\n\n当你遇到以下类似问题而束手无策时，Arthas可以帮助你解决：\n\n- 这个类从哪个 jar 包加载的？为什么会报各种类相关的 Exception？\n- 我改的代码为什么没有执行到？难道是我没 commit？分支搞错了？\n- 遇到问题无法在线上 debug，难道只能通过加日志再重新发布吗？\n- 线上遇到某个用户的数据处理有问题，但线上同样无法 debug，线下无法重现！\n- 是否有一个全局视角来查看系统的运行状况？\n- 有什么办法可以监控到JVM的实时运行状态？\n- 怎么快速定位应用的热点，生成火焰图？\n\n本教程会以一个简单的应用为例，演示vmoption命令。\n\n- Github: https://github.com/alibaba/arthas\n- 文档: https://arthas.aliyun.com/doc/\n\n## 启动arthas demo\n\n下载`arthas-demo.jar`，再用`java -jar`命令启动：\n\n```bash\nwget https://arthas.aliyun.com/arthas-demo.jar;java -jar arthas-demo.jar\n```\n\n`arthas-demo`是一个很简单的程序，它随机生成整数，再执行因式分解，把结果打印出来。如果生成的随机数是负数，则会打印提示信息。\n\n为了和使用vmoption后的效果作对比，此时使用`Ctrl+c`，程序很自然地退出。 Ctrl+C\n\n再次启动`arthas-demo`：\n\n```bash\njava -jar arthas-demo.jar\n```\n\n## 启动arthas-boot\n\n在新的`Terminal 2`里，下载`arthas-boot.jar`，再用`java -jar`命令启动：\n\n```bash\nwget https://arthas.aliyun.com/arthas-boot.jar;java -jar arthas-boot.jar\n```\n\n`arthas-boot`是`Arthas`的启动程序，它启动后，会列出所有的Java进程，用户可以选择需要诊断的目标进程。\n\n选择第一个进程，输入 `1` ，再`Enter/回车`：\n\n```bash\n1\n```\n\nAttach成功之后，会打印Arthas LOGO。输入 `help` 可以获取到更多的帮助信息。\n\n```bash\nhelp\n```\n\n![Arthas Boot](O1CN01HzatXZ1RgccrlT90M_!!6000000002141-2-tps-529-244.png)\n\n## vmoption命令\n\n查看，更新VM诊断相关的参数\n\n```bash\nvmoption -h\n```\n\n```console\n[arthas@48]$ vmoption -h\n USAGE:\n   vmoption [-h] [name] [value]\n\n SUMMARY:\n   Display, and update the vm diagnostic options.\n\n Examples:\n   vmoption\n   vmoption PrintGCDetails\n   vmoption PrintGCDetails true\n\n WIKI:\n   https://arthas.aliyun.com/doc/vmoption\n\n OPTIONS:\n -h, --help                           this help\n <name>                               VMOption name\n <value>                              VMOption value\n```\n\n### 使用参考\n\n#### 查看所有的option：\n\n```bash\nvmoption\n```\n\n```console\n[arthas@56963]$ vmoption\n KEY                    VALUE                   ORIGIN                 WRITEABLE\n---------------------------------------------------------------------------------------------\n HeapDumpBeforeFullGC   false                   DEFAULT                true\n HeapDumpAfterFullGC    false                   DEFAULT                true\n HeapDumpOnOutOfMemory  false                   DEFAULT                true\n Error\n HeapDumpPath                                   DEFAULT                true\n CMSAbortablePrecleanW  100                     DEFAULT                true\n aitMillis\n CMSWaitDuration        2000                    DEFAULT                true\n CMSTriggerInterval     -1                      DEFAULT                true\n PrintGC                false                   DEFAULT                true\n PrintGCDetails         true                    MANAGEMENT             true\n PrintGCDateStamps      false                   DEFAULT                true\n PrintGCTimeStamps      false                   DEFAULT                true\n PrintGCID              false                   DEFAULT                true\n PrintClassHistogramBe  false                   DEFAULT                true\n foreFullGC\n PrintClassHistogramAf  false                   DEFAULT                true\n terFullGC\n PrintClassHistogram    false                   DEFAULT                true\n MinHeapFreeRatio       0                       DEFAULT                true\n MaxHeapFreeRatio       100                     DEFAULT                true\n PrintConcurrentLocks   false                   DEFAULT                true\n```\n\n#### 查看指定的option\n\n```bash\nvmoption PrintGCDetails\n```\n\n```console\n[arthas@56963]$ vmoption PrintGCDetails\n KEY                    VALUE                   ORIGIN                 WRITEABLE\n---------------------------------------------------------------------------------------------\n PrintGCDetails         false                   MANAGEMENT             true\n```\n\n#### 更新指定的option\n\n```bash\nvmoption PrintGCDetails true\n```\n\n```console\n[arthas@56963]$ vmoption PrintGCDetails true\nSuccessfully updated the vm option.\nPrintGCDetails=true\n```\n\n此时，切换到arthas demo 运行所在的`Terminal`，使用`Ctrl+c`退出，发现比之前多打印了GC垃圾回收信息：\n\n```console\nHeap\n def new generation   total 10432K, used 5682K [0x00000000f4800000, 0x00000000f5350000, 0x00000000f8550000)\n  eden space 9280K,  61% used [0x00000000f4800000, 0x00000000f4d8cad0, 0x00000000f5110000)\n  from space 1152K,   0% used [0x00000000f5110000, 0x00000000f5110000, 0x00000000f5230000)\n  to   space 1152K,   0% used [0x00000000f5230000, 0x00000000f5230000, 0x00000000f5350000)\n tenured generation   total 22992K, used 13795K [0x00000000f8550000, 0x00000000f9bc4000, 0x0000000100000000)\n   the space 22992K,  59% used [0x00000000f8550000, 0x00000000f92c8cc8, 0x00000000f92c8e00, 0x00000000f9bc4000)\n Metaspace       used 14926K, capacity 15128K, committed 15360K, reserved 1062912K\n  class space    used 1895K, capacity 1954K, committed 2048K, reserved 1048576K\n```\n\n## 更多信息\n\n在“vmoption”中，我们演示了了Arthas的vmoption命令。如果有更多的技巧或者使用疑问，欢迎在Issue里提出。\n\n- Issues: https://github.com/alibaba/arthas/issues\n- 文档： https://arthas.aliyun.com/doc\n\n如果您在使用Arthas，请让我们知道。您的使用对我们非常重要：[查看](https://github.com/alibaba/arthas/issues/111)\n\n文章拷贝来源：https://start.aliyun.com/course?spm=a2ck6.17690074.0.0.28bc2e7dHTphXs&id=PaiFAkJM","slug":"Java诊断工具Arthas高级命令教程/Arthasvmoption命令","published":1,"updated":"2021-08-07T05:35:40.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cks1cgr75002zfw5ie93p9snu","content":"<!-- toc -->\n\n<ul>\n<li><a href=\"#%E5%90%AF%E5%8A%A8arthas-demo\">启动arthas demo</a></li>\n<li><a href=\"#%E5%90%AF%E5%8A%A8arthas-boot\">启动arthas-boot</a></li>\n<li><a href=\"#vmoption%E5%91%BD%E4%BB%A4\">vmoption命令</a><ul>\n<li><a href=\"#%E4%BD%BF%E7%94%A8%E5%8F%82%E8%80%83\">使用参考</a><ul>\n<li><a href=\"#%E6%9F%A5%E7%9C%8B%E6%89%80%E6%9C%89%E7%9A%84option\">查看所有的option：</a></li>\n<li><a href=\"#%E6%9F%A5%E7%9C%8B%E6%8C%87%E5%AE%9A%E7%9A%84option\">查看指定的option</a></li>\n<li><a href=\"#%E6%9B%B4%E6%96%B0%E6%8C%87%E5%AE%9A%E7%9A%84option\">更新指定的option</a></li>\n</ul>\n</li>\n</ul>\n</li>\n<li><a href=\"#%E6%9B%B4%E5%A4%9A%E4%BF%A1%E6%81%AF\">更多信息</a></li>\n</ul>\n<!-- tocstop -->\n\n<p><img src=\"/jlynet.github.io/2021/08/07/Java%E8%AF%8A%E6%96%AD%E5%B7%A5%E5%85%B7Arthas%E9%AB%98%E7%BA%A7%E5%91%BD%E4%BB%A4%E6%95%99%E7%A8%8B/Arthasvmoption%E5%91%BD%E4%BB%A4/arthas.png\" alt=\"Arthas\"></p>\n<p><code>Arthas</code> 是Alibaba开源的Java诊断工具，深受开发者喜爱。在线排查问题，无需重启；动态跟踪Java代码；实时监控JVM状态。</p>\n<p><code>Arthas</code> 支持JDK 6+，支持Linux/Mac/Windows，采用命令行交互模式，同时提供丰富的 <code>Tab</code> 自动补全功能，进一步方便进行问题的定位和诊断。</p>\n<p>当你遇到以下类似问题而束手无策时，Arthas可以帮助你解决：</p>\n<ul>\n<li>这个类从哪个 jar 包加载的？为什么会报各种类相关的 Exception？</li>\n<li>我改的代码为什么没有执行到？难道是我没 commit？分支搞错了？</li>\n<li>遇到问题无法在线上 debug，难道只能通过加日志再重新发布吗？</li>\n<li>线上遇到某个用户的数据处理有问题，但线上同样无法 debug，线下无法重现！</li>\n<li>是否有一个全局视角来查看系统的运行状况？</li>\n<li>有什么办法可以监控到JVM的实时运行状态？</li>\n<li>怎么快速定位应用的热点，生成火焰图？</li>\n</ul>\n<p>本教程会以一个简单的应用为例，演示vmoption命令。</p>\n<ul>\n<li>Github: <a href=\"https://github.com/alibaba/arthas\">https://github.com/alibaba/arthas</a></li>\n<li>文档: <a href=\"https://arthas.aliyun.com/doc/\">https://arthas.aliyun.com/doc/</a></li>\n</ul>\n<h2><span id=\"启动arthas-demo\">启动arthas demo</span></h2><p>下载<code>arthas-demo.jar</code>，再用<code>java -jar</code>命令启动：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wget https://arthas.aliyun.com/arthas-demo.jar;java -jar arthas-demo.jar</span><br></pre></td></tr></table></figure>\n\n<p><code>arthas-demo</code>是一个很简单的程序，它随机生成整数，再执行因式分解，把结果打印出来。如果生成的随机数是负数，则会打印提示信息。</p>\n<p>为了和使用vmoption后的效果作对比，此时使用<code>Ctrl+c</code>，程序很自然地退出。 Ctrl+C</p>\n<p>再次启动<code>arthas-demo</code>：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">java -jar arthas-demo.jar</span><br></pre></td></tr></table></figure>\n\n<h2><span id=\"启动arthas-boot\">启动arthas-boot</span></h2><p>在新的<code>Terminal 2</code>里，下载<code>arthas-boot.jar</code>，再用<code>java -jar</code>命令启动：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wget https://arthas.aliyun.com/arthas-boot.jar;java -jar arthas-boot.jar</span><br></pre></td></tr></table></figure>\n\n<p><code>arthas-boot</code>是<code>Arthas</code>的启动程序，它启动后，会列出所有的Java进程，用户可以选择需要诊断的目标进程。</p>\n<p>选择第一个进程，输入 <code>1</code> ，再<code>Enter/回车</code>：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1</span><br></pre></td></tr></table></figure>\n\n<p>Attach成功之后，会打印Arthas LOGO。输入 <code>help</code> 可以获取到更多的帮助信息。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">help</span></span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/jlynet.github.io/2021/08/07/Java%E8%AF%8A%E6%96%AD%E5%B7%A5%E5%85%B7Arthas%E9%AB%98%E7%BA%A7%E5%91%BD%E4%BB%A4%E6%95%99%E7%A8%8B/Arthasvmoption%E5%91%BD%E4%BB%A4/O1CN01HzatXZ1RgccrlT90M_!!6000000002141-2-tps-529-244.png\" alt=\"Arthas Boot\"></p>\n<h2><span id=\"vmoption命令\">vmoption命令</span></h2><p>查看，更新VM诊断相关的参数</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vmoption -h</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight console\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">[arthas@48]$</span><span class=\"bash\"> vmoption -h</span></span><br><span class=\"line\"> USAGE:</span><br><span class=\"line\">   vmoption [-h] [name] [value]</span><br><span class=\"line\"></span><br><span class=\"line\"> SUMMARY:</span><br><span class=\"line\">   Display, and update the vm diagnostic options.</span><br><span class=\"line\"></span><br><span class=\"line\"> Examples:</span><br><span class=\"line\">   vmoption</span><br><span class=\"line\">   vmoption PrintGCDetails</span><br><span class=\"line\">   vmoption PrintGCDetails true</span><br><span class=\"line\"></span><br><span class=\"line\"> WIKI:</span><br><span class=\"line\">   https://arthas.aliyun.com/doc/vmoption</span><br><span class=\"line\"></span><br><span class=\"line\"> OPTIONS:</span><br><span class=\"line\"> -h, --help                           this help</span><br><span class=\"line\"> &lt;name&gt;                               VMOption name</span><br><span class=\"line\"> &lt;value&gt;                              VMOption value</span><br></pre></td></tr></table></figure>\n\n<h3><span id=\"使用参考\">使用参考</span></h3><h4><span id=\"查看所有的option\">查看所有的option：</span></h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vmoption</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight console\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">[arthas@56963]$</span><span class=\"bash\"> vmoption</span></span><br><span class=\"line\"> KEY                    VALUE                   ORIGIN                 WRITEABLE</span><br><span class=\"line\">---------------------------------------------------------------------------------------------</span><br><span class=\"line\"> HeapDumpBeforeFullGC   false                   DEFAULT                true</span><br><span class=\"line\"> HeapDumpAfterFullGC    false                   DEFAULT                true</span><br><span class=\"line\"> HeapDumpOnOutOfMemory  false                   DEFAULT                true</span><br><span class=\"line\"> Error</span><br><span class=\"line\"> HeapDumpPath                                   DEFAULT                true</span><br><span class=\"line\"> CMSAbortablePrecleanW  100                     DEFAULT                true</span><br><span class=\"line\"> aitMillis</span><br><span class=\"line\"> CMSWaitDuration        2000                    DEFAULT                true</span><br><span class=\"line\"> CMSTriggerInterval     -1                      DEFAULT                true</span><br><span class=\"line\"> PrintGC                false                   DEFAULT                true</span><br><span class=\"line\"> PrintGCDetails         true                    MANAGEMENT             true</span><br><span class=\"line\"> PrintGCDateStamps      false                   DEFAULT                true</span><br><span class=\"line\"> PrintGCTimeStamps      false                   DEFAULT                true</span><br><span class=\"line\"> PrintGCID              false                   DEFAULT                true</span><br><span class=\"line\"> PrintClassHistogramBe  false                   DEFAULT                true</span><br><span class=\"line\"> foreFullGC</span><br><span class=\"line\"> PrintClassHistogramAf  false                   DEFAULT                true</span><br><span class=\"line\"> terFullGC</span><br><span class=\"line\"> PrintClassHistogram    false                   DEFAULT                true</span><br><span class=\"line\"> MinHeapFreeRatio       0                       DEFAULT                true</span><br><span class=\"line\"> MaxHeapFreeRatio       100                     DEFAULT                true</span><br><span class=\"line\"> PrintConcurrentLocks   false                   DEFAULT                true</span><br></pre></td></tr></table></figure>\n\n<h4><span id=\"查看指定的option\">查看指定的option</span></h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vmoption PrintGCDetails</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight console\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">[arthas@56963]$</span><span class=\"bash\"> vmoption PrintGCDetails</span></span><br><span class=\"line\"> KEY                    VALUE                   ORIGIN                 WRITEABLE</span><br><span class=\"line\">---------------------------------------------------------------------------------------------</span><br><span class=\"line\"> PrintGCDetails         false                   MANAGEMENT             true</span><br></pre></td></tr></table></figure>\n\n<h4><span id=\"更新指定的option\">更新指定的option</span></h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vmoption PrintGCDetails <span class=\"literal\">true</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight console\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">[arthas@56963]$</span><span class=\"bash\"> vmoption PrintGCDetails <span class=\"literal\">true</span></span></span><br><span class=\"line\">Successfully updated the vm option.</span><br><span class=\"line\">PrintGCDetails=true</span><br></pre></td></tr></table></figure>\n\n<p>此时，切换到arthas demo 运行所在的<code>Terminal</code>，使用<code>Ctrl+c</code>退出，发现比之前多打印了GC垃圾回收信息：</p>\n<figure class=\"highlight console\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Heap</span><br><span class=\"line\"> def new generation   total 10432K, used 5682K [0x00000000f4800000, 0x00000000f5350000, 0x00000000f8550000)</span><br><span class=\"line\">  eden space 9280K,  61% used [0x00000000f4800000, 0x00000000f4d8cad0, 0x00000000f5110000)</span><br><span class=\"line\">  from space 1152K,   0% used [0x00000000f5110000, 0x00000000f5110000, 0x00000000f5230000)</span><br><span class=\"line\">  to   space 1152K,   0% used [0x00000000f5230000, 0x00000000f5230000, 0x00000000f5350000)</span><br><span class=\"line\"> tenured generation   total 22992K, used 13795K [0x00000000f8550000, 0x00000000f9bc4000, 0x0000000100000000)</span><br><span class=\"line\">   the space 22992K,  59% used [0x00000000f8550000, 0x00000000f92c8cc8, 0x00000000f92c8e00, 0x00000000f9bc4000)</span><br><span class=\"line\"> Metaspace       used 14926K, capacity 15128K, committed 15360K, reserved 1062912K</span><br><span class=\"line\">  class space    used 1895K, capacity 1954K, committed 2048K, reserved 1048576K</span><br></pre></td></tr></table></figure>\n\n<h2><span id=\"更多信息\">更多信息</span></h2><p>在“vmoption”中，我们演示了了Arthas的vmoption命令。如果有更多的技巧或者使用疑问，欢迎在Issue里提出。</p>\n<ul>\n<li>Issues: <a href=\"https://github.com/alibaba/arthas/issues\">https://github.com/alibaba/arthas/issues</a></li>\n<li>文档： <a href=\"https://arthas.aliyun.com/doc\">https://arthas.aliyun.com/doc</a></li>\n</ul>\n<p>如果您在使用Arthas，请让我们知道。您的使用对我们非常重要：<a href=\"https://github.com/alibaba/arthas/issues/111\">查看</a></p>\n<p>文章拷贝来源：<a href=\"https://start.aliyun.com/course?spm=a2ck6.17690074.0.0.28bc2e7dHTphXs&amp;id=PaiFAkJM\">https://start.aliyun.com/course?spm=a2ck6.17690074.0.0.28bc2e7dHTphXs&amp;id=PaiFAkJM</a></p>\n","site":{"data":{}},"excerpt":"","more":"<!-- toc -->\n\n<ul>\n<li><a href=\"#%E5%90%AF%E5%8A%A8arthas-demo\">启动arthas demo</a></li>\n<li><a href=\"#%E5%90%AF%E5%8A%A8arthas-boot\">启动arthas-boot</a></li>\n<li><a href=\"#vmoption%E5%91%BD%E4%BB%A4\">vmoption命令</a><ul>\n<li><a href=\"#%E4%BD%BF%E7%94%A8%E5%8F%82%E8%80%83\">使用参考</a><ul>\n<li><a href=\"#%E6%9F%A5%E7%9C%8B%E6%89%80%E6%9C%89%E7%9A%84option\">查看所有的option：</a></li>\n<li><a href=\"#%E6%9F%A5%E7%9C%8B%E6%8C%87%E5%AE%9A%E7%9A%84option\">查看指定的option</a></li>\n<li><a href=\"#%E6%9B%B4%E6%96%B0%E6%8C%87%E5%AE%9A%E7%9A%84option\">更新指定的option</a></li>\n</ul>\n</li>\n</ul>\n</li>\n<li><a href=\"#%E6%9B%B4%E5%A4%9A%E4%BF%A1%E6%81%AF\">更多信息</a></li>\n</ul>\n<!-- tocstop -->\n\n<p><img src=\"/jlynet.github.io/2021/08/07/Java%E8%AF%8A%E6%96%AD%E5%B7%A5%E5%85%B7Arthas%E9%AB%98%E7%BA%A7%E5%91%BD%E4%BB%A4%E6%95%99%E7%A8%8B/Arthasvmoption%E5%91%BD%E4%BB%A4/arthas.png\" alt=\"Arthas\"></p>\n<p><code>Arthas</code> 是Alibaba开源的Java诊断工具，深受开发者喜爱。在线排查问题，无需重启；动态跟踪Java代码；实时监控JVM状态。</p>\n<p><code>Arthas</code> 支持JDK 6+，支持Linux/Mac/Windows，采用命令行交互模式，同时提供丰富的 <code>Tab</code> 自动补全功能，进一步方便进行问题的定位和诊断。</p>\n<p>当你遇到以下类似问题而束手无策时，Arthas可以帮助你解决：</p>\n<ul>\n<li>这个类从哪个 jar 包加载的？为什么会报各种类相关的 Exception？</li>\n<li>我改的代码为什么没有执行到？难道是我没 commit？分支搞错了？</li>\n<li>遇到问题无法在线上 debug，难道只能通过加日志再重新发布吗？</li>\n<li>线上遇到某个用户的数据处理有问题，但线上同样无法 debug，线下无法重现！</li>\n<li>是否有一个全局视角来查看系统的运行状况？</li>\n<li>有什么办法可以监控到JVM的实时运行状态？</li>\n<li>怎么快速定位应用的热点，生成火焰图？</li>\n</ul>\n<p>本教程会以一个简单的应用为例，演示vmoption命令。</p>\n<ul>\n<li>Github: <a href=\"https://github.com/alibaba/arthas\">https://github.com/alibaba/arthas</a></li>\n<li>文档: <a href=\"https://arthas.aliyun.com/doc/\">https://arthas.aliyun.com/doc/</a></li>\n</ul>\n<h2 id=\"启动arthas-demo\"><a href=\"#启动arthas-demo\" class=\"headerlink\" title=\"启动arthas demo\"></a>启动arthas demo</h2><p>下载<code>arthas-demo.jar</code>，再用<code>java -jar</code>命令启动：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wget https://arthas.aliyun.com/arthas-demo.jar;java -jar arthas-demo.jar</span><br></pre></td></tr></table></figure>\n\n<p><code>arthas-demo</code>是一个很简单的程序，它随机生成整数，再执行因式分解，把结果打印出来。如果生成的随机数是负数，则会打印提示信息。</p>\n<p>为了和使用vmoption后的效果作对比，此时使用<code>Ctrl+c</code>，程序很自然地退出。 Ctrl+C</p>\n<p>再次启动<code>arthas-demo</code>：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">java -jar arthas-demo.jar</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"启动arthas-boot\"><a href=\"#启动arthas-boot\" class=\"headerlink\" title=\"启动arthas-boot\"></a>启动arthas-boot</h2><p>在新的<code>Terminal 2</code>里，下载<code>arthas-boot.jar</code>，再用<code>java -jar</code>命令启动：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wget https://arthas.aliyun.com/arthas-boot.jar;java -jar arthas-boot.jar</span><br></pre></td></tr></table></figure>\n\n<p><code>arthas-boot</code>是<code>Arthas</code>的启动程序，它启动后，会列出所有的Java进程，用户可以选择需要诊断的目标进程。</p>\n<p>选择第一个进程，输入 <code>1</code> ，再<code>Enter/回车</code>：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1</span><br></pre></td></tr></table></figure>\n\n<p>Attach成功之后，会打印Arthas LOGO。输入 <code>help</code> 可以获取到更多的帮助信息。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">help</span></span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/jlynet.github.io/2021/08/07/Java%E8%AF%8A%E6%96%AD%E5%B7%A5%E5%85%B7Arthas%E9%AB%98%E7%BA%A7%E5%91%BD%E4%BB%A4%E6%95%99%E7%A8%8B/Arthasvmoption%E5%91%BD%E4%BB%A4/O1CN01HzatXZ1RgccrlT90M_!!6000000002141-2-tps-529-244.png\" alt=\"Arthas Boot\"></p>\n<h2 id=\"vmoption命令\"><a href=\"#vmoption命令\" class=\"headerlink\" title=\"vmoption命令\"></a>vmoption命令</h2><p>查看，更新VM诊断相关的参数</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vmoption -h</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight console\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">[arthas@48]$</span><span class=\"bash\"> vmoption -h</span></span><br><span class=\"line\"> USAGE:</span><br><span class=\"line\">   vmoption [-h] [name] [value]</span><br><span class=\"line\"></span><br><span class=\"line\"> SUMMARY:</span><br><span class=\"line\">   Display, and update the vm diagnostic options.</span><br><span class=\"line\"></span><br><span class=\"line\"> Examples:</span><br><span class=\"line\">   vmoption</span><br><span class=\"line\">   vmoption PrintGCDetails</span><br><span class=\"line\">   vmoption PrintGCDetails true</span><br><span class=\"line\"></span><br><span class=\"line\"> WIKI:</span><br><span class=\"line\">   https://arthas.aliyun.com/doc/vmoption</span><br><span class=\"line\"></span><br><span class=\"line\"> OPTIONS:</span><br><span class=\"line\"> -h, --help                           this help</span><br><span class=\"line\"> &lt;name&gt;                               VMOption name</span><br><span class=\"line\"> &lt;value&gt;                              VMOption value</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"使用参考\"><a href=\"#使用参考\" class=\"headerlink\" title=\"使用参考\"></a>使用参考</h3><h4 id=\"查看所有的option：\"><a href=\"#查看所有的option：\" class=\"headerlink\" title=\"查看所有的option：\"></a>查看所有的option：</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vmoption</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight console\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">[arthas@56963]$</span><span class=\"bash\"> vmoption</span></span><br><span class=\"line\"> KEY                    VALUE                   ORIGIN                 WRITEABLE</span><br><span class=\"line\">---------------------------------------------------------------------------------------------</span><br><span class=\"line\"> HeapDumpBeforeFullGC   false                   DEFAULT                true</span><br><span class=\"line\"> HeapDumpAfterFullGC    false                   DEFAULT                true</span><br><span class=\"line\"> HeapDumpOnOutOfMemory  false                   DEFAULT                true</span><br><span class=\"line\"> Error</span><br><span class=\"line\"> HeapDumpPath                                   DEFAULT                true</span><br><span class=\"line\"> CMSAbortablePrecleanW  100                     DEFAULT                true</span><br><span class=\"line\"> aitMillis</span><br><span class=\"line\"> CMSWaitDuration        2000                    DEFAULT                true</span><br><span class=\"line\"> CMSTriggerInterval     -1                      DEFAULT                true</span><br><span class=\"line\"> PrintGC                false                   DEFAULT                true</span><br><span class=\"line\"> PrintGCDetails         true                    MANAGEMENT             true</span><br><span class=\"line\"> PrintGCDateStamps      false                   DEFAULT                true</span><br><span class=\"line\"> PrintGCTimeStamps      false                   DEFAULT                true</span><br><span class=\"line\"> PrintGCID              false                   DEFAULT                true</span><br><span class=\"line\"> PrintClassHistogramBe  false                   DEFAULT                true</span><br><span class=\"line\"> foreFullGC</span><br><span class=\"line\"> PrintClassHistogramAf  false                   DEFAULT                true</span><br><span class=\"line\"> terFullGC</span><br><span class=\"line\"> PrintClassHistogram    false                   DEFAULT                true</span><br><span class=\"line\"> MinHeapFreeRatio       0                       DEFAULT                true</span><br><span class=\"line\"> MaxHeapFreeRatio       100                     DEFAULT                true</span><br><span class=\"line\"> PrintConcurrentLocks   false                   DEFAULT                true</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"查看指定的option\"><a href=\"#查看指定的option\" class=\"headerlink\" title=\"查看指定的option\"></a>查看指定的option</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vmoption PrintGCDetails</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight console\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">[arthas@56963]$</span><span class=\"bash\"> vmoption PrintGCDetails</span></span><br><span class=\"line\"> KEY                    VALUE                   ORIGIN                 WRITEABLE</span><br><span class=\"line\">---------------------------------------------------------------------------------------------</span><br><span class=\"line\"> PrintGCDetails         false                   MANAGEMENT             true</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"更新指定的option\"><a href=\"#更新指定的option\" class=\"headerlink\" title=\"更新指定的option\"></a>更新指定的option</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vmoption PrintGCDetails <span class=\"literal\">true</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight console\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">[arthas@56963]$</span><span class=\"bash\"> vmoption PrintGCDetails <span class=\"literal\">true</span></span></span><br><span class=\"line\">Successfully updated the vm option.</span><br><span class=\"line\">PrintGCDetails=true</span><br></pre></td></tr></table></figure>\n\n<p>此时，切换到arthas demo 运行所在的<code>Terminal</code>，使用<code>Ctrl+c</code>退出，发现比之前多打印了GC垃圾回收信息：</p>\n<figure class=\"highlight console\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Heap</span><br><span class=\"line\"> def new generation   total 10432K, used 5682K [0x00000000f4800000, 0x00000000f5350000, 0x00000000f8550000)</span><br><span class=\"line\">  eden space 9280K,  61% used [0x00000000f4800000, 0x00000000f4d8cad0, 0x00000000f5110000)</span><br><span class=\"line\">  from space 1152K,   0% used [0x00000000f5110000, 0x00000000f5110000, 0x00000000f5230000)</span><br><span class=\"line\">  to   space 1152K,   0% used [0x00000000f5230000, 0x00000000f5230000, 0x00000000f5350000)</span><br><span class=\"line\"> tenured generation   total 22992K, used 13795K [0x00000000f8550000, 0x00000000f9bc4000, 0x0000000100000000)</span><br><span class=\"line\">   the space 22992K,  59% used [0x00000000f8550000, 0x00000000f92c8cc8, 0x00000000f92c8e00, 0x00000000f9bc4000)</span><br><span class=\"line\"> Metaspace       used 14926K, capacity 15128K, committed 15360K, reserved 1062912K</span><br><span class=\"line\">  class space    used 1895K, capacity 1954K, committed 2048K, reserved 1048576K</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"更多信息\"><a href=\"#更多信息\" class=\"headerlink\" title=\"更多信息\"></a>更多信息</h2><p>在“vmoption”中，我们演示了了Arthas的vmoption命令。如果有更多的技巧或者使用疑问，欢迎在Issue里提出。</p>\n<ul>\n<li>Issues: <a href=\"https://github.com/alibaba/arthas/issues\">https://github.com/alibaba/arthas/issues</a></li>\n<li>文档： <a href=\"https://arthas.aliyun.com/doc\">https://arthas.aliyun.com/doc</a></li>\n</ul>\n<p>如果您在使用Arthas，请让我们知道。您的使用对我们非常重要：<a href=\"https://github.com/alibaba/arthas/issues/111\">查看</a></p>\n<p>文章拷贝来源：<a href=\"https://start.aliyun.com/course?spm=a2ck6.17690074.0.0.28bc2e7dHTphXs&amp;id=PaiFAkJM\">https://start.aliyun.com/course?spm=a2ck6.17690074.0.0.28bc2e7dHTphXs&amp;id=PaiFAkJM</a></p>\n"},{"title":"Arthas watch命令","date":"2021-08-07T01:51:36.000Z","_content":"\n<!-- toc -->\n\n![Arthas](arthas.png)\n\n`Arthas` 是Alibaba开源的Java诊断工具，深受开发者喜爱。在线排查问题，无需重启；动态跟踪Java代码；实时监控JVM状态。\n\n`Arthas` 支持JDK 6+，支持Linux/Mac/Windows，采用命令行交互模式，同时提供丰富的 `Tab` 自动补全功能，进一步方便进行问题的定位和诊断。\n\n当你遇到以下类似问题而束手无策时，Arthas可以帮助你解决：\n\n- 这个类从哪个 jar 包加载的？为什么会报各种类相关的 Exception？\n- 我改的代码为什么没有执行到？难道是我没 commit？分支搞错了？\n- 遇到问题无法在线上 debug，难道只能通过加日志再重新发布吗？\n- 线上遇到某个用户的数据处理有问题，但线上同样无法 debug，线下无法重现！\n- 是否有一个全局视角来查看系统的运行状况？\n- 有什么办法可以监控到JVM的实时运行状态？\n- 怎么快速定位应用的热点，生成火焰图？\n\n本教程会以一个简单的应用为例，演示watch命令。\n\n- Github: https://github.com/alibaba/arthas\n- 文档: https://arthas.aliyun.com/doc/\n\n## 启动arthas demo\n\n下载`arthas-demo.jar`，再用`java -jar`命令启动：\n\n```bash\nwget https://arthas.aliyun.com/arthas-demo.jar;java -jar arthas-demo.jar\n```\n\n`arthas-demo`是一个很简单的程序，它随机生成整数，再执行因式分解，把结果打印出来。如果生成的随机数是负数，则会打印提示信息。\n\n## 启动arthas-boot\n\n在新的`Terminal 2`里，下载`arthas-boot.jar`，再用`java -jar`命令启动：\n\n```bash\nwget https://arthas.aliyun.com/arthas-boot.jar;java -jar arthas-boot.jar\n```\n\n`arthas-boot`是`Arthas`的启动程序，它启动后，会列出所有的Java进程，用户可以选择需要诊断的目标进程。\n\n选择第一个进程，输入 `1` ，再`Enter/回车`：\n\n```bash\n1\n```\n\nAttach成功之后，会打印Arthas LOGO。输入 `help` 可以获取到更多的帮助信息。\n\n```bash\nhelp\n```\n\n![Arthas Boot](O1CN01HzatXZ1RgccrlT90M_!!6000000002141-2-tps-529-244.png)\n\n## watch命令\n\n> 方法执行数据观测\n\n让你能方便的观察到指定方法的调用情况。能观察到的范围为：`返回值`、`抛出异常`、`入参`，通过编写 OGNL 表达式进行对应变量的查看。\n\n#### 参数说明\n\nwatch 的参数比较多，主要是因为它能在 4 个不同的场景观察对象\n\n| 参数名称            | 参数说明                                   |\n| ------------------- | ------------------------------------------ |\n| *class-pattern*     | 类名表达式匹配                             |\n| *method-pattern*    | 方法名表达式匹配                           |\n| *express*           | 观察表达式                                 |\n| *condition-express* | 条件表达式                                 |\n| [b]                 | 在**方法调用之前**观察                     |\n| [e]                 | 在**方法异常之后**观察                     |\n| [s]                 | 在**方法返回之后**观察                     |\n| [f]                 | 在**方法结束之后**(正常返回和异常返回)观察 |\n| [E]                 | 开启正则表达式匹配，默认为通配符匹配       |\n| [x:]                | 指定输出结果的属性遍历深度，默认为 1       |\n\n这里重点要说明的是观察表达式，观察表达式的构成主要由 \bognl 表达式组成，所以你可以这样写`\"{params,returnObj}\"`，只要是一个合法的 ognl 表达式，都能被正常支持。\n\n观察的维度也比较多，主要体现在参数 `advice` 的数据结构上。`Advice` 参数最主要是封装了通知节点的所有信息。请参考[表达式核心变量](https://shell.aliyun.com/tutorial)中关于该节点的描述。\n\n- 特殊用法请参考：https://github.com/alibaba/arthas/issues/71\n- OGNL表达式官网：https://commons.apache.org/proper/commons-ognl/language-guide.html\n\n**特别说明**：\n\n- watch 命令定义了4个观察事件点，即 `-b` 方法调用前，`-e` 方法异常后，`-s` 方法返回后，`-f` 方法结束后\n- 4个观察事件点 `-b`、`-e`、`-s` 默认关闭，`-f` 默认打开，当指定观察点被打开后，在相应事件点会对观察表达式进行求值并输出\n- 这里要注意`方法入参`和`方法出参`的区别，有可能在中间被修改导致前后不一致，除了 `-b` 事件点 `params` 代表方法入参外，其余事件都代表方法出参\n- 当使用 `-b` 时，由于观察事件点是在方法调用前，此时返回值或异常均不存在\n\n#### 使用参考\n\n##### 观察方法出参和返回值\n\n```bash\nwatch demo.MathGame primeFactors \"{params,returnObj}\" -x 2\n```\n\n按`q`或者`Ctrl+c`退出\n\n```bash\nq\n```\n\n```console\n$ watch demo.MathGame primeFactors \"{params,returnObj}\" -x 2\nPress Ctrl+C to abort.\nAffect(class-cnt:1 , method-cnt:1) cost in 44 ms.\nts=2018-12-03 19:16:51; [cost=1.280502ms] result=@ArrayList[\n    @Object[][\n        @Integer[535629513],\n    ],\n    @ArrayList[\n        @Integer[3],\n        @Integer[19],\n        @Integer[191],\n        @Integer[49199],\n    ],\n]\n```\n\n##### 观察方法入参\n\n```bash\nwatch demo.MathGame primeFactors \"{params,returnObj}\" -x 2 -b\n```\n\n按`q`或者`Ctrl+c`退出\n\n```bash\nq\n```\n\n```console\n$ watch demo.MathGame primeFactors \"{params,returnObj}\" -x 2 -b\nPress Ctrl+C to abort.\nAffect(class-cnt:1 , method-cnt:1) cost in 50 ms.\nts=2018-12-03 19:23:23; [cost=0.0353ms] result=@ArrayList[\n    @Object[][\n        @Integer[-1077465243],\n    ],\n    null,\n]\n```\n\n- 对比前一个例子，返回值为空（事件点为方法执行前，因此获取不到返回值）\n\n##### 同时观察方法调用前和方法返回后\n\n```bash\nwatch demo.MathGame primeFactors \"{params,target,returnObj}\" -x 2 -b -s -n 2\n```\n\n按`q`或者`Ctrl+c`退出\n\n```bash\nq\n```\n\n```console\n$ watch demo.MathGame primeFactors \"{params,target,returnObj}\" -x 2 -b -s -n 2\nPress Ctrl+C to abort.\nAffect(class-cnt:1 , method-cnt:1) cost in 46 ms.\nts=2018-12-03 19:29:54; [cost=0.01696ms] result=@ArrayList[\n    @Object[][\n        @Integer[1544665400],\n    ],\n    @MathGame[\n        random=@Random[java.util.Random@522b408a],\n        illegalArgumentCount=@Integer[13038],\n    ],\n    null,\n]\nts=2018-12-03 19:29:54; [cost=4.277392ms] result=@ArrayList[\n    @Object[][\n        @Integer[1544665400],\n    ],\n    @MathGame[\n        random=@Random[java.util.Random@522b408a],\n        illegalArgumentCount=@Integer[13038],\n    ],\n    @ArrayList[\n        @Integer[2],\n        @Integer[2],\n        @Integer[2],\n        @Integer[5],\n        @Integer[5],\n        @Integer[73],\n        @Integer[241],\n        @Integer[439],\n    ],\n]\n```\n\n- 参数里`-n 2`，表示只执行两次\n- 这里输出结果中，第一次输出的是方法调用前的观察表达式的结果，第二次输出的是方法返回后的表达式的结果\n- 结果的输出顺序和事件发生的先后顺序一致，和命令中 `-s -b` 的顺序无关\n\n##### 调整`-x`的值，观察具体的方法参数值\n\n```bash\nwatch demo.MathGame primeFactors \"{params,target}\" -x 3\n```\n\n按`q`或者`Ctrl+c`退出\n\n```bash\nq\n```\n\n```console\n$ watch demo.MathGame primeFactors \"{params,target}\" -x 3\nPress Ctrl+C to abort.\nAffect(class-cnt:1 , method-cnt:1) cost in 58 ms.\nts=2018-12-03 19:34:19; [cost=0.587833ms] result=@ArrayList[\n    @Object[][\n        @Integer[47816758],\n    ],\n    @MathGame[\n        random=@Random[\n            serialVersionUID=@Long[3905348978240129619],\n            seed=@AtomicLong[3133719055989],\n            multiplier=@Long[25214903917],\n            addend=@Long[11],\n            mask=@Long[281474976710655],\n            DOUBLE_UNIT=@Double[1.1102230246251565E-16],\n            BadBound=@String[bound must be positive],\n            BadRange=@String[bound must be greater than origin],\n            BadSize=@String[size must be non-negative],\n            seedUniquifier=@AtomicLong[-3282039941672302964],\n            nextNextGaussian=@Double[0.0],\n            haveNextNextGaussian=@Boolean[false],\n            serialPersistentFields=@ObjectStreamField[][isEmpty=false;size=3],\n            unsafe=@Unsafe[sun.misc.Unsafe@2eaa1027],\n            seedOffset=@Long[24],\n        ],\n        illegalArgumentCount=@Integer[13159],\n    ],\n]\n```\n\n- `-x`表示遍历深度，可以调整来打印具体的参数和结果内容，默认值是1。\n\n##### 条件表达式的例子\n\n```bash\nwatch demo.MathGame primeFactors \"{params[0],target}\" \"params[0]<0\"\n```\n\n按`q`或者`Ctrl+c`退出\n\n```bash\nq\n```\n\n```console\n$ watch demo.MathGame primeFactors \"{params[0],target}\" \"params[0]<0\"\nPress Ctrl+C to abort.\nAffect(class-cnt:1 , method-cnt:1) cost in 68 ms.\nts=2018-12-03 19:36:04; [cost=0.530255ms] result=@ArrayList[\n    @Integer[-18178089],\n    @MathGame[demo.MathGame@41cf53f9],\n]\n```\n\n- 只有满足条件的调用，才会有响应。\n- `watch-express` 单个值可以不加'{}'，多个值需要加'{a,b,c}'。\n- `condition-express` 不能加'{}'，可以使用逗号分隔子表达式，取表达式最后一个值来判断。\n\n如果watch的方法存在同名的其它重载方法，可以通过下面的办法进行过滤：\n\n- 根据参数类型进行过滤\n\n  `watch demo.MathGame primeFactors '{params, params[0].class.name}' 'params[0].class.name == \"java.lang.Integer\"'`\n\n```bash\nwatch demo.MathGame primeFactors '{params, params[0].class.name}' 'params[0].class.name == \"java.lang.Integer\"'\n```\n\n按`q`或者`Ctrl+c`退出\n\n```bash\nq\n```\n\n- 根据参数个数进行过滤\n\n  `watch demo.MathGame primeFactors '{params, params.length}' 'params.length==1'`\n\n```bash\nwatch demo.MathGame primeFactors '{params, params.length}' 'params.length==1'\n```\n\n按`q`或者`Ctrl+c`退出\n\n```bash\nq\n```\n\n##### 观察异常信息的例子\n\n```bash\nwatch demo.MathGame primeFactors \"{params[0],throwExp}\" -e -x 2\n```\n\n按`q`或者`Ctrl+c`退出\n\n```bash\nq\n```\n\n```console\n$ watch demo.MathGame primeFactors \"{params[0],throwExp}\" -e -x 2\nPress Ctrl+C to abort.\nAffect(class-cnt:1 , method-cnt:1) cost in 62 ms.\nts=2018-12-03 19:38:00; [cost=1.414993ms] result=@ArrayList[\n    @Integer[-1120397038],\n    java.lang.IllegalArgumentException: number is: -1120397038, need >= 2\n    at demo.MathGame.primeFactors(MathGame.java:46)\n    at demo.MathGame.run(MathGame.java:24)\n    at demo.MathGame.main(MathGame.java:16)\n,\n]\n```\n\n- `-e`表示抛出异常时才触发\n- express中，表示异常信息的变量是`throwExp`\n\n根据异常类型或者message进行过滤：\n\n```bash\nwatch demo.MathGame primeFactors '{params, throwExp}' '#msg=throwExp.toString(), #msg.contains(\"IllegalArgumentException\")' -e -x 2\n```\n\n按`q`或者`Ctrl+c`退出\n\n```bash\nq\n```\n\n##### 按照耗时进行过滤\n\n```bash\nwatch demo.MathGame primeFactors '{params, returnObj}' '#cost>200' -x 2\n```\n\n按`q`或者`Ctrl+c`退出\n\n```bash\nq\n```\n\n```console\n$ watch demo.MathGame primeFactors '{params, returnObj}' '#cost>200' -x 2\nPress Ctrl+C to abort.\nAffect(class-cnt:1 , method-cnt:1) cost in 66 ms.\nts=2018-12-03 19:40:28; [cost=2112.168897ms] result=@ArrayList[\n    @Object[][\n        @Integer[2141897465],\n    ],\n    @ArrayList[\n        @Integer[5],\n        @Integer[428379493],\n    ],\n]\n```\n\n- `#cost>200`(单位是`ms`)表示只有当耗时大于200ms时才会输出，过滤掉执行时间小于200ms的调用\n\n##### 观察当前对象中的属性\n\n```bash\nwatch demo.MathGame primeFactors 'target'\n```\n\n按`q`或者`Ctrl+c`退出\n\n```bash\nq\n```\n\n如果想查看方法运行前后，当前对象中的属性，可以使用`target`关键字，代表当前对象\n\n```console\n$ watch demo.MathGame primeFactors 'target'\nPress Ctrl+C to abort.\nAffect(class-cnt:1 , method-cnt:1) cost in 52 ms.\nts=2018-12-03 19:41:52; [cost=0.477882ms] result=@MathGame[\n    random=@Random[java.util.Random@522b408a],\n    illegalArgumentCount=@Integer[13355],\n]\n```\n\n然后使用`target.field_name`访问当前对象的某个属性\n\n```bash\nwatch demo.MathGame primeFactors 'target.illegalArgumentCount'\n```\n\n按`q`或者`Ctrl+c`退出\n\n```bash\nq\n```\n\n```console\n$ watch demo.MathGame primeFactors 'target.illegalArgumentCount'\nPress Ctrl+C to abort.\nAffect(class-cnt:1 , method-cnt:1) cost in 67 ms.\nts=2018-12-03 20:04:34; [cost=131.303498ms] result=@Integer[8]\nts=2018-12-03 20:04:35; [cost=0.961441ms] result=@Integer[8]\n```\n\n## 更多信息\n\n在“watch”中，我们演示了了Arthas的watch命令。如果有更多的技巧或者使用疑问，欢迎在Issue里提出。\n\n- Issues: https://github.com/alibaba/arthas/issues\n- 文档： https://arthas.aliyun.com/doc\n\n如果您在使用Arthas，请让我们知道。您的使用对我们非常重要：[查看](https://github.com/alibaba/arthas/issues/111)\n\n文章拷贝来源：https://start.aliyun.com/course?spm=a2ck6.17690074.0.0.28bc2e7dHTphXs&id=PaiFAkJM","source":"_posts/Java诊断工具Arthas高级命令教程/Arthaswatch命令.md","raw":"---\ntitle: Arthas watch命令\ndate: 2021-08-07 09:51:36\ntags: ['Java 诊断工具 Arthas 高级命令教程']\n---\n\n<!-- toc -->\n\n![Arthas](arthas.png)\n\n`Arthas` 是Alibaba开源的Java诊断工具，深受开发者喜爱。在线排查问题，无需重启；动态跟踪Java代码；实时监控JVM状态。\n\n`Arthas` 支持JDK 6+，支持Linux/Mac/Windows，采用命令行交互模式，同时提供丰富的 `Tab` 自动补全功能，进一步方便进行问题的定位和诊断。\n\n当你遇到以下类似问题而束手无策时，Arthas可以帮助你解决：\n\n- 这个类从哪个 jar 包加载的？为什么会报各种类相关的 Exception？\n- 我改的代码为什么没有执行到？难道是我没 commit？分支搞错了？\n- 遇到问题无法在线上 debug，难道只能通过加日志再重新发布吗？\n- 线上遇到某个用户的数据处理有问题，但线上同样无法 debug，线下无法重现！\n- 是否有一个全局视角来查看系统的运行状况？\n- 有什么办法可以监控到JVM的实时运行状态？\n- 怎么快速定位应用的热点，生成火焰图？\n\n本教程会以一个简单的应用为例，演示watch命令。\n\n- Github: https://github.com/alibaba/arthas\n- 文档: https://arthas.aliyun.com/doc/\n\n## 启动arthas demo\n\n下载`arthas-demo.jar`，再用`java -jar`命令启动：\n\n```bash\nwget https://arthas.aliyun.com/arthas-demo.jar;java -jar arthas-demo.jar\n```\n\n`arthas-demo`是一个很简单的程序，它随机生成整数，再执行因式分解，把结果打印出来。如果生成的随机数是负数，则会打印提示信息。\n\n## 启动arthas-boot\n\n在新的`Terminal 2`里，下载`arthas-boot.jar`，再用`java -jar`命令启动：\n\n```bash\nwget https://arthas.aliyun.com/arthas-boot.jar;java -jar arthas-boot.jar\n```\n\n`arthas-boot`是`Arthas`的启动程序，它启动后，会列出所有的Java进程，用户可以选择需要诊断的目标进程。\n\n选择第一个进程，输入 `1` ，再`Enter/回车`：\n\n```bash\n1\n```\n\nAttach成功之后，会打印Arthas LOGO。输入 `help` 可以获取到更多的帮助信息。\n\n```bash\nhelp\n```\n\n![Arthas Boot](O1CN01HzatXZ1RgccrlT90M_!!6000000002141-2-tps-529-244.png)\n\n## watch命令\n\n> 方法执行数据观测\n\n让你能方便的观察到指定方法的调用情况。能观察到的范围为：`返回值`、`抛出异常`、`入参`，通过编写 OGNL 表达式进行对应变量的查看。\n\n#### 参数说明\n\nwatch 的参数比较多，主要是因为它能在 4 个不同的场景观察对象\n\n| 参数名称            | 参数说明                                   |\n| ------------------- | ------------------------------------------ |\n| *class-pattern*     | 类名表达式匹配                             |\n| *method-pattern*    | 方法名表达式匹配                           |\n| *express*           | 观察表达式                                 |\n| *condition-express* | 条件表达式                                 |\n| [b]                 | 在**方法调用之前**观察                     |\n| [e]                 | 在**方法异常之后**观察                     |\n| [s]                 | 在**方法返回之后**观察                     |\n| [f]                 | 在**方法结束之后**(正常返回和异常返回)观察 |\n| [E]                 | 开启正则表达式匹配，默认为通配符匹配       |\n| [x:]                | 指定输出结果的属性遍历深度，默认为 1       |\n\n这里重点要说明的是观察表达式，观察表达式的构成主要由 \bognl 表达式组成，所以你可以这样写`\"{params,returnObj}\"`，只要是一个合法的 ognl 表达式，都能被正常支持。\n\n观察的维度也比较多，主要体现在参数 `advice` 的数据结构上。`Advice` 参数最主要是封装了通知节点的所有信息。请参考[表达式核心变量](https://shell.aliyun.com/tutorial)中关于该节点的描述。\n\n- 特殊用法请参考：https://github.com/alibaba/arthas/issues/71\n- OGNL表达式官网：https://commons.apache.org/proper/commons-ognl/language-guide.html\n\n**特别说明**：\n\n- watch 命令定义了4个观察事件点，即 `-b` 方法调用前，`-e` 方法异常后，`-s` 方法返回后，`-f` 方法结束后\n- 4个观察事件点 `-b`、`-e`、`-s` 默认关闭，`-f` 默认打开，当指定观察点被打开后，在相应事件点会对观察表达式进行求值并输出\n- 这里要注意`方法入参`和`方法出参`的区别，有可能在中间被修改导致前后不一致，除了 `-b` 事件点 `params` 代表方法入参外，其余事件都代表方法出参\n- 当使用 `-b` 时，由于观察事件点是在方法调用前，此时返回值或异常均不存在\n\n#### 使用参考\n\n##### 观察方法出参和返回值\n\n```bash\nwatch demo.MathGame primeFactors \"{params,returnObj}\" -x 2\n```\n\n按`q`或者`Ctrl+c`退出\n\n```bash\nq\n```\n\n```console\n$ watch demo.MathGame primeFactors \"{params,returnObj}\" -x 2\nPress Ctrl+C to abort.\nAffect(class-cnt:1 , method-cnt:1) cost in 44 ms.\nts=2018-12-03 19:16:51; [cost=1.280502ms] result=@ArrayList[\n    @Object[][\n        @Integer[535629513],\n    ],\n    @ArrayList[\n        @Integer[3],\n        @Integer[19],\n        @Integer[191],\n        @Integer[49199],\n    ],\n]\n```\n\n##### 观察方法入参\n\n```bash\nwatch demo.MathGame primeFactors \"{params,returnObj}\" -x 2 -b\n```\n\n按`q`或者`Ctrl+c`退出\n\n```bash\nq\n```\n\n```console\n$ watch demo.MathGame primeFactors \"{params,returnObj}\" -x 2 -b\nPress Ctrl+C to abort.\nAffect(class-cnt:1 , method-cnt:1) cost in 50 ms.\nts=2018-12-03 19:23:23; [cost=0.0353ms] result=@ArrayList[\n    @Object[][\n        @Integer[-1077465243],\n    ],\n    null,\n]\n```\n\n- 对比前一个例子，返回值为空（事件点为方法执行前，因此获取不到返回值）\n\n##### 同时观察方法调用前和方法返回后\n\n```bash\nwatch demo.MathGame primeFactors \"{params,target,returnObj}\" -x 2 -b -s -n 2\n```\n\n按`q`或者`Ctrl+c`退出\n\n```bash\nq\n```\n\n```console\n$ watch demo.MathGame primeFactors \"{params,target,returnObj}\" -x 2 -b -s -n 2\nPress Ctrl+C to abort.\nAffect(class-cnt:1 , method-cnt:1) cost in 46 ms.\nts=2018-12-03 19:29:54; [cost=0.01696ms] result=@ArrayList[\n    @Object[][\n        @Integer[1544665400],\n    ],\n    @MathGame[\n        random=@Random[java.util.Random@522b408a],\n        illegalArgumentCount=@Integer[13038],\n    ],\n    null,\n]\nts=2018-12-03 19:29:54; [cost=4.277392ms] result=@ArrayList[\n    @Object[][\n        @Integer[1544665400],\n    ],\n    @MathGame[\n        random=@Random[java.util.Random@522b408a],\n        illegalArgumentCount=@Integer[13038],\n    ],\n    @ArrayList[\n        @Integer[2],\n        @Integer[2],\n        @Integer[2],\n        @Integer[5],\n        @Integer[5],\n        @Integer[73],\n        @Integer[241],\n        @Integer[439],\n    ],\n]\n```\n\n- 参数里`-n 2`，表示只执行两次\n- 这里输出结果中，第一次输出的是方法调用前的观察表达式的结果，第二次输出的是方法返回后的表达式的结果\n- 结果的输出顺序和事件发生的先后顺序一致，和命令中 `-s -b` 的顺序无关\n\n##### 调整`-x`的值，观察具体的方法参数值\n\n```bash\nwatch demo.MathGame primeFactors \"{params,target}\" -x 3\n```\n\n按`q`或者`Ctrl+c`退出\n\n```bash\nq\n```\n\n```console\n$ watch demo.MathGame primeFactors \"{params,target}\" -x 3\nPress Ctrl+C to abort.\nAffect(class-cnt:1 , method-cnt:1) cost in 58 ms.\nts=2018-12-03 19:34:19; [cost=0.587833ms] result=@ArrayList[\n    @Object[][\n        @Integer[47816758],\n    ],\n    @MathGame[\n        random=@Random[\n            serialVersionUID=@Long[3905348978240129619],\n            seed=@AtomicLong[3133719055989],\n            multiplier=@Long[25214903917],\n            addend=@Long[11],\n            mask=@Long[281474976710655],\n            DOUBLE_UNIT=@Double[1.1102230246251565E-16],\n            BadBound=@String[bound must be positive],\n            BadRange=@String[bound must be greater than origin],\n            BadSize=@String[size must be non-negative],\n            seedUniquifier=@AtomicLong[-3282039941672302964],\n            nextNextGaussian=@Double[0.0],\n            haveNextNextGaussian=@Boolean[false],\n            serialPersistentFields=@ObjectStreamField[][isEmpty=false;size=3],\n            unsafe=@Unsafe[sun.misc.Unsafe@2eaa1027],\n            seedOffset=@Long[24],\n        ],\n        illegalArgumentCount=@Integer[13159],\n    ],\n]\n```\n\n- `-x`表示遍历深度，可以调整来打印具体的参数和结果内容，默认值是1。\n\n##### 条件表达式的例子\n\n```bash\nwatch demo.MathGame primeFactors \"{params[0],target}\" \"params[0]<0\"\n```\n\n按`q`或者`Ctrl+c`退出\n\n```bash\nq\n```\n\n```console\n$ watch demo.MathGame primeFactors \"{params[0],target}\" \"params[0]<0\"\nPress Ctrl+C to abort.\nAffect(class-cnt:1 , method-cnt:1) cost in 68 ms.\nts=2018-12-03 19:36:04; [cost=0.530255ms] result=@ArrayList[\n    @Integer[-18178089],\n    @MathGame[demo.MathGame@41cf53f9],\n]\n```\n\n- 只有满足条件的调用，才会有响应。\n- `watch-express` 单个值可以不加'{}'，多个值需要加'{a,b,c}'。\n- `condition-express` 不能加'{}'，可以使用逗号分隔子表达式，取表达式最后一个值来判断。\n\n如果watch的方法存在同名的其它重载方法，可以通过下面的办法进行过滤：\n\n- 根据参数类型进行过滤\n\n  `watch demo.MathGame primeFactors '{params, params[0].class.name}' 'params[0].class.name == \"java.lang.Integer\"'`\n\n```bash\nwatch demo.MathGame primeFactors '{params, params[0].class.name}' 'params[0].class.name == \"java.lang.Integer\"'\n```\n\n按`q`或者`Ctrl+c`退出\n\n```bash\nq\n```\n\n- 根据参数个数进行过滤\n\n  `watch demo.MathGame primeFactors '{params, params.length}' 'params.length==1'`\n\n```bash\nwatch demo.MathGame primeFactors '{params, params.length}' 'params.length==1'\n```\n\n按`q`或者`Ctrl+c`退出\n\n```bash\nq\n```\n\n##### 观察异常信息的例子\n\n```bash\nwatch demo.MathGame primeFactors \"{params[0],throwExp}\" -e -x 2\n```\n\n按`q`或者`Ctrl+c`退出\n\n```bash\nq\n```\n\n```console\n$ watch demo.MathGame primeFactors \"{params[0],throwExp}\" -e -x 2\nPress Ctrl+C to abort.\nAffect(class-cnt:1 , method-cnt:1) cost in 62 ms.\nts=2018-12-03 19:38:00; [cost=1.414993ms] result=@ArrayList[\n    @Integer[-1120397038],\n    java.lang.IllegalArgumentException: number is: -1120397038, need >= 2\n    at demo.MathGame.primeFactors(MathGame.java:46)\n    at demo.MathGame.run(MathGame.java:24)\n    at demo.MathGame.main(MathGame.java:16)\n,\n]\n```\n\n- `-e`表示抛出异常时才触发\n- express中，表示异常信息的变量是`throwExp`\n\n根据异常类型或者message进行过滤：\n\n```bash\nwatch demo.MathGame primeFactors '{params, throwExp}' '#msg=throwExp.toString(), #msg.contains(\"IllegalArgumentException\")' -e -x 2\n```\n\n按`q`或者`Ctrl+c`退出\n\n```bash\nq\n```\n\n##### 按照耗时进行过滤\n\n```bash\nwatch demo.MathGame primeFactors '{params, returnObj}' '#cost>200' -x 2\n```\n\n按`q`或者`Ctrl+c`退出\n\n```bash\nq\n```\n\n```console\n$ watch demo.MathGame primeFactors '{params, returnObj}' '#cost>200' -x 2\nPress Ctrl+C to abort.\nAffect(class-cnt:1 , method-cnt:1) cost in 66 ms.\nts=2018-12-03 19:40:28; [cost=2112.168897ms] result=@ArrayList[\n    @Object[][\n        @Integer[2141897465],\n    ],\n    @ArrayList[\n        @Integer[5],\n        @Integer[428379493],\n    ],\n]\n```\n\n- `#cost>200`(单位是`ms`)表示只有当耗时大于200ms时才会输出，过滤掉执行时间小于200ms的调用\n\n##### 观察当前对象中的属性\n\n```bash\nwatch demo.MathGame primeFactors 'target'\n```\n\n按`q`或者`Ctrl+c`退出\n\n```bash\nq\n```\n\n如果想查看方法运行前后，当前对象中的属性，可以使用`target`关键字，代表当前对象\n\n```console\n$ watch demo.MathGame primeFactors 'target'\nPress Ctrl+C to abort.\nAffect(class-cnt:1 , method-cnt:1) cost in 52 ms.\nts=2018-12-03 19:41:52; [cost=0.477882ms] result=@MathGame[\n    random=@Random[java.util.Random@522b408a],\n    illegalArgumentCount=@Integer[13355],\n]\n```\n\n然后使用`target.field_name`访问当前对象的某个属性\n\n```bash\nwatch demo.MathGame primeFactors 'target.illegalArgumentCount'\n```\n\n按`q`或者`Ctrl+c`退出\n\n```bash\nq\n```\n\n```console\n$ watch demo.MathGame primeFactors 'target.illegalArgumentCount'\nPress Ctrl+C to abort.\nAffect(class-cnt:1 , method-cnt:1) cost in 67 ms.\nts=2018-12-03 20:04:34; [cost=131.303498ms] result=@Integer[8]\nts=2018-12-03 20:04:35; [cost=0.961441ms] result=@Integer[8]\n```\n\n## 更多信息\n\n在“watch”中，我们演示了了Arthas的watch命令。如果有更多的技巧或者使用疑问，欢迎在Issue里提出。\n\n- Issues: https://github.com/alibaba/arthas/issues\n- 文档： https://arthas.aliyun.com/doc\n\n如果您在使用Arthas，请让我们知道。您的使用对我们非常重要：[查看](https://github.com/alibaba/arthas/issues/111)\n\n文章拷贝来源：https://start.aliyun.com/course?spm=a2ck6.17690074.0.0.28bc2e7dHTphXs&id=PaiFAkJM","slug":"Java诊断工具Arthas高级命令教程/Arthaswatch命令","published":1,"updated":"2021-08-07T05:35:44.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cks1cgr7l003wfw5i91l128fi","content":"<!-- toc -->\n\n<ul>\n<li><a href=\"#%E5%90%AF%E5%8A%A8arthas-demo\">启动arthas demo</a></li>\n<li><a href=\"#%E5%90%AF%E5%8A%A8arthas-boot\">启动arthas-boot</a></li>\n<li><a href=\"#watch%E5%91%BD%E4%BB%A4\">watch命令</a><ul>\n<li><a href=\"#%E5%8F%82%E6%95%B0%E8%AF%B4%E6%98%8E\">参数说明</a></li>\n<li><a href=\"#%E4%BD%BF%E7%94%A8%E5%8F%82%E8%80%83\">使用参考</a><ul>\n<li><a href=\"#%E8%A7%82%E5%AF%9F%E6%96%B9%E6%B3%95%E5%87%BA%E5%8F%82%E5%92%8C%E8%BF%94%E5%9B%9E%E5%80%BC\">观察方法出参和返回值</a></li>\n<li><a href=\"#%E8%A7%82%E5%AF%9F%E6%96%B9%E6%B3%95%E5%85%A5%E5%8F%82\">观察方法入参</a></li>\n<li><a href=\"#%E5%90%8C%E6%97%B6%E8%A7%82%E5%AF%9F%E6%96%B9%E6%B3%95%E8%B0%83%E7%94%A8%E5%89%8D%E5%92%8C%E6%96%B9%E6%B3%95%E8%BF%94%E5%9B%9E%E5%90%8E\">同时观察方法调用前和方法返回后</a></li>\n<li><a href=\"#%E8%B0%83%E6%95%B4-x%E7%9A%84%E5%80%BC%E8%A7%82%E5%AF%9F%E5%85%B7%E4%BD%93%E7%9A%84%E6%96%B9%E6%B3%95%E5%8F%82%E6%95%B0%E5%80%BC\">调整<code>-x</code>的值，观察具体的方法参数值</a></li>\n<li><a href=\"#%E6%9D%A1%E4%BB%B6%E8%A1%A8%E8%BE%BE%E5%BC%8F%E7%9A%84%E4%BE%8B%E5%AD%90\">条件表达式的例子</a></li>\n<li><a href=\"#%E8%A7%82%E5%AF%9F%E5%BC%82%E5%B8%B8%E4%BF%A1%E6%81%AF%E7%9A%84%E4%BE%8B%E5%AD%90\">观察异常信息的例子</a></li>\n<li><a href=\"#%E6%8C%89%E7%85%A7%E8%80%97%E6%97%B6%E8%BF%9B%E8%A1%8C%E8%BF%87%E6%BB%A4\">按照耗时进行过滤</a></li>\n<li><a href=\"#%E8%A7%82%E5%AF%9F%E5%BD%93%E5%89%8D%E5%AF%B9%E8%B1%A1%E4%B8%AD%E7%9A%84%E5%B1%9E%E6%80%A7\">观察当前对象中的属性</a></li>\n</ul>\n</li>\n</ul>\n</li>\n<li><a href=\"#%E6%9B%B4%E5%A4%9A%E4%BF%A1%E6%81%AF\">更多信息</a></li>\n</ul>\n<!-- tocstop -->\n\n<p><img src=\"/jlynet.github.io/2021/08/07/Java%E8%AF%8A%E6%96%AD%E5%B7%A5%E5%85%B7Arthas%E9%AB%98%E7%BA%A7%E5%91%BD%E4%BB%A4%E6%95%99%E7%A8%8B/Arthaswatch%E5%91%BD%E4%BB%A4/arthas.png\" alt=\"Arthas\"></p>\n<p><code>Arthas</code> 是Alibaba开源的Java诊断工具，深受开发者喜爱。在线排查问题，无需重启；动态跟踪Java代码；实时监控JVM状态。</p>\n<p><code>Arthas</code> 支持JDK 6+，支持Linux/Mac/Windows，采用命令行交互模式，同时提供丰富的 <code>Tab</code> 自动补全功能，进一步方便进行问题的定位和诊断。</p>\n<p>当你遇到以下类似问题而束手无策时，Arthas可以帮助你解决：</p>\n<ul>\n<li>这个类从哪个 jar 包加载的？为什么会报各种类相关的 Exception？</li>\n<li>我改的代码为什么没有执行到？难道是我没 commit？分支搞错了？</li>\n<li>遇到问题无法在线上 debug，难道只能通过加日志再重新发布吗？</li>\n<li>线上遇到某个用户的数据处理有问题，但线上同样无法 debug，线下无法重现！</li>\n<li>是否有一个全局视角来查看系统的运行状况？</li>\n<li>有什么办法可以监控到JVM的实时运行状态？</li>\n<li>怎么快速定位应用的热点，生成火焰图？</li>\n</ul>\n<p>本教程会以一个简单的应用为例，演示watch命令。</p>\n<ul>\n<li>Github: <a href=\"https://github.com/alibaba/arthas\">https://github.com/alibaba/arthas</a></li>\n<li>文档: <a href=\"https://arthas.aliyun.com/doc/\">https://arthas.aliyun.com/doc/</a></li>\n</ul>\n<h2><span id=\"启动arthas-demo\">启动arthas demo</span></h2><p>下载<code>arthas-demo.jar</code>，再用<code>java -jar</code>命令启动：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wget https://arthas.aliyun.com/arthas-demo.jar;java -jar arthas-demo.jar</span><br></pre></td></tr></table></figure>\n\n<p><code>arthas-demo</code>是一个很简单的程序，它随机生成整数，再执行因式分解，把结果打印出来。如果生成的随机数是负数，则会打印提示信息。</p>\n<h2><span id=\"启动arthas-boot\">启动arthas-boot</span></h2><p>在新的<code>Terminal 2</code>里，下载<code>arthas-boot.jar</code>，再用<code>java -jar</code>命令启动：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wget https://arthas.aliyun.com/arthas-boot.jar;java -jar arthas-boot.jar</span><br></pre></td></tr></table></figure>\n\n<p><code>arthas-boot</code>是<code>Arthas</code>的启动程序，它启动后，会列出所有的Java进程，用户可以选择需要诊断的目标进程。</p>\n<p>选择第一个进程，输入 <code>1</code> ，再<code>Enter/回车</code>：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1</span><br></pre></td></tr></table></figure>\n\n<p>Attach成功之后，会打印Arthas LOGO。输入 <code>help</code> 可以获取到更多的帮助信息。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">help</span></span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/jlynet.github.io/2021/08/07/Java%E8%AF%8A%E6%96%AD%E5%B7%A5%E5%85%B7Arthas%E9%AB%98%E7%BA%A7%E5%91%BD%E4%BB%A4%E6%95%99%E7%A8%8B/Arthaswatch%E5%91%BD%E4%BB%A4/O1CN01HzatXZ1RgccrlT90M_!!6000000002141-2-tps-529-244.png\" alt=\"Arthas Boot\"></p>\n<h2><span id=\"watch命令\">watch命令</span></h2><blockquote>\n<p>方法执行数据观测</p>\n</blockquote>\n<p>让你能方便的观察到指定方法的调用情况。能观察到的范围为：<code>返回值</code>、<code>抛出异常</code>、<code>入参</code>，通过编写 OGNL 表达式进行对应变量的查看。</p>\n<h4><span id=\"参数说明\">参数说明</span></h4><p>watch 的参数比较多，主要是因为它能在 4 个不同的场景观察对象</p>\n<table>\n<thead>\n<tr>\n<th>参数名称</th>\n<th>参数说明</th>\n</tr>\n</thead>\n<tbody><tr>\n<td><em>class-pattern</em></td>\n<td>类名表达式匹配</td>\n</tr>\n<tr>\n<td><em>method-pattern</em></td>\n<td>方法名表达式匹配</td>\n</tr>\n<tr>\n<td><em>express</em></td>\n<td>观察表达式</td>\n</tr>\n<tr>\n<td><em>condition-express</em></td>\n<td>条件表达式</td>\n</tr>\n<tr>\n<td>[b]</td>\n<td>在<strong>方法调用之前</strong>观察</td>\n</tr>\n<tr>\n<td>[e]</td>\n<td>在<strong>方法异常之后</strong>观察</td>\n</tr>\n<tr>\n<td>[s]</td>\n<td>在<strong>方法返回之后</strong>观察</td>\n</tr>\n<tr>\n<td>[f]</td>\n<td>在<strong>方法结束之后</strong>(正常返回和异常返回)观察</td>\n</tr>\n<tr>\n<td>[E]</td>\n<td>开启正则表达式匹配，默认为通配符匹配</td>\n</tr>\n<tr>\n<td>[x:]</td>\n<td>指定输出结果的属性遍历深度，默认为 1</td>\n</tr>\n</tbody></table>\n<p>这里重点要说明的是观察表达式，观察表达式的构成主要由 \bognl 表达式组成，所以你可以这样写<code>&quot;&#123;params,returnObj&#125;&quot;</code>，只要是一个合法的 ognl 表达式，都能被正常支持。</p>\n<p>观察的维度也比较多，主要体现在参数 <code>advice</code> 的数据结构上。<code>Advice</code> 参数最主要是封装了通知节点的所有信息。请参考<a href=\"https://shell.aliyun.com/tutorial\">表达式核心变量</a>中关于该节点的描述。</p>\n<ul>\n<li>特殊用法请参考：<a href=\"https://github.com/alibaba/arthas/issues/71\">https://github.com/alibaba/arthas/issues/71</a></li>\n<li>OGNL表达式官网：<a href=\"https://commons.apache.org/proper/commons-ognl/language-guide.html\">https://commons.apache.org/proper/commons-ognl/language-guide.html</a></li>\n</ul>\n<p><strong>特别说明</strong>：</p>\n<ul>\n<li>watch 命令定义了4个观察事件点，即 <code>-b</code> 方法调用前，<code>-e</code> 方法异常后，<code>-s</code> 方法返回后，<code>-f</code> 方法结束后</li>\n<li>4个观察事件点 <code>-b</code>、<code>-e</code>、<code>-s</code> 默认关闭，<code>-f</code> 默认打开，当指定观察点被打开后，在相应事件点会对观察表达式进行求值并输出</li>\n<li>这里要注意<code>方法入参</code>和<code>方法出参</code>的区别，有可能在中间被修改导致前后不一致，除了 <code>-b</code> 事件点 <code>params</code> 代表方法入参外，其余事件都代表方法出参</li>\n<li>当使用 <code>-b</code> 时，由于观察事件点是在方法调用前，此时返回值或异常均不存在</li>\n</ul>\n<h4><span id=\"使用参考\">使用参考</span></h4><h5><span id=\"观察方法出参和返回值\">观察方法出参和返回值</span></h5><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">watch demo.MathGame primeFactors <span class=\"string\">&quot;&#123;params,returnObj&#125;&quot;</span> -x 2</span><br></pre></td></tr></table></figure>\n\n<p>按<code>q</code>或者<code>Ctrl+c</code>退出</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">q</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight console\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> watch demo.MathGame primeFactors <span class=\"string\">&quot;&#123;params,returnObj&#125;&quot;</span> -x 2</span></span><br><span class=\"line\">Press Ctrl+C to abort.</span><br><span class=\"line\">Affect(class-cnt:1 , method-cnt:1) cost in 44 ms.</span><br><span class=\"line\">ts=2018-12-03 19:16:51; [cost=1.280502ms] result=@ArrayList[</span><br><span class=\"line\">    @Object[][</span><br><span class=\"line\">        @Integer[535629513],</span><br><span class=\"line\">    ],</span><br><span class=\"line\">    @ArrayList[</span><br><span class=\"line\">        @Integer[3],</span><br><span class=\"line\">        @Integer[19],</span><br><span class=\"line\">        @Integer[191],</span><br><span class=\"line\">        @Integer[49199],</span><br><span class=\"line\">    ],</span><br><span class=\"line\">]</span><br></pre></td></tr></table></figure>\n\n<h5><span id=\"观察方法入参\">观察方法入参</span></h5><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">watch demo.MathGame primeFactors <span class=\"string\">&quot;&#123;params,returnObj&#125;&quot;</span> -x 2 -b</span><br></pre></td></tr></table></figure>\n\n<p>按<code>q</code>或者<code>Ctrl+c</code>退出</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">q</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight console\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> watch demo.MathGame primeFactors <span class=\"string\">&quot;&#123;params,returnObj&#125;&quot;</span> -x 2 -b</span></span><br><span class=\"line\">Press Ctrl+C to abort.</span><br><span class=\"line\">Affect(class-cnt:1 , method-cnt:1) cost in 50 ms.</span><br><span class=\"line\">ts=2018-12-03 19:23:23; [cost=0.0353ms] result=@ArrayList[</span><br><span class=\"line\">    @Object[][</span><br><span class=\"line\">        @Integer[-1077465243],</span><br><span class=\"line\">    ],</span><br><span class=\"line\">    null,</span><br><span class=\"line\">]</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>对比前一个例子，返回值为空（事件点为方法执行前，因此获取不到返回值）</li>\n</ul>\n<h5><span id=\"同时观察方法调用前和方法返回后\">同时观察方法调用前和方法返回后</span></h5><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">watch demo.MathGame primeFactors <span class=\"string\">&quot;&#123;params,target,returnObj&#125;&quot;</span> -x 2 -b -s -n 2</span><br></pre></td></tr></table></figure>\n\n<p>按<code>q</code>或者<code>Ctrl+c</code>退出</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">q</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight console\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> watch demo.MathGame primeFactors <span class=\"string\">&quot;&#123;params,target,returnObj&#125;&quot;</span> -x 2 -b -s -n 2</span></span><br><span class=\"line\">Press Ctrl+C to abort.</span><br><span class=\"line\">Affect(class-cnt:1 , method-cnt:1) cost in 46 ms.</span><br><span class=\"line\">ts=2018-12-03 19:29:54; [cost=0.01696ms] result=@ArrayList[</span><br><span class=\"line\">    @Object[][</span><br><span class=\"line\">        @Integer[1544665400],</span><br><span class=\"line\">    ],</span><br><span class=\"line\">    @MathGame[</span><br><span class=\"line\">        random=@Random[java.util.Random@522b408a],</span><br><span class=\"line\">        illegalArgumentCount=@Integer[13038],</span><br><span class=\"line\">    ],</span><br><span class=\"line\">    null,</span><br><span class=\"line\">]</span><br><span class=\"line\">ts=2018-12-03 19:29:54; [cost=4.277392ms] result=@ArrayList[</span><br><span class=\"line\">    @Object[][</span><br><span class=\"line\">        @Integer[1544665400],</span><br><span class=\"line\">    ],</span><br><span class=\"line\">    @MathGame[</span><br><span class=\"line\">        random=@Random[java.util.Random@522b408a],</span><br><span class=\"line\">        illegalArgumentCount=@Integer[13038],</span><br><span class=\"line\">    ],</span><br><span class=\"line\">    @ArrayList[</span><br><span class=\"line\">        @Integer[2],</span><br><span class=\"line\">        @Integer[2],</span><br><span class=\"line\">        @Integer[2],</span><br><span class=\"line\">        @Integer[5],</span><br><span class=\"line\">        @Integer[5],</span><br><span class=\"line\">        @Integer[73],</span><br><span class=\"line\">        @Integer[241],</span><br><span class=\"line\">        @Integer[439],</span><br><span class=\"line\">    ],</span><br><span class=\"line\">]</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>参数里<code>-n 2</code>，表示只执行两次</li>\n<li>这里输出结果中，第一次输出的是方法调用前的观察表达式的结果，第二次输出的是方法返回后的表达式的结果</li>\n<li>结果的输出顺序和事件发生的先后顺序一致，和命令中 <code>-s -b</code> 的顺序无关</li>\n</ul>\n<h5><span id=\"调整-x的值观察具体的方法参数值\">调整<code>-x</code>的值，观察具体的方法参数值</span></h5><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">watch demo.MathGame primeFactors <span class=\"string\">&quot;&#123;params,target&#125;&quot;</span> -x 3</span><br></pre></td></tr></table></figure>\n\n<p>按<code>q</code>或者<code>Ctrl+c</code>退出</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">q</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight console\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> watch demo.MathGame primeFactors <span class=\"string\">&quot;&#123;params,target&#125;&quot;</span> -x 3</span></span><br><span class=\"line\">Press Ctrl+C to abort.</span><br><span class=\"line\">Affect(class-cnt:1 , method-cnt:1) cost in 58 ms.</span><br><span class=\"line\">ts=2018-12-03 19:34:19; [cost=0.587833ms] result=@ArrayList[</span><br><span class=\"line\">    @Object[][</span><br><span class=\"line\">        @Integer[47816758],</span><br><span class=\"line\">    ],</span><br><span class=\"line\">    @MathGame[</span><br><span class=\"line\">        random=@Random[</span><br><span class=\"line\">            serialVersionUID=@Long[3905348978240129619],</span><br><span class=\"line\">            seed=@AtomicLong[3133719055989],</span><br><span class=\"line\">            multiplier=@Long[25214903917],</span><br><span class=\"line\">            addend=@Long[11],</span><br><span class=\"line\">            mask=@Long[281474976710655],</span><br><span class=\"line\">            DOUBLE_UNIT=@Double[1.1102230246251565E-16],</span><br><span class=\"line\">            BadBound=@String[bound must be positive],</span><br><span class=\"line\">            BadRange=@String[bound must be greater than origin],</span><br><span class=\"line\">            BadSize=@String[size must be non-negative],</span><br><span class=\"line\">            seedUniquifier=@AtomicLong[-3282039941672302964],</span><br><span class=\"line\">            nextNextGaussian=@Double[0.0],</span><br><span class=\"line\">            haveNextNextGaussian=@Boolean[false],</span><br><span class=\"line\">            serialPersistentFields=@ObjectStreamField[][isEmpty=false;size=3],</span><br><span class=\"line\">            unsafe=@Unsafe[sun.misc.Unsafe@2eaa1027],</span><br><span class=\"line\">            seedOffset=@Long[24],</span><br><span class=\"line\">        ],</span><br><span class=\"line\">        illegalArgumentCount=@Integer[13159],</span><br><span class=\"line\">    ],</span><br><span class=\"line\">]</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><code>-x</code>表示遍历深度，可以调整来打印具体的参数和结果内容，默认值是1。</li>\n</ul>\n<h5><span id=\"条件表达式的例子\">条件表达式的例子</span></h5><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">watch demo.MathGame primeFactors <span class=\"string\">&quot;&#123;params[0],target&#125;&quot;</span> <span class=\"string\">&quot;params[0]&lt;0&quot;</span></span><br></pre></td></tr></table></figure>\n\n<p>按<code>q</code>或者<code>Ctrl+c</code>退出</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">q</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight console\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> watch demo.MathGame primeFactors <span class=\"string\">&quot;&#123;params[0],target&#125;&quot;</span> <span class=\"string\">&quot;params[0]&lt;0&quot;</span></span></span><br><span class=\"line\">Press Ctrl+C to abort.</span><br><span class=\"line\">Affect(class-cnt:1 , method-cnt:1) cost in 68 ms.</span><br><span class=\"line\">ts=2018-12-03 19:36:04; [cost=0.530255ms] result=@ArrayList[</span><br><span class=\"line\">    @Integer[-18178089],</span><br><span class=\"line\">    @MathGame[demo.MathGame@41cf53f9],</span><br><span class=\"line\">]</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>只有满足条件的调用，才会有响应。</li>\n<li><code>watch-express</code> 单个值可以不加’{}’，多个值需要加’{a,b,c}’。</li>\n<li><code>condition-express</code> 不能加’{}’，可以使用逗号分隔子表达式，取表达式最后一个值来判断。</li>\n</ul>\n<p>如果watch的方法存在同名的其它重载方法，可以通过下面的办法进行过滤：</p>\n<ul>\n<li><p>根据参数类型进行过滤</p>\n<p><code>watch demo.MathGame primeFactors &#39;&#123;params, params[0].class.name&#125;&#39; &#39;params[0].class.name == &quot;java.lang.Integer&quot;&#39;</code></p>\n</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">watch demo.MathGame primeFactors <span class=\"string\">&#x27;&#123;params, params[0].class.name&#125;&#x27;</span> <span class=\"string\">&#x27;params[0].class.name == &quot;java.lang.Integer&quot;&#x27;</span></span><br></pre></td></tr></table></figure>\n\n<p>按<code>q</code>或者<code>Ctrl+c</code>退出</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">q</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><p>根据参数个数进行过滤</p>\n<p><code>watch demo.MathGame primeFactors &#39;&#123;params, params.length&#125;&#39; &#39;params.length==1&#39;</code></p>\n</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">watch demo.MathGame primeFactors <span class=\"string\">&#x27;&#123;params, params.length&#125;&#x27;</span> <span class=\"string\">&#x27;params.length==1&#x27;</span></span><br></pre></td></tr></table></figure>\n\n<p>按<code>q</code>或者<code>Ctrl+c</code>退出</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">q</span><br></pre></td></tr></table></figure>\n\n<h5><span id=\"观察异常信息的例子\">观察异常信息的例子</span></h5><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">watch demo.MathGame primeFactors <span class=\"string\">&quot;&#123;params[0],throwExp&#125;&quot;</span> -e -x 2</span><br></pre></td></tr></table></figure>\n\n<p>按<code>q</code>或者<code>Ctrl+c</code>退出</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">q</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight console\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> watch demo.MathGame primeFactors <span class=\"string\">&quot;&#123;params[0],throwExp&#125;&quot;</span> -e -x 2</span></span><br><span class=\"line\">Press Ctrl+C to abort.</span><br><span class=\"line\">Affect(class-cnt:1 , method-cnt:1) cost in 62 ms.</span><br><span class=\"line\">ts=2018-12-03 19:38:00; [cost=1.414993ms] result=@ArrayList[</span><br><span class=\"line\">    @Integer[-1120397038],</span><br><span class=\"line\">    java.lang.IllegalArgumentException: number is: -1120397038, need &gt;= 2</span><br><span class=\"line\">    at demo.MathGame.primeFactors(MathGame.java:46)</span><br><span class=\"line\">    at demo.MathGame.run(MathGame.java:24)</span><br><span class=\"line\">    at demo.MathGame.main(MathGame.java:16)</span><br><span class=\"line\">,</span><br><span class=\"line\">]</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><code>-e</code>表示抛出异常时才触发</li>\n<li>express中，表示异常信息的变量是<code>throwExp</code></li>\n</ul>\n<p>根据异常类型或者message进行过滤：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">watch demo.MathGame primeFactors <span class=\"string\">&#x27;&#123;params, throwExp&#125;&#x27;</span> <span class=\"string\">&#x27;#msg=throwExp.toString(), #msg.contains(&quot;IllegalArgumentException&quot;)&#x27;</span> -e -x 2</span><br></pre></td></tr></table></figure>\n\n<p>按<code>q</code>或者<code>Ctrl+c</code>退出</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">q</span><br></pre></td></tr></table></figure>\n\n<h5><span id=\"按照耗时进行过滤\">按照耗时进行过滤</span></h5><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">watch demo.MathGame primeFactors <span class=\"string\">&#x27;&#123;params, returnObj&#125;&#x27;</span> <span class=\"string\">&#x27;#cost&gt;200&#x27;</span> -x 2</span><br></pre></td></tr></table></figure>\n\n<p>按<code>q</code>或者<code>Ctrl+c</code>退出</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">q</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight console\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> watch demo.MathGame primeFactors <span class=\"string\">&#x27;&#123;params, returnObj&#125;&#x27;</span> <span class=\"string\">&#x27;#cost&gt;200&#x27;</span> -x 2</span></span><br><span class=\"line\">Press Ctrl+C to abort.</span><br><span class=\"line\">Affect(class-cnt:1 , method-cnt:1) cost in 66 ms.</span><br><span class=\"line\">ts=2018-12-03 19:40:28; [cost=2112.168897ms] result=@ArrayList[</span><br><span class=\"line\">    @Object[][</span><br><span class=\"line\">        @Integer[2141897465],</span><br><span class=\"line\">    ],</span><br><span class=\"line\">    @ArrayList[</span><br><span class=\"line\">        @Integer[5],</span><br><span class=\"line\">        @Integer[428379493],</span><br><span class=\"line\">    ],</span><br><span class=\"line\">]</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><code>#cost&gt;200</code>(单位是<code>ms</code>)表示只有当耗时大于200ms时才会输出，过滤掉执行时间小于200ms的调用</li>\n</ul>\n<h5><span id=\"观察当前对象中的属性\">观察当前对象中的属性</span></h5><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">watch demo.MathGame primeFactors <span class=\"string\">&#x27;target&#x27;</span></span><br></pre></td></tr></table></figure>\n\n<p>按<code>q</code>或者<code>Ctrl+c</code>退出</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">q</span><br></pre></td></tr></table></figure>\n\n<p>如果想查看方法运行前后，当前对象中的属性，可以使用<code>target</code>关键字，代表当前对象</p>\n<figure class=\"highlight console\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> watch demo.MathGame primeFactors <span class=\"string\">&#x27;target&#x27;</span></span></span><br><span class=\"line\">Press Ctrl+C to abort.</span><br><span class=\"line\">Affect(class-cnt:1 , method-cnt:1) cost in 52 ms.</span><br><span class=\"line\">ts=2018-12-03 19:41:52; [cost=0.477882ms] result=@MathGame[</span><br><span class=\"line\">    random=@Random[java.util.Random@522b408a],</span><br><span class=\"line\">    illegalArgumentCount=@Integer[13355],</span><br><span class=\"line\">]</span><br></pre></td></tr></table></figure>\n\n<p>然后使用<code>target.field_name</code>访问当前对象的某个属性</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">watch demo.MathGame primeFactors <span class=\"string\">&#x27;target.illegalArgumentCount&#x27;</span></span><br></pre></td></tr></table></figure>\n\n<p>按<code>q</code>或者<code>Ctrl+c</code>退出</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">q</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight console\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> watch demo.MathGame primeFactors <span class=\"string\">&#x27;target.illegalArgumentCount&#x27;</span></span></span><br><span class=\"line\">Press Ctrl+C to abort.</span><br><span class=\"line\">Affect(class-cnt:1 , method-cnt:1) cost in 67 ms.</span><br><span class=\"line\">ts=2018-12-03 20:04:34; [cost=131.303498ms] result=@Integer[8]</span><br><span class=\"line\">ts=2018-12-03 20:04:35; [cost=0.961441ms] result=@Integer[8]</span><br></pre></td></tr></table></figure>\n\n<h2><span id=\"更多信息\">更多信息</span></h2><p>在“watch”中，我们演示了了Arthas的watch命令。如果有更多的技巧或者使用疑问，欢迎在Issue里提出。</p>\n<ul>\n<li>Issues: <a href=\"https://github.com/alibaba/arthas/issues\">https://github.com/alibaba/arthas/issues</a></li>\n<li>文档： <a href=\"https://arthas.aliyun.com/doc\">https://arthas.aliyun.com/doc</a></li>\n</ul>\n<p>如果您在使用Arthas，请让我们知道。您的使用对我们非常重要：<a href=\"https://github.com/alibaba/arthas/issues/111\">查看</a></p>\n<p>文章拷贝来源：<a href=\"https://start.aliyun.com/course?spm=a2ck6.17690074.0.0.28bc2e7dHTphXs&amp;id=PaiFAkJM\">https://start.aliyun.com/course?spm=a2ck6.17690074.0.0.28bc2e7dHTphXs&amp;id=PaiFAkJM</a></p>\n","site":{"data":{}},"excerpt":"","more":"<!-- toc -->\n\n<ul>\n<li><a href=\"#%E5%90%AF%E5%8A%A8arthas-demo\">启动arthas demo</a></li>\n<li><a href=\"#%E5%90%AF%E5%8A%A8arthas-boot\">启动arthas-boot</a></li>\n<li><a href=\"#watch%E5%91%BD%E4%BB%A4\">watch命令</a><ul>\n<li><a href=\"#%E5%8F%82%E6%95%B0%E8%AF%B4%E6%98%8E\">参数说明</a></li>\n<li><a href=\"#%E4%BD%BF%E7%94%A8%E5%8F%82%E8%80%83\">使用参考</a><ul>\n<li><a href=\"#%E8%A7%82%E5%AF%9F%E6%96%B9%E6%B3%95%E5%87%BA%E5%8F%82%E5%92%8C%E8%BF%94%E5%9B%9E%E5%80%BC\">观察方法出参和返回值</a></li>\n<li><a href=\"#%E8%A7%82%E5%AF%9F%E6%96%B9%E6%B3%95%E5%85%A5%E5%8F%82\">观察方法入参</a></li>\n<li><a href=\"#%E5%90%8C%E6%97%B6%E8%A7%82%E5%AF%9F%E6%96%B9%E6%B3%95%E8%B0%83%E7%94%A8%E5%89%8D%E5%92%8C%E6%96%B9%E6%B3%95%E8%BF%94%E5%9B%9E%E5%90%8E\">同时观察方法调用前和方法返回后</a></li>\n<li><a href=\"#%E8%B0%83%E6%95%B4-x%E7%9A%84%E5%80%BC%E8%A7%82%E5%AF%9F%E5%85%B7%E4%BD%93%E7%9A%84%E6%96%B9%E6%B3%95%E5%8F%82%E6%95%B0%E5%80%BC\">调整<code>-x</code>的值，观察具体的方法参数值</a></li>\n<li><a href=\"#%E6%9D%A1%E4%BB%B6%E8%A1%A8%E8%BE%BE%E5%BC%8F%E7%9A%84%E4%BE%8B%E5%AD%90\">条件表达式的例子</a></li>\n<li><a href=\"#%E8%A7%82%E5%AF%9F%E5%BC%82%E5%B8%B8%E4%BF%A1%E6%81%AF%E7%9A%84%E4%BE%8B%E5%AD%90\">观察异常信息的例子</a></li>\n<li><a href=\"#%E6%8C%89%E7%85%A7%E8%80%97%E6%97%B6%E8%BF%9B%E8%A1%8C%E8%BF%87%E6%BB%A4\">按照耗时进行过滤</a></li>\n<li><a href=\"#%E8%A7%82%E5%AF%9F%E5%BD%93%E5%89%8D%E5%AF%B9%E8%B1%A1%E4%B8%AD%E7%9A%84%E5%B1%9E%E6%80%A7\">观察当前对象中的属性</a></li>\n</ul>\n</li>\n</ul>\n</li>\n<li><a href=\"#%E6%9B%B4%E5%A4%9A%E4%BF%A1%E6%81%AF\">更多信息</a></li>\n</ul>\n<!-- tocstop -->\n\n<p><img src=\"/jlynet.github.io/2021/08/07/Java%E8%AF%8A%E6%96%AD%E5%B7%A5%E5%85%B7Arthas%E9%AB%98%E7%BA%A7%E5%91%BD%E4%BB%A4%E6%95%99%E7%A8%8B/Arthaswatch%E5%91%BD%E4%BB%A4/arthas.png\" alt=\"Arthas\"></p>\n<p><code>Arthas</code> 是Alibaba开源的Java诊断工具，深受开发者喜爱。在线排查问题，无需重启；动态跟踪Java代码；实时监控JVM状态。</p>\n<p><code>Arthas</code> 支持JDK 6+，支持Linux/Mac/Windows，采用命令行交互模式，同时提供丰富的 <code>Tab</code> 自动补全功能，进一步方便进行问题的定位和诊断。</p>\n<p>当你遇到以下类似问题而束手无策时，Arthas可以帮助你解决：</p>\n<ul>\n<li>这个类从哪个 jar 包加载的？为什么会报各种类相关的 Exception？</li>\n<li>我改的代码为什么没有执行到？难道是我没 commit？分支搞错了？</li>\n<li>遇到问题无法在线上 debug，难道只能通过加日志再重新发布吗？</li>\n<li>线上遇到某个用户的数据处理有问题，但线上同样无法 debug，线下无法重现！</li>\n<li>是否有一个全局视角来查看系统的运行状况？</li>\n<li>有什么办法可以监控到JVM的实时运行状态？</li>\n<li>怎么快速定位应用的热点，生成火焰图？</li>\n</ul>\n<p>本教程会以一个简单的应用为例，演示watch命令。</p>\n<ul>\n<li>Github: <a href=\"https://github.com/alibaba/arthas\">https://github.com/alibaba/arthas</a></li>\n<li>文档: <a href=\"https://arthas.aliyun.com/doc/\">https://arthas.aliyun.com/doc/</a></li>\n</ul>\n<h2 id=\"启动arthas-demo\"><a href=\"#启动arthas-demo\" class=\"headerlink\" title=\"启动arthas demo\"></a>启动arthas demo</h2><p>下载<code>arthas-demo.jar</code>，再用<code>java -jar</code>命令启动：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wget https://arthas.aliyun.com/arthas-demo.jar;java -jar arthas-demo.jar</span><br></pre></td></tr></table></figure>\n\n<p><code>arthas-demo</code>是一个很简单的程序，它随机生成整数，再执行因式分解，把结果打印出来。如果生成的随机数是负数，则会打印提示信息。</p>\n<h2 id=\"启动arthas-boot\"><a href=\"#启动arthas-boot\" class=\"headerlink\" title=\"启动arthas-boot\"></a>启动arthas-boot</h2><p>在新的<code>Terminal 2</code>里，下载<code>arthas-boot.jar</code>，再用<code>java -jar</code>命令启动：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wget https://arthas.aliyun.com/arthas-boot.jar;java -jar arthas-boot.jar</span><br></pre></td></tr></table></figure>\n\n<p><code>arthas-boot</code>是<code>Arthas</code>的启动程序，它启动后，会列出所有的Java进程，用户可以选择需要诊断的目标进程。</p>\n<p>选择第一个进程，输入 <code>1</code> ，再<code>Enter/回车</code>：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1</span><br></pre></td></tr></table></figure>\n\n<p>Attach成功之后，会打印Arthas LOGO。输入 <code>help</code> 可以获取到更多的帮助信息。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">help</span></span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/jlynet.github.io/2021/08/07/Java%E8%AF%8A%E6%96%AD%E5%B7%A5%E5%85%B7Arthas%E9%AB%98%E7%BA%A7%E5%91%BD%E4%BB%A4%E6%95%99%E7%A8%8B/Arthaswatch%E5%91%BD%E4%BB%A4/O1CN01HzatXZ1RgccrlT90M_!!6000000002141-2-tps-529-244.png\" alt=\"Arthas Boot\"></p>\n<h2 id=\"watch命令\"><a href=\"#watch命令\" class=\"headerlink\" title=\"watch命令\"></a>watch命令</h2><blockquote>\n<p>方法执行数据观测</p>\n</blockquote>\n<p>让你能方便的观察到指定方法的调用情况。能观察到的范围为：<code>返回值</code>、<code>抛出异常</code>、<code>入参</code>，通过编写 OGNL 表达式进行对应变量的查看。</p>\n<h4 id=\"参数说明\"><a href=\"#参数说明\" class=\"headerlink\" title=\"参数说明\"></a>参数说明</h4><p>watch 的参数比较多，主要是因为它能在 4 个不同的场景观察对象</p>\n<table>\n<thead>\n<tr>\n<th>参数名称</th>\n<th>参数说明</th>\n</tr>\n</thead>\n<tbody><tr>\n<td><em>class-pattern</em></td>\n<td>类名表达式匹配</td>\n</tr>\n<tr>\n<td><em>method-pattern</em></td>\n<td>方法名表达式匹配</td>\n</tr>\n<tr>\n<td><em>express</em></td>\n<td>观察表达式</td>\n</tr>\n<tr>\n<td><em>condition-express</em></td>\n<td>条件表达式</td>\n</tr>\n<tr>\n<td>[b]</td>\n<td>在<strong>方法调用之前</strong>观察</td>\n</tr>\n<tr>\n<td>[e]</td>\n<td>在<strong>方法异常之后</strong>观察</td>\n</tr>\n<tr>\n<td>[s]</td>\n<td>在<strong>方法返回之后</strong>观察</td>\n</tr>\n<tr>\n<td>[f]</td>\n<td>在<strong>方法结束之后</strong>(正常返回和异常返回)观察</td>\n</tr>\n<tr>\n<td>[E]</td>\n<td>开启正则表达式匹配，默认为通配符匹配</td>\n</tr>\n<tr>\n<td>[x:]</td>\n<td>指定输出结果的属性遍历深度，默认为 1</td>\n</tr>\n</tbody></table>\n<p>这里重点要说明的是观察表达式，观察表达式的构成主要由 \bognl 表达式组成，所以你可以这样写<code>&quot;&#123;params,returnObj&#125;&quot;</code>，只要是一个合法的 ognl 表达式，都能被正常支持。</p>\n<p>观察的维度也比较多，主要体现在参数 <code>advice</code> 的数据结构上。<code>Advice</code> 参数最主要是封装了通知节点的所有信息。请参考<a href=\"https://shell.aliyun.com/tutorial\">表达式核心变量</a>中关于该节点的描述。</p>\n<ul>\n<li>特殊用法请参考：<a href=\"https://github.com/alibaba/arthas/issues/71\">https://github.com/alibaba/arthas/issues/71</a></li>\n<li>OGNL表达式官网：<a href=\"https://commons.apache.org/proper/commons-ognl/language-guide.html\">https://commons.apache.org/proper/commons-ognl/language-guide.html</a></li>\n</ul>\n<p><strong>特别说明</strong>：</p>\n<ul>\n<li>watch 命令定义了4个观察事件点，即 <code>-b</code> 方法调用前，<code>-e</code> 方法异常后，<code>-s</code> 方法返回后，<code>-f</code> 方法结束后</li>\n<li>4个观察事件点 <code>-b</code>、<code>-e</code>、<code>-s</code> 默认关闭，<code>-f</code> 默认打开，当指定观察点被打开后，在相应事件点会对观察表达式进行求值并输出</li>\n<li>这里要注意<code>方法入参</code>和<code>方法出参</code>的区别，有可能在中间被修改导致前后不一致，除了 <code>-b</code> 事件点 <code>params</code> 代表方法入参外，其余事件都代表方法出参</li>\n<li>当使用 <code>-b</code> 时，由于观察事件点是在方法调用前，此时返回值或异常均不存在</li>\n</ul>\n<h4 id=\"使用参考\"><a href=\"#使用参考\" class=\"headerlink\" title=\"使用参考\"></a>使用参考</h4><h5 id=\"观察方法出参和返回值\"><a href=\"#观察方法出参和返回值\" class=\"headerlink\" title=\"观察方法出参和返回值\"></a>观察方法出参和返回值</h5><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">watch demo.MathGame primeFactors <span class=\"string\">&quot;&#123;params,returnObj&#125;&quot;</span> -x 2</span><br></pre></td></tr></table></figure>\n\n<p>按<code>q</code>或者<code>Ctrl+c</code>退出</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">q</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight console\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> watch demo.MathGame primeFactors <span class=\"string\">&quot;&#123;params,returnObj&#125;&quot;</span> -x 2</span></span><br><span class=\"line\">Press Ctrl+C to abort.</span><br><span class=\"line\">Affect(class-cnt:1 , method-cnt:1) cost in 44 ms.</span><br><span class=\"line\">ts=2018-12-03 19:16:51; [cost=1.280502ms] result=@ArrayList[</span><br><span class=\"line\">    @Object[][</span><br><span class=\"line\">        @Integer[535629513],</span><br><span class=\"line\">    ],</span><br><span class=\"line\">    @ArrayList[</span><br><span class=\"line\">        @Integer[3],</span><br><span class=\"line\">        @Integer[19],</span><br><span class=\"line\">        @Integer[191],</span><br><span class=\"line\">        @Integer[49199],</span><br><span class=\"line\">    ],</span><br><span class=\"line\">]</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"观察方法入参\"><a href=\"#观察方法入参\" class=\"headerlink\" title=\"观察方法入参\"></a>观察方法入参</h5><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">watch demo.MathGame primeFactors <span class=\"string\">&quot;&#123;params,returnObj&#125;&quot;</span> -x 2 -b</span><br></pre></td></tr></table></figure>\n\n<p>按<code>q</code>或者<code>Ctrl+c</code>退出</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">q</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight console\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> watch demo.MathGame primeFactors <span class=\"string\">&quot;&#123;params,returnObj&#125;&quot;</span> -x 2 -b</span></span><br><span class=\"line\">Press Ctrl+C to abort.</span><br><span class=\"line\">Affect(class-cnt:1 , method-cnt:1) cost in 50 ms.</span><br><span class=\"line\">ts=2018-12-03 19:23:23; [cost=0.0353ms] result=@ArrayList[</span><br><span class=\"line\">    @Object[][</span><br><span class=\"line\">        @Integer[-1077465243],</span><br><span class=\"line\">    ],</span><br><span class=\"line\">    null,</span><br><span class=\"line\">]</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>对比前一个例子，返回值为空（事件点为方法执行前，因此获取不到返回值）</li>\n</ul>\n<h5 id=\"同时观察方法调用前和方法返回后\"><a href=\"#同时观察方法调用前和方法返回后\" class=\"headerlink\" title=\"同时观察方法调用前和方法返回后\"></a>同时观察方法调用前和方法返回后</h5><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">watch demo.MathGame primeFactors <span class=\"string\">&quot;&#123;params,target,returnObj&#125;&quot;</span> -x 2 -b -s -n 2</span><br></pre></td></tr></table></figure>\n\n<p>按<code>q</code>或者<code>Ctrl+c</code>退出</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">q</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight console\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> watch demo.MathGame primeFactors <span class=\"string\">&quot;&#123;params,target,returnObj&#125;&quot;</span> -x 2 -b -s -n 2</span></span><br><span class=\"line\">Press Ctrl+C to abort.</span><br><span class=\"line\">Affect(class-cnt:1 , method-cnt:1) cost in 46 ms.</span><br><span class=\"line\">ts=2018-12-03 19:29:54; [cost=0.01696ms] result=@ArrayList[</span><br><span class=\"line\">    @Object[][</span><br><span class=\"line\">        @Integer[1544665400],</span><br><span class=\"line\">    ],</span><br><span class=\"line\">    @MathGame[</span><br><span class=\"line\">        random=@Random[java.util.Random@522b408a],</span><br><span class=\"line\">        illegalArgumentCount=@Integer[13038],</span><br><span class=\"line\">    ],</span><br><span class=\"line\">    null,</span><br><span class=\"line\">]</span><br><span class=\"line\">ts=2018-12-03 19:29:54; [cost=4.277392ms] result=@ArrayList[</span><br><span class=\"line\">    @Object[][</span><br><span class=\"line\">        @Integer[1544665400],</span><br><span class=\"line\">    ],</span><br><span class=\"line\">    @MathGame[</span><br><span class=\"line\">        random=@Random[java.util.Random@522b408a],</span><br><span class=\"line\">        illegalArgumentCount=@Integer[13038],</span><br><span class=\"line\">    ],</span><br><span class=\"line\">    @ArrayList[</span><br><span class=\"line\">        @Integer[2],</span><br><span class=\"line\">        @Integer[2],</span><br><span class=\"line\">        @Integer[2],</span><br><span class=\"line\">        @Integer[5],</span><br><span class=\"line\">        @Integer[5],</span><br><span class=\"line\">        @Integer[73],</span><br><span class=\"line\">        @Integer[241],</span><br><span class=\"line\">        @Integer[439],</span><br><span class=\"line\">    ],</span><br><span class=\"line\">]</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>参数里<code>-n 2</code>，表示只执行两次</li>\n<li>这里输出结果中，第一次输出的是方法调用前的观察表达式的结果，第二次输出的是方法返回后的表达式的结果</li>\n<li>结果的输出顺序和事件发生的先后顺序一致，和命令中 <code>-s -b</code> 的顺序无关</li>\n</ul>\n<h5 id=\"调整-x的值，观察具体的方法参数值\"><a href=\"#调整-x的值，观察具体的方法参数值\" class=\"headerlink\" title=\"调整-x的值，观察具体的方法参数值\"></a>调整<code>-x</code>的值，观察具体的方法参数值</h5><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">watch demo.MathGame primeFactors <span class=\"string\">&quot;&#123;params,target&#125;&quot;</span> -x 3</span><br></pre></td></tr></table></figure>\n\n<p>按<code>q</code>或者<code>Ctrl+c</code>退出</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">q</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight console\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> watch demo.MathGame primeFactors <span class=\"string\">&quot;&#123;params,target&#125;&quot;</span> -x 3</span></span><br><span class=\"line\">Press Ctrl+C to abort.</span><br><span class=\"line\">Affect(class-cnt:1 , method-cnt:1) cost in 58 ms.</span><br><span class=\"line\">ts=2018-12-03 19:34:19; [cost=0.587833ms] result=@ArrayList[</span><br><span class=\"line\">    @Object[][</span><br><span class=\"line\">        @Integer[47816758],</span><br><span class=\"line\">    ],</span><br><span class=\"line\">    @MathGame[</span><br><span class=\"line\">        random=@Random[</span><br><span class=\"line\">            serialVersionUID=@Long[3905348978240129619],</span><br><span class=\"line\">            seed=@AtomicLong[3133719055989],</span><br><span class=\"line\">            multiplier=@Long[25214903917],</span><br><span class=\"line\">            addend=@Long[11],</span><br><span class=\"line\">            mask=@Long[281474976710655],</span><br><span class=\"line\">            DOUBLE_UNIT=@Double[1.1102230246251565E-16],</span><br><span class=\"line\">            BadBound=@String[bound must be positive],</span><br><span class=\"line\">            BadRange=@String[bound must be greater than origin],</span><br><span class=\"line\">            BadSize=@String[size must be non-negative],</span><br><span class=\"line\">            seedUniquifier=@AtomicLong[-3282039941672302964],</span><br><span class=\"line\">            nextNextGaussian=@Double[0.0],</span><br><span class=\"line\">            haveNextNextGaussian=@Boolean[false],</span><br><span class=\"line\">            serialPersistentFields=@ObjectStreamField[][isEmpty=false;size=3],</span><br><span class=\"line\">            unsafe=@Unsafe[sun.misc.Unsafe@2eaa1027],</span><br><span class=\"line\">            seedOffset=@Long[24],</span><br><span class=\"line\">        ],</span><br><span class=\"line\">        illegalArgumentCount=@Integer[13159],</span><br><span class=\"line\">    ],</span><br><span class=\"line\">]</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><code>-x</code>表示遍历深度，可以调整来打印具体的参数和结果内容，默认值是1。</li>\n</ul>\n<h5 id=\"条件表达式的例子\"><a href=\"#条件表达式的例子\" class=\"headerlink\" title=\"条件表达式的例子\"></a>条件表达式的例子</h5><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">watch demo.MathGame primeFactors <span class=\"string\">&quot;&#123;params[0],target&#125;&quot;</span> <span class=\"string\">&quot;params[0]&lt;0&quot;</span></span><br></pre></td></tr></table></figure>\n\n<p>按<code>q</code>或者<code>Ctrl+c</code>退出</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">q</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight console\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> watch demo.MathGame primeFactors <span class=\"string\">&quot;&#123;params[0],target&#125;&quot;</span> <span class=\"string\">&quot;params[0]&lt;0&quot;</span></span></span><br><span class=\"line\">Press Ctrl+C to abort.</span><br><span class=\"line\">Affect(class-cnt:1 , method-cnt:1) cost in 68 ms.</span><br><span class=\"line\">ts=2018-12-03 19:36:04; [cost=0.530255ms] result=@ArrayList[</span><br><span class=\"line\">    @Integer[-18178089],</span><br><span class=\"line\">    @MathGame[demo.MathGame@41cf53f9],</span><br><span class=\"line\">]</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>只有满足条件的调用，才会有响应。</li>\n<li><code>watch-express</code> 单个值可以不加’{}’，多个值需要加’{a,b,c}’。</li>\n<li><code>condition-express</code> 不能加’{}’，可以使用逗号分隔子表达式，取表达式最后一个值来判断。</li>\n</ul>\n<p>如果watch的方法存在同名的其它重载方法，可以通过下面的办法进行过滤：</p>\n<ul>\n<li><p>根据参数类型进行过滤</p>\n<p><code>watch demo.MathGame primeFactors &#39;&#123;params, params[0].class.name&#125;&#39; &#39;params[0].class.name == &quot;java.lang.Integer&quot;&#39;</code></p>\n</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">watch demo.MathGame primeFactors <span class=\"string\">&#x27;&#123;params, params[0].class.name&#125;&#x27;</span> <span class=\"string\">&#x27;params[0].class.name == &quot;java.lang.Integer&quot;&#x27;</span></span><br></pre></td></tr></table></figure>\n\n<p>按<code>q</code>或者<code>Ctrl+c</code>退出</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">q</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><p>根据参数个数进行过滤</p>\n<p><code>watch demo.MathGame primeFactors &#39;&#123;params, params.length&#125;&#39; &#39;params.length==1&#39;</code></p>\n</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">watch demo.MathGame primeFactors <span class=\"string\">&#x27;&#123;params, params.length&#125;&#x27;</span> <span class=\"string\">&#x27;params.length==1&#x27;</span></span><br></pre></td></tr></table></figure>\n\n<p>按<code>q</code>或者<code>Ctrl+c</code>退出</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">q</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"观察异常信息的例子\"><a href=\"#观察异常信息的例子\" class=\"headerlink\" title=\"观察异常信息的例子\"></a>观察异常信息的例子</h5><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">watch demo.MathGame primeFactors <span class=\"string\">&quot;&#123;params[0],throwExp&#125;&quot;</span> -e -x 2</span><br></pre></td></tr></table></figure>\n\n<p>按<code>q</code>或者<code>Ctrl+c</code>退出</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">q</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight console\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> watch demo.MathGame primeFactors <span class=\"string\">&quot;&#123;params[0],throwExp&#125;&quot;</span> -e -x 2</span></span><br><span class=\"line\">Press Ctrl+C to abort.</span><br><span class=\"line\">Affect(class-cnt:1 , method-cnt:1) cost in 62 ms.</span><br><span class=\"line\">ts=2018-12-03 19:38:00; [cost=1.414993ms] result=@ArrayList[</span><br><span class=\"line\">    @Integer[-1120397038],</span><br><span class=\"line\">    java.lang.IllegalArgumentException: number is: -1120397038, need &gt;= 2</span><br><span class=\"line\">    at demo.MathGame.primeFactors(MathGame.java:46)</span><br><span class=\"line\">    at demo.MathGame.run(MathGame.java:24)</span><br><span class=\"line\">    at demo.MathGame.main(MathGame.java:16)</span><br><span class=\"line\">,</span><br><span class=\"line\">]</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><code>-e</code>表示抛出异常时才触发</li>\n<li>express中，表示异常信息的变量是<code>throwExp</code></li>\n</ul>\n<p>根据异常类型或者message进行过滤：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">watch demo.MathGame primeFactors <span class=\"string\">&#x27;&#123;params, throwExp&#125;&#x27;</span> <span class=\"string\">&#x27;#msg=throwExp.toString(), #msg.contains(&quot;IllegalArgumentException&quot;)&#x27;</span> -e -x 2</span><br></pre></td></tr></table></figure>\n\n<p>按<code>q</code>或者<code>Ctrl+c</code>退出</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">q</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"按照耗时进行过滤\"><a href=\"#按照耗时进行过滤\" class=\"headerlink\" title=\"按照耗时进行过滤\"></a>按照耗时进行过滤</h5><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">watch demo.MathGame primeFactors <span class=\"string\">&#x27;&#123;params, returnObj&#125;&#x27;</span> <span class=\"string\">&#x27;#cost&gt;200&#x27;</span> -x 2</span><br></pre></td></tr></table></figure>\n\n<p>按<code>q</code>或者<code>Ctrl+c</code>退出</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">q</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight console\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> watch demo.MathGame primeFactors <span class=\"string\">&#x27;&#123;params, returnObj&#125;&#x27;</span> <span class=\"string\">&#x27;#cost&gt;200&#x27;</span> -x 2</span></span><br><span class=\"line\">Press Ctrl+C to abort.</span><br><span class=\"line\">Affect(class-cnt:1 , method-cnt:1) cost in 66 ms.</span><br><span class=\"line\">ts=2018-12-03 19:40:28; [cost=2112.168897ms] result=@ArrayList[</span><br><span class=\"line\">    @Object[][</span><br><span class=\"line\">        @Integer[2141897465],</span><br><span class=\"line\">    ],</span><br><span class=\"line\">    @ArrayList[</span><br><span class=\"line\">        @Integer[5],</span><br><span class=\"line\">        @Integer[428379493],</span><br><span class=\"line\">    ],</span><br><span class=\"line\">]</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><code>#cost&gt;200</code>(单位是<code>ms</code>)表示只有当耗时大于200ms时才会输出，过滤掉执行时间小于200ms的调用</li>\n</ul>\n<h5 id=\"观察当前对象中的属性\"><a href=\"#观察当前对象中的属性\" class=\"headerlink\" title=\"观察当前对象中的属性\"></a>观察当前对象中的属性</h5><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">watch demo.MathGame primeFactors <span class=\"string\">&#x27;target&#x27;</span></span><br></pre></td></tr></table></figure>\n\n<p>按<code>q</code>或者<code>Ctrl+c</code>退出</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">q</span><br></pre></td></tr></table></figure>\n\n<p>如果想查看方法运行前后，当前对象中的属性，可以使用<code>target</code>关键字，代表当前对象</p>\n<figure class=\"highlight console\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> watch demo.MathGame primeFactors <span class=\"string\">&#x27;target&#x27;</span></span></span><br><span class=\"line\">Press Ctrl+C to abort.</span><br><span class=\"line\">Affect(class-cnt:1 , method-cnt:1) cost in 52 ms.</span><br><span class=\"line\">ts=2018-12-03 19:41:52; [cost=0.477882ms] result=@MathGame[</span><br><span class=\"line\">    random=@Random[java.util.Random@522b408a],</span><br><span class=\"line\">    illegalArgumentCount=@Integer[13355],</span><br><span class=\"line\">]</span><br></pre></td></tr></table></figure>\n\n<p>然后使用<code>target.field_name</code>访问当前对象的某个属性</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">watch demo.MathGame primeFactors <span class=\"string\">&#x27;target.illegalArgumentCount&#x27;</span></span><br></pre></td></tr></table></figure>\n\n<p>按<code>q</code>或者<code>Ctrl+c</code>退出</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">q</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight console\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> watch demo.MathGame primeFactors <span class=\"string\">&#x27;target.illegalArgumentCount&#x27;</span></span></span><br><span class=\"line\">Press Ctrl+C to abort.</span><br><span class=\"line\">Affect(class-cnt:1 , method-cnt:1) cost in 67 ms.</span><br><span class=\"line\">ts=2018-12-03 20:04:34; [cost=131.303498ms] result=@Integer[8]</span><br><span class=\"line\">ts=2018-12-03 20:04:35; [cost=0.961441ms] result=@Integer[8]</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"更多信息\"><a href=\"#更多信息\" class=\"headerlink\" title=\"更多信息\"></a>更多信息</h2><p>在“watch”中，我们演示了了Arthas的watch命令。如果有更多的技巧或者使用疑问，欢迎在Issue里提出。</p>\n<ul>\n<li>Issues: <a href=\"https://github.com/alibaba/arthas/issues\">https://github.com/alibaba/arthas/issues</a></li>\n<li>文档： <a href=\"https://arthas.aliyun.com/doc\">https://arthas.aliyun.com/doc</a></li>\n</ul>\n<p>如果您在使用Arthas，请让我们知道。您的使用对我们非常重要：<a href=\"https://github.com/alibaba/arthas/issues/111\">查看</a></p>\n<p>文章拷贝来源：<a href=\"https://start.aliyun.com/course?spm=a2ck6.17690074.0.0.28bc2e7dHTphXs&amp;id=PaiFAkJM\">https://start.aliyun.com/course?spm=a2ck6.17690074.0.0.28bc2e7dHTphXs&amp;id=PaiFAkJM</a></p>\n"},{"title":"Arthas 进阶","date":"2021-08-07T00:01:59.000Z","_content":"\n<!-- toc -->\n\n![Arthas](arthas.png)\n\n`Arthas` 是Alibaba开源的Java诊断工具，深受开发者喜爱。\n\n本教程会以一个普通的Spring Boot应用为例，演示Arthas命令的详细用法。\n\n- Github: https://github.com/alibaba/arthas\n- 文档: https://arthas.aliyun.com/doc/\n\n## 启动demo\n\n下载`demo-arthas-spring-boot.jar`，再用`java -jar`命令启动：\n\n```bash\nwget https://code.aliyun.com/middleware-container/handsonLabExternedFiles/raw/master/demo-arthas-spring-boot.jar;java -jar demo-arthas-spring-boot.jar\n```\n\n`demo-arthas-spring-boot`是一个很简单的spring boot应用，源代码：[查看](https://github.com/hengyunabc/spring-boot-inside/tree/master/demo-arthas-spring-boot)\n\n启动之后，可以访问61000端口： 点击查看\n\n![Demo Web](https://img.alicdn.com/imgextra/i2/O1CN010Qbzcz1ctPSWSZI6L_!!6000000003658-2-tps-333-182.png)\n\n## 启动arthas-boot\n\n在新的`Terminal 2`里，下载`arthas-boot.jar`，再用`java -jar`命令启动：\n\n```bash\nwget https://arthas.aliyun.com/arthas-boot.jar;java -jar arthas-boot.jar --target-ip 0.0.0.0\n```\n\n`arthas-boot`是`Arthas`的启动程序，它启动后，会列出所有的Java进程，用户可以选择需要诊断的目标进程。\n\n选择第一个进程，输入 `1` ，再`Enter/回车`：\n\n```bash\n1\n```\n\nAttach成功之后，会打印Arthas LOGO。输入 `help` 可以获取到更多的帮助信息。\n\n```bash\nhelp\n```\n\n![Arthas Boot](O1CN01HzatXZ1RgccrlT90M_!!6000000002141-2-tps-529-244.png)\n\n## 查看JVM信息\n\n下面介绍Arthas里查看`JVM`信息的命令。\n\n#### sysprop\n\n`sysprop` 可以打印所有的System Properties信息。\n\n```bash\nsysprop\n```\n\n也可以指定单个key： `sysprop java.version`\n\n```bash\nsysprop java.version\n```\n\n也可以通过`grep`来过滤： `sysprop | grep user`\n\n```bash\nsysprop | grep user\n```\n\n可以设置新的value： `sysprop testKey testValue`\n\n```bash\nsysprop testKey testValue\n```\n\n#### sysenv\n\n`sysenv` 命令可以获取到环境变量。和`sysprop`命令类似。\n\n```bash\nsysenv\n```\n\n#### jvm\n\n`jvm` 命令会打印出`JVM`的各种详细信息。\n\n```bash\njvm\n```\n\n#### dashboard\n\n`dashboard` 命令可以查看当前系统的实时数据面板。\n\n```bash\ndashboard\n```\n\n输入 `q` 或者 `Ctrl+C` 可以退出dashboard命令。\n\n```bash\nq\n```\n\n## Tips\n\n为了更好使用Arthas，下面先介绍Arthas里的一些使用技巧。\n\n#### help\n\nArthas里每一个命令都有详细的帮助信息。可以用`-h`来查看。帮助信息里有`EXAMPLES`和`WIKI`链接。\n\n比如：\n\n```bash\nsysprop -h\n```\n\n#### 自动补全\n\nArthas支持丰富的自动补全功能，在使用有疑惑时，可以输入`Tab`来获取更多信息。\n\n比如输入 `sysprop java.` 之后，再输入`Tab`，会补全出对应的key：\n\n```\n$ sysprop java.\njava.runtime.name             java.protocol.handler.pkgs    java.vm.version\njava.vm.vendor                java.vendor.url               java.vm.name\n...\n```\n\n#### readline的快捷键支持\n\nArthas支持常见的命令行快捷键，比如`Ctrl + A`跳转行首，`Ctrl + E`跳转行尾。\n\n更多的快捷键可以用 `keymap` 命令查看。\n\n```bash\nkeymap\n```\n\n#### 历史命令的补全\n\n如果想再执行之前的命令，可以在输入一半时，按`Up/↑` 或者 `Ddown/↓`，来匹配到之前的命令。\n\n比如之前执行过`sysprop java.version`，那么在输入`sysprop ja`之后，可以输入`Up/↑`，就会自动补全为`sysprop java.version`。\n\n如果想查看所有的历史命令，也可以通过 `history` 命令查看到。\n\n```bash\nhistory\n```\n\n#### pipeline\n\nArthas支持在pipeline之后，执行一些简单的命令，比如：\n\n```\nsysprop | grep java\nsysprop | grep java\n```\n\n```\nsysprop | wc -l\nsysprop | wc -l\n```\n\n## sc/sm 查看已加载的类\n\n下面介绍Arthas里查找已加载类的命令。\n\n#### sc\n\n`sc` 命令可以查找到所有JVM已经加载到的类。 如果搜索的是接口，还会搜索所有的实现类。比如查看所有的`Filter`实现类：\n\n```bash\nsc javax.servlet.Filter\n```\n\n通过`-d`参数，可以打印出类加载的具体信息，很方便查找类加载问题。\n\n```bash\nsc -d javax.servlet.Filter\n```\n\n`sc`支持通配，比如搜索所有的`StringUtils`：\n\n```bash\nsc *StringUtils\n```\n\n#### sm\n\n`sm`命令则是查找类的具体函数。比如：\n\n```bash\nsm java.math.RoundingMode\n```\n\n通过`-d`参数可以打印函数的具体属性：\n\n```bash\nsm -d java.math.RoundingMode\n```\n\n也可以查找特定的函数，比如查找构造函数：\n\n```bash\nsm java.math.RoundingMode <init>\n```\n\n## Jad\n\n可以通过 `jad` 命令来反编译代码：\n\n```bash\njad com.example.demo.arthas.user.UserController\n```\n\n通过`--source-only`参数可以只打印出在反编译的源代码：\n\n```bash\njad --source-only com.example.demo.arthas.user.UserController\n```\n\n## Ognl\n\n在Arthas里，有一个单独的`ognl`命令，可以动态执行代码。\n\n#### 调用static函数\n\n```bash\nognl '@java.lang.System@out.println(\"hello ognl\")'\n```\n\n可以检查`Terminal 1`里的进程输出，可以发现打印出了`hello ognl`。\n\n#### 查找UserController的ClassLoader\n\n```bash\nsc -d com.example.demo.arthas.user.UserController | grep classLoaderHash\n```\n\n```console\n$ sc -d com.example.demo.arthas.user.UserController | grep classLoaderHash\n classLoaderHash   1be6f5c3\n```\n\n注意hashcode是变化的，需要先查看当前的ClassLoader信息，提取对应ClassLoader的hashcode。\n\n如果你使用`-c`，你需要手动输入hashcode：`-c <hashcode>`\n\n```console\n$ ognl -c 1be6f5c3 @com.example.demo.arthas.user.UserController@logger\n```\n\n对于只有唯一实例的ClassLoader可以通过`--classLoaderClass`指定class name，使用起来更加方便：\n\n```console\n$ ognl --classLoaderClass org.springframework.boot.loader.LaunchedURLClassLoader  @org.springframework.boot.SpringApplication@logger\n@Slf4jLocationAwareLog[\n    FQCN=@String[org.apache.commons.logging.LogAdapter$Slf4jLocationAwareLog],\n    name=@String[org.springframework.boot.SpringApplication],\n    logger=@Logger[Logger[org.springframework.boot.SpringApplication]],\n]\n```\n\n`--classLoaderClass` 的值是ClassLoader的类名，只有匹配到唯一的ClassLoader实例时才能工作，目的是方便输入通用命令，而`-c <hashcode>`是动态变化的。\n\n#### 获取静态类的静态字段\n\n获取`UserController`类里的`logger`字段：\n\n```bash\nognl --classLoaderClass org.springframework.boot.loader.LaunchedURLClassLoader @com.example.demo.arthas.user.UserController@logger\n```\n\n还可以通过`-x`参数控制返回值的展开层数。比如：\n\n```bash\nognl --classLoaderClass org.springframework.boot.loader.LaunchedURLClassLoader -x 2 @com.example.demo.arthas.user.UserController@logger\n```\n\n#### 执行多行表达式，赋值给临时变量，返回一个List\n\n```bash\nognl '#value1=@System@getProperty(\"java.home\"), #value2=@System@getProperty(\"java.runtime.name\"), {#value1, #value2}'\n```\n\n```console\n$ ognl '#value1=@System@getProperty(\"java.home\"), #value2=@System@getProperty(\"java.runtime.name\"), {#value1, #value2}'\n@ArrayList[\n    @String[/Library/Java/JavaVirtualMachines/jdk1.8.0_162.jdk/Contents/Home/jre],\n    @String[Java(TM) SE Runtime Environment],\n]\n```\n\n#### 更多\n\n在Arthas里`ognl`表达式是很重要的功能，在很多命令里都可以使用`ognl`表达式。\n\n一些更复杂的用法，可以参考：\n\n- OGNL特殊用法请参考：https://github.com/alibaba/arthas/issues/71\n- OGNL表达式官方指南：https://commons.apache.org/proper/commons-ognl/language-guide.html\n\n## 案例: 排查函数调用异常\n\n#### 现象\n\n目前，访问 http://localhost:61000/user/0 ，会返回500异常：\n\n```bash\ncurl http://localhost:61000/user/0\n```\n\n```console\n{\"timestamp\":1550223186170,\"status\":500,\"error\":\"Internal Server Error\",\"exception\":\"java.lang.IllegalArgumentException\",\"message\":\"id < 1\",\"path\":\"/user/0\"}\n```\n\n但请求的具体参数，异常栈是什么呢？\n\n#### 查看UserController的 参数/异常\n\n在Arthas里执行：\n\n```bash\nwatch com.example.demo.arthas.user.UserController * '{params, throwExp}'\n```\n\n1. 第一个参数是类名，支持通配\n2. 第二个参数是函数名，支持通配 访问 `curl http://localhost:61000/user/0` ,`watch`命令会打印调用的参数和异常\n\n```bash\ncurl http://localhost:61000/user/0\n```\n\n```console\n$ watch com.example.demo.arthas.user.UserController * '{params, throwExp}'\nPress Q or Ctrl+C to abort.\nAffect(class-cnt:1 , method-cnt:2) cost in 53 ms.\nts=2019-02-15 01:35:25; [cost=0.996655ms] result=@ArrayList[\n    @Object[][isEmpty=false;size=1],\n    @IllegalArgumentException[java.lang.IllegalArgumentException: id < 1],\n]\n```\n\n可以看到实际抛出的异常是`IllegalArgumentException`。\n\n可以输入 `q` 或者 `Ctrl+C` 退出watch命令。\n\n```bash\nq\n```\n\n如果想把获取到的结果展开，可以用`-x`参数：\n\n```bash\nwatch com.example.demo.arthas.user.UserController * '{params, throwExp}' -x 2\n```\n\n#### 返回值表达式\n\n在上面的例子里，第三个参数是`返回值表达式`，它实际上是一个`ognl`表达式，它支持一些内置对象：\n\n- loader\n- clazz\n- method\n- target\n- params\n- returnObj\n- throwExp\n- isBefore\n- isThrow\n- isReturn\n\n你可以利用这些内置对象来组成不同的表达式。比如返回一个数组：\n\n```bash\nwatch com.example.demo.arthas.user.UserController * '{params[0], target, returnObj}'\n```\n\n更多参考： https://arthas.aliyun.com/doc/advice-class.html\n\n#### 条件表达式\n\n`watch`命令支持在第4个参数里写条件表达式，比如：\n\n```bash\nwatch com.example.demo.arthas.user.UserController * returnObj 'params[0] > 100'\n```\n\n当访问 user/1 时，`watch`命令没有输出\n\n当访问 user/101 时，`watch`会打印出结果。\n\n```console\n$ watch com.example.demo.arthas.user.UserController * returnObj 'params[0] > 100'\nPress Q or Ctrl+C to abort.\nAffect(class-cnt:1 , method-cnt:2) cost in 47 ms.\nts=2019-02-13 19:42:12; [cost=0.821443ms] result=@User[\n    id=@Integer[101],\n    name=@String[name101],\n]\n```\n\n#### 当异常时捕获\n\n`watch`命令支持`-e`选项，表示只捕获抛出异常时的请求：\n\n```bash\nwatch com.example.demo.arthas.user.UserController * \"{params[0],throwExp}\" -e\n```\n\n#### 按照耗时进行过滤\n\nwatch命令支持按请求耗时进行过滤，比如：\n\n```bash\nwatch com.example.demo.arthas.user.UserController * '{params, returnObj}' '#cost>200'\n```\n\n## 案例: 热更新代码\n\n下面介绍通过`jad`/`mc`/`redefine` 命令实现动态更新代码的功能。\n\n目前，访问 http://localhost:61000/user/0 ，会返回500异常：\n\n```bash\ncurl http://localhost:61000/user/0\n```\n\n```\n{\"timestamp\":1550223186170,\"status\":500,\"error\":\"Internal Server Error\",\"exception\":\"java.lang.IllegalArgumentException\",\"message\":\"id < 1\",\"path\":\"/user/0\"}\n```\n\n下面通过热更新代码，修改这个逻辑。\n\n#### jad反编译UserController\n\n```bash\njad --source-only com.example.demo.arthas.user.UserController > /tmp/UserController.java\n```\n\njad反编译的结果保存在 `/tmp/UserController.java`文件里了。\n\n再打开一个`Terminal 3`，然后用vim来编辑`/tmp/UserController.java`：\n\n```bash\nvim /tmp/UserController.java\n```\n\n比如当 user id 小于1时，也正常返回，不抛出异常：\n\n```java\n    @GetMapping(value={\"/user/{id}\"})\n    public User findUserById(@PathVariable Integer id) {\n        logger.info(\"id: {}\", (Object)id);\n        if (id != null && id < 1) {\n            return new User(id, \"name\" + id);\n            // throw new IllegalArgumentException(\"id < 1\");\n        }\n        return new User(id.intValue(), \"name\" + id);\n    }\n```\n\n#### sc查找加载UserController的ClassLoader\n\n```bash\nsc -d *UserController | grep classLoaderHash\n```\n\n```console\n$ sc -d *UserController | grep classLoaderHash\n classLoaderHash   1be6f5c3\n```\n\n可以发现是 spring boot `LaunchedURLClassLoader@1be6f5c3` 加载的。\n\n请记下你的classLoaderHash，后面需要使用它。在这里，它是 `1be6f5c3`。\n\n#### mc\n\n保存好`/tmp/UserController.java`之后，使用`mc`(Memory Compiler)命令来编译，并且通过`-c`或者`--classLoaderClass`参数指定ClassLoader：\n\n```bash\nmc --classLoaderClass org.springframework.boot.loader.LaunchedURLClassLoader /tmp/UserController.java -d /tmp\n```\n\n```console\n$ mc --classLoaderClass org.springframework.boot.loader.LaunchedURLClassLoader /tmp/UserController.java -d /tmp\nMemory compiler output:\n/tmp/com/example/demo/arthas/user/UserController.class\nAffect(row-cnt:1) cost in 346 ms\n```\n\n也可以通过`mc -c <classLoaderHash> /tmp/UserController.java -d /tmp`，使用`-c`参数指定ClassLoaderHash:\n\n```console\n$ mc -c 1be6f5c3 /tmp/UserController.java -d /tmp\n```\n\n#### redefine\n\n再使用`redefine`命令重新加载新编译好的`UserController.class`：\n\n```bash\nredefine /tmp/com/example/demo/arthas/user/UserController.class\n```\n\n```\n$ redefine /tmp/com/example/demo/arthas/user/UserController.class\nredefine success, size: 1\n```\n\n#### 热修改代码结果\n\n`redefine`成功之后，再次访问 user/0 ，结果是：\n\n```\n{\n  \"id\": 0,\n  \"name\": \"name0\"\n}\n```\n\n## 案例: 动态更新应用Logger Level\n\n在这个案例里，动态修改应用的Logger Level。\n\n#### 查找UserController的ClassLoader\n\n```bash\nsc -d com.example.demo.arthas.user.UserController | grep classLoaderHash\n```\n\n```console\n$ sc -d com.example.demo.arthas.user.UserController | grep classLoaderHash\n classLoaderHash   1be6f5c3\n```\n\n#### 用ognl获取logger\n\n```bash\nognl --classLoaderClass org.springframework.boot.loader.LaunchedURLClassLoader '@com.example.demo.arthas.user.UserController@logger'\n```\n\n```console\n$ ognl --classLoaderClass org.springframework.boot.loader.LaunchedURLClassLoader '@com.example.demo.arthas.user.UserController@logger'\n@Logger[\n    serialVersionUID=@Long[5454405123156820674],\n    FQCN=@String[ch.qos.logback.classic.Logger],\n    name=@String[com.example.demo.arthas.user.UserController],\n    level=null,\n    effectiveLevelInt=@Integer[20000],\n    parent=@Logger[Logger[com.example.demo.arthas.user]],\n    childrenList=null,\n    aai=null,\n    additive=@Boolean[true],\n    loggerContext=@LoggerContext[ch.qos.logback.classic.LoggerContext[default]],\n]\n```\n\n可以知道`UserController@logger`实际使用的是logback。可以看到`level=null`，则说明实际最终的level是从`root` logger里来的。\n\n#### 单独设置UserController的logger level\n\n```bash\nognl --classLoaderClass org.springframework.boot.loader.LaunchedURLClassLoader '@com.example.demo.arthas.user.UserController@logger.setLevel(@ch.qos.logback.classic.Level@DEBUG)'\n```\n\n再次获取`UserController@logger`，可以发现已经是`DEBUG`了：\n\n```bash\nognl --classLoaderClass org.springframework.boot.loader.LaunchedURLClassLoader '@com.example.demo.arthas.user.UserController@logger'\n```\n\n```console\n$ ognl --classLoaderClass org.springframework.boot.loader.LaunchedURLClassLoader '@com.example.demo.arthas.user.UserController@logger'\n@Logger[\n    serialVersionUID=@Long[5454405123156820674],\n    FQCN=@String[ch.qos.logback.classic.Logger],\n    name=@String[com.example.demo.arthas.user.UserController],\n    level=@Level[DEBUG],\n    effectiveLevelInt=@Integer[10000],\n    parent=@Logger[Logger[com.example.demo.arthas.user]],\n    childrenList=null,\n    aai=null,\n    additive=@Boolean[true],\n    loggerContext=@LoggerContext[ch.qos.logback.classic.LoggerContext[default]],\n]\n```\n\n#### 修改logback的全局logger level\n\n通过获取`root` logger，可以修改全局的logger level：\n\n```bash\nognl --classLoaderClass org.springframework.boot.loader.LaunchedURLClassLoader '@org.slf4j.LoggerFactory@getLogger(\"root\").setLevel(@ch.qos.logback.classic.Level@DEBUG)'\n```\n\n## 案例: 排查logger冲突问题\n\n在这个案例里，展示排查logger冲突的方法。\n\n#### 确认应用使用的logger系统\n\n以`UserController`为例，它使用的是slf4j api，但实际使用到的logger系统是logback。\n\n```bash\nognl --classLoaderClass org.springframework.boot.loader.LaunchedURLClassLoader '@com.example.demo.arthas.user.UserController@logger'\n```\n\n```console\n$ ognl --classLoaderClass org.springframework.boot.loader.LaunchedURLClassLoader '@com.example.demo.arthas.user.UserController@logger'\n@Logger[\n    serialVersionUID=@Long[5454405123156820674],\n    FQCN=@String[ch.qos.logback.classic.Logger],\n    name=@String[com.example.demo.arthas.user.UserController],\n    level=null,\n    effectiveLevelInt=@Integer[20000],\n    parent=@Logger[Logger[com.example.demo.arthas.user]],\n    childrenList=null,\n    aai=null,\n    additive=@Boolean[true],\n    loggerContext=@LoggerContext[ch.qos.logback.classic.LoggerContext[default]],\n]\n```\n\n#### 获取logback实际加载的配置文件\n\n```bash\nognl --classLoaderClass org.springframework.boot.loader.LaunchedURLClassLoader '#map1=@org.slf4j.LoggerFactory@getLogger(\"root\").loggerContext.objectMap, #map1.get(\"CONFIGURATION_WATCH_LIST\")'\n```\n\n#### 使用classloader命令查找可能存在的logger配置文件\n\n```bash\nclassloader --classLoaderClass org.springframework.boot.loader.LaunchedURLClassLoader -r logback-spring.xml\n```\n\n```\n$ classloader --classLoaderClass org.springframework.boot.loader.LaunchedURLClassLoader -r logback-spring.xml\n jar:file:/Users/hengyunabc/code/java/spring-boot-inside/demo-arthas-spring-boot/target/demo-arthas-spring-boot-0.0.1-SNAPSHOT.jar!/BOOT-INF/classes!/logback-spring.xml\n\nAffect(row-cnt:1) cost in 13 ms.\n```\n\n可以知道加载的配置的具体来源。\n\n可以尝试加载容易冲突的文件：\n\n```bash\nclassloader --classLoaderClass org.springframework.boot.loader.LaunchedURLClassLoader -r logback.xml\n```\n\n```bash\nclassloader --classLoaderClass org.springframework.boot.loader.LaunchedURLClassLoader -r log4j.properties\n```\n\n## 案例: 获取Spring Context\n\n在这个案例里，展示获取spring context，再获取bean，然后调用函数。\n\n#### 使用tt命令获取到spring context\n\n`tt`即 TimeTunnel，它可以记录下指定方法每次调用的入参和返回信息，并能对这些不同的时间下调用进行观测。\n\n- https://arthas.aliyun.com/doc/tt.html\n\n```bash\ntt -t org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter invokeHandlerMethod\n```\n\n访问：user/1\n\n可以看到`tt`命令捕获到了一个请求：\n\n```console\n$ tt -t org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdaptePress Q or Ctrl+C to abort.\nAffect(class-cnt:1 , method-cnt:1) cost in 252 ms.\n INDE  TIMESTAMP    COST(  IS-R  IS-  OBJECT     CLASS               METHOD\n X                  ms)    ET    EXP\n-----------------------------------------------------------------------------------------\n 1000  2019-02-15   4.583  true  fal  0xc93cf1a  RequestMappingHand  invokeHandlerMethod\n       15:38:32     923          se              lerAdapter\n```\n\n#### 使用tt命令从调用记录里获取到spring context\n\n输入 `q` 或者 `Ctrl + C` 退出上面的 `tt -t`命令。\n\n```bash\nq\n```\n\n```bash\ntt -i 1000 -w 'target.getApplicationContext()'\n```\n\n```console\n$ tt -i 1000 -w 'target.getApplicationContext()'\n@AnnotationConfigEmbeddedWebApplicationContext[\n    reader=@AnnotatedBeanDefinitionReader[org.springframework.context.annotation.AnnotatedBeanDefinitionReader@2e457641],\n    scanner=@ClassPathBeanDefinitionScanner[org.springframework.context.annotation.ClassPathBeanDefinitionScanner@6eb38026],\n    annotatedClasses=null,\n    basePackages=null,\n]\nAffect(row-cnt:1) cost in 439 ms.\n```\n\n### 获取spring bean，并调用函数\n\n```bash\ntt -i 1000 -w 'target.getApplicationContext().getBean(\"helloWorldService\").getHelloMessage()'\n```\n\n结果是：\n\n```console\n$ tt -i 1000 -w 'target.getApplicationContext().getBean(\"helloWorldService\").getHelloMessage()'\n@String[Hello World]\nAffect(row-cnt:1) cost in 52 ms.\n```\n\n## 案例: 排查HTTP请求返回401\n\n在这个案例里，展示排查HTTP 401问题的技巧。\n\n访问： admin\n\n结果是：\n\n```\nSomething went wrong: 401 Unauthorized\n```\n\n我们知道`401`通常是被权限管理的`Filter`拦截了，那么到底是哪个`Filter`处理了这个请求，返回了401？\n\n#### 跟踪所有的Filter函数\n\n开始trace：\n\n```bash\ntrace javax.servlet.Filter *\n```\n\n访问： admin\n\n可以在调用树的最深层，找到`AdminFilterConfig$AdminFilter`返回了`401`：\n\n```\n+---[3.806273ms] javax.servlet.FilterChain:doFilter()\n|   `---[3.447472ms] com.example.demo.arthas.AdminFilterConfig$AdminFilter:doFilter()\n|       `---[0.17259ms] javax.servlet.http.HttpServletResponse:sendError()\n```\n\n#### 通过stack获取调用栈\n\n上面是通过`trace`命令来获取信息，从结果里，我们可以知道通过`stack`跟踪`HttpServletResponse:sendError()`，同样可以知道是哪个`Filter`返回了`401`\n\n执行：\n\n```bash\nstack javax.servlet.http.HttpServletResponse sendError 'params[0]==401'\n```\n\n访问： admin\n\n```console\n$ stack javax.servlet.http.HttpServletResponse sendError 'params[0]==401'\nPress Q or Ctrl+C to abort.\nAffect(class-cnt:2 , method-cnt:4) cost in 87 ms.\nts=2019-02-15 16:44:06;thread_name=http-nio-8080-exec-6;id=16;is_daemon=true;priority=5;TCCL=org.springframework.boot.context.embedded.tomcat.TomcatEmbeddedWebappClassLoader@8546cd5\n    @org.apache.catalina.connector.ResponseFacade.sendError()\n        at com.example.demo.arthas.AdminFilterConfig$AdminFilter.doFilter(AdminFilterConfig.java:38)\n        at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)\n        at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)\n        at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:99)\n        at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)\n```\n\n## 案例: 排查HTTP请求返回404\n\n在这个案例里，展示排查HTTP 404问题的技巧。\n\n访问： a.txt\n\n结果是：\n\n```\nSomething went wrong: 404 Not Found\n```\n\n那么到底是哪个Servlet处理了这个请求，返回了404？\n\n#### 跟踪所有的Servlet函数\n\n开始trace：\n\n```bash\ntrace javax.servlet.Servlet * > /tmp/servlet.txt\n```\n\n访问： a.txt\n\n在`Terminal 3`里，查看`/tmp/servlet.txt`的内容：\n\n```bash\nless /tmp/servlet.txt\n```\n\n`/tmp/servlet.txt`里的内容会比较多，需要耐心找到调用树里最长的地方。\n\n可以发现请求最终是被`freemarker`处理的：\n\n```\n`---[13.974188ms] org.springframework.web.servlet.ViewResolver:resolveViewName();    +---[0.045561ms] javax.servlet.GenericServlet:<init>()\n    +---[min=0.045545ms,max=0.074342ms,total=0.119887ms,count=2] org.springframework.web.servlet.view.freemarker.FreeMarkerView$GenericServletAdapter:<init>()\n    +---[0.170895ms] javax.servlet.GenericServlet:init()\n    |   `---[0.068578ms] javax.servlet.GenericServlet:init()\n    |       `---[0.021793ms] javax.servlet.GenericServlet:init()\n    `---[0.164035ms] javax.servlet.GenericServlet:getServletContext()\n```\n\n## 案例: 理解Spring Boot应用的ClassLoader结构\n\n下面介绍`classloader`命令的功能。\n\n先访问一个jsp网页，触发jsp的加载： hello\n\n#### 列出所有ClassLoader\n\n```bash\nclassloader -l\n```\n\n```console\n$ classloader -l\n name                                                             loadedCount  hash      parent\n BootstrapClassLoader                                             2724         null      null\n com.taobao.arthas.agent.ArthasClassloader@411ce1ab               2009         411ce1ab  sun.misc.Launcher$ExtClassLoader@7494e528\n com.taobao.arthas.agent.ArthasClassloader@22ae1234               1253         22ae1234  sun.misc.Launcher$ExtClassLoader@7494e528\n org.apache.jasper.servlet.JasperLoader@65361d9a                  1            65361d9a  TomcatEmbeddedWebappClassLoader\n                                                                                           context: ROOT\n                                                                                           delegate: true\n                                                                                         ----------> Parent Classloader:\n                                                                                         org.springframework.boot.loader.LaunchedURLClassLoader@1be6f5c3\n\n TomcatEmbeddedWebappClassLoader                                  0            8546cd5   org.springframework.boot.loader.LaunchedURLClassLoader@1be6f5c3\n   context: ROOT\n   delegate: true\n ----------> Parent Classloader:\n org.springframework.boot.loader.LaunchedURLClassLoader@1be6f5c3\n\n org.springframework.boot.loader.LaunchedURLClassLoader@1be6f5c3  5416         1be6f5c3  sun.misc.Launcher$AppClassLoader@3d4eac69\n sun.misc.Launcher$AppClassLoader@3d4eac69                        45           3d4eac69  sun.misc.Launcher$ExtClassLoader@7494e528\n sun.misc.Launcher$ExtClassLoader@7494e528                        4            7494e528  null\n```\n\n- TomcatEmbeddedWebappClassLoader 加载的class数量是0，所以在spring boot embedded tomcat里，它只是一个空壳，所有的类加载都是`LaunchedURLClassLoader`完成的\n\n#### 列出ClassLoader里加载的所有类\n\n列出上面的`org.apache.jasper.servlet.JasperLoader`加载的类：\n\n```bash\nclassloader -a --classLoaderClass apache.jasper.servlet.JasperLoader\n```\n\n```console\n$ classloader -a --classLoaderClass apache.jasper.servlet.JasperLoader\n hash:1698045338, org.apache.jasper.servlet.JasperLoader@65361d9a\n org.apache.jsp.jsp.hello_jsp\n```\n\n- 注：同ognl, 也可用`-c <hashcode>`而不用`--classLoaderClass`指定\n\n#### 反编译jsp的代码\n\n```bash\njad org.apache.jsp.jsp.hello_jsp\n```\n\n```console\n$ jad org.apache.jsp.jsp.hello_jsp\n\nClassLoader:\n+-org.apache.jasper.servlet.JasperLoader@65361d9a\n  +-TomcatEmbeddedWebappClassLoader\n      context: ROOT\n...\n```\n\n#### 查看ClassLoader树\n\n```bash\nclassloader -t\n```\n\n```\n$ classloader -t\n+-BootstrapClassLoader\n+-sun.misc.Launcher$ExtClassLoader@28cbbddd\n  +-com.taobao.arthas.agent.ArthasClassloader@8c25e55\n  +-sun.misc.Launcher$AppClassLoader@55f96302\n    +-org.springframework.boot.loader.LaunchedURLClassLoader@1be6f5c3\n      +-TomcatEmbeddedWebappClassLoader\n          context: ROOT\n          delegate: true\n        ----------> Parent Classloader:\n        org.springframework.boot.loader.LaunchedURLClassLoader@1be6f5c3\n\n        +-org.apache.jasper.servlet.JasperLoader@21ae0fe2\n```\n\n注意：请使用你的classLoaderHash值覆盖 `<classLoaderHash>` ，然后手动执行下面相关命令：\n\n#### 列出ClassLoader的urls\n\n比如上面查看到的spring LaunchedURLClassLoader的 hashcode是`1be6f5c3`，可以通过`-c`或者`--classLoaderClass`参数来列出它的所有urls：\n\n```bash\nclassloader --classLoaderClass org.springframework.boot.loader.LaunchedURLClassLoader\n```\n\n```\n$ classloader --classLoaderClass org.springframework.boot.loader.LaunchedURLClassLoader\njar:file:/home/scrapbook/tutorial/demo-arthas-spring-boot.jar!/BOOT-INF/classes!/\njar:file:/home/scrapbook/tutorial/demo-arthas-spring-boot.jar!/BOOT-INF/lib/spring-boot-starter-aop-1.5\n.13.RELEASE.jar!/\n...\n```\n\n#### 加载指定ClassLoader里的资源文件\n\n查找指定的资源文件： `classloader --classLoaderClass org.springframework.boot.loader.LaunchedURLClassLoader -r logback-spring.xml`\n\n```bash\nclassloader --classLoaderClass org.springframework.boot.loader.LaunchedURLClassLoader -r logback-spring.xml\n```\n\n```\n$ classloader --classLoaderClass org.springframework.boot.loader.LaunchedURLClassLoader -r logback-spring.xml\n jar:file:/home/scrapbook/tutorial/demo-arthas-spring-boot.jar!/BOOT-INF/classes!/logback-spring.xml\n```\n\n#### 尝试加载指定的类\n\n比如用上面的spring LaunchedURLClassLoader 尝试加载 `java.lang.String` ：\n\n```bash\nclassloader --classLoaderClass org.springframework.boot.loader.LaunchedURLClassLoader --load java.lang.String\n```\n\n```\n$ classloader --classLoaderClass org.springframework.boot.loader.LaunchedURLClassLoader --load java.lang.String\nload class success.\n class-info        java.lang.String\n code-source\n name              java.lang.String\n isInterface       false\n isAnnotation      false\n isEnum            false\n isAnonymousClass  false\n isArray           false\n isLocalClass      false\n isMemberClass     false\n isPrimitive       false\n isSynthetic       false\n simple-name       String\n modifier          final,public\n annotation\n interfaces        java.io.Serializable,java.lang.Comparable,java.lang.CharSequence\n super-class       +-java.lang.Object\n class-loader\n classLoaderHash   null\n```\n\n## 案例：查找Top N线程\n\n#### 查看所有线程信息\n\n```bash\nthread\n```\n\n#### 查看具体线程的栈\n\n查看线程ID 16的栈：\n\n```bash\nthread 16\n```\n\n#### 查看CPU使用率top n线程的栈\n\n```bash\nthread -n 3\n```\n\n查看5秒内的CPU使用率top n线程栈\n\n```bash\nthread -n 3 -i 5000\n```\n\n#### 查找线程是否有阻塞\n\n```bash\nthread -b\n```\n\n## Web Console\n\nArthas支持通过Web Socket来连接。\n\n### 本地体验\n\n当在本地启动时，可以访问 http://127.0.0.1:8563/ ，通过浏览器来使用Arthas。\n\n![Arthas WebConsole](O1CN01i041kW1lw0FCaSKNn_!!6000000004882-2-tps-1231-284.png)\n\n推荐通过“快速入门”来体验： https://arthas.aliyun.com/doc/quick-start.html\n\n## Exit/Stop\n\n### reset\n\nArthas在 watch/trace 等命令时，实际上是修改了应用的字节码，插入增强的代码。显式执行 `reset` 命令，可以清除掉这些增强代码。\n\n```bash\nreset\n```\n\n### 退出Arthas\n\n用 `exit` 或者 `quit` 命令可以退出Arthas。\n\n```bash\nexit\n```\n\nCtrl+C\n\n退出Arthas之后，还可以再次用 `java -jar arthas-boot.jar` 来连接。\n\n```bash\njava -jar arthas-boot.jar\n```\n\nCtrl+C\n\n### 彻底退出Arthas\n\n`exit/quit`命令只是退出当前session，arthas server还在目标进程中运行。\n\n想完全退出Arthas，可以执行 `stop` 命令。\n\n```bash\nstop\n```\n\nCtrl+C\n\n## arthas-boot支持的参数\n\n`arthas-boot.jar` 支持很多参数，可以执行 `java -jar arthas-boot.jar -h` 来查看。\n\n```bash\njava -jar arthas-boot.jar -h\n```\n\n### 允许外部访问\n\n默认情况下， arthas server侦听的是 `127.0.0.1` 这个IP，如果希望远程可以访问，可以使用`--target-ip`的参数。\n\n```bash\njava -jar arthas-boot.jar --target-ip\n```\n\n### 列出所有的版本\n\n```bash\njava -jar arthas-boot.jar --versions\n```\n\n使用指定版本：\n\n```bash\njava -jar arthas-boot.jar --use-version 3.1.0\n```\n\n### 只侦听Telnet端口，不侦听HTTP端口\n\n```bash\njava -jar arthas-boot.jar --telnet-port 9999 --http-port -1\n```\n\n### 打印运行的详情\n\n```bash\njava -jar arthas-boot.jar -v\n```\n\n## 更多信息\n\n在“进阶教程”，演示了Arthas的大部分高级用法，希望对大家排查问题有帮助。如果有更多的技巧或者使用疑问，欢迎在Issue里提出。\n\n- Issues: https://github.com/alibaba/arthas/issues\n- 文档： https://arthas.aliyun.com/doc\n\n如果您在使用Arthas，请让我们知道。您的使用对我们非常重要：[查看](https://github.com/alibaba/arthas/issues/111)\n\n文章拷贝来源：https://start.aliyun.com/course?spm=a2ck6.17690074.0.0.28bc2e7dHTphXs&id=qDlgqpBT","source":"_posts/Java诊断工具Arthas入门教程/Arthas-进阶.md","raw":"---\ntitle: Arthas 进阶\ndate: 2021-08-07 08:01:59\ntags: ['Java 诊断工具 Arthas 入门教程']\n---\n\n<!-- toc -->\n\n![Arthas](arthas.png)\n\n`Arthas` 是Alibaba开源的Java诊断工具，深受开发者喜爱。\n\n本教程会以一个普通的Spring Boot应用为例，演示Arthas命令的详细用法。\n\n- Github: https://github.com/alibaba/arthas\n- 文档: https://arthas.aliyun.com/doc/\n\n## 启动demo\n\n下载`demo-arthas-spring-boot.jar`，再用`java -jar`命令启动：\n\n```bash\nwget https://code.aliyun.com/middleware-container/handsonLabExternedFiles/raw/master/demo-arthas-spring-boot.jar;java -jar demo-arthas-spring-boot.jar\n```\n\n`demo-arthas-spring-boot`是一个很简单的spring boot应用，源代码：[查看](https://github.com/hengyunabc/spring-boot-inside/tree/master/demo-arthas-spring-boot)\n\n启动之后，可以访问61000端口： 点击查看\n\n![Demo Web](https://img.alicdn.com/imgextra/i2/O1CN010Qbzcz1ctPSWSZI6L_!!6000000003658-2-tps-333-182.png)\n\n## 启动arthas-boot\n\n在新的`Terminal 2`里，下载`arthas-boot.jar`，再用`java -jar`命令启动：\n\n```bash\nwget https://arthas.aliyun.com/arthas-boot.jar;java -jar arthas-boot.jar --target-ip 0.0.0.0\n```\n\n`arthas-boot`是`Arthas`的启动程序，它启动后，会列出所有的Java进程，用户可以选择需要诊断的目标进程。\n\n选择第一个进程，输入 `1` ，再`Enter/回车`：\n\n```bash\n1\n```\n\nAttach成功之后，会打印Arthas LOGO。输入 `help` 可以获取到更多的帮助信息。\n\n```bash\nhelp\n```\n\n![Arthas Boot](O1CN01HzatXZ1RgccrlT90M_!!6000000002141-2-tps-529-244.png)\n\n## 查看JVM信息\n\n下面介绍Arthas里查看`JVM`信息的命令。\n\n#### sysprop\n\n`sysprop` 可以打印所有的System Properties信息。\n\n```bash\nsysprop\n```\n\n也可以指定单个key： `sysprop java.version`\n\n```bash\nsysprop java.version\n```\n\n也可以通过`grep`来过滤： `sysprop | grep user`\n\n```bash\nsysprop | grep user\n```\n\n可以设置新的value： `sysprop testKey testValue`\n\n```bash\nsysprop testKey testValue\n```\n\n#### sysenv\n\n`sysenv` 命令可以获取到环境变量。和`sysprop`命令类似。\n\n```bash\nsysenv\n```\n\n#### jvm\n\n`jvm` 命令会打印出`JVM`的各种详细信息。\n\n```bash\njvm\n```\n\n#### dashboard\n\n`dashboard` 命令可以查看当前系统的实时数据面板。\n\n```bash\ndashboard\n```\n\n输入 `q` 或者 `Ctrl+C` 可以退出dashboard命令。\n\n```bash\nq\n```\n\n## Tips\n\n为了更好使用Arthas，下面先介绍Arthas里的一些使用技巧。\n\n#### help\n\nArthas里每一个命令都有详细的帮助信息。可以用`-h`来查看。帮助信息里有`EXAMPLES`和`WIKI`链接。\n\n比如：\n\n```bash\nsysprop -h\n```\n\n#### 自动补全\n\nArthas支持丰富的自动补全功能，在使用有疑惑时，可以输入`Tab`来获取更多信息。\n\n比如输入 `sysprop java.` 之后，再输入`Tab`，会补全出对应的key：\n\n```\n$ sysprop java.\njava.runtime.name             java.protocol.handler.pkgs    java.vm.version\njava.vm.vendor                java.vendor.url               java.vm.name\n...\n```\n\n#### readline的快捷键支持\n\nArthas支持常见的命令行快捷键，比如`Ctrl + A`跳转行首，`Ctrl + E`跳转行尾。\n\n更多的快捷键可以用 `keymap` 命令查看。\n\n```bash\nkeymap\n```\n\n#### 历史命令的补全\n\n如果想再执行之前的命令，可以在输入一半时，按`Up/↑` 或者 `Ddown/↓`，来匹配到之前的命令。\n\n比如之前执行过`sysprop java.version`，那么在输入`sysprop ja`之后，可以输入`Up/↑`，就会自动补全为`sysprop java.version`。\n\n如果想查看所有的历史命令，也可以通过 `history` 命令查看到。\n\n```bash\nhistory\n```\n\n#### pipeline\n\nArthas支持在pipeline之后，执行一些简单的命令，比如：\n\n```\nsysprop | grep java\nsysprop | grep java\n```\n\n```\nsysprop | wc -l\nsysprop | wc -l\n```\n\n## sc/sm 查看已加载的类\n\n下面介绍Arthas里查找已加载类的命令。\n\n#### sc\n\n`sc` 命令可以查找到所有JVM已经加载到的类。 如果搜索的是接口，还会搜索所有的实现类。比如查看所有的`Filter`实现类：\n\n```bash\nsc javax.servlet.Filter\n```\n\n通过`-d`参数，可以打印出类加载的具体信息，很方便查找类加载问题。\n\n```bash\nsc -d javax.servlet.Filter\n```\n\n`sc`支持通配，比如搜索所有的`StringUtils`：\n\n```bash\nsc *StringUtils\n```\n\n#### sm\n\n`sm`命令则是查找类的具体函数。比如：\n\n```bash\nsm java.math.RoundingMode\n```\n\n通过`-d`参数可以打印函数的具体属性：\n\n```bash\nsm -d java.math.RoundingMode\n```\n\n也可以查找特定的函数，比如查找构造函数：\n\n```bash\nsm java.math.RoundingMode <init>\n```\n\n## Jad\n\n可以通过 `jad` 命令来反编译代码：\n\n```bash\njad com.example.demo.arthas.user.UserController\n```\n\n通过`--source-only`参数可以只打印出在反编译的源代码：\n\n```bash\njad --source-only com.example.demo.arthas.user.UserController\n```\n\n## Ognl\n\n在Arthas里，有一个单独的`ognl`命令，可以动态执行代码。\n\n#### 调用static函数\n\n```bash\nognl '@java.lang.System@out.println(\"hello ognl\")'\n```\n\n可以检查`Terminal 1`里的进程输出，可以发现打印出了`hello ognl`。\n\n#### 查找UserController的ClassLoader\n\n```bash\nsc -d com.example.demo.arthas.user.UserController | grep classLoaderHash\n```\n\n```console\n$ sc -d com.example.demo.arthas.user.UserController | grep classLoaderHash\n classLoaderHash   1be6f5c3\n```\n\n注意hashcode是变化的，需要先查看当前的ClassLoader信息，提取对应ClassLoader的hashcode。\n\n如果你使用`-c`，你需要手动输入hashcode：`-c <hashcode>`\n\n```console\n$ ognl -c 1be6f5c3 @com.example.demo.arthas.user.UserController@logger\n```\n\n对于只有唯一实例的ClassLoader可以通过`--classLoaderClass`指定class name，使用起来更加方便：\n\n```console\n$ ognl --classLoaderClass org.springframework.boot.loader.LaunchedURLClassLoader  @org.springframework.boot.SpringApplication@logger\n@Slf4jLocationAwareLog[\n    FQCN=@String[org.apache.commons.logging.LogAdapter$Slf4jLocationAwareLog],\n    name=@String[org.springframework.boot.SpringApplication],\n    logger=@Logger[Logger[org.springframework.boot.SpringApplication]],\n]\n```\n\n`--classLoaderClass` 的值是ClassLoader的类名，只有匹配到唯一的ClassLoader实例时才能工作，目的是方便输入通用命令，而`-c <hashcode>`是动态变化的。\n\n#### 获取静态类的静态字段\n\n获取`UserController`类里的`logger`字段：\n\n```bash\nognl --classLoaderClass org.springframework.boot.loader.LaunchedURLClassLoader @com.example.demo.arthas.user.UserController@logger\n```\n\n还可以通过`-x`参数控制返回值的展开层数。比如：\n\n```bash\nognl --classLoaderClass org.springframework.boot.loader.LaunchedURLClassLoader -x 2 @com.example.demo.arthas.user.UserController@logger\n```\n\n#### 执行多行表达式，赋值给临时变量，返回一个List\n\n```bash\nognl '#value1=@System@getProperty(\"java.home\"), #value2=@System@getProperty(\"java.runtime.name\"), {#value1, #value2}'\n```\n\n```console\n$ ognl '#value1=@System@getProperty(\"java.home\"), #value2=@System@getProperty(\"java.runtime.name\"), {#value1, #value2}'\n@ArrayList[\n    @String[/Library/Java/JavaVirtualMachines/jdk1.8.0_162.jdk/Contents/Home/jre],\n    @String[Java(TM) SE Runtime Environment],\n]\n```\n\n#### 更多\n\n在Arthas里`ognl`表达式是很重要的功能，在很多命令里都可以使用`ognl`表达式。\n\n一些更复杂的用法，可以参考：\n\n- OGNL特殊用法请参考：https://github.com/alibaba/arthas/issues/71\n- OGNL表达式官方指南：https://commons.apache.org/proper/commons-ognl/language-guide.html\n\n## 案例: 排查函数调用异常\n\n#### 现象\n\n目前，访问 http://localhost:61000/user/0 ，会返回500异常：\n\n```bash\ncurl http://localhost:61000/user/0\n```\n\n```console\n{\"timestamp\":1550223186170,\"status\":500,\"error\":\"Internal Server Error\",\"exception\":\"java.lang.IllegalArgumentException\",\"message\":\"id < 1\",\"path\":\"/user/0\"}\n```\n\n但请求的具体参数，异常栈是什么呢？\n\n#### 查看UserController的 参数/异常\n\n在Arthas里执行：\n\n```bash\nwatch com.example.demo.arthas.user.UserController * '{params, throwExp}'\n```\n\n1. 第一个参数是类名，支持通配\n2. 第二个参数是函数名，支持通配 访问 `curl http://localhost:61000/user/0` ,`watch`命令会打印调用的参数和异常\n\n```bash\ncurl http://localhost:61000/user/0\n```\n\n```console\n$ watch com.example.demo.arthas.user.UserController * '{params, throwExp}'\nPress Q or Ctrl+C to abort.\nAffect(class-cnt:1 , method-cnt:2) cost in 53 ms.\nts=2019-02-15 01:35:25; [cost=0.996655ms] result=@ArrayList[\n    @Object[][isEmpty=false;size=1],\n    @IllegalArgumentException[java.lang.IllegalArgumentException: id < 1],\n]\n```\n\n可以看到实际抛出的异常是`IllegalArgumentException`。\n\n可以输入 `q` 或者 `Ctrl+C` 退出watch命令。\n\n```bash\nq\n```\n\n如果想把获取到的结果展开，可以用`-x`参数：\n\n```bash\nwatch com.example.demo.arthas.user.UserController * '{params, throwExp}' -x 2\n```\n\n#### 返回值表达式\n\n在上面的例子里，第三个参数是`返回值表达式`，它实际上是一个`ognl`表达式，它支持一些内置对象：\n\n- loader\n- clazz\n- method\n- target\n- params\n- returnObj\n- throwExp\n- isBefore\n- isThrow\n- isReturn\n\n你可以利用这些内置对象来组成不同的表达式。比如返回一个数组：\n\n```bash\nwatch com.example.demo.arthas.user.UserController * '{params[0], target, returnObj}'\n```\n\n更多参考： https://arthas.aliyun.com/doc/advice-class.html\n\n#### 条件表达式\n\n`watch`命令支持在第4个参数里写条件表达式，比如：\n\n```bash\nwatch com.example.demo.arthas.user.UserController * returnObj 'params[0] > 100'\n```\n\n当访问 user/1 时，`watch`命令没有输出\n\n当访问 user/101 时，`watch`会打印出结果。\n\n```console\n$ watch com.example.demo.arthas.user.UserController * returnObj 'params[0] > 100'\nPress Q or Ctrl+C to abort.\nAffect(class-cnt:1 , method-cnt:2) cost in 47 ms.\nts=2019-02-13 19:42:12; [cost=0.821443ms] result=@User[\n    id=@Integer[101],\n    name=@String[name101],\n]\n```\n\n#### 当异常时捕获\n\n`watch`命令支持`-e`选项，表示只捕获抛出异常时的请求：\n\n```bash\nwatch com.example.demo.arthas.user.UserController * \"{params[0],throwExp}\" -e\n```\n\n#### 按照耗时进行过滤\n\nwatch命令支持按请求耗时进行过滤，比如：\n\n```bash\nwatch com.example.demo.arthas.user.UserController * '{params, returnObj}' '#cost>200'\n```\n\n## 案例: 热更新代码\n\n下面介绍通过`jad`/`mc`/`redefine` 命令实现动态更新代码的功能。\n\n目前，访问 http://localhost:61000/user/0 ，会返回500异常：\n\n```bash\ncurl http://localhost:61000/user/0\n```\n\n```\n{\"timestamp\":1550223186170,\"status\":500,\"error\":\"Internal Server Error\",\"exception\":\"java.lang.IllegalArgumentException\",\"message\":\"id < 1\",\"path\":\"/user/0\"}\n```\n\n下面通过热更新代码，修改这个逻辑。\n\n#### jad反编译UserController\n\n```bash\njad --source-only com.example.demo.arthas.user.UserController > /tmp/UserController.java\n```\n\njad反编译的结果保存在 `/tmp/UserController.java`文件里了。\n\n再打开一个`Terminal 3`，然后用vim来编辑`/tmp/UserController.java`：\n\n```bash\nvim /tmp/UserController.java\n```\n\n比如当 user id 小于1时，也正常返回，不抛出异常：\n\n```java\n    @GetMapping(value={\"/user/{id}\"})\n    public User findUserById(@PathVariable Integer id) {\n        logger.info(\"id: {}\", (Object)id);\n        if (id != null && id < 1) {\n            return new User(id, \"name\" + id);\n            // throw new IllegalArgumentException(\"id < 1\");\n        }\n        return new User(id.intValue(), \"name\" + id);\n    }\n```\n\n#### sc查找加载UserController的ClassLoader\n\n```bash\nsc -d *UserController | grep classLoaderHash\n```\n\n```console\n$ sc -d *UserController | grep classLoaderHash\n classLoaderHash   1be6f5c3\n```\n\n可以发现是 spring boot `LaunchedURLClassLoader@1be6f5c3` 加载的。\n\n请记下你的classLoaderHash，后面需要使用它。在这里，它是 `1be6f5c3`。\n\n#### mc\n\n保存好`/tmp/UserController.java`之后，使用`mc`(Memory Compiler)命令来编译，并且通过`-c`或者`--classLoaderClass`参数指定ClassLoader：\n\n```bash\nmc --classLoaderClass org.springframework.boot.loader.LaunchedURLClassLoader /tmp/UserController.java -d /tmp\n```\n\n```console\n$ mc --classLoaderClass org.springframework.boot.loader.LaunchedURLClassLoader /tmp/UserController.java -d /tmp\nMemory compiler output:\n/tmp/com/example/demo/arthas/user/UserController.class\nAffect(row-cnt:1) cost in 346 ms\n```\n\n也可以通过`mc -c <classLoaderHash> /tmp/UserController.java -d /tmp`，使用`-c`参数指定ClassLoaderHash:\n\n```console\n$ mc -c 1be6f5c3 /tmp/UserController.java -d /tmp\n```\n\n#### redefine\n\n再使用`redefine`命令重新加载新编译好的`UserController.class`：\n\n```bash\nredefine /tmp/com/example/demo/arthas/user/UserController.class\n```\n\n```\n$ redefine /tmp/com/example/demo/arthas/user/UserController.class\nredefine success, size: 1\n```\n\n#### 热修改代码结果\n\n`redefine`成功之后，再次访问 user/0 ，结果是：\n\n```\n{\n  \"id\": 0,\n  \"name\": \"name0\"\n}\n```\n\n## 案例: 动态更新应用Logger Level\n\n在这个案例里，动态修改应用的Logger Level。\n\n#### 查找UserController的ClassLoader\n\n```bash\nsc -d com.example.demo.arthas.user.UserController | grep classLoaderHash\n```\n\n```console\n$ sc -d com.example.demo.arthas.user.UserController | grep classLoaderHash\n classLoaderHash   1be6f5c3\n```\n\n#### 用ognl获取logger\n\n```bash\nognl --classLoaderClass org.springframework.boot.loader.LaunchedURLClassLoader '@com.example.demo.arthas.user.UserController@logger'\n```\n\n```console\n$ ognl --classLoaderClass org.springframework.boot.loader.LaunchedURLClassLoader '@com.example.demo.arthas.user.UserController@logger'\n@Logger[\n    serialVersionUID=@Long[5454405123156820674],\n    FQCN=@String[ch.qos.logback.classic.Logger],\n    name=@String[com.example.demo.arthas.user.UserController],\n    level=null,\n    effectiveLevelInt=@Integer[20000],\n    parent=@Logger[Logger[com.example.demo.arthas.user]],\n    childrenList=null,\n    aai=null,\n    additive=@Boolean[true],\n    loggerContext=@LoggerContext[ch.qos.logback.classic.LoggerContext[default]],\n]\n```\n\n可以知道`UserController@logger`实际使用的是logback。可以看到`level=null`，则说明实际最终的level是从`root` logger里来的。\n\n#### 单独设置UserController的logger level\n\n```bash\nognl --classLoaderClass org.springframework.boot.loader.LaunchedURLClassLoader '@com.example.demo.arthas.user.UserController@logger.setLevel(@ch.qos.logback.classic.Level@DEBUG)'\n```\n\n再次获取`UserController@logger`，可以发现已经是`DEBUG`了：\n\n```bash\nognl --classLoaderClass org.springframework.boot.loader.LaunchedURLClassLoader '@com.example.demo.arthas.user.UserController@logger'\n```\n\n```console\n$ ognl --classLoaderClass org.springframework.boot.loader.LaunchedURLClassLoader '@com.example.demo.arthas.user.UserController@logger'\n@Logger[\n    serialVersionUID=@Long[5454405123156820674],\n    FQCN=@String[ch.qos.logback.classic.Logger],\n    name=@String[com.example.demo.arthas.user.UserController],\n    level=@Level[DEBUG],\n    effectiveLevelInt=@Integer[10000],\n    parent=@Logger[Logger[com.example.demo.arthas.user]],\n    childrenList=null,\n    aai=null,\n    additive=@Boolean[true],\n    loggerContext=@LoggerContext[ch.qos.logback.classic.LoggerContext[default]],\n]\n```\n\n#### 修改logback的全局logger level\n\n通过获取`root` logger，可以修改全局的logger level：\n\n```bash\nognl --classLoaderClass org.springframework.boot.loader.LaunchedURLClassLoader '@org.slf4j.LoggerFactory@getLogger(\"root\").setLevel(@ch.qos.logback.classic.Level@DEBUG)'\n```\n\n## 案例: 排查logger冲突问题\n\n在这个案例里，展示排查logger冲突的方法。\n\n#### 确认应用使用的logger系统\n\n以`UserController`为例，它使用的是slf4j api，但实际使用到的logger系统是logback。\n\n```bash\nognl --classLoaderClass org.springframework.boot.loader.LaunchedURLClassLoader '@com.example.demo.arthas.user.UserController@logger'\n```\n\n```console\n$ ognl --classLoaderClass org.springframework.boot.loader.LaunchedURLClassLoader '@com.example.demo.arthas.user.UserController@logger'\n@Logger[\n    serialVersionUID=@Long[5454405123156820674],\n    FQCN=@String[ch.qos.logback.classic.Logger],\n    name=@String[com.example.demo.arthas.user.UserController],\n    level=null,\n    effectiveLevelInt=@Integer[20000],\n    parent=@Logger[Logger[com.example.demo.arthas.user]],\n    childrenList=null,\n    aai=null,\n    additive=@Boolean[true],\n    loggerContext=@LoggerContext[ch.qos.logback.classic.LoggerContext[default]],\n]\n```\n\n#### 获取logback实际加载的配置文件\n\n```bash\nognl --classLoaderClass org.springframework.boot.loader.LaunchedURLClassLoader '#map1=@org.slf4j.LoggerFactory@getLogger(\"root\").loggerContext.objectMap, #map1.get(\"CONFIGURATION_WATCH_LIST\")'\n```\n\n#### 使用classloader命令查找可能存在的logger配置文件\n\n```bash\nclassloader --classLoaderClass org.springframework.boot.loader.LaunchedURLClassLoader -r logback-spring.xml\n```\n\n```\n$ classloader --classLoaderClass org.springframework.boot.loader.LaunchedURLClassLoader -r logback-spring.xml\n jar:file:/Users/hengyunabc/code/java/spring-boot-inside/demo-arthas-spring-boot/target/demo-arthas-spring-boot-0.0.1-SNAPSHOT.jar!/BOOT-INF/classes!/logback-spring.xml\n\nAffect(row-cnt:1) cost in 13 ms.\n```\n\n可以知道加载的配置的具体来源。\n\n可以尝试加载容易冲突的文件：\n\n```bash\nclassloader --classLoaderClass org.springframework.boot.loader.LaunchedURLClassLoader -r logback.xml\n```\n\n```bash\nclassloader --classLoaderClass org.springframework.boot.loader.LaunchedURLClassLoader -r log4j.properties\n```\n\n## 案例: 获取Spring Context\n\n在这个案例里，展示获取spring context，再获取bean，然后调用函数。\n\n#### 使用tt命令获取到spring context\n\n`tt`即 TimeTunnel，它可以记录下指定方法每次调用的入参和返回信息，并能对这些不同的时间下调用进行观测。\n\n- https://arthas.aliyun.com/doc/tt.html\n\n```bash\ntt -t org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter invokeHandlerMethod\n```\n\n访问：user/1\n\n可以看到`tt`命令捕获到了一个请求：\n\n```console\n$ tt -t org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdaptePress Q or Ctrl+C to abort.\nAffect(class-cnt:1 , method-cnt:1) cost in 252 ms.\n INDE  TIMESTAMP    COST(  IS-R  IS-  OBJECT     CLASS               METHOD\n X                  ms)    ET    EXP\n-----------------------------------------------------------------------------------------\n 1000  2019-02-15   4.583  true  fal  0xc93cf1a  RequestMappingHand  invokeHandlerMethod\n       15:38:32     923          se              lerAdapter\n```\n\n#### 使用tt命令从调用记录里获取到spring context\n\n输入 `q` 或者 `Ctrl + C` 退出上面的 `tt -t`命令。\n\n```bash\nq\n```\n\n```bash\ntt -i 1000 -w 'target.getApplicationContext()'\n```\n\n```console\n$ tt -i 1000 -w 'target.getApplicationContext()'\n@AnnotationConfigEmbeddedWebApplicationContext[\n    reader=@AnnotatedBeanDefinitionReader[org.springframework.context.annotation.AnnotatedBeanDefinitionReader@2e457641],\n    scanner=@ClassPathBeanDefinitionScanner[org.springframework.context.annotation.ClassPathBeanDefinitionScanner@6eb38026],\n    annotatedClasses=null,\n    basePackages=null,\n]\nAffect(row-cnt:1) cost in 439 ms.\n```\n\n### 获取spring bean，并调用函数\n\n```bash\ntt -i 1000 -w 'target.getApplicationContext().getBean(\"helloWorldService\").getHelloMessage()'\n```\n\n结果是：\n\n```console\n$ tt -i 1000 -w 'target.getApplicationContext().getBean(\"helloWorldService\").getHelloMessage()'\n@String[Hello World]\nAffect(row-cnt:1) cost in 52 ms.\n```\n\n## 案例: 排查HTTP请求返回401\n\n在这个案例里，展示排查HTTP 401问题的技巧。\n\n访问： admin\n\n结果是：\n\n```\nSomething went wrong: 401 Unauthorized\n```\n\n我们知道`401`通常是被权限管理的`Filter`拦截了，那么到底是哪个`Filter`处理了这个请求，返回了401？\n\n#### 跟踪所有的Filter函数\n\n开始trace：\n\n```bash\ntrace javax.servlet.Filter *\n```\n\n访问： admin\n\n可以在调用树的最深层，找到`AdminFilterConfig$AdminFilter`返回了`401`：\n\n```\n+---[3.806273ms] javax.servlet.FilterChain:doFilter()\n|   `---[3.447472ms] com.example.demo.arthas.AdminFilterConfig$AdminFilter:doFilter()\n|       `---[0.17259ms] javax.servlet.http.HttpServletResponse:sendError()\n```\n\n#### 通过stack获取调用栈\n\n上面是通过`trace`命令来获取信息，从结果里，我们可以知道通过`stack`跟踪`HttpServletResponse:sendError()`，同样可以知道是哪个`Filter`返回了`401`\n\n执行：\n\n```bash\nstack javax.servlet.http.HttpServletResponse sendError 'params[0]==401'\n```\n\n访问： admin\n\n```console\n$ stack javax.servlet.http.HttpServletResponse sendError 'params[0]==401'\nPress Q or Ctrl+C to abort.\nAffect(class-cnt:2 , method-cnt:4) cost in 87 ms.\nts=2019-02-15 16:44:06;thread_name=http-nio-8080-exec-6;id=16;is_daemon=true;priority=5;TCCL=org.springframework.boot.context.embedded.tomcat.TomcatEmbeddedWebappClassLoader@8546cd5\n    @org.apache.catalina.connector.ResponseFacade.sendError()\n        at com.example.demo.arthas.AdminFilterConfig$AdminFilter.doFilter(AdminFilterConfig.java:38)\n        at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)\n        at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)\n        at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:99)\n        at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)\n```\n\n## 案例: 排查HTTP请求返回404\n\n在这个案例里，展示排查HTTP 404问题的技巧。\n\n访问： a.txt\n\n结果是：\n\n```\nSomething went wrong: 404 Not Found\n```\n\n那么到底是哪个Servlet处理了这个请求，返回了404？\n\n#### 跟踪所有的Servlet函数\n\n开始trace：\n\n```bash\ntrace javax.servlet.Servlet * > /tmp/servlet.txt\n```\n\n访问： a.txt\n\n在`Terminal 3`里，查看`/tmp/servlet.txt`的内容：\n\n```bash\nless /tmp/servlet.txt\n```\n\n`/tmp/servlet.txt`里的内容会比较多，需要耐心找到调用树里最长的地方。\n\n可以发现请求最终是被`freemarker`处理的：\n\n```\n`---[13.974188ms] org.springframework.web.servlet.ViewResolver:resolveViewName();    +---[0.045561ms] javax.servlet.GenericServlet:<init>()\n    +---[min=0.045545ms,max=0.074342ms,total=0.119887ms,count=2] org.springframework.web.servlet.view.freemarker.FreeMarkerView$GenericServletAdapter:<init>()\n    +---[0.170895ms] javax.servlet.GenericServlet:init()\n    |   `---[0.068578ms] javax.servlet.GenericServlet:init()\n    |       `---[0.021793ms] javax.servlet.GenericServlet:init()\n    `---[0.164035ms] javax.servlet.GenericServlet:getServletContext()\n```\n\n## 案例: 理解Spring Boot应用的ClassLoader结构\n\n下面介绍`classloader`命令的功能。\n\n先访问一个jsp网页，触发jsp的加载： hello\n\n#### 列出所有ClassLoader\n\n```bash\nclassloader -l\n```\n\n```console\n$ classloader -l\n name                                                             loadedCount  hash      parent\n BootstrapClassLoader                                             2724         null      null\n com.taobao.arthas.agent.ArthasClassloader@411ce1ab               2009         411ce1ab  sun.misc.Launcher$ExtClassLoader@7494e528\n com.taobao.arthas.agent.ArthasClassloader@22ae1234               1253         22ae1234  sun.misc.Launcher$ExtClassLoader@7494e528\n org.apache.jasper.servlet.JasperLoader@65361d9a                  1            65361d9a  TomcatEmbeddedWebappClassLoader\n                                                                                           context: ROOT\n                                                                                           delegate: true\n                                                                                         ----------> Parent Classloader:\n                                                                                         org.springframework.boot.loader.LaunchedURLClassLoader@1be6f5c3\n\n TomcatEmbeddedWebappClassLoader                                  0            8546cd5   org.springframework.boot.loader.LaunchedURLClassLoader@1be6f5c3\n   context: ROOT\n   delegate: true\n ----------> Parent Classloader:\n org.springframework.boot.loader.LaunchedURLClassLoader@1be6f5c3\n\n org.springframework.boot.loader.LaunchedURLClassLoader@1be6f5c3  5416         1be6f5c3  sun.misc.Launcher$AppClassLoader@3d4eac69\n sun.misc.Launcher$AppClassLoader@3d4eac69                        45           3d4eac69  sun.misc.Launcher$ExtClassLoader@7494e528\n sun.misc.Launcher$ExtClassLoader@7494e528                        4            7494e528  null\n```\n\n- TomcatEmbeddedWebappClassLoader 加载的class数量是0，所以在spring boot embedded tomcat里，它只是一个空壳，所有的类加载都是`LaunchedURLClassLoader`完成的\n\n#### 列出ClassLoader里加载的所有类\n\n列出上面的`org.apache.jasper.servlet.JasperLoader`加载的类：\n\n```bash\nclassloader -a --classLoaderClass apache.jasper.servlet.JasperLoader\n```\n\n```console\n$ classloader -a --classLoaderClass apache.jasper.servlet.JasperLoader\n hash:1698045338, org.apache.jasper.servlet.JasperLoader@65361d9a\n org.apache.jsp.jsp.hello_jsp\n```\n\n- 注：同ognl, 也可用`-c <hashcode>`而不用`--classLoaderClass`指定\n\n#### 反编译jsp的代码\n\n```bash\njad org.apache.jsp.jsp.hello_jsp\n```\n\n```console\n$ jad org.apache.jsp.jsp.hello_jsp\n\nClassLoader:\n+-org.apache.jasper.servlet.JasperLoader@65361d9a\n  +-TomcatEmbeddedWebappClassLoader\n      context: ROOT\n...\n```\n\n#### 查看ClassLoader树\n\n```bash\nclassloader -t\n```\n\n```\n$ classloader -t\n+-BootstrapClassLoader\n+-sun.misc.Launcher$ExtClassLoader@28cbbddd\n  +-com.taobao.arthas.agent.ArthasClassloader@8c25e55\n  +-sun.misc.Launcher$AppClassLoader@55f96302\n    +-org.springframework.boot.loader.LaunchedURLClassLoader@1be6f5c3\n      +-TomcatEmbeddedWebappClassLoader\n          context: ROOT\n          delegate: true\n        ----------> Parent Classloader:\n        org.springframework.boot.loader.LaunchedURLClassLoader@1be6f5c3\n\n        +-org.apache.jasper.servlet.JasperLoader@21ae0fe2\n```\n\n注意：请使用你的classLoaderHash值覆盖 `<classLoaderHash>` ，然后手动执行下面相关命令：\n\n#### 列出ClassLoader的urls\n\n比如上面查看到的spring LaunchedURLClassLoader的 hashcode是`1be6f5c3`，可以通过`-c`或者`--classLoaderClass`参数来列出它的所有urls：\n\n```bash\nclassloader --classLoaderClass org.springframework.boot.loader.LaunchedURLClassLoader\n```\n\n```\n$ classloader --classLoaderClass org.springframework.boot.loader.LaunchedURLClassLoader\njar:file:/home/scrapbook/tutorial/demo-arthas-spring-boot.jar!/BOOT-INF/classes!/\njar:file:/home/scrapbook/tutorial/demo-arthas-spring-boot.jar!/BOOT-INF/lib/spring-boot-starter-aop-1.5\n.13.RELEASE.jar!/\n...\n```\n\n#### 加载指定ClassLoader里的资源文件\n\n查找指定的资源文件： `classloader --classLoaderClass org.springframework.boot.loader.LaunchedURLClassLoader -r logback-spring.xml`\n\n```bash\nclassloader --classLoaderClass org.springframework.boot.loader.LaunchedURLClassLoader -r logback-spring.xml\n```\n\n```\n$ classloader --classLoaderClass org.springframework.boot.loader.LaunchedURLClassLoader -r logback-spring.xml\n jar:file:/home/scrapbook/tutorial/demo-arthas-spring-boot.jar!/BOOT-INF/classes!/logback-spring.xml\n```\n\n#### 尝试加载指定的类\n\n比如用上面的spring LaunchedURLClassLoader 尝试加载 `java.lang.String` ：\n\n```bash\nclassloader --classLoaderClass org.springframework.boot.loader.LaunchedURLClassLoader --load java.lang.String\n```\n\n```\n$ classloader --classLoaderClass org.springframework.boot.loader.LaunchedURLClassLoader --load java.lang.String\nload class success.\n class-info        java.lang.String\n code-source\n name              java.lang.String\n isInterface       false\n isAnnotation      false\n isEnum            false\n isAnonymousClass  false\n isArray           false\n isLocalClass      false\n isMemberClass     false\n isPrimitive       false\n isSynthetic       false\n simple-name       String\n modifier          final,public\n annotation\n interfaces        java.io.Serializable,java.lang.Comparable,java.lang.CharSequence\n super-class       +-java.lang.Object\n class-loader\n classLoaderHash   null\n```\n\n## 案例：查找Top N线程\n\n#### 查看所有线程信息\n\n```bash\nthread\n```\n\n#### 查看具体线程的栈\n\n查看线程ID 16的栈：\n\n```bash\nthread 16\n```\n\n#### 查看CPU使用率top n线程的栈\n\n```bash\nthread -n 3\n```\n\n查看5秒内的CPU使用率top n线程栈\n\n```bash\nthread -n 3 -i 5000\n```\n\n#### 查找线程是否有阻塞\n\n```bash\nthread -b\n```\n\n## Web Console\n\nArthas支持通过Web Socket来连接。\n\n### 本地体验\n\n当在本地启动时，可以访问 http://127.0.0.1:8563/ ，通过浏览器来使用Arthas。\n\n![Arthas WebConsole](O1CN01i041kW1lw0FCaSKNn_!!6000000004882-2-tps-1231-284.png)\n\n推荐通过“快速入门”来体验： https://arthas.aliyun.com/doc/quick-start.html\n\n## Exit/Stop\n\n### reset\n\nArthas在 watch/trace 等命令时，实际上是修改了应用的字节码，插入增强的代码。显式执行 `reset` 命令，可以清除掉这些增强代码。\n\n```bash\nreset\n```\n\n### 退出Arthas\n\n用 `exit` 或者 `quit` 命令可以退出Arthas。\n\n```bash\nexit\n```\n\nCtrl+C\n\n退出Arthas之后，还可以再次用 `java -jar arthas-boot.jar` 来连接。\n\n```bash\njava -jar arthas-boot.jar\n```\n\nCtrl+C\n\n### 彻底退出Arthas\n\n`exit/quit`命令只是退出当前session，arthas server还在目标进程中运行。\n\n想完全退出Arthas，可以执行 `stop` 命令。\n\n```bash\nstop\n```\n\nCtrl+C\n\n## arthas-boot支持的参数\n\n`arthas-boot.jar` 支持很多参数，可以执行 `java -jar arthas-boot.jar -h` 来查看。\n\n```bash\njava -jar arthas-boot.jar -h\n```\n\n### 允许外部访问\n\n默认情况下， arthas server侦听的是 `127.0.0.1` 这个IP，如果希望远程可以访问，可以使用`--target-ip`的参数。\n\n```bash\njava -jar arthas-boot.jar --target-ip\n```\n\n### 列出所有的版本\n\n```bash\njava -jar arthas-boot.jar --versions\n```\n\n使用指定版本：\n\n```bash\njava -jar arthas-boot.jar --use-version 3.1.0\n```\n\n### 只侦听Telnet端口，不侦听HTTP端口\n\n```bash\njava -jar arthas-boot.jar --telnet-port 9999 --http-port -1\n```\n\n### 打印运行的详情\n\n```bash\njava -jar arthas-boot.jar -v\n```\n\n## 更多信息\n\n在“进阶教程”，演示了Arthas的大部分高级用法，希望对大家排查问题有帮助。如果有更多的技巧或者使用疑问，欢迎在Issue里提出。\n\n- Issues: https://github.com/alibaba/arthas/issues\n- 文档： https://arthas.aliyun.com/doc\n\n如果您在使用Arthas，请让我们知道。您的使用对我们非常重要：[查看](https://github.com/alibaba/arthas/issues/111)\n\n文章拷贝来源：https://start.aliyun.com/course?spm=a2ck6.17690074.0.0.28bc2e7dHTphXs&id=qDlgqpBT","slug":"Java诊断工具Arthas入门教程/Arthas-进阶","published":1,"updated":"2021-08-07T05:30:45.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cks1cgr7m003xfw5i35kh99ks","content":"<!-- toc -->\n\n<ul>\n<li><a href=\"#%E5%90%AF%E5%8A%A8demo\">启动demo</a></li>\n<li><a href=\"#%E5%90%AF%E5%8A%A8arthas-boot\">启动arthas-boot</a></li>\n<li><a href=\"#%E6%9F%A5%E7%9C%8Bjvm%E4%BF%A1%E6%81%AF\">查看JVM信息</a><ul>\n<li><a href=\"#sysprop\">sysprop</a></li>\n<li><a href=\"#sysenv\">sysenv</a></li>\n<li><a href=\"#jvm\">jvm</a></li>\n<li><a href=\"#dashboard\">dashboard</a></li>\n</ul>\n</li>\n<li><a href=\"#tips\">Tips</a><ul>\n<li><a href=\"#help\">help</a></li>\n<li><a href=\"#%E8%87%AA%E5%8A%A8%E8%A1%A5%E5%85%A8\">自动补全</a></li>\n<li><a href=\"#readline%E7%9A%84%E5%BF%AB%E6%8D%B7%E9%94%AE%E6%94%AF%E6%8C%81\">readline的快捷键支持</a></li>\n<li><a href=\"#%E5%8E%86%E5%8F%B2%E5%91%BD%E4%BB%A4%E7%9A%84%E8%A1%A5%E5%85%A8\">历史命令的补全</a></li>\n<li><a href=\"#pipeline\">pipeline</a></li>\n</ul>\n</li>\n<li><a href=\"#scsm-%E6%9F%A5%E7%9C%8B%E5%B7%B2%E5%8A%A0%E8%BD%BD%E7%9A%84%E7%B1%BB\">sc/sm 查看已加载的类</a><ul>\n<li><a href=\"#sc\">sc</a></li>\n<li><a href=\"#sm\">sm</a></li>\n</ul>\n</li>\n<li><a href=\"#jad\">Jad</a></li>\n<li><a href=\"#ognl\">Ognl</a><ul>\n<li><a href=\"#%E8%B0%83%E7%94%A8static%E5%87%BD%E6%95%B0\">调用static函数</a></li>\n<li><a href=\"#%E6%9F%A5%E6%89%BEusercontroller%E7%9A%84classloader\">查找UserController的ClassLoader</a></li>\n<li><a href=\"#%E8%8E%B7%E5%8F%96%E9%9D%99%E6%80%81%E7%B1%BB%E7%9A%84%E9%9D%99%E6%80%81%E5%AD%97%E6%AE%B5\">获取静态类的静态字段</a></li>\n<li><a href=\"#%E6%89%A7%E8%A1%8C%E5%A4%9A%E8%A1%8C%E8%A1%A8%E8%BE%BE%E5%BC%8F%E8%B5%8B%E5%80%BC%E7%BB%99%E4%B8%B4%E6%97%B6%E5%8F%98%E9%87%8F%E8%BF%94%E5%9B%9E%E4%B8%80%E4%B8%AAlist\">执行多行表达式，赋值给临时变量，返回一个List</a></li>\n<li><a href=\"#%E6%9B%B4%E5%A4%9A\">更多</a></li>\n</ul>\n</li>\n<li><a href=\"#%E6%A1%88%E4%BE%8B-%E6%8E%92%E6%9F%A5%E5%87%BD%E6%95%B0%E8%B0%83%E7%94%A8%E5%BC%82%E5%B8%B8\">案例: 排查函数调用异常</a><ul>\n<li><a href=\"#%E7%8E%B0%E8%B1%A1\">现象</a></li>\n<li><a href=\"#%E6%9F%A5%E7%9C%8Busercontroller%E7%9A%84-%E5%8F%82%E6%95%B0%E5%BC%82%E5%B8%B8\">查看UserController的 参数/异常</a></li>\n<li><a href=\"#%E8%BF%94%E5%9B%9E%E5%80%BC%E8%A1%A8%E8%BE%BE%E5%BC%8F\">返回值表达式</a></li>\n<li><a href=\"#%E6%9D%A1%E4%BB%B6%E8%A1%A8%E8%BE%BE%E5%BC%8F\">条件表达式</a></li>\n<li><a href=\"#%E5%BD%93%E5%BC%82%E5%B8%B8%E6%97%B6%E6%8D%95%E8%8E%B7\">当异常时捕获</a></li>\n<li><a href=\"#%E6%8C%89%E7%85%A7%E8%80%97%E6%97%B6%E8%BF%9B%E8%A1%8C%E8%BF%87%E6%BB%A4\">按照耗时进行过滤</a></li>\n</ul>\n</li>\n<li><a href=\"#%E6%A1%88%E4%BE%8B-%E7%83%AD%E6%9B%B4%E6%96%B0%E4%BB%A3%E7%A0%81\">案例: 热更新代码</a><ul>\n<li><a href=\"#jad%E5%8F%8D%E7%BC%96%E8%AF%91usercontroller\">jad反编译UserController</a></li>\n<li><a href=\"#sc%E6%9F%A5%E6%89%BE%E5%8A%A0%E8%BD%BDusercontroller%E7%9A%84classloader\">sc查找加载UserController的ClassLoader</a></li>\n<li><a href=\"#mc\">mc</a></li>\n<li><a href=\"#redefine\">redefine</a></li>\n<li><a href=\"#%E7%83%AD%E4%BF%AE%E6%94%B9%E4%BB%A3%E7%A0%81%E7%BB%93%E6%9E%9C\">热修改代码结果</a></li>\n</ul>\n</li>\n<li><a href=\"#%E6%A1%88%E4%BE%8B-%E5%8A%A8%E6%80%81%E6%9B%B4%E6%96%B0%E5%BA%94%E7%94%A8logger-level\">案例: 动态更新应用Logger Level</a><ul>\n<li><a href=\"#%E6%9F%A5%E6%89%BEusercontroller%E7%9A%84classloader-1\">查找UserController的ClassLoader</a></li>\n<li><a href=\"#%E7%94%A8ognl%E8%8E%B7%E5%8F%96logger\">用ognl获取logger</a></li>\n<li><a href=\"#%E5%8D%95%E7%8B%AC%E8%AE%BE%E7%BD%AEusercontroller%E7%9A%84logger-level\">单独设置UserController的logger level</a></li>\n<li><a href=\"#%E4%BF%AE%E6%94%B9logback%E7%9A%84%E5%85%A8%E5%B1%80logger-level\">修改logback的全局logger level</a></li>\n</ul>\n</li>\n<li><a href=\"#%E6%A1%88%E4%BE%8B-%E6%8E%92%E6%9F%A5logger%E5%86%B2%E7%AA%81%E9%97%AE%E9%A2%98\">案例: 排查logger冲突问题</a><ul>\n<li><a href=\"#%E7%A1%AE%E8%AE%A4%E5%BA%94%E7%94%A8%E4%BD%BF%E7%94%A8%E7%9A%84logger%E7%B3%BB%E7%BB%9F\">确认应用使用的logger系统</a></li>\n<li><a href=\"#%E8%8E%B7%E5%8F%96logback%E5%AE%9E%E9%99%85%E5%8A%A0%E8%BD%BD%E7%9A%84%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6\">获取logback实际加载的配置文件</a></li>\n<li><a href=\"#%E4%BD%BF%E7%94%A8classloader%E5%91%BD%E4%BB%A4%E6%9F%A5%E6%89%BE%E5%8F%AF%E8%83%BD%E5%AD%98%E5%9C%A8%E7%9A%84logger%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6\">使用classloader命令查找可能存在的logger配置文件</a></li>\n</ul>\n</li>\n<li><a href=\"#%E6%A1%88%E4%BE%8B-%E8%8E%B7%E5%8F%96spring-context\">案例: 获取Spring Context</a><ul>\n<li><a href=\"#%E4%BD%BF%E7%94%A8tt%E5%91%BD%E4%BB%A4%E8%8E%B7%E5%8F%96%E5%88%B0spring-context\">使用tt命令获取到spring context</a></li>\n<li><a href=\"#%E4%BD%BF%E7%94%A8tt%E5%91%BD%E4%BB%A4%E4%BB%8E%E8%B0%83%E7%94%A8%E8%AE%B0%E5%BD%95%E9%87%8C%E8%8E%B7%E5%8F%96%E5%88%B0spring-context\">使用tt命令从调用记录里获取到spring context</a></li>\n</ul>\n<ul>\n<li><a href=\"#%E8%8E%B7%E5%8F%96spring-bean%E5%B9%B6%E8%B0%83%E7%94%A8%E5%87%BD%E6%95%B0\">获取spring bean，并调用函数</a></li>\n</ul>\n</li>\n<li><a href=\"#%E6%A1%88%E4%BE%8B-%E6%8E%92%E6%9F%A5http%E8%AF%B7%E6%B1%82%E8%BF%94%E5%9B%9E401\">案例: 排查HTTP请求返回401</a><ul>\n<li><a href=\"#%E8%B7%9F%E8%B8%AA%E6%89%80%E6%9C%89%E7%9A%84filter%E5%87%BD%E6%95%B0\">跟踪所有的Filter函数</a></li>\n<li><a href=\"#%E9%80%9A%E8%BF%87stack%E8%8E%B7%E5%8F%96%E8%B0%83%E7%94%A8%E6%A0%88\">通过stack获取调用栈</a></li>\n</ul>\n</li>\n<li><a href=\"#%E6%A1%88%E4%BE%8B-%E6%8E%92%E6%9F%A5http%E8%AF%B7%E6%B1%82%E8%BF%94%E5%9B%9E404\">案例: 排查HTTP请求返回404</a><ul>\n<li><a href=\"#%E8%B7%9F%E8%B8%AA%E6%89%80%E6%9C%89%E7%9A%84servlet%E5%87%BD%E6%95%B0\">跟踪所有的Servlet函数</a></li>\n</ul>\n</li>\n<li><a href=\"#%E6%A1%88%E4%BE%8B-%E7%90%86%E8%A7%A3spring-boot%E5%BA%94%E7%94%A8%E7%9A%84classloader%E7%BB%93%E6%9E%84\">案例: 理解Spring Boot应用的ClassLoader结构</a><ul>\n<li><a href=\"#%E5%88%97%E5%87%BA%E6%89%80%E6%9C%89classloader\">列出所有ClassLoader</a></li>\n<li><a href=\"#%E5%88%97%E5%87%BAclassloader%E9%87%8C%E5%8A%A0%E8%BD%BD%E7%9A%84%E6%89%80%E6%9C%89%E7%B1%BB\">列出ClassLoader里加载的所有类</a></li>\n<li><a href=\"#%E5%8F%8D%E7%BC%96%E8%AF%91jsp%E7%9A%84%E4%BB%A3%E7%A0%81\">反编译jsp的代码</a></li>\n<li><a href=\"#%E6%9F%A5%E7%9C%8Bclassloader%E6%A0%91\">查看ClassLoader树</a></li>\n<li><a href=\"#%E5%88%97%E5%87%BAclassloader%E7%9A%84urls\">列出ClassLoader的urls</a></li>\n<li><a href=\"#%E5%8A%A0%E8%BD%BD%E6%8C%87%E5%AE%9Aclassloader%E9%87%8C%E7%9A%84%E8%B5%84%E6%BA%90%E6%96%87%E4%BB%B6\">加载指定ClassLoader里的资源文件</a></li>\n<li><a href=\"#%E5%B0%9D%E8%AF%95%E5%8A%A0%E8%BD%BD%E6%8C%87%E5%AE%9A%E7%9A%84%E7%B1%BB\">尝试加载指定的类</a></li>\n</ul>\n</li>\n<li><a href=\"#%E6%A1%88%E4%BE%8B%E6%9F%A5%E6%89%BEtop-n%E7%BA%BF%E7%A8%8B\">案例：查找Top N线程</a><ul>\n<li><a href=\"#%E6%9F%A5%E7%9C%8B%E6%89%80%E6%9C%89%E7%BA%BF%E7%A8%8B%E4%BF%A1%E6%81%AF\">查看所有线程信息</a></li>\n<li><a href=\"#%E6%9F%A5%E7%9C%8B%E5%85%B7%E4%BD%93%E7%BA%BF%E7%A8%8B%E7%9A%84%E6%A0%88\">查看具体线程的栈</a></li>\n<li><a href=\"#%E6%9F%A5%E7%9C%8Bcpu%E4%BD%BF%E7%94%A8%E7%8E%87top-n%E7%BA%BF%E7%A8%8B%E7%9A%84%E6%A0%88\">查看CPU使用率top n线程的栈</a></li>\n<li><a href=\"#%E6%9F%A5%E6%89%BE%E7%BA%BF%E7%A8%8B%E6%98%AF%E5%90%A6%E6%9C%89%E9%98%BB%E5%A1%9E\">查找线程是否有阻塞</a></li>\n</ul>\n</li>\n<li><a href=\"#web-console\">Web Console</a><ul>\n<li><a href=\"#%E6%9C%AC%E5%9C%B0%E4%BD%93%E9%AA%8C\">本地体验</a></li>\n</ul>\n</li>\n<li><a href=\"#exitstop\">Exit/Stop</a><ul>\n<li><a href=\"#reset\">reset</a></li>\n<li><a href=\"#%E9%80%80%E5%87%BAarthas\">退出Arthas</a></li>\n<li><a href=\"#%E5%BD%BB%E5%BA%95%E9%80%80%E5%87%BAarthas\">彻底退出Arthas</a></li>\n</ul>\n</li>\n<li><a href=\"#arthas-boot%E6%94%AF%E6%8C%81%E7%9A%84%E5%8F%82%E6%95%B0\">arthas-boot支持的参数</a><ul>\n<li><a href=\"#%E5%85%81%E8%AE%B8%E5%A4%96%E9%83%A8%E8%AE%BF%E9%97%AE\">允许外部访问</a></li>\n<li><a href=\"#%E5%88%97%E5%87%BA%E6%89%80%E6%9C%89%E7%9A%84%E7%89%88%E6%9C%AC\">列出所有的版本</a></li>\n<li><a href=\"#%E5%8F%AA%E4%BE%A6%E5%90%ACtelnet%E7%AB%AF%E5%8F%A3%E4%B8%8D%E4%BE%A6%E5%90%AChttp%E7%AB%AF%E5%8F%A3\">只侦听Telnet端口，不侦听HTTP端口</a></li>\n<li><a href=\"#%E6%89%93%E5%8D%B0%E8%BF%90%E8%A1%8C%E7%9A%84%E8%AF%A6%E6%83%85\">打印运行的详情</a></li>\n</ul>\n</li>\n<li><a href=\"#%E6%9B%B4%E5%A4%9A%E4%BF%A1%E6%81%AF\">更多信息</a></li>\n</ul>\n<!-- tocstop -->\n\n<p><img src=\"/jlynet.github.io/2021/08/07/Java%E8%AF%8A%E6%96%AD%E5%B7%A5%E5%85%B7Arthas%E5%85%A5%E9%97%A8%E6%95%99%E7%A8%8B/Arthas-%E8%BF%9B%E9%98%B6/arthas.png\" alt=\"Arthas\"></p>\n<p><code>Arthas</code> 是Alibaba开源的Java诊断工具，深受开发者喜爱。</p>\n<p>本教程会以一个普通的Spring Boot应用为例，演示Arthas命令的详细用法。</p>\n<ul>\n<li>Github: <a href=\"https://github.com/alibaba/arthas\">https://github.com/alibaba/arthas</a></li>\n<li>文档: <a href=\"https://arthas.aliyun.com/doc/\">https://arthas.aliyun.com/doc/</a></li>\n</ul>\n<h2><span id=\"启动demo\">启动demo</span></h2><p>下载<code>demo-arthas-spring-boot.jar</code>，再用<code>java -jar</code>命令启动：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wget https://code.aliyun.com/middleware-container/handsonLabExternedFiles/raw/master/demo-arthas-spring-boot.jar;java -jar demo-arthas-spring-boot.jar</span><br></pre></td></tr></table></figure>\n\n<p><code>demo-arthas-spring-boot</code>是一个很简单的spring boot应用，源代码：<a href=\"https://github.com/hengyunabc/spring-boot-inside/tree/master/demo-arthas-spring-boot\">查看</a></p>\n<p>启动之后，可以访问61000端口： 点击查看</p>\n<p><img src=\"https://img.alicdn.com/imgextra/i2/O1CN010Qbzcz1ctPSWSZI6L_!!6000000003658-2-tps-333-182.png\" alt=\"Demo Web\"></p>\n<h2><span id=\"启动arthas-boot\">启动arthas-boot</span></h2><p>在新的<code>Terminal 2</code>里，下载<code>arthas-boot.jar</code>，再用<code>java -jar</code>命令启动：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wget https://arthas.aliyun.com/arthas-boot.jar;java -jar arthas-boot.jar --target-ip 0.0.0.0</span><br></pre></td></tr></table></figure>\n\n<p><code>arthas-boot</code>是<code>Arthas</code>的启动程序，它启动后，会列出所有的Java进程，用户可以选择需要诊断的目标进程。</p>\n<p>选择第一个进程，输入 <code>1</code> ，再<code>Enter/回车</code>：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1</span><br></pre></td></tr></table></figure>\n\n<p>Attach成功之后，会打印Arthas LOGO。输入 <code>help</code> 可以获取到更多的帮助信息。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">help</span></span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/jlynet.github.io/2021/08/07/Java%E8%AF%8A%E6%96%AD%E5%B7%A5%E5%85%B7Arthas%E5%85%A5%E9%97%A8%E6%95%99%E7%A8%8B/Arthas-%E8%BF%9B%E9%98%B6/O1CN01HzatXZ1RgccrlT90M_!!6000000002141-2-tps-529-244.png\" alt=\"Arthas Boot\"></p>\n<h2><span id=\"查看jvm信息\">查看JVM信息</span></h2><p>下面介绍Arthas里查看<code>JVM</code>信息的命令。</p>\n<h4><span id=\"sysprop\">sysprop</span></h4><p><code>sysprop</code> 可以打印所有的System Properties信息。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sysprop</span><br></pre></td></tr></table></figure>\n\n<p>也可以指定单个key： <code>sysprop java.version</code></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sysprop java.version</span><br></pre></td></tr></table></figure>\n\n<p>也可以通过<code>grep</code>来过滤： <code>sysprop | grep user</code></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sysprop | grep user</span><br></pre></td></tr></table></figure>\n\n<p>可以设置新的value： <code>sysprop testKey testValue</code></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sysprop testKey testValue</span><br></pre></td></tr></table></figure>\n\n<h4><span id=\"sysenv\">sysenv</span></h4><p><code>sysenv</code> 命令可以获取到环境变量。和<code>sysprop</code>命令类似。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sysenv</span><br></pre></td></tr></table></figure>\n\n<h4><span id=\"jvm\">jvm</span></h4><p><code>jvm</code> 命令会打印出<code>JVM</code>的各种详细信息。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">jvm</span><br></pre></td></tr></table></figure>\n\n<h4><span id=\"dashboard\">dashboard</span></h4><p><code>dashboard</code> 命令可以查看当前系统的实时数据面板。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">dashboard</span><br></pre></td></tr></table></figure>\n\n<p>输入 <code>q</code> 或者 <code>Ctrl+C</code> 可以退出dashboard命令。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">q</span><br></pre></td></tr></table></figure>\n\n<h2><span id=\"tips\">Tips</span></h2><p>为了更好使用Arthas，下面先介绍Arthas里的一些使用技巧。</p>\n<h4><span id=\"help\">help</span></h4><p>Arthas里每一个命令都有详细的帮助信息。可以用<code>-h</code>来查看。帮助信息里有<code>EXAMPLES</code>和<code>WIKI</code>链接。</p>\n<p>比如：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sysprop -h</span><br></pre></td></tr></table></figure>\n\n<h4><span id=\"自动补全\">自动补全</span></h4><p>Arthas支持丰富的自动补全功能，在使用有疑惑时，可以输入<code>Tab</code>来获取更多信息。</p>\n<p>比如输入 <code>sysprop java.</code> 之后，再输入<code>Tab</code>，会补全出对应的key：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ sysprop java.</span><br><span class=\"line\">java.runtime.name             java.protocol.handler.pkgs    java.vm.version</span><br><span class=\"line\">java.vm.vendor                java.vendor.url               java.vm.name</span><br><span class=\"line\">...</span><br></pre></td></tr></table></figure>\n\n<h4><span id=\"readline的快捷键支持\">readline的快捷键支持</span></h4><p>Arthas支持常见的命令行快捷键，比如<code>Ctrl + A</code>跳转行首，<code>Ctrl + E</code>跳转行尾。</p>\n<p>更多的快捷键可以用 <code>keymap</code> 命令查看。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">keymap</span><br></pre></td></tr></table></figure>\n\n<h4><span id=\"历史命令的补全\">历史命令的补全</span></h4><p>如果想再执行之前的命令，可以在输入一半时，按<code>Up/↑</code> 或者 <code>Ddown/↓</code>，来匹配到之前的命令。</p>\n<p>比如之前执行过<code>sysprop java.version</code>，那么在输入<code>sysprop ja</code>之后，可以输入<code>Up/↑</code>，就会自动补全为<code>sysprop java.version</code>。</p>\n<p>如果想查看所有的历史命令，也可以通过 <code>history</code> 命令查看到。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">history</span></span><br></pre></td></tr></table></figure>\n\n<h4><span id=\"pipeline\">pipeline</span></h4><p>Arthas支持在pipeline之后，执行一些简单的命令，比如：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sysprop | grep java</span><br><span class=\"line\">sysprop | grep java</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sysprop | wc -l</span><br><span class=\"line\">sysprop | wc -l</span><br></pre></td></tr></table></figure>\n\n<h2><span id=\"scsm-查看已加载的类\">sc/sm 查看已加载的类</span></h2><p>下面介绍Arthas里查找已加载类的命令。</p>\n<h4><span id=\"sc\">sc</span></h4><p><code>sc</code> 命令可以查找到所有JVM已经加载到的类。 如果搜索的是接口，还会搜索所有的实现类。比如查看所有的<code>Filter</code>实现类：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sc javax.servlet.Filter</span><br></pre></td></tr></table></figure>\n\n<p>通过<code>-d</code>参数，可以打印出类加载的具体信息，很方便查找类加载问题。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sc -d javax.servlet.Filter</span><br></pre></td></tr></table></figure>\n\n<p><code>sc</code>支持通配，比如搜索所有的<code>StringUtils</code>：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sc *StringUtils</span><br></pre></td></tr></table></figure>\n\n<h4><span id=\"sm\">sm</span></h4><p><code>sm</code>命令则是查找类的具体函数。比如：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sm java.math.RoundingMode</span><br></pre></td></tr></table></figure>\n\n<p>通过<code>-d</code>参数可以打印函数的具体属性：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sm -d java.math.RoundingMode</span><br></pre></td></tr></table></figure>\n\n<p>也可以查找特定的函数，比如查找构造函数：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sm java.math.RoundingMode &lt;init&gt;</span><br></pre></td></tr></table></figure>\n\n<h2><span id=\"jad\">Jad</span></h2><p>可以通过 <code>jad</code> 命令来反编译代码：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">jad com.example.demo.arthas.user.UserController</span><br></pre></td></tr></table></figure>\n\n<p>通过<code>--source-only</code>参数可以只打印出在反编译的源代码：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">jad --source-only com.example.demo.arthas.user.UserController</span><br></pre></td></tr></table></figure>\n\n<h2><span id=\"ognl\">Ognl</span></h2><p>在Arthas里，有一个单独的<code>ognl</code>命令，可以动态执行代码。</p>\n<h4><span id=\"调用static函数\">调用static函数</span></h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ognl <span class=\"string\">&#x27;@java.lang.System@out.println(&quot;hello ognl&quot;)&#x27;</span></span><br></pre></td></tr></table></figure>\n\n<p>可以检查<code>Terminal 1</code>里的进程输出，可以发现打印出了<code>hello ognl</code>。</p>\n<h4><span id=\"查找usercontroller的classloader\">查找UserController的ClassLoader</span></h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sc -d com.example.demo.arthas.user.UserController | grep classLoaderHash</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight console\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> sc -d com.example.demo.arthas.user.UserController | grep classLoaderHash</span></span><br><span class=\"line\"> classLoaderHash   1be6f5c3</span><br></pre></td></tr></table></figure>\n\n<p>注意hashcode是变化的，需要先查看当前的ClassLoader信息，提取对应ClassLoader的hashcode。</p>\n<p>如果你使用<code>-c</code>，你需要手动输入hashcode：<code>-c &lt;hashcode&gt;</code></p>\n<figure class=\"highlight console\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> ognl -c 1be6f5c3 @com.example.demo.arthas.user.UserController@logger</span></span><br></pre></td></tr></table></figure>\n\n<p>对于只有唯一实例的ClassLoader可以通过<code>--classLoaderClass</code>指定class name，使用起来更加方便：</p>\n<figure class=\"highlight console\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> ognl --classLoaderClass org.springframework.boot.loader.LaunchedURLClassLoader  @org.springframework.boot.SpringApplication@logger</span></span><br><span class=\"line\">@Slf4jLocationAwareLog[</span><br><span class=\"line\">    FQCN=@String[org.apache.commons.logging.LogAdapter$Slf4jLocationAwareLog],</span><br><span class=\"line\">    name=@String[org.springframework.boot.SpringApplication],</span><br><span class=\"line\">    logger=@Logger[Logger[org.springframework.boot.SpringApplication]],</span><br><span class=\"line\">]</span><br></pre></td></tr></table></figure>\n\n<p><code>--classLoaderClass</code> 的值是ClassLoader的类名，只有匹配到唯一的ClassLoader实例时才能工作，目的是方便输入通用命令，而<code>-c &lt;hashcode&gt;</code>是动态变化的。</p>\n<h4><span id=\"获取静态类的静态字段\">获取静态类的静态字段</span></h4><p>获取<code>UserController</code>类里的<code>logger</code>字段：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ognl --classLoaderClass org.springframework.boot.loader.LaunchedURLClassLoader @com.example.demo.arthas.user.UserController@logger</span><br></pre></td></tr></table></figure>\n\n<p>还可以通过<code>-x</code>参数控制返回值的展开层数。比如：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ognl --classLoaderClass org.springframework.boot.loader.LaunchedURLClassLoader -x 2 @com.example.demo.arthas.user.UserController@logger</span><br></pre></td></tr></table></figure>\n\n<h4><span id=\"执行多行表达式赋值给临时变量返回一个list\">执行多行表达式，赋值给临时变量，返回一个List</span></h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ognl <span class=\"string\">&#x27;#value1=@System@getProperty(&quot;java.home&quot;), #value2=@System@getProperty(&quot;java.runtime.name&quot;), &#123;#value1, #value2&#125;&#x27;</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight console\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> ognl <span class=\"string\">&#x27;#value1=@System@getProperty(&quot;java.home&quot;), #value2=@System@getProperty(&quot;java.runtime.name&quot;), &#123;#value1, #value2&#125;&#x27;</span></span></span><br><span class=\"line\">@ArrayList[</span><br><span class=\"line\">    @String[/Library/Java/JavaVirtualMachines/jdk1.8.0_162.jdk/Contents/Home/jre],</span><br><span class=\"line\">    @String[Java(TM) SE Runtime Environment],</span><br><span class=\"line\">]</span><br></pre></td></tr></table></figure>\n\n<h4><span id=\"更多\">更多</span></h4><p>在Arthas里<code>ognl</code>表达式是很重要的功能，在很多命令里都可以使用<code>ognl</code>表达式。</p>\n<p>一些更复杂的用法，可以参考：</p>\n<ul>\n<li>OGNL特殊用法请参考：<a href=\"https://github.com/alibaba/arthas/issues/71\">https://github.com/alibaba/arthas/issues/71</a></li>\n<li>OGNL表达式官方指南：<a href=\"https://commons.apache.org/proper/commons-ognl/language-guide.html\">https://commons.apache.org/proper/commons-ognl/language-guide.html</a></li>\n</ul>\n<h2><span id=\"案例-排查函数调用异常\">案例: 排查函数调用异常</span></h2><h4><span id=\"现象\">现象</span></h4><p>目前，访问 <a href=\"http://localhost:61000/user/0\">http://localhost:61000/user/0</a> ，会返回500异常：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">curl http://localhost:61000/user/0</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight console\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;&quot;timestamp&quot;:1550223186170,&quot;status&quot;:500,&quot;error&quot;:&quot;Internal Server Error&quot;,&quot;exception&quot;:&quot;java.lang.IllegalArgumentException&quot;,&quot;message&quot;:&quot;id &lt; 1&quot;,&quot;path&quot;:&quot;/user/0&quot;&#125;</span><br></pre></td></tr></table></figure>\n\n<p>但请求的具体参数，异常栈是什么呢？</p>\n<h4><span id=\"查看usercontroller的-参数异常\">查看UserController的 参数/异常</span></h4><p>在Arthas里执行：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">watch com.example.demo.arthas.user.UserController * <span class=\"string\">&#x27;&#123;params, throwExp&#125;&#x27;</span></span><br></pre></td></tr></table></figure>\n\n<ol>\n<li>第一个参数是类名，支持通配</li>\n<li>第二个参数是函数名，支持通配 访问 <code>curl http://localhost:61000/user/0</code> ,<code>watch</code>命令会打印调用的参数和异常</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">curl http://localhost:61000/user/0</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight console\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> watch com.example.demo.arthas.user.UserController * <span class=\"string\">&#x27;&#123;params, throwExp&#125;&#x27;</span></span></span><br><span class=\"line\">Press Q or Ctrl+C to abort.</span><br><span class=\"line\">Affect(class-cnt:1 , method-cnt:2) cost in 53 ms.</span><br><span class=\"line\">ts=2019-02-15 01:35:25; [cost=0.996655ms] result=@ArrayList[</span><br><span class=\"line\">    @Object[][isEmpty=false;size=1],</span><br><span class=\"line\">    @IllegalArgumentException[java.lang.IllegalArgumentException: id &lt; 1],</span><br><span class=\"line\">]</span><br></pre></td></tr></table></figure>\n\n<p>可以看到实际抛出的异常是<code>IllegalArgumentException</code>。</p>\n<p>可以输入 <code>q</code> 或者 <code>Ctrl+C</code> 退出watch命令。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">q</span><br></pre></td></tr></table></figure>\n\n<p>如果想把获取到的结果展开，可以用<code>-x</code>参数：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">watch com.example.demo.arthas.user.UserController * <span class=\"string\">&#x27;&#123;params, throwExp&#125;&#x27;</span> -x 2</span><br></pre></td></tr></table></figure>\n\n<h4><span id=\"返回值表达式\">返回值表达式</span></h4><p>在上面的例子里，第三个参数是<code>返回值表达式</code>，它实际上是一个<code>ognl</code>表达式，它支持一些内置对象：</p>\n<ul>\n<li>loader</li>\n<li>clazz</li>\n<li>method</li>\n<li>target</li>\n<li>params</li>\n<li>returnObj</li>\n<li>throwExp</li>\n<li>isBefore</li>\n<li>isThrow</li>\n<li>isReturn</li>\n</ul>\n<p>你可以利用这些内置对象来组成不同的表达式。比如返回一个数组：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">watch com.example.demo.arthas.user.UserController * <span class=\"string\">&#x27;&#123;params[0], target, returnObj&#125;&#x27;</span></span><br></pre></td></tr></table></figure>\n\n<p>更多参考： <a href=\"https://arthas.aliyun.com/doc/advice-class.html\">https://arthas.aliyun.com/doc/advice-class.html</a></p>\n<h4><span id=\"条件表达式\">条件表达式</span></h4><p><code>watch</code>命令支持在第4个参数里写条件表达式，比如：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">watch com.example.demo.arthas.user.UserController * returnObj <span class=\"string\">&#x27;params[0] &gt; 100&#x27;</span></span><br></pre></td></tr></table></figure>\n\n<p>当访问 user/1 时，<code>watch</code>命令没有输出</p>\n<p>当访问 user/101 时，<code>watch</code>会打印出结果。</p>\n<figure class=\"highlight console\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> watch com.example.demo.arthas.user.UserController * returnObj <span class=\"string\">&#x27;params[0] &gt; 100&#x27;</span></span></span><br><span class=\"line\">Press Q or Ctrl+C to abort.</span><br><span class=\"line\">Affect(class-cnt:1 , method-cnt:2) cost in 47 ms.</span><br><span class=\"line\">ts=2019-02-13 19:42:12; [cost=0.821443ms] result=@User[</span><br><span class=\"line\">    id=@Integer[101],</span><br><span class=\"line\">    name=@String[name101],</span><br><span class=\"line\">]</span><br></pre></td></tr></table></figure>\n\n<h4><span id=\"当异常时捕获\">当异常时捕获</span></h4><p><code>watch</code>命令支持<code>-e</code>选项，表示只捕获抛出异常时的请求：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">watch com.example.demo.arthas.user.UserController * <span class=\"string\">&quot;&#123;params[0],throwExp&#125;&quot;</span> -e</span><br></pre></td></tr></table></figure>\n\n<h4><span id=\"按照耗时进行过滤\">按照耗时进行过滤</span></h4><p>watch命令支持按请求耗时进行过滤，比如：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">watch com.example.demo.arthas.user.UserController * <span class=\"string\">&#x27;&#123;params, returnObj&#125;&#x27;</span> <span class=\"string\">&#x27;#cost&gt;200&#x27;</span></span><br></pre></td></tr></table></figure>\n\n<h2><span id=\"案例-热更新代码\">案例: 热更新代码</span></h2><p>下面介绍通过<code>jad</code>/<code>mc</code>/<code>redefine</code> 命令实现动态更新代码的功能。</p>\n<p>目前，访问 <a href=\"http://localhost:61000/user/0\">http://localhost:61000/user/0</a> ，会返回500异常：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">curl http://localhost:61000/user/0</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;&quot;timestamp&quot;:1550223186170,&quot;status&quot;:500,&quot;error&quot;:&quot;Internal Server Error&quot;,&quot;exception&quot;:&quot;java.lang.IllegalArgumentException&quot;,&quot;message&quot;:&quot;id &lt; 1&quot;,&quot;path&quot;:&quot;/user/0&quot;&#125;</span><br></pre></td></tr></table></figure>\n\n<p>下面通过热更新代码，修改这个逻辑。</p>\n<h4><span id=\"jad反编译usercontroller\">jad反编译UserController</span></h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">jad --source-only com.example.demo.arthas.user.UserController &gt; /tmp/UserController.java</span><br></pre></td></tr></table></figure>\n\n<p>jad反编译的结果保存在 <code>/tmp/UserController.java</code>文件里了。</p>\n<p>再打开一个<code>Terminal 3</code>，然后用vim来编辑<code>/tmp/UserController.java</code>：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vim /tmp/UserController.java</span><br></pre></td></tr></table></figure>\n\n<p>比如当 user id 小于1时，也正常返回，不抛出异常：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@GetMapping(value=&#123;&quot;/user/&#123;id&#125;&quot;&#125;)</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> User <span class=\"title\">findUserById</span><span class=\"params\">(<span class=\"meta\">@PathVariable</span> Integer id)</span> </span>&#123;</span><br><span class=\"line\">    logger.info(<span class=\"string\">&quot;id: &#123;&#125;&quot;</span>, (Object)id);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (id != <span class=\"keyword\">null</span> &amp;&amp; id &lt; <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> User(id, <span class=\"string\">&quot;name&quot;</span> + id);</span><br><span class=\"line\">        <span class=\"comment\">// throw new IllegalArgumentException(&quot;id &lt; 1&quot;);</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> User(id.intValue(), <span class=\"string\">&quot;name&quot;</span> + id);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4><span id=\"sc查找加载usercontroller的classloader\">sc查找加载UserController的ClassLoader</span></h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sc -d *UserController | grep classLoaderHash</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight console\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> sc -d *UserController | grep classLoaderHash</span></span><br><span class=\"line\"> classLoaderHash   1be6f5c3</span><br></pre></td></tr></table></figure>\n\n<p>可以发现是 spring boot <code>LaunchedURLClassLoader@1be6f5c3</code> 加载的。</p>\n<p>请记下你的classLoaderHash，后面需要使用它。在这里，它是 <code>1be6f5c3</code>。</p>\n<h4><span id=\"mc\">mc</span></h4><p>保存好<code>/tmp/UserController.java</code>之后，使用<code>mc</code>(Memory Compiler)命令来编译，并且通过<code>-c</code>或者<code>--classLoaderClass</code>参数指定ClassLoader：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mc --classLoaderClass org.springframework.boot.loader.LaunchedURLClassLoader /tmp/UserController.java -d /tmp</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight console\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> mc --classLoaderClass org.springframework.boot.loader.LaunchedURLClassLoader /tmp/UserController.java -d /tmp</span></span><br><span class=\"line\">Memory compiler output:</span><br><span class=\"line\">/tmp/com/example/demo/arthas/user/UserController.class</span><br><span class=\"line\">Affect(row-cnt:1) cost in 346 ms</span><br></pre></td></tr></table></figure>\n\n<p>也可以通过<code>mc -c &lt;classLoaderHash&gt; /tmp/UserController.java -d /tmp</code>，使用<code>-c</code>参数指定ClassLoaderHash:</p>\n<figure class=\"highlight console\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> mc -c 1be6f5c3 /tmp/UserController.java -d /tmp</span></span><br></pre></td></tr></table></figure>\n\n<h4><span id=\"redefine\">redefine</span></h4><p>再使用<code>redefine</code>命令重新加载新编译好的<code>UserController.class</code>：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">redefine /tmp/com/example/demo/arthas/user/UserController.class</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ redefine /tmp/com/example/demo/arthas/user/UserController.class</span><br><span class=\"line\">redefine success, size: 1</span><br></pre></td></tr></table></figure>\n\n<h4><span id=\"热修改代码结果\">热修改代码结果</span></h4><p><code>redefine</code>成功之后，再次访问 user/0 ，结果是：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  &quot;id&quot;: 0,</span><br><span class=\"line\">  &quot;name&quot;: &quot;name0&quot;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2><span id=\"案例-动态更新应用logger-level\">案例: 动态更新应用Logger Level</span></h2><p>在这个案例里，动态修改应用的Logger Level。</p>\n<h4><span id=\"查找usercontroller的classloader\">查找UserController的ClassLoader</span></h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sc -d com.example.demo.arthas.user.UserController | grep classLoaderHash</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight console\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> sc -d com.example.demo.arthas.user.UserController | grep classLoaderHash</span></span><br><span class=\"line\"> classLoaderHash   1be6f5c3</span><br></pre></td></tr></table></figure>\n\n<h4><span id=\"用ognl获取logger\">用ognl获取logger</span></h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ognl --classLoaderClass org.springframework.boot.loader.LaunchedURLClassLoader <span class=\"string\">&#x27;@com.example.demo.arthas.user.UserController@logger&#x27;</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight console\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> ognl --classLoaderClass org.springframework.boot.loader.LaunchedURLClassLoader <span class=\"string\">&#x27;@com.example.demo.arthas.user.UserController@logger&#x27;</span></span></span><br><span class=\"line\">@Logger[</span><br><span class=\"line\">    serialVersionUID=@Long[5454405123156820674],</span><br><span class=\"line\">    FQCN=@String[ch.qos.logback.classic.Logger],</span><br><span class=\"line\">    name=@String[com.example.demo.arthas.user.UserController],</span><br><span class=\"line\">    level=null,</span><br><span class=\"line\">    effectiveLevelInt=@Integer[20000],</span><br><span class=\"line\">    parent=@Logger[Logger[com.example.demo.arthas.user]],</span><br><span class=\"line\">    childrenList=null,</span><br><span class=\"line\">    aai=null,</span><br><span class=\"line\">    additive=@Boolean[true],</span><br><span class=\"line\">    loggerContext=@LoggerContext[ch.qos.logback.classic.LoggerContext[default]],</span><br><span class=\"line\">]</span><br></pre></td></tr></table></figure>\n\n<p>可以知道<code>UserController@logger</code>实际使用的是logback。可以看到<code>level=null</code>，则说明实际最终的level是从<code>root</code> logger里来的。</p>\n<h4><span id=\"单独设置usercontroller的logger-level\">单独设置UserController的logger level</span></h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ognl --classLoaderClass org.springframework.boot.loader.LaunchedURLClassLoader <span class=\"string\">&#x27;@com.example.demo.arthas.user.UserController@logger.setLevel(@ch.qos.logback.classic.Level@DEBUG)&#x27;</span></span><br></pre></td></tr></table></figure>\n\n<p>再次获取<code>UserController@logger</code>，可以发现已经是<code>DEBUG</code>了：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ognl --classLoaderClass org.springframework.boot.loader.LaunchedURLClassLoader <span class=\"string\">&#x27;@com.example.demo.arthas.user.UserController@logger&#x27;</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight console\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> ognl --classLoaderClass org.springframework.boot.loader.LaunchedURLClassLoader <span class=\"string\">&#x27;@com.example.demo.arthas.user.UserController@logger&#x27;</span></span></span><br><span class=\"line\">@Logger[</span><br><span class=\"line\">    serialVersionUID=@Long[5454405123156820674],</span><br><span class=\"line\">    FQCN=@String[ch.qos.logback.classic.Logger],</span><br><span class=\"line\">    name=@String[com.example.demo.arthas.user.UserController],</span><br><span class=\"line\">    level=@Level[DEBUG],</span><br><span class=\"line\">    effectiveLevelInt=@Integer[10000],</span><br><span class=\"line\">    parent=@Logger[Logger[com.example.demo.arthas.user]],</span><br><span class=\"line\">    childrenList=null,</span><br><span class=\"line\">    aai=null,</span><br><span class=\"line\">    additive=@Boolean[true],</span><br><span class=\"line\">    loggerContext=@LoggerContext[ch.qos.logback.classic.LoggerContext[default]],</span><br><span class=\"line\">]</span><br></pre></td></tr></table></figure>\n\n<h4><span id=\"修改logback的全局logger-level\">修改logback的全局logger level</span></h4><p>通过获取<code>root</code> logger，可以修改全局的logger level：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ognl --classLoaderClass org.springframework.boot.loader.LaunchedURLClassLoader <span class=\"string\">&#x27;@org.slf4j.LoggerFactory@getLogger(&quot;root&quot;).setLevel(@ch.qos.logback.classic.Level@DEBUG)&#x27;</span></span><br></pre></td></tr></table></figure>\n\n<h2><span id=\"案例-排查logger冲突问题\">案例: 排查logger冲突问题</span></h2><p>在这个案例里，展示排查logger冲突的方法。</p>\n<h4><span id=\"确认应用使用的logger系统\">确认应用使用的logger系统</span></h4><p>以<code>UserController</code>为例，它使用的是slf4j api，但实际使用到的logger系统是logback。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ognl --classLoaderClass org.springframework.boot.loader.LaunchedURLClassLoader <span class=\"string\">&#x27;@com.example.demo.arthas.user.UserController@logger&#x27;</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight console\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> ognl --classLoaderClass org.springframework.boot.loader.LaunchedURLClassLoader <span class=\"string\">&#x27;@com.example.demo.arthas.user.UserController@logger&#x27;</span></span></span><br><span class=\"line\">@Logger[</span><br><span class=\"line\">    serialVersionUID=@Long[5454405123156820674],</span><br><span class=\"line\">    FQCN=@String[ch.qos.logback.classic.Logger],</span><br><span class=\"line\">    name=@String[com.example.demo.arthas.user.UserController],</span><br><span class=\"line\">    level=null,</span><br><span class=\"line\">    effectiveLevelInt=@Integer[20000],</span><br><span class=\"line\">    parent=@Logger[Logger[com.example.demo.arthas.user]],</span><br><span class=\"line\">    childrenList=null,</span><br><span class=\"line\">    aai=null,</span><br><span class=\"line\">    additive=@Boolean[true],</span><br><span class=\"line\">    loggerContext=@LoggerContext[ch.qos.logback.classic.LoggerContext[default]],</span><br><span class=\"line\">]</span><br></pre></td></tr></table></figure>\n\n<h4><span id=\"获取logback实际加载的配置文件\">获取logback实际加载的配置文件</span></h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ognl --classLoaderClass org.springframework.boot.loader.LaunchedURLClassLoader <span class=\"string\">&#x27;#map1=@org.slf4j.LoggerFactory@getLogger(&quot;root&quot;).loggerContext.objectMap, #map1.get(&quot;CONFIGURATION_WATCH_LIST&quot;)&#x27;</span></span><br></pre></td></tr></table></figure>\n\n<h4><span id=\"使用classloader命令查找可能存在的logger配置文件\">使用classloader命令查找可能存在的logger配置文件</span></h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">classloader --classLoaderClass org.springframework.boot.loader.LaunchedURLClassLoader -r logback-spring.xml</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ classloader --classLoaderClass org.springframework.boot.loader.LaunchedURLClassLoader -r logback-spring.xml</span><br><span class=\"line\"> jar:file:/Users/hengyunabc/code/java/spring-boot-inside/demo-arthas-spring-boot/target/demo-arthas-spring-boot-0.0.1-SNAPSHOT.jar!/BOOT-INF/classes!/logback-spring.xml</span><br><span class=\"line\"></span><br><span class=\"line\">Affect(row-cnt:1) cost in 13 ms.</span><br></pre></td></tr></table></figure>\n\n<p>可以知道加载的配置的具体来源。</p>\n<p>可以尝试加载容易冲突的文件：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">classloader --classLoaderClass org.springframework.boot.loader.LaunchedURLClassLoader -r logback.xml</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">classloader --classLoaderClass org.springframework.boot.loader.LaunchedURLClassLoader -r log4j.properties</span><br></pre></td></tr></table></figure>\n\n<h2><span id=\"案例-获取spring-context\">案例: 获取Spring Context</span></h2><p>在这个案例里，展示获取spring context，再获取bean，然后调用函数。</p>\n<h4><span id=\"使用tt命令获取到spring-context\">使用tt命令获取到spring context</span></h4><p><code>tt</code>即 TimeTunnel，它可以记录下指定方法每次调用的入参和返回信息，并能对这些不同的时间下调用进行观测。</p>\n<ul>\n<li><a href=\"https://arthas.aliyun.com/doc/tt.html\">https://arthas.aliyun.com/doc/tt.html</a></li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">tt -t org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter invokeHandlerMethod</span><br></pre></td></tr></table></figure>\n\n<p>访问：user/1</p>\n<p>可以看到<code>tt</code>命令捕获到了一个请求：</p>\n<figure class=\"highlight console\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> tt -t org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdaptePress Q or Ctrl+C to abort.</span></span><br><span class=\"line\">Affect(class-cnt:1 , method-cnt:1) cost in 252 ms.</span><br><span class=\"line\"> INDE  TIMESTAMP    COST(  IS-R  IS-  OBJECT     CLASS               METHOD</span><br><span class=\"line\"> X                  ms)    ET    EXP</span><br><span class=\"line\">-----------------------------------------------------------------------------------------</span><br><span class=\"line\"> 1000  2019-02-15   4.583  true  fal  0xc93cf1a  RequestMappingHand  invokeHandlerMethod</span><br><span class=\"line\">       15:38:32     923          se              lerAdapter</span><br></pre></td></tr></table></figure>\n\n<h4><span id=\"使用tt命令从调用记录里获取到spring-context\">使用tt命令从调用记录里获取到spring context</span></h4><p>输入 <code>q</code> 或者 <code>Ctrl + C</code> 退出上面的 <code>tt -t</code>命令。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">q</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">tt -i 1000 -w <span class=\"string\">&#x27;target.getApplicationContext()&#x27;</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight console\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> tt -i 1000 -w <span class=\"string\">&#x27;target.getApplicationContext()&#x27;</span></span></span><br><span class=\"line\">@AnnotationConfigEmbeddedWebApplicationContext[</span><br><span class=\"line\">    reader=@AnnotatedBeanDefinitionReader[org.springframework.context.annotation.AnnotatedBeanDefinitionReader@2e457641],</span><br><span class=\"line\">    scanner=@ClassPathBeanDefinitionScanner[org.springframework.context.annotation.ClassPathBeanDefinitionScanner@6eb38026],</span><br><span class=\"line\">    annotatedClasses=null,</span><br><span class=\"line\">    basePackages=null,</span><br><span class=\"line\">]</span><br><span class=\"line\">Affect(row-cnt:1) cost in 439 ms.</span><br></pre></td></tr></table></figure>\n\n<h3><span id=\"获取spring-bean并调用函数\">获取spring bean，并调用函数</span></h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">tt -i 1000 -w <span class=\"string\">&#x27;target.getApplicationContext().getBean(&quot;helloWorldService&quot;).getHelloMessage()&#x27;</span></span><br></pre></td></tr></table></figure>\n\n<p>结果是：</p>\n<figure class=\"highlight console\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> tt -i 1000 -w <span class=\"string\">&#x27;target.getApplicationContext().getBean(&quot;helloWorldService&quot;).getHelloMessage()&#x27;</span></span></span><br><span class=\"line\">@String[Hello World]</span><br><span class=\"line\">Affect(row-cnt:1) cost in 52 ms.</span><br></pre></td></tr></table></figure>\n\n<h2><span id=\"案例-排查http请求返回401\">案例: 排查HTTP请求返回401</span></h2><p>在这个案例里，展示排查HTTP 401问题的技巧。</p>\n<p>访问： admin</p>\n<p>结果是：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Something went wrong: 401 Unauthorized</span><br></pre></td></tr></table></figure>\n\n<p>我们知道<code>401</code>通常是被权限管理的<code>Filter</code>拦截了，那么到底是哪个<code>Filter</code>处理了这个请求，返回了401？</p>\n<h4><span id=\"跟踪所有的filter函数\">跟踪所有的Filter函数</span></h4><p>开始trace：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">trace javax.servlet.Filter *</span><br></pre></td></tr></table></figure>\n\n<p>访问： admin</p>\n<p>可以在调用树的最深层，找到<code>AdminFilterConfig$AdminFilter</code>返回了<code>401</code>：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">+---[3.806273ms] javax.servlet.FilterChain:doFilter()</span><br><span class=\"line\">|   `---[3.447472ms] com.example.demo.arthas.AdminFilterConfig$AdminFilter:doFilter()</span><br><span class=\"line\">|       `---[0.17259ms] javax.servlet.http.HttpServletResponse:sendError()</span><br></pre></td></tr></table></figure>\n\n<h4><span id=\"通过stack获取调用栈\">通过stack获取调用栈</span></h4><p>上面是通过<code>trace</code>命令来获取信息，从结果里，我们可以知道通过<code>stack</code>跟踪<code>HttpServletResponse:sendError()</code>，同样可以知道是哪个<code>Filter</code>返回了<code>401</code></p>\n<p>执行：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">stack javax.servlet.http.HttpServletResponse sendError <span class=\"string\">&#x27;params[0]==401&#x27;</span></span><br></pre></td></tr></table></figure>\n\n<p>访问： admin</p>\n<figure class=\"highlight console\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> stack javax.servlet.http.HttpServletResponse sendError <span class=\"string\">&#x27;params[0]==401&#x27;</span></span></span><br><span class=\"line\">Press Q or Ctrl+C to abort.</span><br><span class=\"line\">Affect(class-cnt:2 , method-cnt:4) cost in 87 ms.</span><br><span class=\"line\">ts=2019-02-15 16:44:06;thread_name=http-nio-8080-exec-6;id=16;is_daemon=true;priority=5;TCCL=org.springframework.boot.context.embedded.tomcat.TomcatEmbeddedWebappClassLoader@8546cd5</span><br><span class=\"line\">    @org.apache.catalina.connector.ResponseFacade.sendError()</span><br><span class=\"line\">        at com.example.demo.arthas.AdminFilterConfig$AdminFilter.doFilter(AdminFilterConfig.java:38)</span><br><span class=\"line\">        at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)</span><br><span class=\"line\">        at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)</span><br><span class=\"line\">        at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:99)</span><br><span class=\"line\">        at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)</span><br></pre></td></tr></table></figure>\n\n<h2><span id=\"案例-排查http请求返回404\">案例: 排查HTTP请求返回404</span></h2><p>在这个案例里，展示排查HTTP 404问题的技巧。</p>\n<p>访问： a.txt</p>\n<p>结果是：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Something went wrong: 404 Not Found</span><br></pre></td></tr></table></figure>\n\n<p>那么到底是哪个Servlet处理了这个请求，返回了404？</p>\n<h4><span id=\"跟踪所有的servlet函数\">跟踪所有的Servlet函数</span></h4><p>开始trace：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">trace javax.servlet.Servlet * &gt; /tmp/servlet.txt</span><br></pre></td></tr></table></figure>\n\n<p>访问： a.txt</p>\n<p>在<code>Terminal 3</code>里，查看<code>/tmp/servlet.txt</code>的内容：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">less /tmp/servlet.txt</span><br></pre></td></tr></table></figure>\n\n<p><code>/tmp/servlet.txt</code>里的内容会比较多，需要耐心找到调用树里最长的地方。</p>\n<p>可以发现请求最终是被<code>freemarker</code>处理的：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">`---[13.974188ms] org.springframework.web.servlet.ViewResolver:resolveViewName();    +---[0.045561ms] javax.servlet.GenericServlet:&lt;init&gt;()</span><br><span class=\"line\">    +---[min=0.045545ms,max=0.074342ms,total=0.119887ms,count=2] org.springframework.web.servlet.view.freemarker.FreeMarkerView$GenericServletAdapter:&lt;init&gt;()</span><br><span class=\"line\">    +---[0.170895ms] javax.servlet.GenericServlet:init()</span><br><span class=\"line\">    |   `---[0.068578ms] javax.servlet.GenericServlet:init()</span><br><span class=\"line\">    |       `---[0.021793ms] javax.servlet.GenericServlet:init()</span><br><span class=\"line\">    `---[0.164035ms] javax.servlet.GenericServlet:getServletContext()</span><br></pre></td></tr></table></figure>\n\n<h2><span id=\"案例-理解spring-boot应用的classloader结构\">案例: 理解Spring Boot应用的ClassLoader结构</span></h2><p>下面介绍<code>classloader</code>命令的功能。</p>\n<p>先访问一个jsp网页，触发jsp的加载： hello</p>\n<h4><span id=\"列出所有classloader\">列出所有ClassLoader</span></h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">classloader -l</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight console\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> classloader -l</span></span><br><span class=\"line\"> name                                                             loadedCount  hash      parent</span><br><span class=\"line\"> BootstrapClassLoader                                             2724         null      null</span><br><span class=\"line\"> com.taobao.arthas.agent.ArthasClassloader@411ce1ab               2009         411ce1ab  sun.misc.Launcher$ExtClassLoader@7494e528</span><br><span class=\"line\"> com.taobao.arthas.agent.ArthasClassloader@22ae1234               1253         22ae1234  sun.misc.Launcher$ExtClassLoader@7494e528</span><br><span class=\"line\"> org.apache.jasper.servlet.JasperLoader@65361d9a                  1            65361d9a  TomcatEmbeddedWebappClassLoader</span><br><span class=\"line\">                                                                                           context: ROOT</span><br><span class=\"line\">                                                                                           delegate: true</span><br><span class=\"line\">                                                                                         ----------&gt; Parent Classloader:</span><br><span class=\"line\">                                                                                         org.springframework.boot.loader.LaunchedURLClassLoader@1be6f5c3</span><br><span class=\"line\"></span><br><span class=\"line\"> TomcatEmbeddedWebappClassLoader                                  0            8546cd5   org.springframework.boot.loader.LaunchedURLClassLoader@1be6f5c3</span><br><span class=\"line\">   context: ROOT</span><br><span class=\"line\">   delegate: true</span><br><span class=\"line\"><span class=\"meta\"> ----------&gt;</span><span class=\"bash\"> Parent Classloader:</span></span><br><span class=\"line\"> org.springframework.boot.loader.LaunchedURLClassLoader@1be6f5c3</span><br><span class=\"line\"></span><br><span class=\"line\"> org.springframework.boot.loader.LaunchedURLClassLoader@1be6f5c3  5416         1be6f5c3  sun.misc.Launcher$AppClassLoader@3d4eac69</span><br><span class=\"line\"> sun.misc.Launcher$AppClassLoader@3d4eac69                        45           3d4eac69  sun.misc.Launcher$ExtClassLoader@7494e528</span><br><span class=\"line\"> sun.misc.Launcher$ExtClassLoader@7494e528                        4            7494e528  null</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>TomcatEmbeddedWebappClassLoader 加载的class数量是0，所以在spring boot embedded tomcat里，它只是一个空壳，所有的类加载都是<code>LaunchedURLClassLoader</code>完成的</li>\n</ul>\n<h4><span id=\"列出classloader里加载的所有类\">列出ClassLoader里加载的所有类</span></h4><p>列出上面的<code>org.apache.jasper.servlet.JasperLoader</code>加载的类：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">classloader -a --classLoaderClass apache.jasper.servlet.JasperLoader</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight console\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> classloader -a --classLoaderClass apache.jasper.servlet.JasperLoader</span></span><br><span class=\"line\"> hash:1698045338, org.apache.jasper.servlet.JasperLoader@65361d9a</span><br><span class=\"line\"> org.apache.jsp.jsp.hello_jsp</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>注：同ognl, 也可用<code>-c &lt;hashcode&gt;</code>而不用<code>--classLoaderClass</code>指定</li>\n</ul>\n<h4><span id=\"反编译jsp的代码\">反编译jsp的代码</span></h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">jad org.apache.jsp.jsp.hello_jsp</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight console\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> jad org.apache.jsp.jsp.hello_jsp</span></span><br><span class=\"line\"></span><br><span class=\"line\">ClassLoader:</span><br><span class=\"line\">+-org.apache.jasper.servlet.JasperLoader@65361d9a</span><br><span class=\"line\">  +-TomcatEmbeddedWebappClassLoader</span><br><span class=\"line\">      context: ROOT</span><br><span class=\"line\">...</span><br></pre></td></tr></table></figure>\n\n<h4><span id=\"查看classloader树\">查看ClassLoader树</span></h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">classloader -t</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ classloader -t</span><br><span class=\"line\">+-BootstrapClassLoader</span><br><span class=\"line\">+-sun.misc.Launcher$ExtClassLoader@28cbbddd</span><br><span class=\"line\">  +-com.taobao.arthas.agent.ArthasClassloader@8c25e55</span><br><span class=\"line\">  +-sun.misc.Launcher$AppClassLoader@55f96302</span><br><span class=\"line\">    +-org.springframework.boot.loader.LaunchedURLClassLoader@1be6f5c3</span><br><span class=\"line\">      +-TomcatEmbeddedWebappClassLoader</span><br><span class=\"line\">          context: ROOT</span><br><span class=\"line\">          delegate: true</span><br><span class=\"line\">        ----------&gt; Parent Classloader:</span><br><span class=\"line\">        org.springframework.boot.loader.LaunchedURLClassLoader@1be6f5c3</span><br><span class=\"line\"></span><br><span class=\"line\">        +-org.apache.jasper.servlet.JasperLoader@21ae0fe2</span><br></pre></td></tr></table></figure>\n\n<p>注意：请使用你的classLoaderHash值覆盖 <code>&lt;classLoaderHash&gt;</code> ，然后手动执行下面相关命令：</p>\n<h4><span id=\"列出classloader的urls\">列出ClassLoader的urls</span></h4><p>比如上面查看到的spring LaunchedURLClassLoader的 hashcode是<code>1be6f5c3</code>，可以通过<code>-c</code>或者<code>--classLoaderClass</code>参数来列出它的所有urls：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">classloader --classLoaderClass org.springframework.boot.loader.LaunchedURLClassLoader</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ classloader --classLoaderClass org.springframework.boot.loader.LaunchedURLClassLoader</span><br><span class=\"line\">jar:file:/home/scrapbook/tutorial/demo-arthas-spring-boot.jar!/BOOT-INF/classes!/</span><br><span class=\"line\">jar:file:/home/scrapbook/tutorial/demo-arthas-spring-boot.jar!/BOOT-INF/lib/spring-boot-starter-aop-1.5</span><br><span class=\"line\">.13.RELEASE.jar!/</span><br><span class=\"line\">...</span><br></pre></td></tr></table></figure>\n\n<h4><span id=\"加载指定classloader里的资源文件\">加载指定ClassLoader里的资源文件</span></h4><p>查找指定的资源文件： <code>classloader --classLoaderClass org.springframework.boot.loader.LaunchedURLClassLoader -r logback-spring.xml</code></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">classloader --classLoaderClass org.springframework.boot.loader.LaunchedURLClassLoader -r logback-spring.xml</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ classloader --classLoaderClass org.springframework.boot.loader.LaunchedURLClassLoader -r logback-spring.xml</span><br><span class=\"line\"> jar:file:/home/scrapbook/tutorial/demo-arthas-spring-boot.jar!/BOOT-INF/classes!/logback-spring.xml</span><br></pre></td></tr></table></figure>\n\n<h4><span id=\"尝试加载指定的类\">尝试加载指定的类</span></h4><p>比如用上面的spring LaunchedURLClassLoader 尝试加载 <code>java.lang.String</code> ：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">classloader --classLoaderClass org.springframework.boot.loader.LaunchedURLClassLoader --load java.lang.String</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ classloader --classLoaderClass org.springframework.boot.loader.LaunchedURLClassLoader --load java.lang.String</span><br><span class=\"line\">load class success.</span><br><span class=\"line\"> class-info        java.lang.String</span><br><span class=\"line\"> code-source</span><br><span class=\"line\"> name              java.lang.String</span><br><span class=\"line\"> isInterface       false</span><br><span class=\"line\"> isAnnotation      false</span><br><span class=\"line\"> isEnum            false</span><br><span class=\"line\"> isAnonymousClass  false</span><br><span class=\"line\"> isArray           false</span><br><span class=\"line\"> isLocalClass      false</span><br><span class=\"line\"> isMemberClass     false</span><br><span class=\"line\"> isPrimitive       false</span><br><span class=\"line\"> isSynthetic       false</span><br><span class=\"line\"> simple-name       String</span><br><span class=\"line\"> modifier          final,public</span><br><span class=\"line\"> annotation</span><br><span class=\"line\"> interfaces        java.io.Serializable,java.lang.Comparable,java.lang.CharSequence</span><br><span class=\"line\"> super-class       +-java.lang.Object</span><br><span class=\"line\"> class-loader</span><br><span class=\"line\"> classLoaderHash   null</span><br></pre></td></tr></table></figure>\n\n<h2><span id=\"案例查找top-n线程\">案例：查找Top N线程</span></h2><h4><span id=\"查看所有线程信息\">查看所有线程信息</span></h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">thread</span><br></pre></td></tr></table></figure>\n\n<h4><span id=\"查看具体线程的栈\">查看具体线程的栈</span></h4><p>查看线程ID 16的栈：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">thread 16</span><br></pre></td></tr></table></figure>\n\n<h4><span id=\"查看cpu使用率top-n线程的栈\">查看CPU使用率top n线程的栈</span></h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">thread -n 3</span><br></pre></td></tr></table></figure>\n\n<p>查看5秒内的CPU使用率top n线程栈</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">thread -n 3 -i 5000</span><br></pre></td></tr></table></figure>\n\n<h4><span id=\"查找线程是否有阻塞\">查找线程是否有阻塞</span></h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">thread -b</span><br></pre></td></tr></table></figure>\n\n<h2><span id=\"web-console\">Web Console</span></h2><p>Arthas支持通过Web Socket来连接。</p>\n<h3><span id=\"本地体验\">本地体验</span></h3><p>当在本地启动时，可以访问 <a href=\"http://127.0.0.1:8563/\">http://127.0.0.1:8563/</a> ，通过浏览器来使用Arthas。</p>\n<p><img src=\"/jlynet.github.io/2021/08/07/Java%E8%AF%8A%E6%96%AD%E5%B7%A5%E5%85%B7Arthas%E5%85%A5%E9%97%A8%E6%95%99%E7%A8%8B/Arthas-%E8%BF%9B%E9%98%B6/O1CN01i041kW1lw0FCaSKNn_!!6000000004882-2-tps-1231-284.png\" alt=\"Arthas WebConsole\"></p>\n<p>推荐通过“快速入门”来体验： <a href=\"https://arthas.aliyun.com/doc/quick-start.html\">https://arthas.aliyun.com/doc/quick-start.html</a></p>\n<h2><span id=\"exitstop\">Exit/Stop</span></h2><h3><span id=\"reset\">reset</span></h3><p>Arthas在 watch/trace 等命令时，实际上是修改了应用的字节码，插入增强的代码。显式执行 <code>reset</code> 命令，可以清除掉这些增强代码。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">reset</span><br></pre></td></tr></table></figure>\n\n<h3><span id=\"退出arthas\">退出Arthas</span></h3><p>用 <code>exit</code> 或者 <code>quit</code> 命令可以退出Arthas。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">exit</span></span><br></pre></td></tr></table></figure>\n\n<p>Ctrl+C</p>\n<p>退出Arthas之后，还可以再次用 <code>java -jar arthas-boot.jar</code> 来连接。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">java -jar arthas-boot.jar</span><br></pre></td></tr></table></figure>\n\n<p>Ctrl+C</p>\n<h3><span id=\"彻底退出arthas\">彻底退出Arthas</span></h3><p><code>exit/quit</code>命令只是退出当前session，arthas server还在目标进程中运行。</p>\n<p>想完全退出Arthas，可以执行 <code>stop</code> 命令。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">stop</span><br></pre></td></tr></table></figure>\n\n<p>Ctrl+C</p>\n<h2><span id=\"arthas-boot支持的参数\">arthas-boot支持的参数</span></h2><p><code>arthas-boot.jar</code> 支持很多参数，可以执行 <code>java -jar arthas-boot.jar -h</code> 来查看。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">java -jar arthas-boot.jar -h</span><br></pre></td></tr></table></figure>\n\n<h3><span id=\"允许外部访问\">允许外部访问</span></h3><p>默认情况下， arthas server侦听的是 <code>127.0.0.1</code> 这个IP，如果希望远程可以访问，可以使用<code>--target-ip</code>的参数。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">java -jar arthas-boot.jar --target-ip</span><br></pre></td></tr></table></figure>\n\n<h3><span id=\"列出所有的版本\">列出所有的版本</span></h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">java -jar arthas-boot.jar --versions</span><br></pre></td></tr></table></figure>\n\n<p>使用指定版本：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">java -jar arthas-boot.jar --use-version 3.1.0</span><br></pre></td></tr></table></figure>\n\n<h3><span id=\"只侦听telnet端口不侦听http端口\">只侦听Telnet端口，不侦听HTTP端口</span></h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">java -jar arthas-boot.jar --telnet-port 9999 --http-port -1</span><br></pre></td></tr></table></figure>\n\n<h3><span id=\"打印运行的详情\">打印运行的详情</span></h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">java -jar arthas-boot.jar -v</span><br></pre></td></tr></table></figure>\n\n<h2><span id=\"更多信息\">更多信息</span></h2><p>在“进阶教程”，演示了Arthas的大部分高级用法，希望对大家排查问题有帮助。如果有更多的技巧或者使用疑问，欢迎在Issue里提出。</p>\n<ul>\n<li>Issues: <a href=\"https://github.com/alibaba/arthas/issues\">https://github.com/alibaba/arthas/issues</a></li>\n<li>文档： <a href=\"https://arthas.aliyun.com/doc\">https://arthas.aliyun.com/doc</a></li>\n</ul>\n<p>如果您在使用Arthas，请让我们知道。您的使用对我们非常重要：<a href=\"https://github.com/alibaba/arthas/issues/111\">查看</a></p>\n<p>文章拷贝来源：<a href=\"https://start.aliyun.com/course?spm=a2ck6.17690074.0.0.28bc2e7dHTphXs&amp;id=qDlgqpBT\">https://start.aliyun.com/course?spm=a2ck6.17690074.0.0.28bc2e7dHTphXs&amp;id=qDlgqpBT</a></p>\n","site":{"data":{}},"excerpt":"","more":"<!-- toc -->\n\n<ul>\n<li><a href=\"#%E5%90%AF%E5%8A%A8demo\">启动demo</a></li>\n<li><a href=\"#%E5%90%AF%E5%8A%A8arthas-boot\">启动arthas-boot</a></li>\n<li><a href=\"#%E6%9F%A5%E7%9C%8Bjvm%E4%BF%A1%E6%81%AF\">查看JVM信息</a><ul>\n<li><a href=\"#sysprop\">sysprop</a></li>\n<li><a href=\"#sysenv\">sysenv</a></li>\n<li><a href=\"#jvm\">jvm</a></li>\n<li><a href=\"#dashboard\">dashboard</a></li>\n</ul>\n</li>\n<li><a href=\"#tips\">Tips</a><ul>\n<li><a href=\"#help\">help</a></li>\n<li><a href=\"#%E8%87%AA%E5%8A%A8%E8%A1%A5%E5%85%A8\">自动补全</a></li>\n<li><a href=\"#readline%E7%9A%84%E5%BF%AB%E6%8D%B7%E9%94%AE%E6%94%AF%E6%8C%81\">readline的快捷键支持</a></li>\n<li><a href=\"#%E5%8E%86%E5%8F%B2%E5%91%BD%E4%BB%A4%E7%9A%84%E8%A1%A5%E5%85%A8\">历史命令的补全</a></li>\n<li><a href=\"#pipeline\">pipeline</a></li>\n</ul>\n</li>\n<li><a href=\"#scsm-%E6%9F%A5%E7%9C%8B%E5%B7%B2%E5%8A%A0%E8%BD%BD%E7%9A%84%E7%B1%BB\">sc/sm 查看已加载的类</a><ul>\n<li><a href=\"#sc\">sc</a></li>\n<li><a href=\"#sm\">sm</a></li>\n</ul>\n</li>\n<li><a href=\"#jad\">Jad</a></li>\n<li><a href=\"#ognl\">Ognl</a><ul>\n<li><a href=\"#%E8%B0%83%E7%94%A8static%E5%87%BD%E6%95%B0\">调用static函数</a></li>\n<li><a href=\"#%E6%9F%A5%E6%89%BEusercontroller%E7%9A%84classloader\">查找UserController的ClassLoader</a></li>\n<li><a href=\"#%E8%8E%B7%E5%8F%96%E9%9D%99%E6%80%81%E7%B1%BB%E7%9A%84%E9%9D%99%E6%80%81%E5%AD%97%E6%AE%B5\">获取静态类的静态字段</a></li>\n<li><a href=\"#%E6%89%A7%E8%A1%8C%E5%A4%9A%E8%A1%8C%E8%A1%A8%E8%BE%BE%E5%BC%8F%E8%B5%8B%E5%80%BC%E7%BB%99%E4%B8%B4%E6%97%B6%E5%8F%98%E9%87%8F%E8%BF%94%E5%9B%9E%E4%B8%80%E4%B8%AAlist\">执行多行表达式，赋值给临时变量，返回一个List</a></li>\n<li><a href=\"#%E6%9B%B4%E5%A4%9A\">更多</a></li>\n</ul>\n</li>\n<li><a href=\"#%E6%A1%88%E4%BE%8B-%E6%8E%92%E6%9F%A5%E5%87%BD%E6%95%B0%E8%B0%83%E7%94%A8%E5%BC%82%E5%B8%B8\">案例: 排查函数调用异常</a><ul>\n<li><a href=\"#%E7%8E%B0%E8%B1%A1\">现象</a></li>\n<li><a href=\"#%E6%9F%A5%E7%9C%8Busercontroller%E7%9A%84-%E5%8F%82%E6%95%B0%E5%BC%82%E5%B8%B8\">查看UserController的 参数/异常</a></li>\n<li><a href=\"#%E8%BF%94%E5%9B%9E%E5%80%BC%E8%A1%A8%E8%BE%BE%E5%BC%8F\">返回值表达式</a></li>\n<li><a href=\"#%E6%9D%A1%E4%BB%B6%E8%A1%A8%E8%BE%BE%E5%BC%8F\">条件表达式</a></li>\n<li><a href=\"#%E5%BD%93%E5%BC%82%E5%B8%B8%E6%97%B6%E6%8D%95%E8%8E%B7\">当异常时捕获</a></li>\n<li><a href=\"#%E6%8C%89%E7%85%A7%E8%80%97%E6%97%B6%E8%BF%9B%E8%A1%8C%E8%BF%87%E6%BB%A4\">按照耗时进行过滤</a></li>\n</ul>\n</li>\n<li><a href=\"#%E6%A1%88%E4%BE%8B-%E7%83%AD%E6%9B%B4%E6%96%B0%E4%BB%A3%E7%A0%81\">案例: 热更新代码</a><ul>\n<li><a href=\"#jad%E5%8F%8D%E7%BC%96%E8%AF%91usercontroller\">jad反编译UserController</a></li>\n<li><a href=\"#sc%E6%9F%A5%E6%89%BE%E5%8A%A0%E8%BD%BDusercontroller%E7%9A%84classloader\">sc查找加载UserController的ClassLoader</a></li>\n<li><a href=\"#mc\">mc</a></li>\n<li><a href=\"#redefine\">redefine</a></li>\n<li><a href=\"#%E7%83%AD%E4%BF%AE%E6%94%B9%E4%BB%A3%E7%A0%81%E7%BB%93%E6%9E%9C\">热修改代码结果</a></li>\n</ul>\n</li>\n<li><a href=\"#%E6%A1%88%E4%BE%8B-%E5%8A%A8%E6%80%81%E6%9B%B4%E6%96%B0%E5%BA%94%E7%94%A8logger-level\">案例: 动态更新应用Logger Level</a><ul>\n<li><a href=\"#%E6%9F%A5%E6%89%BEusercontroller%E7%9A%84classloader-1\">查找UserController的ClassLoader</a></li>\n<li><a href=\"#%E7%94%A8ognl%E8%8E%B7%E5%8F%96logger\">用ognl获取logger</a></li>\n<li><a href=\"#%E5%8D%95%E7%8B%AC%E8%AE%BE%E7%BD%AEusercontroller%E7%9A%84logger-level\">单独设置UserController的logger level</a></li>\n<li><a href=\"#%E4%BF%AE%E6%94%B9logback%E7%9A%84%E5%85%A8%E5%B1%80logger-level\">修改logback的全局logger level</a></li>\n</ul>\n</li>\n<li><a href=\"#%E6%A1%88%E4%BE%8B-%E6%8E%92%E6%9F%A5logger%E5%86%B2%E7%AA%81%E9%97%AE%E9%A2%98\">案例: 排查logger冲突问题</a><ul>\n<li><a href=\"#%E7%A1%AE%E8%AE%A4%E5%BA%94%E7%94%A8%E4%BD%BF%E7%94%A8%E7%9A%84logger%E7%B3%BB%E7%BB%9F\">确认应用使用的logger系统</a></li>\n<li><a href=\"#%E8%8E%B7%E5%8F%96logback%E5%AE%9E%E9%99%85%E5%8A%A0%E8%BD%BD%E7%9A%84%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6\">获取logback实际加载的配置文件</a></li>\n<li><a href=\"#%E4%BD%BF%E7%94%A8classloader%E5%91%BD%E4%BB%A4%E6%9F%A5%E6%89%BE%E5%8F%AF%E8%83%BD%E5%AD%98%E5%9C%A8%E7%9A%84logger%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6\">使用classloader命令查找可能存在的logger配置文件</a></li>\n</ul>\n</li>\n<li><a href=\"#%E6%A1%88%E4%BE%8B-%E8%8E%B7%E5%8F%96spring-context\">案例: 获取Spring Context</a><ul>\n<li><a href=\"#%E4%BD%BF%E7%94%A8tt%E5%91%BD%E4%BB%A4%E8%8E%B7%E5%8F%96%E5%88%B0spring-context\">使用tt命令获取到spring context</a></li>\n<li><a href=\"#%E4%BD%BF%E7%94%A8tt%E5%91%BD%E4%BB%A4%E4%BB%8E%E8%B0%83%E7%94%A8%E8%AE%B0%E5%BD%95%E9%87%8C%E8%8E%B7%E5%8F%96%E5%88%B0spring-context\">使用tt命令从调用记录里获取到spring context</a></li>\n</ul>\n<ul>\n<li><a href=\"#%E8%8E%B7%E5%8F%96spring-bean%E5%B9%B6%E8%B0%83%E7%94%A8%E5%87%BD%E6%95%B0\">获取spring bean，并调用函数</a></li>\n</ul>\n</li>\n<li><a href=\"#%E6%A1%88%E4%BE%8B-%E6%8E%92%E6%9F%A5http%E8%AF%B7%E6%B1%82%E8%BF%94%E5%9B%9E401\">案例: 排查HTTP请求返回401</a><ul>\n<li><a href=\"#%E8%B7%9F%E8%B8%AA%E6%89%80%E6%9C%89%E7%9A%84filter%E5%87%BD%E6%95%B0\">跟踪所有的Filter函数</a></li>\n<li><a href=\"#%E9%80%9A%E8%BF%87stack%E8%8E%B7%E5%8F%96%E8%B0%83%E7%94%A8%E6%A0%88\">通过stack获取调用栈</a></li>\n</ul>\n</li>\n<li><a href=\"#%E6%A1%88%E4%BE%8B-%E6%8E%92%E6%9F%A5http%E8%AF%B7%E6%B1%82%E8%BF%94%E5%9B%9E404\">案例: 排查HTTP请求返回404</a><ul>\n<li><a href=\"#%E8%B7%9F%E8%B8%AA%E6%89%80%E6%9C%89%E7%9A%84servlet%E5%87%BD%E6%95%B0\">跟踪所有的Servlet函数</a></li>\n</ul>\n</li>\n<li><a href=\"#%E6%A1%88%E4%BE%8B-%E7%90%86%E8%A7%A3spring-boot%E5%BA%94%E7%94%A8%E7%9A%84classloader%E7%BB%93%E6%9E%84\">案例: 理解Spring Boot应用的ClassLoader结构</a><ul>\n<li><a href=\"#%E5%88%97%E5%87%BA%E6%89%80%E6%9C%89classloader\">列出所有ClassLoader</a></li>\n<li><a href=\"#%E5%88%97%E5%87%BAclassloader%E9%87%8C%E5%8A%A0%E8%BD%BD%E7%9A%84%E6%89%80%E6%9C%89%E7%B1%BB\">列出ClassLoader里加载的所有类</a></li>\n<li><a href=\"#%E5%8F%8D%E7%BC%96%E8%AF%91jsp%E7%9A%84%E4%BB%A3%E7%A0%81\">反编译jsp的代码</a></li>\n<li><a href=\"#%E6%9F%A5%E7%9C%8Bclassloader%E6%A0%91\">查看ClassLoader树</a></li>\n<li><a href=\"#%E5%88%97%E5%87%BAclassloader%E7%9A%84urls\">列出ClassLoader的urls</a></li>\n<li><a href=\"#%E5%8A%A0%E8%BD%BD%E6%8C%87%E5%AE%9Aclassloader%E9%87%8C%E7%9A%84%E8%B5%84%E6%BA%90%E6%96%87%E4%BB%B6\">加载指定ClassLoader里的资源文件</a></li>\n<li><a href=\"#%E5%B0%9D%E8%AF%95%E5%8A%A0%E8%BD%BD%E6%8C%87%E5%AE%9A%E7%9A%84%E7%B1%BB\">尝试加载指定的类</a></li>\n</ul>\n</li>\n<li><a href=\"#%E6%A1%88%E4%BE%8B%E6%9F%A5%E6%89%BEtop-n%E7%BA%BF%E7%A8%8B\">案例：查找Top N线程</a><ul>\n<li><a href=\"#%E6%9F%A5%E7%9C%8B%E6%89%80%E6%9C%89%E7%BA%BF%E7%A8%8B%E4%BF%A1%E6%81%AF\">查看所有线程信息</a></li>\n<li><a href=\"#%E6%9F%A5%E7%9C%8B%E5%85%B7%E4%BD%93%E7%BA%BF%E7%A8%8B%E7%9A%84%E6%A0%88\">查看具体线程的栈</a></li>\n<li><a href=\"#%E6%9F%A5%E7%9C%8Bcpu%E4%BD%BF%E7%94%A8%E7%8E%87top-n%E7%BA%BF%E7%A8%8B%E7%9A%84%E6%A0%88\">查看CPU使用率top n线程的栈</a></li>\n<li><a href=\"#%E6%9F%A5%E6%89%BE%E7%BA%BF%E7%A8%8B%E6%98%AF%E5%90%A6%E6%9C%89%E9%98%BB%E5%A1%9E\">查找线程是否有阻塞</a></li>\n</ul>\n</li>\n<li><a href=\"#web-console\">Web Console</a><ul>\n<li><a href=\"#%E6%9C%AC%E5%9C%B0%E4%BD%93%E9%AA%8C\">本地体验</a></li>\n</ul>\n</li>\n<li><a href=\"#exitstop\">Exit/Stop</a><ul>\n<li><a href=\"#reset\">reset</a></li>\n<li><a href=\"#%E9%80%80%E5%87%BAarthas\">退出Arthas</a></li>\n<li><a href=\"#%E5%BD%BB%E5%BA%95%E9%80%80%E5%87%BAarthas\">彻底退出Arthas</a></li>\n</ul>\n</li>\n<li><a href=\"#arthas-boot%E6%94%AF%E6%8C%81%E7%9A%84%E5%8F%82%E6%95%B0\">arthas-boot支持的参数</a><ul>\n<li><a href=\"#%E5%85%81%E8%AE%B8%E5%A4%96%E9%83%A8%E8%AE%BF%E9%97%AE\">允许外部访问</a></li>\n<li><a href=\"#%E5%88%97%E5%87%BA%E6%89%80%E6%9C%89%E7%9A%84%E7%89%88%E6%9C%AC\">列出所有的版本</a></li>\n<li><a href=\"#%E5%8F%AA%E4%BE%A6%E5%90%ACtelnet%E7%AB%AF%E5%8F%A3%E4%B8%8D%E4%BE%A6%E5%90%AChttp%E7%AB%AF%E5%8F%A3\">只侦听Telnet端口，不侦听HTTP端口</a></li>\n<li><a href=\"#%E6%89%93%E5%8D%B0%E8%BF%90%E8%A1%8C%E7%9A%84%E8%AF%A6%E6%83%85\">打印运行的详情</a></li>\n</ul>\n</li>\n<li><a href=\"#%E6%9B%B4%E5%A4%9A%E4%BF%A1%E6%81%AF\">更多信息</a></li>\n</ul>\n<!-- tocstop -->\n\n<p><img src=\"/jlynet.github.io/2021/08/07/Java%E8%AF%8A%E6%96%AD%E5%B7%A5%E5%85%B7Arthas%E5%85%A5%E9%97%A8%E6%95%99%E7%A8%8B/Arthas-%E8%BF%9B%E9%98%B6/arthas.png\" alt=\"Arthas\"></p>\n<p><code>Arthas</code> 是Alibaba开源的Java诊断工具，深受开发者喜爱。</p>\n<p>本教程会以一个普通的Spring Boot应用为例，演示Arthas命令的详细用法。</p>\n<ul>\n<li>Github: <a href=\"https://github.com/alibaba/arthas\">https://github.com/alibaba/arthas</a></li>\n<li>文档: <a href=\"https://arthas.aliyun.com/doc/\">https://arthas.aliyun.com/doc/</a></li>\n</ul>\n<h2 id=\"启动demo\"><a href=\"#启动demo\" class=\"headerlink\" title=\"启动demo\"></a>启动demo</h2><p>下载<code>demo-arthas-spring-boot.jar</code>，再用<code>java -jar</code>命令启动：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wget https://code.aliyun.com/middleware-container/handsonLabExternedFiles/raw/master/demo-arthas-spring-boot.jar;java -jar demo-arthas-spring-boot.jar</span><br></pre></td></tr></table></figure>\n\n<p><code>demo-arthas-spring-boot</code>是一个很简单的spring boot应用，源代码：<a href=\"https://github.com/hengyunabc/spring-boot-inside/tree/master/demo-arthas-spring-boot\">查看</a></p>\n<p>启动之后，可以访问61000端口： 点击查看</p>\n<p><img src=\"https://img.alicdn.com/imgextra/i2/O1CN010Qbzcz1ctPSWSZI6L_!!6000000003658-2-tps-333-182.png\" alt=\"Demo Web\"></p>\n<h2 id=\"启动arthas-boot\"><a href=\"#启动arthas-boot\" class=\"headerlink\" title=\"启动arthas-boot\"></a>启动arthas-boot</h2><p>在新的<code>Terminal 2</code>里，下载<code>arthas-boot.jar</code>，再用<code>java -jar</code>命令启动：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wget https://arthas.aliyun.com/arthas-boot.jar;java -jar arthas-boot.jar --target-ip 0.0.0.0</span><br></pre></td></tr></table></figure>\n\n<p><code>arthas-boot</code>是<code>Arthas</code>的启动程序，它启动后，会列出所有的Java进程，用户可以选择需要诊断的目标进程。</p>\n<p>选择第一个进程，输入 <code>1</code> ，再<code>Enter/回车</code>：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1</span><br></pre></td></tr></table></figure>\n\n<p>Attach成功之后，会打印Arthas LOGO。输入 <code>help</code> 可以获取到更多的帮助信息。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">help</span></span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/jlynet.github.io/2021/08/07/Java%E8%AF%8A%E6%96%AD%E5%B7%A5%E5%85%B7Arthas%E5%85%A5%E9%97%A8%E6%95%99%E7%A8%8B/Arthas-%E8%BF%9B%E9%98%B6/O1CN01HzatXZ1RgccrlT90M_!!6000000002141-2-tps-529-244.png\" alt=\"Arthas Boot\"></p>\n<h2 id=\"查看JVM信息\"><a href=\"#查看JVM信息\" class=\"headerlink\" title=\"查看JVM信息\"></a>查看JVM信息</h2><p>下面介绍Arthas里查看<code>JVM</code>信息的命令。</p>\n<h4 id=\"sysprop\"><a href=\"#sysprop\" class=\"headerlink\" title=\"sysprop\"></a>sysprop</h4><p><code>sysprop</code> 可以打印所有的System Properties信息。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sysprop</span><br></pre></td></tr></table></figure>\n\n<p>也可以指定单个key： <code>sysprop java.version</code></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sysprop java.version</span><br></pre></td></tr></table></figure>\n\n<p>也可以通过<code>grep</code>来过滤： <code>sysprop | grep user</code></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sysprop | grep user</span><br></pre></td></tr></table></figure>\n\n<p>可以设置新的value： <code>sysprop testKey testValue</code></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sysprop testKey testValue</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"sysenv\"><a href=\"#sysenv\" class=\"headerlink\" title=\"sysenv\"></a>sysenv</h4><p><code>sysenv</code> 命令可以获取到环境变量。和<code>sysprop</code>命令类似。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sysenv</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"jvm\"><a href=\"#jvm\" class=\"headerlink\" title=\"jvm\"></a>jvm</h4><p><code>jvm</code> 命令会打印出<code>JVM</code>的各种详细信息。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">jvm</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"dashboard\"><a href=\"#dashboard\" class=\"headerlink\" title=\"dashboard\"></a>dashboard</h4><p><code>dashboard</code> 命令可以查看当前系统的实时数据面板。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">dashboard</span><br></pre></td></tr></table></figure>\n\n<p>输入 <code>q</code> 或者 <code>Ctrl+C</code> 可以退出dashboard命令。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">q</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Tips\"><a href=\"#Tips\" class=\"headerlink\" title=\"Tips\"></a>Tips</h2><p>为了更好使用Arthas，下面先介绍Arthas里的一些使用技巧。</p>\n<h4 id=\"help\"><a href=\"#help\" class=\"headerlink\" title=\"help\"></a>help</h4><p>Arthas里每一个命令都有详细的帮助信息。可以用<code>-h</code>来查看。帮助信息里有<code>EXAMPLES</code>和<code>WIKI</code>链接。</p>\n<p>比如：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sysprop -h</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"自动补全\"><a href=\"#自动补全\" class=\"headerlink\" title=\"自动补全\"></a>自动补全</h4><p>Arthas支持丰富的自动补全功能，在使用有疑惑时，可以输入<code>Tab</code>来获取更多信息。</p>\n<p>比如输入 <code>sysprop java.</code> 之后，再输入<code>Tab</code>，会补全出对应的key：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ sysprop java.</span><br><span class=\"line\">java.runtime.name             java.protocol.handler.pkgs    java.vm.version</span><br><span class=\"line\">java.vm.vendor                java.vendor.url               java.vm.name</span><br><span class=\"line\">...</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"readline的快捷键支持\"><a href=\"#readline的快捷键支持\" class=\"headerlink\" title=\"readline的快捷键支持\"></a>readline的快捷键支持</h4><p>Arthas支持常见的命令行快捷键，比如<code>Ctrl + A</code>跳转行首，<code>Ctrl + E</code>跳转行尾。</p>\n<p>更多的快捷键可以用 <code>keymap</code> 命令查看。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">keymap</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"历史命令的补全\"><a href=\"#历史命令的补全\" class=\"headerlink\" title=\"历史命令的补全\"></a>历史命令的补全</h4><p>如果想再执行之前的命令，可以在输入一半时，按<code>Up/↑</code> 或者 <code>Ddown/↓</code>，来匹配到之前的命令。</p>\n<p>比如之前执行过<code>sysprop java.version</code>，那么在输入<code>sysprop ja</code>之后，可以输入<code>Up/↑</code>，就会自动补全为<code>sysprop java.version</code>。</p>\n<p>如果想查看所有的历史命令，也可以通过 <code>history</code> 命令查看到。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">history</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"pipeline\"><a href=\"#pipeline\" class=\"headerlink\" title=\"pipeline\"></a>pipeline</h4><p>Arthas支持在pipeline之后，执行一些简单的命令，比如：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sysprop | grep java</span><br><span class=\"line\">sysprop | grep java</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sysprop | wc -l</span><br><span class=\"line\">sysprop | wc -l</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"sc-sm-查看已加载的类\"><a href=\"#sc-sm-查看已加载的类\" class=\"headerlink\" title=\"sc/sm 查看已加载的类\"></a>sc/sm 查看已加载的类</h2><p>下面介绍Arthas里查找已加载类的命令。</p>\n<h4 id=\"sc\"><a href=\"#sc\" class=\"headerlink\" title=\"sc\"></a>sc</h4><p><code>sc</code> 命令可以查找到所有JVM已经加载到的类。 如果搜索的是接口，还会搜索所有的实现类。比如查看所有的<code>Filter</code>实现类：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sc javax.servlet.Filter</span><br></pre></td></tr></table></figure>\n\n<p>通过<code>-d</code>参数，可以打印出类加载的具体信息，很方便查找类加载问题。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sc -d javax.servlet.Filter</span><br></pre></td></tr></table></figure>\n\n<p><code>sc</code>支持通配，比如搜索所有的<code>StringUtils</code>：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sc *StringUtils</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"sm\"><a href=\"#sm\" class=\"headerlink\" title=\"sm\"></a>sm</h4><p><code>sm</code>命令则是查找类的具体函数。比如：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sm java.math.RoundingMode</span><br></pre></td></tr></table></figure>\n\n<p>通过<code>-d</code>参数可以打印函数的具体属性：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sm -d java.math.RoundingMode</span><br></pre></td></tr></table></figure>\n\n<p>也可以查找特定的函数，比如查找构造函数：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sm java.math.RoundingMode &lt;init&gt;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Jad\"><a href=\"#Jad\" class=\"headerlink\" title=\"Jad\"></a>Jad</h2><p>可以通过 <code>jad</code> 命令来反编译代码：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">jad com.example.demo.arthas.user.UserController</span><br></pre></td></tr></table></figure>\n\n<p>通过<code>--source-only</code>参数可以只打印出在反编译的源代码：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">jad --source-only com.example.demo.arthas.user.UserController</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Ognl\"><a href=\"#Ognl\" class=\"headerlink\" title=\"Ognl\"></a>Ognl</h2><p>在Arthas里，有一个单独的<code>ognl</code>命令，可以动态执行代码。</p>\n<h4 id=\"调用static函数\"><a href=\"#调用static函数\" class=\"headerlink\" title=\"调用static函数\"></a>调用static函数</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ognl <span class=\"string\">&#x27;@java.lang.System@out.println(&quot;hello ognl&quot;)&#x27;</span></span><br></pre></td></tr></table></figure>\n\n<p>可以检查<code>Terminal 1</code>里的进程输出，可以发现打印出了<code>hello ognl</code>。</p>\n<h4 id=\"查找UserController的ClassLoader\"><a href=\"#查找UserController的ClassLoader\" class=\"headerlink\" title=\"查找UserController的ClassLoader\"></a>查找UserController的ClassLoader</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sc -d com.example.demo.arthas.user.UserController | grep classLoaderHash</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight console\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> sc -d com.example.demo.arthas.user.UserController | grep classLoaderHash</span></span><br><span class=\"line\"> classLoaderHash   1be6f5c3</span><br></pre></td></tr></table></figure>\n\n<p>注意hashcode是变化的，需要先查看当前的ClassLoader信息，提取对应ClassLoader的hashcode。</p>\n<p>如果你使用<code>-c</code>，你需要手动输入hashcode：<code>-c &lt;hashcode&gt;</code></p>\n<figure class=\"highlight console\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> ognl -c 1be6f5c3 @com.example.demo.arthas.user.UserController@logger</span></span><br></pre></td></tr></table></figure>\n\n<p>对于只有唯一实例的ClassLoader可以通过<code>--classLoaderClass</code>指定class name，使用起来更加方便：</p>\n<figure class=\"highlight console\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> ognl --classLoaderClass org.springframework.boot.loader.LaunchedURLClassLoader  @org.springframework.boot.SpringApplication@logger</span></span><br><span class=\"line\">@Slf4jLocationAwareLog[</span><br><span class=\"line\">    FQCN=@String[org.apache.commons.logging.LogAdapter$Slf4jLocationAwareLog],</span><br><span class=\"line\">    name=@String[org.springframework.boot.SpringApplication],</span><br><span class=\"line\">    logger=@Logger[Logger[org.springframework.boot.SpringApplication]],</span><br><span class=\"line\">]</span><br></pre></td></tr></table></figure>\n\n<p><code>--classLoaderClass</code> 的值是ClassLoader的类名，只有匹配到唯一的ClassLoader实例时才能工作，目的是方便输入通用命令，而<code>-c &lt;hashcode&gt;</code>是动态变化的。</p>\n<h4 id=\"获取静态类的静态字段\"><a href=\"#获取静态类的静态字段\" class=\"headerlink\" title=\"获取静态类的静态字段\"></a>获取静态类的静态字段</h4><p>获取<code>UserController</code>类里的<code>logger</code>字段：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ognl --classLoaderClass org.springframework.boot.loader.LaunchedURLClassLoader @com.example.demo.arthas.user.UserController@logger</span><br></pre></td></tr></table></figure>\n\n<p>还可以通过<code>-x</code>参数控制返回值的展开层数。比如：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ognl --classLoaderClass org.springframework.boot.loader.LaunchedURLClassLoader -x 2 @com.example.demo.arthas.user.UserController@logger</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"执行多行表达式，赋值给临时变量，返回一个List\"><a href=\"#执行多行表达式，赋值给临时变量，返回一个List\" class=\"headerlink\" title=\"执行多行表达式，赋值给临时变量，返回一个List\"></a>执行多行表达式，赋值给临时变量，返回一个List</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ognl <span class=\"string\">&#x27;#value1=@System@getProperty(&quot;java.home&quot;), #value2=@System@getProperty(&quot;java.runtime.name&quot;), &#123;#value1, #value2&#125;&#x27;</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight console\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> ognl <span class=\"string\">&#x27;#value1=@System@getProperty(&quot;java.home&quot;), #value2=@System@getProperty(&quot;java.runtime.name&quot;), &#123;#value1, #value2&#125;&#x27;</span></span></span><br><span class=\"line\">@ArrayList[</span><br><span class=\"line\">    @String[/Library/Java/JavaVirtualMachines/jdk1.8.0_162.jdk/Contents/Home/jre],</span><br><span class=\"line\">    @String[Java(TM) SE Runtime Environment],</span><br><span class=\"line\">]</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"更多\"><a href=\"#更多\" class=\"headerlink\" title=\"更多\"></a>更多</h4><p>在Arthas里<code>ognl</code>表达式是很重要的功能，在很多命令里都可以使用<code>ognl</code>表达式。</p>\n<p>一些更复杂的用法，可以参考：</p>\n<ul>\n<li>OGNL特殊用法请参考：<a href=\"https://github.com/alibaba/arthas/issues/71\">https://github.com/alibaba/arthas/issues/71</a></li>\n<li>OGNL表达式官方指南：<a href=\"https://commons.apache.org/proper/commons-ognl/language-guide.html\">https://commons.apache.org/proper/commons-ognl/language-guide.html</a></li>\n</ul>\n<h2 id=\"案例-排查函数调用异常\"><a href=\"#案例-排查函数调用异常\" class=\"headerlink\" title=\"案例: 排查函数调用异常\"></a>案例: 排查函数调用异常</h2><h4 id=\"现象\"><a href=\"#现象\" class=\"headerlink\" title=\"现象\"></a>现象</h4><p>目前，访问 <a href=\"http://localhost:61000/user/0\">http://localhost:61000/user/0</a> ，会返回500异常：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">curl http://localhost:61000/user/0</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight console\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;&quot;timestamp&quot;:1550223186170,&quot;status&quot;:500,&quot;error&quot;:&quot;Internal Server Error&quot;,&quot;exception&quot;:&quot;java.lang.IllegalArgumentException&quot;,&quot;message&quot;:&quot;id &lt; 1&quot;,&quot;path&quot;:&quot;/user/0&quot;&#125;</span><br></pre></td></tr></table></figure>\n\n<p>但请求的具体参数，异常栈是什么呢？</p>\n<h4 id=\"查看UserController的-参数-异常\"><a href=\"#查看UserController的-参数-异常\" class=\"headerlink\" title=\"查看UserController的 参数/异常\"></a>查看UserController的 参数/异常</h4><p>在Arthas里执行：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">watch com.example.demo.arthas.user.UserController * <span class=\"string\">&#x27;&#123;params, throwExp&#125;&#x27;</span></span><br></pre></td></tr></table></figure>\n\n<ol>\n<li>第一个参数是类名，支持通配</li>\n<li>第二个参数是函数名，支持通配 访问 <code>curl http://localhost:61000/user/0</code> ,<code>watch</code>命令会打印调用的参数和异常</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">curl http://localhost:61000/user/0</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight console\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> watch com.example.demo.arthas.user.UserController * <span class=\"string\">&#x27;&#123;params, throwExp&#125;&#x27;</span></span></span><br><span class=\"line\">Press Q or Ctrl+C to abort.</span><br><span class=\"line\">Affect(class-cnt:1 , method-cnt:2) cost in 53 ms.</span><br><span class=\"line\">ts=2019-02-15 01:35:25; [cost=0.996655ms] result=@ArrayList[</span><br><span class=\"line\">    @Object[][isEmpty=false;size=1],</span><br><span class=\"line\">    @IllegalArgumentException[java.lang.IllegalArgumentException: id &lt; 1],</span><br><span class=\"line\">]</span><br></pre></td></tr></table></figure>\n\n<p>可以看到实际抛出的异常是<code>IllegalArgumentException</code>。</p>\n<p>可以输入 <code>q</code> 或者 <code>Ctrl+C</code> 退出watch命令。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">q</span><br></pre></td></tr></table></figure>\n\n<p>如果想把获取到的结果展开，可以用<code>-x</code>参数：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">watch com.example.demo.arthas.user.UserController * <span class=\"string\">&#x27;&#123;params, throwExp&#125;&#x27;</span> -x 2</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"返回值表达式\"><a href=\"#返回值表达式\" class=\"headerlink\" title=\"返回值表达式\"></a>返回值表达式</h4><p>在上面的例子里，第三个参数是<code>返回值表达式</code>，它实际上是一个<code>ognl</code>表达式，它支持一些内置对象：</p>\n<ul>\n<li>loader</li>\n<li>clazz</li>\n<li>method</li>\n<li>target</li>\n<li>params</li>\n<li>returnObj</li>\n<li>throwExp</li>\n<li>isBefore</li>\n<li>isThrow</li>\n<li>isReturn</li>\n</ul>\n<p>你可以利用这些内置对象来组成不同的表达式。比如返回一个数组：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">watch com.example.demo.arthas.user.UserController * <span class=\"string\">&#x27;&#123;params[0], target, returnObj&#125;&#x27;</span></span><br></pre></td></tr></table></figure>\n\n<p>更多参考： <a href=\"https://arthas.aliyun.com/doc/advice-class.html\">https://arthas.aliyun.com/doc/advice-class.html</a></p>\n<h4 id=\"条件表达式\"><a href=\"#条件表达式\" class=\"headerlink\" title=\"条件表达式\"></a>条件表达式</h4><p><code>watch</code>命令支持在第4个参数里写条件表达式，比如：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">watch com.example.demo.arthas.user.UserController * returnObj <span class=\"string\">&#x27;params[0] &gt; 100&#x27;</span></span><br></pre></td></tr></table></figure>\n\n<p>当访问 user/1 时，<code>watch</code>命令没有输出</p>\n<p>当访问 user/101 时，<code>watch</code>会打印出结果。</p>\n<figure class=\"highlight console\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> watch com.example.demo.arthas.user.UserController * returnObj <span class=\"string\">&#x27;params[0] &gt; 100&#x27;</span></span></span><br><span class=\"line\">Press Q or Ctrl+C to abort.</span><br><span class=\"line\">Affect(class-cnt:1 , method-cnt:2) cost in 47 ms.</span><br><span class=\"line\">ts=2019-02-13 19:42:12; [cost=0.821443ms] result=@User[</span><br><span class=\"line\">    id=@Integer[101],</span><br><span class=\"line\">    name=@String[name101],</span><br><span class=\"line\">]</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"当异常时捕获\"><a href=\"#当异常时捕获\" class=\"headerlink\" title=\"当异常时捕获\"></a>当异常时捕获</h4><p><code>watch</code>命令支持<code>-e</code>选项，表示只捕获抛出异常时的请求：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">watch com.example.demo.arthas.user.UserController * <span class=\"string\">&quot;&#123;params[0],throwExp&#125;&quot;</span> -e</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"按照耗时进行过滤\"><a href=\"#按照耗时进行过滤\" class=\"headerlink\" title=\"按照耗时进行过滤\"></a>按照耗时进行过滤</h4><p>watch命令支持按请求耗时进行过滤，比如：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">watch com.example.demo.arthas.user.UserController * <span class=\"string\">&#x27;&#123;params, returnObj&#125;&#x27;</span> <span class=\"string\">&#x27;#cost&gt;200&#x27;</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"案例-热更新代码\"><a href=\"#案例-热更新代码\" class=\"headerlink\" title=\"案例: 热更新代码\"></a>案例: 热更新代码</h2><p>下面介绍通过<code>jad</code>/<code>mc</code>/<code>redefine</code> 命令实现动态更新代码的功能。</p>\n<p>目前，访问 <a href=\"http://localhost:61000/user/0\">http://localhost:61000/user/0</a> ，会返回500异常：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">curl http://localhost:61000/user/0</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;&quot;timestamp&quot;:1550223186170,&quot;status&quot;:500,&quot;error&quot;:&quot;Internal Server Error&quot;,&quot;exception&quot;:&quot;java.lang.IllegalArgumentException&quot;,&quot;message&quot;:&quot;id &lt; 1&quot;,&quot;path&quot;:&quot;/user/0&quot;&#125;</span><br></pre></td></tr></table></figure>\n\n<p>下面通过热更新代码，修改这个逻辑。</p>\n<h4 id=\"jad反编译UserController\"><a href=\"#jad反编译UserController\" class=\"headerlink\" title=\"jad反编译UserController\"></a>jad反编译UserController</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">jad --source-only com.example.demo.arthas.user.UserController &gt; /tmp/UserController.java</span><br></pre></td></tr></table></figure>\n\n<p>jad反编译的结果保存在 <code>/tmp/UserController.java</code>文件里了。</p>\n<p>再打开一个<code>Terminal 3</code>，然后用vim来编辑<code>/tmp/UserController.java</code>：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vim /tmp/UserController.java</span><br></pre></td></tr></table></figure>\n\n<p>比如当 user id 小于1时，也正常返回，不抛出异常：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@GetMapping(value=&#123;&quot;/user/&#123;id&#125;&quot;&#125;)</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> User <span class=\"title\">findUserById</span><span class=\"params\">(<span class=\"meta\">@PathVariable</span> Integer id)</span> </span>&#123;</span><br><span class=\"line\">    logger.info(<span class=\"string\">&quot;id: &#123;&#125;&quot;</span>, (Object)id);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (id != <span class=\"keyword\">null</span> &amp;&amp; id &lt; <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> User(id, <span class=\"string\">&quot;name&quot;</span> + id);</span><br><span class=\"line\">        <span class=\"comment\">// throw new IllegalArgumentException(&quot;id &lt; 1&quot;);</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> User(id.intValue(), <span class=\"string\">&quot;name&quot;</span> + id);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"sc查找加载UserController的ClassLoader\"><a href=\"#sc查找加载UserController的ClassLoader\" class=\"headerlink\" title=\"sc查找加载UserController的ClassLoader\"></a>sc查找加载UserController的ClassLoader</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sc -d *UserController | grep classLoaderHash</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight console\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> sc -d *UserController | grep classLoaderHash</span></span><br><span class=\"line\"> classLoaderHash   1be6f5c3</span><br></pre></td></tr></table></figure>\n\n<p>可以发现是 spring boot <code>LaunchedURLClassLoader@1be6f5c3</code> 加载的。</p>\n<p>请记下你的classLoaderHash，后面需要使用它。在这里，它是 <code>1be6f5c3</code>。</p>\n<h4 id=\"mc\"><a href=\"#mc\" class=\"headerlink\" title=\"mc\"></a>mc</h4><p>保存好<code>/tmp/UserController.java</code>之后，使用<code>mc</code>(Memory Compiler)命令来编译，并且通过<code>-c</code>或者<code>--classLoaderClass</code>参数指定ClassLoader：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mc --classLoaderClass org.springframework.boot.loader.LaunchedURLClassLoader /tmp/UserController.java -d /tmp</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight console\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> mc --classLoaderClass org.springframework.boot.loader.LaunchedURLClassLoader /tmp/UserController.java -d /tmp</span></span><br><span class=\"line\">Memory compiler output:</span><br><span class=\"line\">/tmp/com/example/demo/arthas/user/UserController.class</span><br><span class=\"line\">Affect(row-cnt:1) cost in 346 ms</span><br></pre></td></tr></table></figure>\n\n<p>也可以通过<code>mc -c &lt;classLoaderHash&gt; /tmp/UserController.java -d /tmp</code>，使用<code>-c</code>参数指定ClassLoaderHash:</p>\n<figure class=\"highlight console\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> mc -c 1be6f5c3 /tmp/UserController.java -d /tmp</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"redefine\"><a href=\"#redefine\" class=\"headerlink\" title=\"redefine\"></a>redefine</h4><p>再使用<code>redefine</code>命令重新加载新编译好的<code>UserController.class</code>：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">redefine /tmp/com/example/demo/arthas/user/UserController.class</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ redefine /tmp/com/example/demo/arthas/user/UserController.class</span><br><span class=\"line\">redefine success, size: 1</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"热修改代码结果\"><a href=\"#热修改代码结果\" class=\"headerlink\" title=\"热修改代码结果\"></a>热修改代码结果</h4><p><code>redefine</code>成功之后，再次访问 user/0 ，结果是：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  &quot;id&quot;: 0,</span><br><span class=\"line\">  &quot;name&quot;: &quot;name0&quot;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"案例-动态更新应用Logger-Level\"><a href=\"#案例-动态更新应用Logger-Level\" class=\"headerlink\" title=\"案例: 动态更新应用Logger Level\"></a>案例: 动态更新应用Logger Level</h2><p>在这个案例里，动态修改应用的Logger Level。</p>\n<h4 id=\"查找UserController的ClassLoader-1\"><a href=\"#查找UserController的ClassLoader-1\" class=\"headerlink\" title=\"查找UserController的ClassLoader\"></a>查找UserController的ClassLoader</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sc -d com.example.demo.arthas.user.UserController | grep classLoaderHash</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight console\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> sc -d com.example.demo.arthas.user.UserController | grep classLoaderHash</span></span><br><span class=\"line\"> classLoaderHash   1be6f5c3</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"用ognl获取logger\"><a href=\"#用ognl获取logger\" class=\"headerlink\" title=\"用ognl获取logger\"></a>用ognl获取logger</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ognl --classLoaderClass org.springframework.boot.loader.LaunchedURLClassLoader <span class=\"string\">&#x27;@com.example.demo.arthas.user.UserController@logger&#x27;</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight console\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> ognl --classLoaderClass org.springframework.boot.loader.LaunchedURLClassLoader <span class=\"string\">&#x27;@com.example.demo.arthas.user.UserController@logger&#x27;</span></span></span><br><span class=\"line\">@Logger[</span><br><span class=\"line\">    serialVersionUID=@Long[5454405123156820674],</span><br><span class=\"line\">    FQCN=@String[ch.qos.logback.classic.Logger],</span><br><span class=\"line\">    name=@String[com.example.demo.arthas.user.UserController],</span><br><span class=\"line\">    level=null,</span><br><span class=\"line\">    effectiveLevelInt=@Integer[20000],</span><br><span class=\"line\">    parent=@Logger[Logger[com.example.demo.arthas.user]],</span><br><span class=\"line\">    childrenList=null,</span><br><span class=\"line\">    aai=null,</span><br><span class=\"line\">    additive=@Boolean[true],</span><br><span class=\"line\">    loggerContext=@LoggerContext[ch.qos.logback.classic.LoggerContext[default]],</span><br><span class=\"line\">]</span><br></pre></td></tr></table></figure>\n\n<p>可以知道<code>UserController@logger</code>实际使用的是logback。可以看到<code>level=null</code>，则说明实际最终的level是从<code>root</code> logger里来的。</p>\n<h4 id=\"单独设置UserController的logger-level\"><a href=\"#单独设置UserController的logger-level\" class=\"headerlink\" title=\"单独设置UserController的logger level\"></a>单独设置UserController的logger level</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ognl --classLoaderClass org.springframework.boot.loader.LaunchedURLClassLoader <span class=\"string\">&#x27;@com.example.demo.arthas.user.UserController@logger.setLevel(@ch.qos.logback.classic.Level@DEBUG)&#x27;</span></span><br></pre></td></tr></table></figure>\n\n<p>再次获取<code>UserController@logger</code>，可以发现已经是<code>DEBUG</code>了：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ognl --classLoaderClass org.springframework.boot.loader.LaunchedURLClassLoader <span class=\"string\">&#x27;@com.example.demo.arthas.user.UserController@logger&#x27;</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight console\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> ognl --classLoaderClass org.springframework.boot.loader.LaunchedURLClassLoader <span class=\"string\">&#x27;@com.example.demo.arthas.user.UserController@logger&#x27;</span></span></span><br><span class=\"line\">@Logger[</span><br><span class=\"line\">    serialVersionUID=@Long[5454405123156820674],</span><br><span class=\"line\">    FQCN=@String[ch.qos.logback.classic.Logger],</span><br><span class=\"line\">    name=@String[com.example.demo.arthas.user.UserController],</span><br><span class=\"line\">    level=@Level[DEBUG],</span><br><span class=\"line\">    effectiveLevelInt=@Integer[10000],</span><br><span class=\"line\">    parent=@Logger[Logger[com.example.demo.arthas.user]],</span><br><span class=\"line\">    childrenList=null,</span><br><span class=\"line\">    aai=null,</span><br><span class=\"line\">    additive=@Boolean[true],</span><br><span class=\"line\">    loggerContext=@LoggerContext[ch.qos.logback.classic.LoggerContext[default]],</span><br><span class=\"line\">]</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"修改logback的全局logger-level\"><a href=\"#修改logback的全局logger-level\" class=\"headerlink\" title=\"修改logback的全局logger level\"></a>修改logback的全局logger level</h4><p>通过获取<code>root</code> logger，可以修改全局的logger level：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ognl --classLoaderClass org.springframework.boot.loader.LaunchedURLClassLoader <span class=\"string\">&#x27;@org.slf4j.LoggerFactory@getLogger(&quot;root&quot;).setLevel(@ch.qos.logback.classic.Level@DEBUG)&#x27;</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"案例-排查logger冲突问题\"><a href=\"#案例-排查logger冲突问题\" class=\"headerlink\" title=\"案例: 排查logger冲突问题\"></a>案例: 排查logger冲突问题</h2><p>在这个案例里，展示排查logger冲突的方法。</p>\n<h4 id=\"确认应用使用的logger系统\"><a href=\"#确认应用使用的logger系统\" class=\"headerlink\" title=\"确认应用使用的logger系统\"></a>确认应用使用的logger系统</h4><p>以<code>UserController</code>为例，它使用的是slf4j api，但实际使用到的logger系统是logback。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ognl --classLoaderClass org.springframework.boot.loader.LaunchedURLClassLoader <span class=\"string\">&#x27;@com.example.demo.arthas.user.UserController@logger&#x27;</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight console\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> ognl --classLoaderClass org.springframework.boot.loader.LaunchedURLClassLoader <span class=\"string\">&#x27;@com.example.demo.arthas.user.UserController@logger&#x27;</span></span></span><br><span class=\"line\">@Logger[</span><br><span class=\"line\">    serialVersionUID=@Long[5454405123156820674],</span><br><span class=\"line\">    FQCN=@String[ch.qos.logback.classic.Logger],</span><br><span class=\"line\">    name=@String[com.example.demo.arthas.user.UserController],</span><br><span class=\"line\">    level=null,</span><br><span class=\"line\">    effectiveLevelInt=@Integer[20000],</span><br><span class=\"line\">    parent=@Logger[Logger[com.example.demo.arthas.user]],</span><br><span class=\"line\">    childrenList=null,</span><br><span class=\"line\">    aai=null,</span><br><span class=\"line\">    additive=@Boolean[true],</span><br><span class=\"line\">    loggerContext=@LoggerContext[ch.qos.logback.classic.LoggerContext[default]],</span><br><span class=\"line\">]</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"获取logback实际加载的配置文件\"><a href=\"#获取logback实际加载的配置文件\" class=\"headerlink\" title=\"获取logback实际加载的配置文件\"></a>获取logback实际加载的配置文件</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ognl --classLoaderClass org.springframework.boot.loader.LaunchedURLClassLoader <span class=\"string\">&#x27;#map1=@org.slf4j.LoggerFactory@getLogger(&quot;root&quot;).loggerContext.objectMap, #map1.get(&quot;CONFIGURATION_WATCH_LIST&quot;)&#x27;</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"使用classloader命令查找可能存在的logger配置文件\"><a href=\"#使用classloader命令查找可能存在的logger配置文件\" class=\"headerlink\" title=\"使用classloader命令查找可能存在的logger配置文件\"></a>使用classloader命令查找可能存在的logger配置文件</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">classloader --classLoaderClass org.springframework.boot.loader.LaunchedURLClassLoader -r logback-spring.xml</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ classloader --classLoaderClass org.springframework.boot.loader.LaunchedURLClassLoader -r logback-spring.xml</span><br><span class=\"line\"> jar:file:/Users/hengyunabc/code/java/spring-boot-inside/demo-arthas-spring-boot/target/demo-arthas-spring-boot-0.0.1-SNAPSHOT.jar!/BOOT-INF/classes!/logback-spring.xml</span><br><span class=\"line\"></span><br><span class=\"line\">Affect(row-cnt:1) cost in 13 ms.</span><br></pre></td></tr></table></figure>\n\n<p>可以知道加载的配置的具体来源。</p>\n<p>可以尝试加载容易冲突的文件：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">classloader --classLoaderClass org.springframework.boot.loader.LaunchedURLClassLoader -r logback.xml</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">classloader --classLoaderClass org.springframework.boot.loader.LaunchedURLClassLoader -r log4j.properties</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"案例-获取Spring-Context\"><a href=\"#案例-获取Spring-Context\" class=\"headerlink\" title=\"案例: 获取Spring Context\"></a>案例: 获取Spring Context</h2><p>在这个案例里，展示获取spring context，再获取bean，然后调用函数。</p>\n<h4 id=\"使用tt命令获取到spring-context\"><a href=\"#使用tt命令获取到spring-context\" class=\"headerlink\" title=\"使用tt命令获取到spring context\"></a>使用tt命令获取到spring context</h4><p><code>tt</code>即 TimeTunnel，它可以记录下指定方法每次调用的入参和返回信息，并能对这些不同的时间下调用进行观测。</p>\n<ul>\n<li><a href=\"https://arthas.aliyun.com/doc/tt.html\">https://arthas.aliyun.com/doc/tt.html</a></li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">tt -t org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter invokeHandlerMethod</span><br></pre></td></tr></table></figure>\n\n<p>访问：user/1</p>\n<p>可以看到<code>tt</code>命令捕获到了一个请求：</p>\n<figure class=\"highlight console\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> tt -t org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdaptePress Q or Ctrl+C to abort.</span></span><br><span class=\"line\">Affect(class-cnt:1 , method-cnt:1) cost in 252 ms.</span><br><span class=\"line\"> INDE  TIMESTAMP    COST(  IS-R  IS-  OBJECT     CLASS               METHOD</span><br><span class=\"line\"> X                  ms)    ET    EXP</span><br><span class=\"line\">-----------------------------------------------------------------------------------------</span><br><span class=\"line\"> 1000  2019-02-15   4.583  true  fal  0xc93cf1a  RequestMappingHand  invokeHandlerMethod</span><br><span class=\"line\">       15:38:32     923          se              lerAdapter</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"使用tt命令从调用记录里获取到spring-context\"><a href=\"#使用tt命令从调用记录里获取到spring-context\" class=\"headerlink\" title=\"使用tt命令从调用记录里获取到spring context\"></a>使用tt命令从调用记录里获取到spring context</h4><p>输入 <code>q</code> 或者 <code>Ctrl + C</code> 退出上面的 <code>tt -t</code>命令。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">q</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">tt -i 1000 -w <span class=\"string\">&#x27;target.getApplicationContext()&#x27;</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight console\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> tt -i 1000 -w <span class=\"string\">&#x27;target.getApplicationContext()&#x27;</span></span></span><br><span class=\"line\">@AnnotationConfigEmbeddedWebApplicationContext[</span><br><span class=\"line\">    reader=@AnnotatedBeanDefinitionReader[org.springframework.context.annotation.AnnotatedBeanDefinitionReader@2e457641],</span><br><span class=\"line\">    scanner=@ClassPathBeanDefinitionScanner[org.springframework.context.annotation.ClassPathBeanDefinitionScanner@6eb38026],</span><br><span class=\"line\">    annotatedClasses=null,</span><br><span class=\"line\">    basePackages=null,</span><br><span class=\"line\">]</span><br><span class=\"line\">Affect(row-cnt:1) cost in 439 ms.</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"获取spring-bean，并调用函数\"><a href=\"#获取spring-bean，并调用函数\" class=\"headerlink\" title=\"获取spring bean，并调用函数\"></a>获取spring bean，并调用函数</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">tt -i 1000 -w <span class=\"string\">&#x27;target.getApplicationContext().getBean(&quot;helloWorldService&quot;).getHelloMessage()&#x27;</span></span><br></pre></td></tr></table></figure>\n\n<p>结果是：</p>\n<figure class=\"highlight console\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> tt -i 1000 -w <span class=\"string\">&#x27;target.getApplicationContext().getBean(&quot;helloWorldService&quot;).getHelloMessage()&#x27;</span></span></span><br><span class=\"line\">@String[Hello World]</span><br><span class=\"line\">Affect(row-cnt:1) cost in 52 ms.</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"案例-排查HTTP请求返回401\"><a href=\"#案例-排查HTTP请求返回401\" class=\"headerlink\" title=\"案例: 排查HTTP请求返回401\"></a>案例: 排查HTTP请求返回401</h2><p>在这个案例里，展示排查HTTP 401问题的技巧。</p>\n<p>访问： admin</p>\n<p>结果是：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Something went wrong: 401 Unauthorized</span><br></pre></td></tr></table></figure>\n\n<p>我们知道<code>401</code>通常是被权限管理的<code>Filter</code>拦截了，那么到底是哪个<code>Filter</code>处理了这个请求，返回了401？</p>\n<h4 id=\"跟踪所有的Filter函数\"><a href=\"#跟踪所有的Filter函数\" class=\"headerlink\" title=\"跟踪所有的Filter函数\"></a>跟踪所有的Filter函数</h4><p>开始trace：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">trace javax.servlet.Filter *</span><br></pre></td></tr></table></figure>\n\n<p>访问： admin</p>\n<p>可以在调用树的最深层，找到<code>AdminFilterConfig$AdminFilter</code>返回了<code>401</code>：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">+---[3.806273ms] javax.servlet.FilterChain:doFilter()</span><br><span class=\"line\">|   `---[3.447472ms] com.example.demo.arthas.AdminFilterConfig$AdminFilter:doFilter()</span><br><span class=\"line\">|       `---[0.17259ms] javax.servlet.http.HttpServletResponse:sendError()</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"通过stack获取调用栈\"><a href=\"#通过stack获取调用栈\" class=\"headerlink\" title=\"通过stack获取调用栈\"></a>通过stack获取调用栈</h4><p>上面是通过<code>trace</code>命令来获取信息，从结果里，我们可以知道通过<code>stack</code>跟踪<code>HttpServletResponse:sendError()</code>，同样可以知道是哪个<code>Filter</code>返回了<code>401</code></p>\n<p>执行：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">stack javax.servlet.http.HttpServletResponse sendError <span class=\"string\">&#x27;params[0]==401&#x27;</span></span><br></pre></td></tr></table></figure>\n\n<p>访问： admin</p>\n<figure class=\"highlight console\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> stack javax.servlet.http.HttpServletResponse sendError <span class=\"string\">&#x27;params[0]==401&#x27;</span></span></span><br><span class=\"line\">Press Q or Ctrl+C to abort.</span><br><span class=\"line\">Affect(class-cnt:2 , method-cnt:4) cost in 87 ms.</span><br><span class=\"line\">ts=2019-02-15 16:44:06;thread_name=http-nio-8080-exec-6;id=16;is_daemon=true;priority=5;TCCL=org.springframework.boot.context.embedded.tomcat.TomcatEmbeddedWebappClassLoader@8546cd5</span><br><span class=\"line\">    @org.apache.catalina.connector.ResponseFacade.sendError()</span><br><span class=\"line\">        at com.example.demo.arthas.AdminFilterConfig$AdminFilter.doFilter(AdminFilterConfig.java:38)</span><br><span class=\"line\">        at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)</span><br><span class=\"line\">        at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)</span><br><span class=\"line\">        at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:99)</span><br><span class=\"line\">        at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"案例-排查HTTP请求返回404\"><a href=\"#案例-排查HTTP请求返回404\" class=\"headerlink\" title=\"案例: 排查HTTP请求返回404\"></a>案例: 排查HTTP请求返回404</h2><p>在这个案例里，展示排查HTTP 404问题的技巧。</p>\n<p>访问： a.txt</p>\n<p>结果是：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Something went wrong: 404 Not Found</span><br></pre></td></tr></table></figure>\n\n<p>那么到底是哪个Servlet处理了这个请求，返回了404？</p>\n<h4 id=\"跟踪所有的Servlet函数\"><a href=\"#跟踪所有的Servlet函数\" class=\"headerlink\" title=\"跟踪所有的Servlet函数\"></a>跟踪所有的Servlet函数</h4><p>开始trace：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">trace javax.servlet.Servlet * &gt; /tmp/servlet.txt</span><br></pre></td></tr></table></figure>\n\n<p>访问： a.txt</p>\n<p>在<code>Terminal 3</code>里，查看<code>/tmp/servlet.txt</code>的内容：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">less /tmp/servlet.txt</span><br></pre></td></tr></table></figure>\n\n<p><code>/tmp/servlet.txt</code>里的内容会比较多，需要耐心找到调用树里最长的地方。</p>\n<p>可以发现请求最终是被<code>freemarker</code>处理的：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">`---[13.974188ms] org.springframework.web.servlet.ViewResolver:resolveViewName();    +---[0.045561ms] javax.servlet.GenericServlet:&lt;init&gt;()</span><br><span class=\"line\">    +---[min=0.045545ms,max=0.074342ms,total=0.119887ms,count=2] org.springframework.web.servlet.view.freemarker.FreeMarkerView$GenericServletAdapter:&lt;init&gt;()</span><br><span class=\"line\">    +---[0.170895ms] javax.servlet.GenericServlet:init()</span><br><span class=\"line\">    |   `---[0.068578ms] javax.servlet.GenericServlet:init()</span><br><span class=\"line\">    |       `---[0.021793ms] javax.servlet.GenericServlet:init()</span><br><span class=\"line\">    `---[0.164035ms] javax.servlet.GenericServlet:getServletContext()</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"案例-理解Spring-Boot应用的ClassLoader结构\"><a href=\"#案例-理解Spring-Boot应用的ClassLoader结构\" class=\"headerlink\" title=\"案例: 理解Spring Boot应用的ClassLoader结构\"></a>案例: 理解Spring Boot应用的ClassLoader结构</h2><p>下面介绍<code>classloader</code>命令的功能。</p>\n<p>先访问一个jsp网页，触发jsp的加载： hello</p>\n<h4 id=\"列出所有ClassLoader\"><a href=\"#列出所有ClassLoader\" class=\"headerlink\" title=\"列出所有ClassLoader\"></a>列出所有ClassLoader</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">classloader -l</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight console\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> classloader -l</span></span><br><span class=\"line\"> name                                                             loadedCount  hash      parent</span><br><span class=\"line\"> BootstrapClassLoader                                             2724         null      null</span><br><span class=\"line\"> com.taobao.arthas.agent.ArthasClassloader@411ce1ab               2009         411ce1ab  sun.misc.Launcher$ExtClassLoader@7494e528</span><br><span class=\"line\"> com.taobao.arthas.agent.ArthasClassloader@22ae1234               1253         22ae1234  sun.misc.Launcher$ExtClassLoader@7494e528</span><br><span class=\"line\"> org.apache.jasper.servlet.JasperLoader@65361d9a                  1            65361d9a  TomcatEmbeddedWebappClassLoader</span><br><span class=\"line\">                                                                                           context: ROOT</span><br><span class=\"line\">                                                                                           delegate: true</span><br><span class=\"line\">                                                                                         ----------&gt; Parent Classloader:</span><br><span class=\"line\">                                                                                         org.springframework.boot.loader.LaunchedURLClassLoader@1be6f5c3</span><br><span class=\"line\"></span><br><span class=\"line\"> TomcatEmbeddedWebappClassLoader                                  0            8546cd5   org.springframework.boot.loader.LaunchedURLClassLoader@1be6f5c3</span><br><span class=\"line\">   context: ROOT</span><br><span class=\"line\">   delegate: true</span><br><span class=\"line\"><span class=\"meta\"> ----------&gt;</span><span class=\"bash\"> Parent Classloader:</span></span><br><span class=\"line\"> org.springframework.boot.loader.LaunchedURLClassLoader@1be6f5c3</span><br><span class=\"line\"></span><br><span class=\"line\"> org.springframework.boot.loader.LaunchedURLClassLoader@1be6f5c3  5416         1be6f5c3  sun.misc.Launcher$AppClassLoader@3d4eac69</span><br><span class=\"line\"> sun.misc.Launcher$AppClassLoader@3d4eac69                        45           3d4eac69  sun.misc.Launcher$ExtClassLoader@7494e528</span><br><span class=\"line\"> sun.misc.Launcher$ExtClassLoader@7494e528                        4            7494e528  null</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>TomcatEmbeddedWebappClassLoader 加载的class数量是0，所以在spring boot embedded tomcat里，它只是一个空壳，所有的类加载都是<code>LaunchedURLClassLoader</code>完成的</li>\n</ul>\n<h4 id=\"列出ClassLoader里加载的所有类\"><a href=\"#列出ClassLoader里加载的所有类\" class=\"headerlink\" title=\"列出ClassLoader里加载的所有类\"></a>列出ClassLoader里加载的所有类</h4><p>列出上面的<code>org.apache.jasper.servlet.JasperLoader</code>加载的类：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">classloader -a --classLoaderClass apache.jasper.servlet.JasperLoader</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight console\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> classloader -a --classLoaderClass apache.jasper.servlet.JasperLoader</span></span><br><span class=\"line\"> hash:1698045338, org.apache.jasper.servlet.JasperLoader@65361d9a</span><br><span class=\"line\"> org.apache.jsp.jsp.hello_jsp</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>注：同ognl, 也可用<code>-c &lt;hashcode&gt;</code>而不用<code>--classLoaderClass</code>指定</li>\n</ul>\n<h4 id=\"反编译jsp的代码\"><a href=\"#反编译jsp的代码\" class=\"headerlink\" title=\"反编译jsp的代码\"></a>反编译jsp的代码</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">jad org.apache.jsp.jsp.hello_jsp</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight console\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> jad org.apache.jsp.jsp.hello_jsp</span></span><br><span class=\"line\"></span><br><span class=\"line\">ClassLoader:</span><br><span class=\"line\">+-org.apache.jasper.servlet.JasperLoader@65361d9a</span><br><span class=\"line\">  +-TomcatEmbeddedWebappClassLoader</span><br><span class=\"line\">      context: ROOT</span><br><span class=\"line\">...</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"查看ClassLoader树\"><a href=\"#查看ClassLoader树\" class=\"headerlink\" title=\"查看ClassLoader树\"></a>查看ClassLoader树</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">classloader -t</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ classloader -t</span><br><span class=\"line\">+-BootstrapClassLoader</span><br><span class=\"line\">+-sun.misc.Launcher$ExtClassLoader@28cbbddd</span><br><span class=\"line\">  +-com.taobao.arthas.agent.ArthasClassloader@8c25e55</span><br><span class=\"line\">  +-sun.misc.Launcher$AppClassLoader@55f96302</span><br><span class=\"line\">    +-org.springframework.boot.loader.LaunchedURLClassLoader@1be6f5c3</span><br><span class=\"line\">      +-TomcatEmbeddedWebappClassLoader</span><br><span class=\"line\">          context: ROOT</span><br><span class=\"line\">          delegate: true</span><br><span class=\"line\">        ----------&gt; Parent Classloader:</span><br><span class=\"line\">        org.springframework.boot.loader.LaunchedURLClassLoader@1be6f5c3</span><br><span class=\"line\"></span><br><span class=\"line\">        +-org.apache.jasper.servlet.JasperLoader@21ae0fe2</span><br></pre></td></tr></table></figure>\n\n<p>注意：请使用你的classLoaderHash值覆盖 <code>&lt;classLoaderHash&gt;</code> ，然后手动执行下面相关命令：</p>\n<h4 id=\"列出ClassLoader的urls\"><a href=\"#列出ClassLoader的urls\" class=\"headerlink\" title=\"列出ClassLoader的urls\"></a>列出ClassLoader的urls</h4><p>比如上面查看到的spring LaunchedURLClassLoader的 hashcode是<code>1be6f5c3</code>，可以通过<code>-c</code>或者<code>--classLoaderClass</code>参数来列出它的所有urls：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">classloader --classLoaderClass org.springframework.boot.loader.LaunchedURLClassLoader</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ classloader --classLoaderClass org.springframework.boot.loader.LaunchedURLClassLoader</span><br><span class=\"line\">jar:file:/home/scrapbook/tutorial/demo-arthas-spring-boot.jar!/BOOT-INF/classes!/</span><br><span class=\"line\">jar:file:/home/scrapbook/tutorial/demo-arthas-spring-boot.jar!/BOOT-INF/lib/spring-boot-starter-aop-1.5</span><br><span class=\"line\">.13.RELEASE.jar!/</span><br><span class=\"line\">...</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"加载指定ClassLoader里的资源文件\"><a href=\"#加载指定ClassLoader里的资源文件\" class=\"headerlink\" title=\"加载指定ClassLoader里的资源文件\"></a>加载指定ClassLoader里的资源文件</h4><p>查找指定的资源文件： <code>classloader --classLoaderClass org.springframework.boot.loader.LaunchedURLClassLoader -r logback-spring.xml</code></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">classloader --classLoaderClass org.springframework.boot.loader.LaunchedURLClassLoader -r logback-spring.xml</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ classloader --classLoaderClass org.springframework.boot.loader.LaunchedURLClassLoader -r logback-spring.xml</span><br><span class=\"line\"> jar:file:/home/scrapbook/tutorial/demo-arthas-spring-boot.jar!/BOOT-INF/classes!/logback-spring.xml</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"尝试加载指定的类\"><a href=\"#尝试加载指定的类\" class=\"headerlink\" title=\"尝试加载指定的类\"></a>尝试加载指定的类</h4><p>比如用上面的spring LaunchedURLClassLoader 尝试加载 <code>java.lang.String</code> ：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">classloader --classLoaderClass org.springframework.boot.loader.LaunchedURLClassLoader --load java.lang.String</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ classloader --classLoaderClass org.springframework.boot.loader.LaunchedURLClassLoader --load java.lang.String</span><br><span class=\"line\">load class success.</span><br><span class=\"line\"> class-info        java.lang.String</span><br><span class=\"line\"> code-source</span><br><span class=\"line\"> name              java.lang.String</span><br><span class=\"line\"> isInterface       false</span><br><span class=\"line\"> isAnnotation      false</span><br><span class=\"line\"> isEnum            false</span><br><span class=\"line\"> isAnonymousClass  false</span><br><span class=\"line\"> isArray           false</span><br><span class=\"line\"> isLocalClass      false</span><br><span class=\"line\"> isMemberClass     false</span><br><span class=\"line\"> isPrimitive       false</span><br><span class=\"line\"> isSynthetic       false</span><br><span class=\"line\"> simple-name       String</span><br><span class=\"line\"> modifier          final,public</span><br><span class=\"line\"> annotation</span><br><span class=\"line\"> interfaces        java.io.Serializable,java.lang.Comparable,java.lang.CharSequence</span><br><span class=\"line\"> super-class       +-java.lang.Object</span><br><span class=\"line\"> class-loader</span><br><span class=\"line\"> classLoaderHash   null</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"案例：查找Top-N线程\"><a href=\"#案例：查找Top-N线程\" class=\"headerlink\" title=\"案例：查找Top N线程\"></a>案例：查找Top N线程</h2><h4 id=\"查看所有线程信息\"><a href=\"#查看所有线程信息\" class=\"headerlink\" title=\"查看所有线程信息\"></a>查看所有线程信息</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">thread</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"查看具体线程的栈\"><a href=\"#查看具体线程的栈\" class=\"headerlink\" title=\"查看具体线程的栈\"></a>查看具体线程的栈</h4><p>查看线程ID 16的栈：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">thread 16</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"查看CPU使用率top-n线程的栈\"><a href=\"#查看CPU使用率top-n线程的栈\" class=\"headerlink\" title=\"查看CPU使用率top n线程的栈\"></a>查看CPU使用率top n线程的栈</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">thread -n 3</span><br></pre></td></tr></table></figure>\n\n<p>查看5秒内的CPU使用率top n线程栈</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">thread -n 3 -i 5000</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"查找线程是否有阻塞\"><a href=\"#查找线程是否有阻塞\" class=\"headerlink\" title=\"查找线程是否有阻塞\"></a>查找线程是否有阻塞</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">thread -b</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Web-Console\"><a href=\"#Web-Console\" class=\"headerlink\" title=\"Web Console\"></a>Web Console</h2><p>Arthas支持通过Web Socket来连接。</p>\n<h3 id=\"本地体验\"><a href=\"#本地体验\" class=\"headerlink\" title=\"本地体验\"></a>本地体验</h3><p>当在本地启动时，可以访问 <a href=\"http://127.0.0.1:8563/\">http://127.0.0.1:8563/</a> ，通过浏览器来使用Arthas。</p>\n<p><img src=\"/jlynet.github.io/2021/08/07/Java%E8%AF%8A%E6%96%AD%E5%B7%A5%E5%85%B7Arthas%E5%85%A5%E9%97%A8%E6%95%99%E7%A8%8B/Arthas-%E8%BF%9B%E9%98%B6/O1CN01i041kW1lw0FCaSKNn_!!6000000004882-2-tps-1231-284.png\" alt=\"Arthas WebConsole\"></p>\n<p>推荐通过“快速入门”来体验： <a href=\"https://arthas.aliyun.com/doc/quick-start.html\">https://arthas.aliyun.com/doc/quick-start.html</a></p>\n<h2 id=\"Exit-Stop\"><a href=\"#Exit-Stop\" class=\"headerlink\" title=\"Exit/Stop\"></a>Exit/Stop</h2><h3 id=\"reset\"><a href=\"#reset\" class=\"headerlink\" title=\"reset\"></a>reset</h3><p>Arthas在 watch/trace 等命令时，实际上是修改了应用的字节码，插入增强的代码。显式执行 <code>reset</code> 命令，可以清除掉这些增强代码。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">reset</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"退出Arthas\"><a href=\"#退出Arthas\" class=\"headerlink\" title=\"退出Arthas\"></a>退出Arthas</h3><p>用 <code>exit</code> 或者 <code>quit</code> 命令可以退出Arthas。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">exit</span></span><br></pre></td></tr></table></figure>\n\n<p>Ctrl+C</p>\n<p>退出Arthas之后，还可以再次用 <code>java -jar arthas-boot.jar</code> 来连接。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">java -jar arthas-boot.jar</span><br></pre></td></tr></table></figure>\n\n<p>Ctrl+C</p>\n<h3 id=\"彻底退出Arthas\"><a href=\"#彻底退出Arthas\" class=\"headerlink\" title=\"彻底退出Arthas\"></a>彻底退出Arthas</h3><p><code>exit/quit</code>命令只是退出当前session，arthas server还在目标进程中运行。</p>\n<p>想完全退出Arthas，可以执行 <code>stop</code> 命令。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">stop</span><br></pre></td></tr></table></figure>\n\n<p>Ctrl+C</p>\n<h2 id=\"arthas-boot支持的参数\"><a href=\"#arthas-boot支持的参数\" class=\"headerlink\" title=\"arthas-boot支持的参数\"></a>arthas-boot支持的参数</h2><p><code>arthas-boot.jar</code> 支持很多参数，可以执行 <code>java -jar arthas-boot.jar -h</code> 来查看。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">java -jar arthas-boot.jar -h</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"允许外部访问\"><a href=\"#允许外部访问\" class=\"headerlink\" title=\"允许外部访问\"></a>允许外部访问</h3><p>默认情况下， arthas server侦听的是 <code>127.0.0.1</code> 这个IP，如果希望远程可以访问，可以使用<code>--target-ip</code>的参数。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">java -jar arthas-boot.jar --target-ip</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"列出所有的版本\"><a href=\"#列出所有的版本\" class=\"headerlink\" title=\"列出所有的版本\"></a>列出所有的版本</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">java -jar arthas-boot.jar --versions</span><br></pre></td></tr></table></figure>\n\n<p>使用指定版本：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">java -jar arthas-boot.jar --use-version 3.1.0</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"只侦听Telnet端口，不侦听HTTP端口\"><a href=\"#只侦听Telnet端口，不侦听HTTP端口\" class=\"headerlink\" title=\"只侦听Telnet端口，不侦听HTTP端口\"></a>只侦听Telnet端口，不侦听HTTP端口</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">java -jar arthas-boot.jar --telnet-port 9999 --http-port -1</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"打印运行的详情\"><a href=\"#打印运行的详情\" class=\"headerlink\" title=\"打印运行的详情\"></a>打印运行的详情</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">java -jar arthas-boot.jar -v</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"更多信息\"><a href=\"#更多信息\" class=\"headerlink\" title=\"更多信息\"></a>更多信息</h2><p>在“进阶教程”，演示了Arthas的大部分高级用法，希望对大家排查问题有帮助。如果有更多的技巧或者使用疑问，欢迎在Issue里提出。</p>\n<ul>\n<li>Issues: <a href=\"https://github.com/alibaba/arthas/issues\">https://github.com/alibaba/arthas/issues</a></li>\n<li>文档： <a href=\"https://arthas.aliyun.com/doc\">https://arthas.aliyun.com/doc</a></li>\n</ul>\n<p>如果您在使用Arthas，请让我们知道。您的使用对我们非常重要：<a href=\"https://github.com/alibaba/arthas/issues/111\">查看</a></p>\n<p>文章拷贝来源：<a href=\"https://start.aliyun.com/course?spm=a2ck6.17690074.0.0.28bc2e7dHTphXs&amp;id=qDlgqpBT\">https://start.aliyun.com/course?spm=a2ck6.17690074.0.0.28bc2e7dHTphXs&amp;id=qDlgqpBT</a></p>\n"}],"PostAsset":[{"_id":"source/_posts/Lockbox/Lockbox-00.png","slug":"Lockbox-00.png","post":"cks1cgr570004fw5ibzybg04g","modified":0,"renderable":0},{"_id":"source/_posts/Lockbox/Lockbox-01.png","slug":"Lockbox-01.png","post":"cks1cgr570004fw5ibzybg04g","modified":0,"renderable":0},{"_id":"source/_posts/Lockbox/Lockbox-02-1.png","slug":"Lockbox-02-1.png","post":"cks1cgr570004fw5ibzybg04g","modified":0,"renderable":0},{"_id":"source/_posts/Lockbox/Lockbox-02-2.png","slug":"Lockbox-02-2.png","post":"cks1cgr570004fw5ibzybg04g","modified":0,"renderable":0},{"_id":"source/_posts/Lockbox/Lockbox-02-3.png","slug":"Lockbox-02-3.png","post":"cks1cgr570004fw5ibzybg04g","modified":0,"renderable":0},{"_id":"source/_posts/Lockbox/Lockbox-02.png","slug":"Lockbox-02.png","post":"cks1cgr570004fw5ibzybg04g","modified":0,"renderable":0},{"_id":"source/_posts/Lockbox/Lockbox-03.png","slug":"Lockbox-03.png","post":"cks1cgr570004fw5ibzybg04g","modified":0,"renderable":0},{"_id":"source/_posts/JsonFormatTool/JsonFormatTool-01.png","slug":"JsonFormatTool-01.png","post":"cks1cgr510001fw5i79kr9e8q","modified":0,"renderable":0},{"_id":"source/_posts/JsonFormatTool/JsonFormatTool-02.png","slug":"JsonFormatTool-02.png","post":"cks1cgr510001fw5i79kr9e8q","modified":0,"renderable":0},{"_id":"source/_posts/swagger2word/swagger2word-01.png","slug":"swagger2word-01.png","post":"cks1cgr5d000afw5ichxj3qms","modified":0,"renderable":0},{"_id":"source/_posts/Java诊断工具Arthas最佳实践/ArthasWebConsole案例/O1CN01HzatXZ1RgccrlT90M_!!6000000002141-2-tps-529-244.png","slug":"O1CN01HzatXZ1RgccrlT90M_!!6000000002141-2-tps-529-244.png","post":"cks1cgr5j000gfw5i635951eq","modified":0,"renderable":0},{"_id":"source/_posts/Java诊断工具Arthas最佳实践/ArthasWebConsole案例/O1CN01i041kW1lw0FCaSKNn_!!6000000004882-2-tps-1231-284.png","slug":"O1CN01i041kW1lw0FCaSKNn_!!6000000004882-2-tps-1231-284.png","post":"cks1cgr5j000gfw5i635951eq","modified":0,"renderable":0},{"_id":"source/_posts/Java诊断工具Arthas最佳实践/ArthasWebConsole案例/arthas.png","slug":"arthas.png","post":"cks1cgr5j000gfw5i635951eq","modified":0,"renderable":0},{"_id":"source/_posts/Java诊断工具Arthas入门教程/Arthas-基础教程/O1CN01HzatXZ1RgccrlT90M_!!6000000002141-2-tps-529-244.png","slug":"O1CN01HzatXZ1RgccrlT90M_!!6000000002141-2-tps-529-244.png","post":"cks1cgr5h000efw5ig80oaz9r","modified":0,"renderable":0},{"_id":"source/_posts/Java诊断工具Arthas入门教程/Arthas-基础教程/arthas.png","slug":"arthas.png","post":"cks1cgr5h000efw5ig80oaz9r","modified":0,"renderable":0},{"_id":"source/_posts/Java诊断工具Arthas最佳实践/ArthasHttpAPI案例/O1CN01HzatXZ1RgccrlT90M_!!6000000002141-2-tps-529-244.png","slug":"O1CN01HzatXZ1RgccrlT90M_!!6000000002141-2-tps-529-244.png","post":"cks1cgr5m000lfw5i9tidc0fv","modified":0,"renderable":0},{"_id":"source/_posts/Java诊断工具Arthas最佳实践/ArthasHttpAPI案例/arthas-web-ui.png","slug":"arthas-web-ui.png","post":"cks1cgr5m000lfw5i9tidc0fv","modified":0,"renderable":0},{"_id":"source/_posts/Java诊断工具Arthas最佳实践/ArthasHttpAPI案例/arthas.png","slug":"arthas.png","post":"cks1cgr5m000lfw5i9tidc0fv","modified":0,"renderable":0},{"_id":"source/_posts/Java诊断工具Arthas最佳实践/Arthas动态更新应用LoggerLevel案例/O1CN010Qbzcz1ctPSWSZI6L_!!6000000003658-2-tps-333-182.png","slug":"O1CN010Qbzcz1ctPSWSZI6L_!!6000000003658-2-tps-333-182.png","post":"cks1cgr5n000nfw5ib6zp7d3g","modified":0,"renderable":0},{"_id":"source/_posts/Java诊断工具Arthas最佳实践/Arthas动态更新应用LoggerLevel案例/O1CN01HzatXZ1RgccrlT90M_!!6000000002141-2-tps-529-244.png","slug":"O1CN01HzatXZ1RgccrlT90M_!!6000000002141-2-tps-529-244.png","post":"cks1cgr5n000nfw5ib6zp7d3g","modified":0,"renderable":0},{"_id":"source/_posts/Java诊断工具Arthas最佳实践/Arthas动态更新应用LoggerLevel案例/arthas.png","slug":"arthas.png","post":"cks1cgr5n000nfw5ib6zp7d3g","modified":0,"renderable":0},{"_id":"source/_posts/Java诊断工具Arthas最佳实践/Arthas后台异步任务案例/O1CN01HzatXZ1RgccrlT90M_!!6000000002141-2-tps-529-244.png","slug":"O1CN01HzatXZ1RgccrlT90M_!!6000000002141-2-tps-529-244.png","post":"cks1cgr5p000rfw5i9w1bgu08","modified":0,"renderable":0},{"_id":"source/_posts/Java诊断工具Arthas最佳实践/Arthas后台异步任务案例/arthas.png","slug":"arthas.png","post":"cks1cgr5p000rfw5i9w1bgu08","modified":0,"renderable":0},{"_id":"source/_posts/Java诊断工具Arthas最佳实践/Arthas执行结果存日志案例/O1CN01HzatXZ1RgccrlT90M_!!6000000002141-2-tps-529-244.png","slug":"O1CN01HzatXZ1RgccrlT90M_!!6000000002141-2-tps-529-244.png","post":"cks1cgr5q000tfw5ifl4n87h9","modified":0,"renderable":0},{"_id":"source/_posts/Java诊断工具Arthas最佳实践/Arthas执行结果存日志案例/arthas.png","slug":"arthas.png","post":"cks1cgr5q000tfw5ifl4n87h9","modified":0,"renderable":0},{"_id":"source/_posts/Java诊断工具Arthas最佳实践/Arthas排查HTTP请求返回401案例/O1CN010Qbzcz1ctPSWSZI6L_!!6000000003658-2-tps-333-182.png","slug":"O1CN010Qbzcz1ctPSWSZI6L_!!6000000003658-2-tps-333-182.png","post":"cks1cgr5t000wfw5ic2ha8qo8","modified":0,"renderable":0},{"_id":"source/_posts/Java诊断工具Arthas最佳实践/Arthas排查HTTP请求返回401案例/O1CN01HzatXZ1RgccrlT90M_!!6000000002141-2-tps-529-244.png","slug":"O1CN01HzatXZ1RgccrlT90M_!!6000000002141-2-tps-529-244.png","post":"cks1cgr5t000wfw5ic2ha8qo8","modified":0,"renderable":0},{"_id":"source/_posts/Java诊断工具Arthas最佳实践/Arthas排查HTTP请求返回401案例/arthas.png","slug":"arthas.png","post":"cks1cgr5t000wfw5ic2ha8qo8","modified":0,"renderable":0},{"_id":"source/_posts/Java诊断工具Arthas最佳实践/Arthas排查logger冲突问题案例/O1CN010Qbzcz1ctPSWSZI6L_!!6000000003658-2-tps-333-182.png","slug":"O1CN010Qbzcz1ctPSWSZI6L_!!6000000003658-2-tps-333-182.png","post":"cks1cgr5z0011fw5i7rmg0vnd","modified":0,"renderable":0},{"_id":"source/_posts/Java诊断工具Arthas最佳实践/Arthas排查logger冲突问题案例/O1CN01HzatXZ1RgccrlT90M_!!6000000002141-2-tps-529-244.png","slug":"O1CN01HzatXZ1RgccrlT90M_!!6000000002141-2-tps-529-244.png","post":"cks1cgr5z0011fw5i7rmg0vnd","modified":0,"renderable":0},{"_id":"source/_posts/Java诊断工具Arthas最佳实践/Arthas排查logger冲突问题案例/arthas.png","slug":"arthas.png","post":"cks1cgr5z0011fw5i7rmg0vnd","modified":0,"renderable":0},{"_id":"source/_posts/Java诊断工具Arthas最佳实践/Arthas排查HTTP请求返回404案例/O1CN010Qbzcz1ctPSWSZI6L_!!6000000003658-2-tps-333-182.png","slug":"O1CN010Qbzcz1ctPSWSZI6L_!!6000000003658-2-tps-333-182.png","post":"cks1cgr5z0010fw5i206bg5s6","modified":0,"renderable":0},{"_id":"source/_posts/Java诊断工具Arthas最佳实践/Arthas排查HTTP请求返回404案例/O1CN01HzatXZ1RgccrlT90M_!!6000000002141-2-tps-529-244.png","slug":"O1CN01HzatXZ1RgccrlT90M_!!6000000002141-2-tps-529-244.png","post":"cks1cgr5z0010fw5i206bg5s6","modified":0,"renderable":0},{"_id":"source/_posts/Java诊断工具Arthas最佳实践/Arthas排查HTTP请求返回404案例/arthas.png","slug":"arthas.png","post":"cks1cgr5z0010fw5i206bg5s6","modified":0,"renderable":0},{"_id":"source/_posts/Java诊断工具Arthas最佳实践/Arthas排查函数调用异常案例/O1CN010Qbzcz1ctPSWSZI6L_!!6000000003658-2-tps-333-182.png","slug":"O1CN010Qbzcz1ctPSWSZI6L_!!6000000003658-2-tps-333-182.png","post":"cks1cgr600013fw5i88wn5nxd","modified":0,"renderable":0},{"_id":"source/_posts/Java诊断工具Arthas最佳实践/Arthas排查函数调用异常案例/O1CN01HzatXZ1RgccrlT90M_!!6000000002141-2-tps-529-244.png","slug":"O1CN01HzatXZ1RgccrlT90M_!!6000000002141-2-tps-529-244.png","post":"cks1cgr600013fw5i88wn5nxd","modified":0,"renderable":0},{"_id":"source/_posts/Java诊断工具Arthas最佳实践/Arthas排查函数调用异常案例/arthas.png","slug":"arthas.png","post":"cks1cgr600013fw5i88wn5nxd","modified":0,"renderable":0},{"_id":"source/_posts/Java诊断工具Arthas最佳实践/Arthas查找TopN线程案例/O1CN01HzatXZ1RgccrlT90M_!!6000000002141-2-tps-529-244.png","slug":"O1CN01HzatXZ1RgccrlT90M_!!6000000002141-2-tps-529-244.png","post":"cks1cgr610015fw5i3mqr9hgq","modified":0,"renderable":0},{"_id":"source/_posts/Java诊断工具Arthas最佳实践/Arthas查找TopN线程案例/arthas.png","slug":"arthas.png","post":"cks1cgr610015fw5i3mqr9hgq","modified":0,"renderable":0},{"_id":"source/_posts/Java诊断工具Arthas最佳实践/Arthas热更新代码案例/O1CN010Qbzcz1ctPSWSZI6L_!!6000000003658-2-tps-333-182.png","slug":"O1CN010Qbzcz1ctPSWSZI6L_!!6000000003658-2-tps-333-182.png","post":"cks1cgr630018fw5i90f96ch6","modified":0,"renderable":0},{"_id":"source/_posts/Java诊断工具Arthas最佳实践/Arthas热更新代码案例/O1CN01HzatXZ1RgccrlT90M_!!6000000002141-2-tps-529-244.png","slug":"O1CN01HzatXZ1RgccrlT90M_!!6000000002141-2-tps-529-244.png","post":"cks1cgr630018fw5i90f96ch6","modified":0,"renderable":0},{"_id":"source/_posts/Java诊断工具Arthas最佳实践/Arthas热更新代码案例/arthas.png","slug":"arthas.png","post":"cks1cgr630018fw5i90f96ch6","modified":0,"renderable":0},{"_id":"source/_posts/Java诊断工具Arthas最佳实践/Arthas获取Spring上下文案例/O1CN010Qbzcz1ctPSWSZI6L_!!6000000003658-2-tps-333-182.png","slug":"O1CN010Qbzcz1ctPSWSZI6L_!!6000000003658-2-tps-333-182.png","post":"cks1cgr65001bfw5i50h26e5o","modified":0,"renderable":0},{"_id":"source/_posts/Java诊断工具Arthas最佳实践/Arthas获取Spring上下文案例/O1CN01HzatXZ1RgccrlT90M_!!6000000002141-2-tps-529-244.png","slug":"O1CN01HzatXZ1RgccrlT90M_!!6000000002141-2-tps-529-244.png","post":"cks1cgr65001bfw5i50h26e5o","modified":0,"renderable":0},{"_id":"source/_posts/Java诊断工具Arthas最佳实践/Arthas获取Spring上下文案例/arthas.png","slug":"arthas.png","post":"cks1cgr65001bfw5i50h26e5o","modified":0,"renderable":0},{"_id":"source/_posts/Java诊断工具Arthas最佳实践/学习Arthasarthas-boot支持的参数案例/arthas.png","slug":"arthas.png","post":"cks1cgr66001ffw5i6znyd4bw","modified":0,"renderable":0},{"_id":"source/_posts/Java诊断工具Arthas最佳实践/学习Arthasclassloader案例/O1CN010Qbzcz1ctPSWSZI6L_!!6000000003658-2-tps-333-182.png","slug":"O1CN010Qbzcz1ctPSWSZI6L_!!6000000003658-2-tps-333-182.png","post":"cks1cgr67001hfw5iht9t8y8o","modified":0,"renderable":0},{"_id":"source/_posts/Java诊断工具Arthas最佳实践/学习Arthasclassloader案例/O1CN01HzatXZ1RgccrlT90M_!!6000000002141-2-tps-529-244.png","slug":"O1CN01HzatXZ1RgccrlT90M_!!6000000002141-2-tps-529-244.png","post":"cks1cgr67001hfw5iht9t8y8o","modified":0,"renderable":0},{"_id":"source/_posts/Java诊断工具Arthas最佳实践/学习Arthasclassloader案例/arthas.png","slug":"arthas.png","post":"cks1cgr67001hfw5iht9t8y8o","modified":0,"renderable":0},{"_id":"source/_posts/Java诊断工具Arthas高级命令教程/Arthasdashboard命令/O1CN01HzatXZ1RgccrlT90M_!!6000000002141-2-tps-529-244.png","slug":"O1CN01HzatXZ1RgccrlT90M_!!6000000002141-2-tps-529-244.png","post":"cks1cgr6a001mfw5i5l7ec8ue","modified":0,"renderable":0},{"_id":"source/_posts/Java诊断工具Arthas高级命令教程/Arthasdashboard命令/arthas.png","slug":"arthas.png","post":"cks1cgr6a001mfw5i5l7ec8ue","modified":0,"renderable":0},{"_id":"source/_posts/Java诊断工具Arthas高级命令教程/Arthasdashboard命令/dashboard.png","slug":"dashboard.png","post":"cks1cgr6a001mfw5i5l7ec8ue","modified":0,"renderable":0},{"_id":"source/_posts/Java诊断工具Arthas高级命令教程/Arthasclassloader命令/O1CN01HzatXZ1RgccrlT90M_!!6000000002141-2-tps-529-244.png","slug":"O1CN01HzatXZ1RgccrlT90M_!!6000000002141-2-tps-529-244.png","post":"cks1cgr68001kfw5i0pd69qu3","modified":0,"renderable":0},{"_id":"source/_posts/Java诊断工具Arthas高级命令教程/Arthasclassloader命令/arthas.png","slug":"arthas.png","post":"cks1cgr68001kfw5i0pd69qu3","modified":0,"renderable":0},{"_id":"source/_posts/Java诊断工具Arthas高级命令教程/Arthasgetstatic命令/O1CN01HzatXZ1RgccrlT90M_!!6000000002141-2-tps-529-244.png","slug":"O1CN01HzatXZ1RgccrlT90M_!!6000000002141-2-tps-529-244.png","post":"cks1cgr6d001rfw5i0cszdhna","modified":0,"renderable":0},{"_id":"source/_posts/Java诊断工具Arthas高级命令教程/Arthasgetstatic命令/arthas.png","slug":"arthas.png","post":"cks1cgr6d001rfw5i0cszdhna","modified":0,"renderable":0},{"_id":"source/_posts/Java诊断工具Arthas高级命令教程/Arthasdump命令/O1CN01HzatXZ1RgccrlT90M_!!6000000002141-2-tps-529-244.png","slug":"O1CN01HzatXZ1RgccrlT90M_!!6000000002141-2-tps-529-244.png","post":"cks1cgr6b001pfw5i9x341if6","modified":0,"renderable":0},{"_id":"source/_posts/Java诊断工具Arthas高级命令教程/Arthasdump命令/arthas.png","slug":"arthas.png","post":"cks1cgr6b001pfw5i9x341if6","modified":0,"renderable":0},{"_id":"source/_posts/Java诊断工具Arthas高级命令教程/Arthasjad命令/O1CN01HzatXZ1RgccrlT90M_!!6000000002141-2-tps-529-244.png","slug":"O1CN01HzatXZ1RgccrlT90M_!!6000000002141-2-tps-529-244.png","post":"cks1cgr6g001wfw5iegmea9b6","modified":0,"renderable":0},{"_id":"source/_posts/Java诊断工具Arthas高级命令教程/Arthasjad命令/arthas.png","slug":"arthas.png","post":"cks1cgr6g001wfw5iegmea9b6","modified":0,"renderable":0},{"_id":"source/_posts/Java诊断工具Arthas高级命令教程/Arthasjvm命令/O1CN01HzatXZ1RgccrlT90M_!!6000000002141-2-tps-529-244.png","slug":"O1CN01HzatXZ1RgccrlT90M_!!6000000002141-2-tps-529-244.png","post":"cks1cgr6h001zfw5i2p7z0v8m","modified":0,"renderable":0},{"_id":"source/_posts/Java诊断工具Arthas高级命令教程/Arthasjvm命令/arthas.png","slug":"arthas.png","post":"cks1cgr6h001zfw5i2p7z0v8m","modified":0,"renderable":0},{"_id":"source/_posts/Java诊断工具Arthas高级命令教程/Arthaslogger命令/O1CN01HzatXZ1RgccrlT90M_!!6000000002141-2-tps-529-244.png","slug":"O1CN01HzatXZ1RgccrlT90M_!!6000000002141-2-tps-529-244.png","post":"cks1cgr6j0021fw5i705v7k2e","modified":0,"renderable":0},{"_id":"source/_posts/Java诊断工具Arthas高级命令教程/Arthaslogger命令/arthas.png","slug":"arthas.png","post":"cks1cgr6j0021fw5i705v7k2e","modified":0,"renderable":0},{"_id":"source/_posts/Java诊断工具Arthas高级命令教程/Arthasmbean命令/O1CN01HzatXZ1RgccrlT90M_!!6000000002141-2-tps-529-244.png","slug":"O1CN01HzatXZ1RgccrlT90M_!!6000000002141-2-tps-529-244.png","post":"cks1cgr6k0023fw5idwww7wcj","modified":0,"renderable":0},{"_id":"source/_posts/Java诊断工具Arthas高级命令教程/Arthasmbean命令/arthas.png","slug":"arthas.png","post":"cks1cgr6k0023fw5idwww7wcj","modified":0,"renderable":0},{"_id":"source/_posts/Java诊断工具Arthas高级命令教程/Arthasheapdump命令/O1CN01HzatXZ1RgccrlT90M_!!6000000002141-2-tps-529-244.png","slug":"O1CN01HzatXZ1RgccrlT90M_!!6000000002141-2-tps-529-244.png","post":"cks1cgr6e001ufw5i8ubk4ogb","modified":0,"renderable":0},{"_id":"source/_posts/Java诊断工具Arthas高级命令教程/Arthasheapdump命令/arthas.png","slug":"arthas.png","post":"cks1cgr6e001ufw5i8ubk4ogb","modified":0,"renderable":0},{"_id":"source/_posts/Java诊断工具Arthas高级命令教程/Arthasmc-redefine命令/O1CN010Qbzcz1ctPSWSZI6L_!!6000000003658-2-tps-333-182.png","slug":"O1CN010Qbzcz1ctPSWSZI6L_!!6000000003658-2-tps-333-182.png","post":"cks1cgr6l0025fw5i38sg28yw","modified":0,"renderable":0},{"_id":"source/_posts/Java诊断工具Arthas高级命令教程/Arthasmc-redefine命令/O1CN01HzatXZ1RgccrlT90M_!!6000000002141-2-tps-529-244.png","slug":"O1CN01HzatXZ1RgccrlT90M_!!6000000002141-2-tps-529-244.png","post":"cks1cgr6l0025fw5i38sg28yw","modified":0,"renderable":0},{"_id":"source/_posts/Java诊断工具Arthas高级命令教程/Arthasmc-redefine命令/arthas.png","slug":"arthas.png","post":"cks1cgr6l0025fw5i38sg28yw","modified":0,"renderable":0},{"_id":"source/_posts/Java诊断工具Arthas高级命令教程/Arthasmc-retransform命令/O1CN010Qbzcz1ctPSWSZI6L_!!6000000003658-2-tps-333-182.png","slug":"O1CN010Qbzcz1ctPSWSZI6L_!!6000000003658-2-tps-333-182.png","post":"cks1cgr6m0027fw5ie8ps3mzl","modified":0,"renderable":0},{"_id":"source/_posts/Java诊断工具Arthas高级命令教程/Arthasmc-retransform命令/O1CN01HzatXZ1RgccrlT90M_!!6000000002141-2-tps-529-244.png","slug":"O1CN01HzatXZ1RgccrlT90M_!!6000000002141-2-tps-529-244.png","post":"cks1cgr6m0027fw5ie8ps3mzl","modified":0,"renderable":0},{"_id":"source/_posts/Java诊断工具Arthas高级命令教程/Arthasmc-retransform命令/arthas.png","slug":"arthas.png","post":"cks1cgr6m0027fw5ie8ps3mzl","modified":0,"renderable":0},{"_id":"source/_posts/Java诊断工具Arthas高级命令教程/Arthasmonitor命令/O1CN01HzatXZ1RgccrlT90M_!!6000000002141-2-tps-529-244.png","slug":"O1CN01HzatXZ1RgccrlT90M_!!6000000002141-2-tps-529-244.png","post":"cks1cgr6n0029fw5ihjc7fjo0","modified":0,"renderable":0},{"_id":"source/_posts/Java诊断工具Arthas高级命令教程/Arthasmonitor命令/arthas.png","slug":"arthas.png","post":"cks1cgr6n0029fw5ihjc7fjo0","modified":0,"renderable":0},{"_id":"source/_posts/Java诊断工具Arthas高级命令教程/Arthasognl命令/O1CN010Qbzcz1ctPSWSZI6L_!!6000000003658-2-tps-333-182.png","slug":"O1CN010Qbzcz1ctPSWSZI6L_!!6000000003658-2-tps-333-182.png","post":"cks1cgr6o002bfw5iek4ahvub","modified":0,"renderable":0},{"_id":"source/_posts/Java诊断工具Arthas高级命令教程/Arthasognl命令/O1CN01HzatXZ1RgccrlT90M_!!6000000002141-2-tps-529-244.png","slug":"O1CN01HzatXZ1RgccrlT90M_!!6000000002141-2-tps-529-244.png","post":"cks1cgr6o002bfw5iek4ahvub","modified":0,"renderable":0},{"_id":"source/_posts/Java诊断工具Arthas高级命令教程/Arthasognl命令/arthas.png","slug":"arthas.png","post":"cks1cgr6o002bfw5iek4ahvub","modified":0,"renderable":0},{"_id":"source/_posts/Java诊断工具Arthas高级命令教程/Arthasperfcounter命令/O1CN01HzatXZ1RgccrlT90M_!!6000000002141-2-tps-529-244.png","slug":"O1CN01HzatXZ1RgccrlT90M_!!6000000002141-2-tps-529-244.png","post":"cks1cgr6q002dfw5iefxifzwy","modified":0,"renderable":0},{"_id":"source/_posts/Java诊断工具Arthas高级命令教程/Arthasperfcounter命令/arthas.png","slug":"arthas.png","post":"cks1cgr6q002dfw5iefxifzwy","modified":0,"renderable":0},{"_id":"source/_posts/Java诊断工具Arthas高级命令教程/Arthasprofiler命令/O1CN01HzatXZ1RgccrlT90M_!!6000000002141-2-tps-529-244.png","slug":"O1CN01HzatXZ1RgccrlT90M_!!6000000002141-2-tps-529-244.png","post":"cks1cgr6r002ffw5idnbngf27","modified":0,"renderable":0},{"_id":"source/_posts/Java诊断工具Arthas高级命令教程/Arthasprofiler命令/arthas-output-svg.png","slug":"arthas-output-svg.png","post":"cks1cgr6r002ffw5idnbngf27","modified":0,"renderable":0},{"_id":"source/_posts/Java诊断工具Arthas高级命令教程/Arthasprofiler命令/arthas-output.png","slug":"arthas-output.png","post":"cks1cgr6r002ffw5idnbngf27","modified":0,"renderable":0},{"_id":"source/_posts/Java诊断工具Arthas高级命令教程/Arthasprofiler命令/arthas.png","slug":"arthas.png","post":"cks1cgr6r002ffw5idnbngf27","modified":0,"renderable":0},{"_id":"source/_posts/Java诊断工具Arthas高级命令教程/Arthassc命令/O1CN01HzatXZ1RgccrlT90M_!!6000000002141-2-tps-529-244.png","slug":"O1CN01HzatXZ1RgccrlT90M_!!6000000002141-2-tps-529-244.png","post":"cks1cgr6t002hfw5ibxtf2oib","modified":0,"renderable":0},{"_id":"source/_posts/Java诊断工具Arthas高级命令教程/Arthassc命令/arthas.png","slug":"arthas.png","post":"cks1cgr6t002hfw5ibxtf2oib","modified":0,"renderable":0},{"_id":"source/_posts/Java诊断工具Arthas高级命令教程/Arthassm命令/O1CN01HzatXZ1RgccrlT90M_!!6000000002141-2-tps-529-244.png","slug":"O1CN01HzatXZ1RgccrlT90M_!!6000000002141-2-tps-529-244.png","post":"cks1cgr6u002jfw5idn5pb89n","modified":0,"renderable":0},{"_id":"source/_posts/Java诊断工具Arthas高级命令教程/Arthassm命令/arthas.png","slug":"arthas.png","post":"cks1cgr6u002jfw5idn5pb89n","modified":0,"renderable":0},{"_id":"source/_posts/Java诊断工具Arthas高级命令教程/Arthasstack命令/O1CN01HzatXZ1RgccrlT90M_!!6000000002141-2-tps-529-244.png","slug":"O1CN01HzatXZ1RgccrlT90M_!!6000000002141-2-tps-529-244.png","post":"cks1cgr6w002lfw5ic1eh2c4l","modified":0,"renderable":0},{"_id":"source/_posts/Java诊断工具Arthas高级命令教程/Arthasstack命令/arthas.png","slug":"arthas.png","post":"cks1cgr6w002lfw5ic1eh2c4l","modified":0,"renderable":0},{"_id":"source/_posts/Java诊断工具Arthas高级命令教程/Arthassysenv命令/O1CN01HzatXZ1RgccrlT90M_!!6000000002141-2-tps-529-244.png","slug":"O1CN01HzatXZ1RgccrlT90M_!!6000000002141-2-tps-529-244.png","post":"cks1cgr6x002mfw5idknwd2yz","modified":0,"renderable":0},{"_id":"source/_posts/Java诊断工具Arthas高级命令教程/Arthassysenv命令/arthas.png","slug":"arthas.png","post":"cks1cgr6x002mfw5idknwd2yz","modified":0,"renderable":0},{"_id":"source/_posts/Java诊断工具Arthas高级命令教程/Arthassysprop命令/O1CN01HzatXZ1RgccrlT90M_!!6000000002141-2-tps-529-244.png","slug":"O1CN01HzatXZ1RgccrlT90M_!!6000000002141-2-tps-529-244.png","post":"cks1cgr6z002pfw5i3jhugug0","modified":0,"renderable":0},{"_id":"source/_posts/Java诊断工具Arthas高级命令教程/Arthassysprop命令/arthas.png","slug":"arthas.png","post":"cks1cgr6z002pfw5i3jhugug0","modified":0,"renderable":0},{"_id":"source/_posts/Java诊断工具Arthas高级命令教程/Arthasthread命令/O1CN01HzatXZ1RgccrlT90M_!!6000000002141-2-tps-529-244.png","slug":"O1CN01HzatXZ1RgccrlT90M_!!6000000002141-2-tps-529-244.png","post":"cks1cgr72002rfw5i1mpj85ja","modified":0,"renderable":0},{"_id":"source/_posts/Java诊断工具Arthas高级命令教程/Arthasthread命令/arthas.png","slug":"arthas.png","post":"cks1cgr72002rfw5i1mpj85ja","modified":0,"renderable":0},{"_id":"source/_posts/Java诊断工具Arthas高级命令教程/Arthastrace命令/O1CN01HzatXZ1RgccrlT90M_!!6000000002141-2-tps-529-244.png","slug":"O1CN01HzatXZ1RgccrlT90M_!!6000000002141-2-tps-529-244.png","post":"cks1cgr73002ufw5ib9kz5mpb","modified":0,"renderable":0},{"_id":"source/_posts/Java诊断工具Arthas高级命令教程/Arthastrace命令/arthas.png","slug":"arthas.png","post":"cks1cgr73002ufw5ib9kz5mpb","modified":0,"renderable":0},{"_id":"source/_posts/Java诊断工具Arthas高级命令教程/Arthasvmoption命令/O1CN01HzatXZ1RgccrlT90M_!!6000000002141-2-tps-529-244.png","slug":"O1CN01HzatXZ1RgccrlT90M_!!6000000002141-2-tps-529-244.png","post":"cks1cgr75002zfw5ie93p9snu","modified":0,"renderable":0},{"_id":"source/_posts/Java诊断工具Arthas高级命令教程/Arthasvmoption命令/arthas.png","slug":"arthas.png","post":"cks1cgr75002zfw5ie93p9snu","modified":0,"renderable":0},{"_id":"source/_posts/Java诊断工具Arthas高级命令教程/Arthastt命令/O1CN01HzatXZ1RgccrlT90M_!!6000000002141-2-tps-529-244.png","slug":"O1CN01HzatXZ1RgccrlT90M_!!6000000002141-2-tps-529-244.png","post":"cks1cgr74002wfw5ibdgp2jl4","modified":0,"renderable":0},{"_id":"source/_posts/Java诊断工具Arthas高级命令教程/Arthastt命令/arthas.png","slug":"arthas.png","post":"cks1cgr74002wfw5ibdgp2jl4","modified":0,"renderable":0},{"_id":"source/_posts/Java诊断工具Arthas高级命令教程/Arthaswatch命令/O1CN01HzatXZ1RgccrlT90M_!!6000000002141-2-tps-529-244.png","slug":"O1CN01HzatXZ1RgccrlT90M_!!6000000002141-2-tps-529-244.png","post":"cks1cgr7l003wfw5i91l128fi","modified":0,"renderable":0},{"_id":"source/_posts/Java诊断工具Arthas高级命令教程/Arthaswatch命令/arthas.png","slug":"arthas.png","post":"cks1cgr7l003wfw5i91l128fi","modified":0,"renderable":0},{"_id":"source/_posts/Java诊断工具Arthas入门教程/Arthas-进阶/O1CN01HzatXZ1RgccrlT90M_!!6000000002141-2-tps-529-244.png","slug":"O1CN01HzatXZ1RgccrlT90M_!!6000000002141-2-tps-529-244.png","post":"cks1cgr7m003xfw5i35kh99ks","modified":0,"renderable":0},{"_id":"source/_posts/Java诊断工具Arthas入门教程/Arthas-进阶/O1CN01i041kW1lw0FCaSKNn_!!6000000004882-2-tps-1231-284.png","slug":"O1CN01i041kW1lw0FCaSKNn_!!6000000004882-2-tps-1231-284.png","post":"cks1cgr7m003xfw5i35kh99ks","modified":0,"renderable":0},{"_id":"source/_posts/Java诊断工具Arthas入门教程/Arthas-进阶/arthas.png","slug":"arthas.png","post":"cks1cgr7m003xfw5i35kh99ks","modified":0,"renderable":0}],"PostCategory":[{"post_id":"cks1cgr4w0000fw5i8tfv8s1f","category_id":"cks1cgr540002fw5igqncd5tm","_id":"cks1cgr5e000bfw5ihj2s2erq"},{"post_id":"cks1cgr510001fw5i79kr9e8q","category_id":"cks1cgr5b0007fw5if1me4wvi","_id":"cks1cgr5l000jfw5i14rj6j40"},{"post_id":"cks1cgr5d000afw5ichxj3qms","category_id":"cks1cgr5b0007fw5if1me4wvi","_id":"cks1cgr5n000mfw5if3g854rn"},{"post_id":"cks1cgr570004fw5ibzybg04g","category_id":"cks1cgr5b0007fw5if1me4wvi","_id":"cks1cgr5o000ofw5i8mvehvy8"},{"post_id":"cks1cgr5b0006fw5i8ecm89p5","category_id":"cks1cgr5k000ifw5i5j46fslk","_id":"cks1cgr5r000ufw5iemxyfeg3"},{"post_id":"cks1cgr5c0009fw5ihp29dzzj","category_id":"cks1cgr5o000pfw5i8k6t8lax","_id":"cks1cgr640019fw5i38x5ddft"},{"post_id":"cks1cgr5c0009fw5ihp29dzzj","category_id":"cks1cgr5y000zfw5iapji74mi","_id":"cks1cgr65001cfw5i4i6t5f5z"}],"PostTag":[{"post_id":"cks1cgr4w0000fw5i8tfv8s1f","tag_id":"cks1cgr560003fw5i85hmeq44","_id":"cks1cgr5i000ffw5igk0mg5mb"},{"post_id":"cks1cgr4w0000fw5i8tfv8s1f","tag_id":"cks1cgr5c0008fw5iczuk2ilw","_id":"cks1cgr5k000hfw5i05weeadb"},{"post_id":"cks1cgr5b0006fw5i8ecm89p5","tag_id":"cks1cgr560003fw5i85hmeq44","_id":"cks1cgr5q000sfw5icjaf1s3p"},{"post_id":"cks1cgr5b0006fw5i8ecm89p5","tag_id":"cks1cgr5f000dfw5i243adkgx","_id":"cks1cgr5r000vfw5igs7s9dng"},{"post_id":"cks1cgr5b0006fw5i8ecm89p5","tag_id":"cks1cgr5l000kfw5ifjlnbap0","_id":"cks1cgr5y000yfw5ifsuwfroa"},{"post_id":"cks1cgr5c0009fw5ihp29dzzj","tag_id":"cks1cgr560003fw5i85hmeq44","_id":"cks1cgr610014fw5ihhu5futz"},{"post_id":"cks1cgr5c0009fw5ihp29dzzj","tag_id":"cks1cgr5p000qfw5i99eeesdh","_id":"cks1cgr620016fw5ieyke0kww"},{"post_id":"cks1cgr5c0009fw5ihp29dzzj","tag_id":"cks1cgr5y000xfw5i7loz6mrb","_id":"cks1cgr64001afw5i73h93ept"},{"post_id":"cks1cgr5h000efw5ig80oaz9r","tag_id":"cks1cgr600012fw5i258g9j8x","_id":"cks1cgr65001dfw5i8gtmgc0s"},{"post_id":"cks1cgr630018fw5i90f96ch6","tag_id":"cks1cgr620017fw5i9aek8a5e","_id":"cks1cgr66001gfw5ihen94st1"},{"post_id":"cks1cgr5j000gfw5i635951eq","tag_id":"cks1cgr620017fw5i9aek8a5e","_id":"cks1cgr68001ifw5i3ehu6a7t"},{"post_id":"cks1cgr65001bfw5i50h26e5o","tag_id":"cks1cgr620017fw5i9aek8a5e","_id":"cks1cgr69001lfw5ic6avbmrz"},{"post_id":"cks1cgr66001ffw5i6znyd4bw","tag_id":"cks1cgr620017fw5i9aek8a5e","_id":"cks1cgr6a001nfw5ig6tuhjyt"},{"post_id":"cks1cgr5m000lfw5i9tidc0fv","tag_id":"cks1cgr620017fw5i9aek8a5e","_id":"cks1cgr6c001qfw5i3i1jcl9k"},{"post_id":"cks1cgr67001hfw5iht9t8y8o","tag_id":"cks1cgr620017fw5i9aek8a5e","_id":"cks1cgr6e001sfw5ic48xd6nc"},{"post_id":"cks1cgr5n000nfw5ib6zp7d3g","tag_id":"cks1cgr620017fw5i9aek8a5e","_id":"cks1cgr6f001vfw5idl2wf7rc"},{"post_id":"cks1cgr5p000rfw5i9w1bgu08","tag_id":"cks1cgr620017fw5i9aek8a5e","_id":"cks1cgr6h001xfw5i893devwk"},{"post_id":"cks1cgr5q000tfw5ifl4n87h9","tag_id":"cks1cgr620017fw5i9aek8a5e","_id":"cks1cgr6j0020fw5i4ichc45x"},{"post_id":"cks1cgr5t000wfw5ic2ha8qo8","tag_id":"cks1cgr620017fw5i9aek8a5e","_id":"cks1cgr6l0024fw5iffgvdwtz"},{"post_id":"cks1cgr5z0010fw5i206bg5s6","tag_id":"cks1cgr620017fw5i9aek8a5e","_id":"cks1cgr6n0028fw5i03qufwq5"},{"post_id":"cks1cgr5z0011fw5i7rmg0vnd","tag_id":"cks1cgr620017fw5i9aek8a5e","_id":"cks1cgr6q002cfw5i88vdez83"},{"post_id":"cks1cgr600013fw5i88wn5nxd","tag_id":"cks1cgr620017fw5i9aek8a5e","_id":"cks1cgr6t002gfw5if18qh016"},{"post_id":"cks1cgr610015fw5i3mqr9hgq","tag_id":"cks1cgr620017fw5i9aek8a5e","_id":"cks1cgr6v002kfw5igkm18bqv"},{"post_id":"cks1cgr6w002lfw5ic1eh2c4l","tag_id":"cks1cgr6u002ifw5ickqygzyw","_id":"cks1cgr6z002ofw5ia69tgjrq"},{"post_id":"cks1cgr68001kfw5i0pd69qu3","tag_id":"cks1cgr6u002ifw5ickqygzyw","_id":"cks1cgr71002qfw5i7mf03rpz"},{"post_id":"cks1cgr6x002mfw5idknwd2yz","tag_id":"cks1cgr6u002ifw5ickqygzyw","_id":"cks1cgr72002tfw5i74g53j5x"},{"post_id":"cks1cgr6z002pfw5i3jhugug0","tag_id":"cks1cgr6u002ifw5ickqygzyw","_id":"cks1cgr74002vfw5ietekb6gt"},{"post_id":"cks1cgr6a001mfw5i5l7ec8ue","tag_id":"cks1cgr6u002ifw5ickqygzyw","_id":"cks1cgr75002yfw5i3qxigaib"},{"post_id":"cks1cgr72002rfw5i1mpj85ja","tag_id":"cks1cgr6u002ifw5ickqygzyw","_id":"cks1cgr750030fw5ifhci0mjw"},{"post_id":"cks1cgr73002ufw5ib9kz5mpb","tag_id":"cks1cgr6u002ifw5ickqygzyw","_id":"cks1cgr760032fw5i75gwgsqb"},{"post_id":"cks1cgr6b001pfw5i9x341if6","tag_id":"cks1cgr6u002ifw5ickqygzyw","_id":"cks1cgr760033fw5ifrn80dei"},{"post_id":"cks1cgr74002wfw5ibdgp2jl4","tag_id":"cks1cgr6u002ifw5ickqygzyw","_id":"cks1cgr770035fw5i4tgw0ca6"},{"post_id":"cks1cgr75002zfw5ie93p9snu","tag_id":"cks1cgr6u002ifw5ickqygzyw","_id":"cks1cgr770036fw5idnnkd6to"},{"post_id":"cks1cgr6d001rfw5i0cszdhna","tag_id":"cks1cgr6u002ifw5ickqygzyw","_id":"cks1cgr770038fw5iflgs7gbf"},{"post_id":"cks1cgr6e001ufw5i8ubk4ogb","tag_id":"cks1cgr6u002ifw5ickqygzyw","_id":"cks1cgr770039fw5i2cvmhzax"},{"post_id":"cks1cgr6g001wfw5iegmea9b6","tag_id":"cks1cgr6u002ifw5ickqygzyw","_id":"cks1cgr78003bfw5i587x1uks"},{"post_id":"cks1cgr6h001zfw5i2p7z0v8m","tag_id":"cks1cgr6u002ifw5ickqygzyw","_id":"cks1cgr78003cfw5ihax9gwv3"},{"post_id":"cks1cgr6j0021fw5i705v7k2e","tag_id":"cks1cgr6u002ifw5ickqygzyw","_id":"cks1cgr79003efw5i3mg9515n"},{"post_id":"cks1cgr6k0023fw5idwww7wcj","tag_id":"cks1cgr6u002ifw5ickqygzyw","_id":"cks1cgr7a003gfw5ieyyzbddt"},{"post_id":"cks1cgr6l0025fw5i38sg28yw","tag_id":"cks1cgr6u002ifw5ickqygzyw","_id":"cks1cgr7b003ifw5i0i680s27"},{"post_id":"cks1cgr6m0027fw5ie8ps3mzl","tag_id":"cks1cgr6u002ifw5ickqygzyw","_id":"cks1cgr7c003kfw5i2nwjdl5f"},{"post_id":"cks1cgr6n0029fw5ihjc7fjo0","tag_id":"cks1cgr6u002ifw5ickqygzyw","_id":"cks1cgr7d003mfw5ifi672dga"},{"post_id":"cks1cgr6o002bfw5iek4ahvub","tag_id":"cks1cgr6u002ifw5ickqygzyw","_id":"cks1cgr7e003ofw5igaou4bkz"},{"post_id":"cks1cgr6q002dfw5iefxifzwy","tag_id":"cks1cgr6u002ifw5ickqygzyw","_id":"cks1cgr7e003qfw5i712m3ink"},{"post_id":"cks1cgr6r002ffw5idnbngf27","tag_id":"cks1cgr6u002ifw5ickqygzyw","_id":"cks1cgr7f003sfw5icgw31ksk"},{"post_id":"cks1cgr6t002hfw5ibxtf2oib","tag_id":"cks1cgr6u002ifw5ickqygzyw","_id":"cks1cgr7g003ufw5if8uh6y2y"},{"post_id":"cks1cgr6u002jfw5idn5pb89n","tag_id":"cks1cgr6u002ifw5ickqygzyw","_id":"cks1cgr7g003vfw5if16df6kf"},{"post_id":"cks1cgr7l003wfw5i91l128fi","tag_id":"cks1cgr6u002ifw5ickqygzyw","_id":"cks1cgr7n003yfw5i13cea8sm"},{"post_id":"cks1cgr7m003xfw5i35kh99ks","tag_id":"cks1cgr600012fw5i258g9j8x","_id":"cks1cgr7n003zfw5ifi0eea3u"}],"Tag":[{"name":"技术笔记","_id":"cks1cgr560003fw5i85hmeq44"},{"name":"java","_id":"cks1cgr5c0008fw5iczuk2ilw"},{"name":"shell","_id":"cks1cgr5f000dfw5i243adkgx"},{"name":"linux","_id":"cks1cgr5l000kfw5ifjlnbap0"},{"name":"hexo","_id":"cks1cgr5p000qfw5i99eeesdh"},{"name":"随笔","_id":"cks1cgr5y000xfw5i7loz6mrb"},{"name":"Java 诊断工具 Arthas 入门教程","_id":"cks1cgr600012fw5i258g9j8x"},{"name":"Java 诊断工具 Arthas 最佳实践","_id":"cks1cgr620017fw5i9aek8a5e"},{"name":"Java 诊断工具 Arthas 高级命令教程","_id":"cks1cgr6u002ifw5ickqygzyw"}]}}